thread,timestamp,speaker,message
1,1497996718.60689,Zola,"just wondering if anyone here uses clojurewerkz/neocons on a semi regular basis?; in case someone picks this up later, i find myself writing a lot of cypher queries and executing them via tquery, but i'm constantly mapping through results to pluck the :data values and ignore all the other stuff i don't care about (incoming relationships, meta properties, etc.). i'm now resorting to spectre to stay sane. is there a better way?"
2,1497998699.044441,Berry,"in a *.cljc file, I should be able to just do:

(:require [clojure.core.match :refer [match]])

and it all works right?

or do I have to #?(:cljs ... :clj) separate lines ?"
2,1497998754.056203,Lavinia,you probably need to escape the vector (`'[clojure.core.match :refer [match]]`); not sure beyond that
2,1497998775.060443,Berry,"but it's insided the ns part; ```
(ns ...
  (:require ... ))
```

why do i need quotes inside a ns ?"
2,1497998820.069541,Lavinia,"right, you don't. Sorry about that"
2,1497998832.072084,Berry,"effort is apprecaited; this latest ""some stuff is magical clj/cljs is confusing me"""
2,1497998979.101734,Giovanna,"<@Berry> I think this should work.
```
(ns foo.bar
  (:require
   [clojure.core.match :refer [match] #?@(:cljs [:include-macros true])]))
```; <https://github.com/clojure/clojurescript/wiki/Differences-from-Clojure#namespaces>; You may get away with not including the include-macros thingy, and just :requiring normally, but it depends on how the namespace you're requiring is written.; <http://blog.fikesfarm.com/posts/2016-03-01-clojurescript-macro-sugar.html#implicit_sugar>"
3,1498000754.451774,Wenona,"hrm, there really is no way to override hashCode for a defrecord, huh?; I’ve got an issue with that, I have a defrecord that contains a derived map from potemkin, but which one of the “keys” of the derived map is null; which causes hashCode to throw a NullPointerException"
3,1498011783.069289,Sonny,"a null in a map shouldn't cause an NPE; so I'd say that's a bug in potemkin, but would need to see more to know for sure"
3,1498014903.455866,Willow,"<@Wenona> what defrecord stuff are you using? i'll look at it; ```
(hashCode [this]
    (reduce
      (fn [acc [k v]]
        (unchecked-add acc (bit-xor (.hashCode k) (.hashCode v))))
      0
      (seq this)))
```; that looks like it; compared to <https://github.com/clojure/clojure/blob/master/src/jvm/clojure/lang/APersistentMap.java#L104>"
3,1498018316.850025,Wenona,"it does seem like it is a bug in potemkin, I wrote up <https://github.com/ztellman/potemkin/issues/52>; my use case would have been better served using identityHashCode, too, so I just wrapped the object in another holder object"
4,1498019613.999271,Adrian,"I'm really struggling how best to test with Clojure, specifically when I start having to mock interactions with a database etc. Looks like mock frameworks aren't super popular in clojure and I'm assuming there's a good reason that I'm missing; Any tips?; looks like maybe `with-redefs*` might be what I'm looking for"
4,1498019908.033143,Wenona,"I, for one, prefer testing against a “real” database if possible; we test our app against a in-memory datomic DB, and against a H2 database (we use datomic and a SQL database)"
4,1498020417.089699,Sonny,<@Adrian> beware <http://blog.cognitect.com/blog/2016/9/15/works-on-my-machine-understanding-var-bindings-and-roots>
5,1498020791.130659,Willow,<@Wenona> what do you mean on that pull request?; you're making sure we don't hash false? but isn't that fine?
5,1498021047.159961,Wenona,making sure you *are* hashing false?
5,1498021053.160568,Willow,good point; is there a reason to use `(if some? v)` vs `(if (instance? Object k)`?
5,1498021144.171042,Wenona,"`some?` might perform better than `instance?`, I guess"
5,1498021147.171335,Willow,i wouldn't have thought to use some? like that on a single value. that's clever; no idea; `instance? (fn instance? [^Class c x] (. c (isInstance x))))`; yeah looks like it; good thought; didn't know some? was just a nil check; thanks :+1:
5,1498021273.187455,Wenona,"good find, too, I didn’t bother digging through potemkin"
5,1498021293.189934,Willow,i've read the source a little while ago so kinda knew where to root around.
6,1498025077.642482,Berry,"<@Torie>:
```

(def ocall #?(:cljs oops.core/ocall
              :clj (not-implemented ""ocall"")))

(def oget #?(:cljs oops.core/oget
             :clj (not-implemented ""oget"")))

(def oset! #?(:cljs oops.core/oset!
              :clj (not-implemented ""oset!"")))

(def gcall #?(:cljs oops.core/gcall
              :clj (not-implemented ""gcall"")))

```
doesn't work since ocall oset oget are macros

I'm trying to push the #_ (:cljs :clj) into lower level libraries. Is this possible?"
7,1498031424.804508,See,is there a way to list the functions that are currently ‘under instrumentation’ (clojure.spec)?; of a running program that is
6,1498033887.427791,Torie,<@Berry> wrap macros with macros… because turtles; in a macro you can detect if you are in cljs or clj via &amp;env: <https://github.com/binaryage/env-config/blob/1d9a2409dad78324ed7ab2984d2b40b081173936/src/lib/env_config/impl/macros.clj#L3-L4>
6,1498037623.44297,Berry,<@Torie>: is there no way to write these as *functions* if we pass all args as strings ?
6,1498037820.495743,Torie,"<@Berry> macros are expanded at compile time, functions are called at runtime, once you are in runtime, you cannot “go back” and do compile-time stuff (except for using eval, which is a different story)"
6,1498037830.498259,Berry,"no, I meant implemenatikn of oget; why does it have to be a macro instead of a function ?"
6,1498037838.500429,Torie,"the question is, why do you need those to be functions?"
6,1498037850.503571,Berry,then I wrap a base layer in cljc; and get rid of the #?(:cljs ...) everywhere
6,1498037971.535793,Torie,"cljs-oops (e.g. oget) is writing code for you you would otherwise write by hand, that is why is implemented as macros; if it was a function, it would at runtime dynamically perform some code, but not rewrite your existing code; again, why you cannot wrap oops macros with your own macros? where do you see a problem in that approach?; and btw. we are off-topic here, we should be discussing this in <#C03S1L9DN|clojurescript> instead, have to go anyways"
8,1498051427.979983,Kenia,"just in case a developer of clojars is around. The GSoC link in the github README is broken :disappointed:
<https://github.com/clojars/clojure-gsoc-2017>"
9,1498051969.186682,Ted,"how do people feel about the idea of EDN files that have an `(aliases)` header at the top to enable shorter keywords in the rest of the document:
```
(aliases [[monitor.reporter :as r]])
{:r/foo 1
 :r/bar 2}
```; not proposing for this to be part of Clojure, just asking what you think of it as a practice"
8,1498052122.245969,Candi,<@Kenia> can you file an issue or PR on that repo?
8,1498052181.268961,Kenia,I guess so. I just thought it would be faster if any of them was here :smile:
8,1498052210.280327,Candi,"I'm here, just focused on other things ATM :)"
8,1498052280.307036,Kenia,"ah ok, well … done; the fix is quite simple so no op :wink:"
8,1498052376.344392,Candi,<@Kenia> thanks!
8,1498052936.566723,Kenia,<@Candi> I just created another pr for some other small markdown problems that I found. Hope it helps
8,1498053109.638016,Candi,"thanks! I'll let <@Lavona> review those changes, he's the primary on the GSoC stuff"
10,1498056623.175742,Tobie,"I am constructing a nested datastructure, similar to a binary tree, recursively using
```
(defn make-tree [{in :in out :out left :left right :right :as tree} indices]
  (cond
    (empty? indices) tree
    :else (assoc
           tree
           :left (make-tree {:in (conj in (first indices)) :out out} (rest indices))
           :right (make-tree {:in in :out (conj out (first indices))} (rest indices)))))
```; however the recursion will run quite deep and cause stack overflow. Is there a lazy way I can define this tree? I will not actually visit all of the tree; In short it sets up a deeply nested map, but I want to do this in a lazy way so that the values mapped to by keys are not evaluated until accessed"
10,1498058238.93035,Debbi,You can do tail recursion for the stack overflow but that won’t help with the lazy part.
10,1498059093.315059,Noella,"michaellindon: There’s <https://github.com/Malabarba/lazy-map-clojure>; I haven’t tried it myself but it seems to do what you want; otherwise, you’ll have to implement something like that yourself with `delay` and `force`"
10,1498059341.427512,Tobie,"Hi <@Noella>; I have come up with this, i think it is inelegant; ```
(defn make-lazy-tree [{in :in out :out left :left right :right :as tree} indices]
  (cond
    (empty? indices) tree
    :else (assoc
           tree
           :left (fn [] (make-lazy-tree {:in (conj in (first indices)) :out out} (rest indices)))
           :right (fn [] (make-lazy-tree {:in in :out (conj out (first indices))} (rest indices))))))
```; so instead of returning the next subtree it returns a function to the next subtree, which can be called like this; ```
(defn my-left [t] ((:left t)))
(defn my-right [t] ((:right t)))

(-&gt; foo
    my-right
    my-right
    my-left)

```; giving:
```
=&gt; {:in #{2},
       :out #{0 1},
       :left #function[bab.core/make-lazy-tree/fn--20560],
       :right #function[bab.core/make-lazy-tree/fn--20562]}
```; I guess delay is kind of doing the same thing?; just tried it, delay works nicely too"
11,1498061424.345939,Margaret,you can’t tail call that code though
10,1498061435.350477,Margaret,not without a radical design shift to move stack data into the heap
10,1498062048.597582,Tobie,"agreed. As per <@Noella> s suggestion i wrapped the calls with delay; ```
(defn make-delay-tree [{in :in out :out left :left right :right :as tree} indices]
  (cond
    (empty? indices) tree
    :else (assoc
           tree
           :left (delay (make-delay-tree {:in (conj in (first indices)) :out out} (rest indices)))
           :right (delay (make-delay-tree {:in in :out (conj out (first indices))} (rest indices))))))
```; writing 
```
(defn my-left [t] @(:left t))
(defn my-right [t] @(:right t))
```; I can traverse the tree to the leaf nodes that I want, without creating the others; I like this, but I'm wondering if anyone else can see any pitfalls"
10,1498062112.623279,Margaret,"delay is under-utilized imho; a fun fact - force is an alternative for deref on delays, and is identity on non-delay values"
10,1498062181.650441,Loretta,"will still blow the stack, no?"
10,1498062196.656382,Margaret,only if you eagerly call it recursively; but it is easy to make a non-stack-consuming recursion that goes into deeper delays as far as you like
10,1498062232.670728,Loretta,like with a continuation
10,1498062245.675736,Margaret,"right, a delay is a zero arg continuation, effectively; thunk? maybe that’s the word"
10,1498062264.683318,Loretta,yep
10,1498062292.694631,Margaret,"anyway, that overloaded behavior of force makes it convenient to write code that may or may not hit a delayed value"
10,1498062305.699792,Tobie,you've lost me now :slightly_smiling_face:
10,1498062329.709666,Margaret,thunks / continuations are how lazy seqs are implemented; and delays do the same thing; it’s a function that stands in for a value we might access later
10,1498062359.721273,Loretta,<@Tobie> <https://en.wikipedia.org/wiki/Continuation-passing_style>
10,1498062422.746148,Margaret,"<@Loretta> that article mentions a continuation being a one arg function, which is why I was particular about argument count - these being zero arg; <https://en.wikipedia.org/wiki/Thunk> whereas thunks are zero arg"
10,1498062496.775439,Tobie,"so actually my first attempt was to change
```
:left (make-lazy-tree {:in (conj in (first indices)) :out out} (rest indices))
```
to
```
:left (fn [] (make-lazy-tree {:in (conj in (first indices)) :out out} (rest indices)))
```
and then I could traverse the tree by calling the function returned by :left. Is this what is meant by continuation?"
10,1498062522.785443,Margaret,that’s what’s meant by thunk
10,1498062550.796121,Tobie,"ah ok, cool, im happy to be learning this"
10,1498062584.809832,Loretta,"yeah, it's cool stuff, and more common in the FP world"
10,1498062647.835899,Tobie,thanks for your help
10,1498062820.904638,Loretta,<@Margaret> what would be the pros/cons of `delay` vs a `fn` in this case?
10,1498062875.92558,Margaret,"a delay is a way of making a function that gets called only once when forced, whereas a function could get called more than once and would not cache the prior result (unless you memoized…); delays are a more specific feature for this purpose so they eliminate some gotchas and boilerplate that come up in usage; <@Loretta> it has a function inside <https://github.com/noisesmith/clojure/blob/master/src/jvm/clojure/lang/Delay.java>; apologies for linking to my fork but that file is unmodified; another usage of delay I’m fond of is replacing nested lets inside conditionals with a let containing delays with conditionals that force certain delays as apropriate in a cond block; additionally, the delays can force another let bound delay inside their body, which simplifies tricky side effect tracking"
12,1498063444.143612,Kareen,noisesmith: ew :P
10,1498063476.155722,Kareen,that sounds very.. imperative
10,1498063500.164329,Margaret,"it’s something I only need for very imperative tasks; where I’m maybe getting a resource, maybe retrying, maybe cleaning up and bailing, etc. and it doesn’t fit a with-open or try/catch/finally well; eg. trying to use zookeeper in clojure where every operation potentially requires me to re-try or fail; (not coincidentally I am moving away from using zookeeper so I can avoid having to write code like this)"
13,1498065318.878538,Ramiro,"Hey guys, building the first production clj/cljs app for my company. I'm looking for a best practice tip for using Stuart Sierra's component with a (postgres) database connection.

```
(ns my-app.components.db
  (:require [com.stuartsierra.component :as c]
            [clojure.java.jdbc :as jdbc]))

(defrecord Db [spec connection]
  c/Lifecycle
  (start [this]
    (let [conn (or connection (jdbc/get-connection spec))]
      (assoc this :connection conn)))
  (stop [this]
    (if connection (.close connection))
    (assoc this :connection nil)))
```

It happened once in development that after a postgres io error, the connection would close and would render the app db-less. How do you guys handle this / what's a typical db component past the simple examples found online?"
13,1498065360.894633,Rebeca,use a connection pool library instead using the database connection directly; c3p0 is a popular choice
13,1498065382.903259,Ramiro,was thinking about that. Thanks!
13,1498066920.50725,Barbera,"should clean up any defunct connections for you, with more and less aggressive options"
14,1498067119.584043,Lois,"Hello all, how can I use something like this:
```'([:command ""upper""] [:command ""reverse""] [:command ""remove-vogal""]) ;; this is the commands that I have to apply to collection
I thougth doing defmulti like: 
(defmulti command (fn [[_ command] _] command))
(defmethod command ""upper"" [command string] (upper string)) ...
[""string nubmer 1"" ""string nubmer 2"" ""string nubmer 3""] ;; is the collection
```
and I want to have the results in the end. I coudn´t figure out how to do this with threading macro, Is there possible?"
14,1498067507.73741,Juan,The defmulti and defmethod look ok. And threading is possible in general. Maybe you can past an example invokation?
14,1498067635.78838,Lois,"well, that´s the problem how to apply the rules to collection and get the result : `[""1 RBMN GNRTS"" ... ]`; `(reduce #(conj %1 (command %2 collection) [] '([:command ""upper""] [:command ""reverse""] [:command ""remove-vogal""]))`?; I think this doesn´t pass the result to another, correct?"
14,1498067935.909843,Kallie,<@Lois> It sounds like you want a `reduce` over the seq of commands. seq of strings is the initial value; each pass maps command over the seq of strings
14,1498068156.005894,Lois,In this case I´m runing each command to a collection; my needs is run all command to each element; how can I use dynamic transform for each element? something like `(-&gt; element (commands ?))`
14,1498068507.146309,Kallie,"That is what a `reduce` would do, if I understand you correctly; ```
(reduce 
  #(map
      (command %1)
      %2)
   [seq-of-commands]
   [seq-of-string])
```; Only I think I got the order of the args passed to the reducer wrong; Also I am not sure the dispatch syntax is correct, but that's the basic idea; Whoa that's actually what you wrote above and I guess I wasn't paying close enough attention.; <@Lois> What didn't work about the snippet you sent earlier?"
14,1498069289.455813,Lois,"<@Kallie> I think you trick is correct, I´ll give a try, thank you"
15,1498076721.281984,Darcel,"hey guys, I'm looking forward to design an extensible library. but I'm not sure which is the best approach to it, do you know any reading matterial about this ?"
15,1498077064.410084,Cecile,What's the library's purpose?
15,1498077104.424868,Darcel,a web framework
15,1498077152.442987,Zena,*hides behind corner* Frameworks are evil.
15,1498077224.470044,Darcel,<@Zena> what do you mean ?
15,1498077683.635637,Raul,"<@Darcel> if you haven’t already, you should give lispcast’s recent article series on clojure webframeworks a read: <http://www.lispcast.com/why-web-frameworks> , <http://www.lispcast.com/arguments-against-frameworks> , &amp; <http://www.lispcast.com/clojure-web-framework>"
15,1498077743.657049,Hiram,<@Darcel> best library possible is a bunch of little functions that compose correctly (e.g. a domain-specific algebra)
15,1498077834.689532,Darcel,"<@Raul> thanks, I'll watch them; <@Hiram> thanks"
15,1498077997.747754,Hiram,"maybe one practical example is something like XPath vs. Lenses for traversing data structures; if you design w/ XPath in mind, the API will look one way, w/ Lenses probably another; and will compose differently; (or not at all)"
15,1498084332.589944,Darcel,<@Raul> are you the author ?
15,1498084382.60063,Raul,I am not
15,1498084584.644129,Darcel,"it's a good material, but i'm not agree with some of those ideas"
15,1498085207.769632,Sonny,"If one thing is clear, it's that we have both too many and not enough frameworks"
15,1498085268.781586,Darcel,"<@Sonny> yeah that's true, At the end of the day frameworks are just tools, there are lots of good and bad tools around; I don't think that not using a framework makes you an expert. It might makes you a fool because your trying to go to a war with a water pistol"
15,1498087696.240889,Barbera,my experience with frameworks is that you trade potentially getting boxed in by constraints later for a quicker start on a project
15,1498087741.248801,Lucia,"define ""framework"".  to me, something that works, until it doesn't.  massive pain ensues."
15,1498087741.248887,Barbera,"good trade if the project doesn’t grow and change i guess; yeah seems like there’s a list of qualifications to me; big one is the framework code implements your -main and controls initialization and lifecycle stuff; (imho); maybe baked in libraries for handling each task (data mapping, routing, caching, rendering, etc) that’re hard to change out would be another"
15,1498087999.294899,Lucia,"fwiw, when i hear ""framework"", i think monolithic, non-compositional blob-o-stuff."
15,1498088069.3072,Barbera,yeah. more up front pain to compose/integrate a bunch of single purpose libraries but tends to pay off
15,1498088176.326068,Lucia,"composing libs (components) - way better, in general. problem tends to be docs.; you can't be expected to doc every possible use of your lib."
16,1498091635.877111,Kaycee,"I've run into a strange compiler error that only seems to manifest when I pull in a secondary library via checkouts. I've verified the problem is not code as it works on another machine. Tried reinstalling java and Leiningen to no avail. Any idea what this could be?; ```
user=&gt; (require '[foo.bar])
CompilerException java.lang.ExceptionInInitializerError, compiling:(foo.bar.clj:1:1)```; If I remove the symlink in checkouts, everything seems to work fine."
15,1498097258.634032,Sonny,"frameworks are things that call you, rather than things you call; (which are more likely components); <@Lucia> ^^"
15,1498097356.646991,Lucia,"hmm, seems a reasonable defn"
15,1498097386.650963,Sonny,"not something I made up and probably not 100% satisfying, but I think it’s about right"
17,1498104101.442667,Cary,"<https://github.com/technomancy/leiningen/blob/master/doc/DEPLOY.md>
I'm trying to deploy to private repo according to this tut, but every time I use lein deploy, It will ask for username and password. 
I mentioned it's said there's a bug for gpg, it that mean the username and password in credentials.clj.gpg will not work, orI have to do something?"
18,1498116185.064379,Ila,"Hey all, I am running into what I think is a bug with how clojure's java interop works; I am trying to wrap <https://github.com/lokra/seaweedfs-client> for use in clojure; but when I try to port the example upstart code; ```
FileSource fileSource = new FileSource();
// SeaweedFS master server host
fileSource.setHost(""localhost"");
// SeaweedFS master server port
fileSource.setPort(9333);
// Startup manager and listens for the change
fileSource.startup();

FileTemplate template = new FileTemplate(fileSource.getConnection());
template.saveFileByStream(""filename.doc"", someFile);
```; to clojure; ```
(defn connect!
  [host port]
  (let [client (FileSource.)]
    (.setHost client host)
    (.setPort client port)
    (.startup client)
    (reset! client-atom client)
    (let [value (.getConnection @client-atom)]
      (reset! file-template-atom (FileTemplate. value)))))
```; I get an error similar to 
`IllegalAccessError tried to access class org.lokra.seaweedfs.core.Connection from class &lt;class info&gt;`; I have found <https://groups.google.com/forum/#!topic/clojure/zr2N0dbidAI> and <https://dev.clojure.org/jira/browse/CLJ-1243> that seem to point to this being a problem; Any suggestions or workarounds I can try?; Plot thinkens, I can use the code without problems on my Mac but on Windows it breaks; :thinking_face:"
18,1498126140.572576,Page,<@Ila> What's the Java version on both? `lein version` should print it; Also possibly compare the outputs of `lein deps :tree`
19,1498133889.282914,Sonny,I don't see any signs that CLJ-1243 has anything to do with it
20,1498134369.404182,Vernice,"hey guys! I want to read a stream with unknown number of lines (e.g. a file) and fire an async get request per each line (lets say using an http-kit async get with `(go (&gt;! c response))` as a callback). then, read the responses one by one into another file. is there an elegant way of closing the channel making sure I am not missing any async puts into the channel? I can do so with putting my own guard msg at the end but it feels awkward."
20,1498134995.570041,Page,I'm not sure I understand what you're trying to do exactly; any reason why the producer can't just close the channel when the stream runs out?
20,1498137905.493581,Vernice,<@Page> the producer might close the channel before the last response is put there
20,1498138858.855429,Page,"How so? The producer being (in my mind) the single sequential process that reads from the stream and puts on the channel, it should be able to not close the channel before it's finished reading the stream; maybe you're missing a channel; read file -&gt; channel -&gt; http calls -&gt; channel -&gt; write file ?; if that's the general shape and you want to ensure some parallelism in the ""calls"" step, maybe look at what the `pipeline` functions have to offer in core.async?; I would suppose they already handle closing the channel in the right order"
21,1498144442.307082,Nathan,"Can anyone either give me some thoughts or tell me the best place to ask about some architecture issue I'm trying to sort out? 

Long story short, I have a Clojure + Clojurescript web app that needs to extend itself as a desktop app and as a user-owned server (with web admin api) that can have user created functions (think add-ons, plug-ins, arbitrary user code). I'm trying to find the best way to implement these two new pieces that highlights ease of installation, extensibility, minimal system requirements, and shared codebase as much as possible. The desktop app itself is surely going to end up being electron-based. As far as the code, there's a ""simulation"" engine that I don't want to rewrite in multiple languages unless from scratch to be shared, and is currently in .cljs files.

My ideas thus far are - 
Option 1: Write the user-run server in Clojurescript + Node.js  (running on node.js as the server) with user-defined JavaScript functions that get called from Clojurescript/JavaScript, and expose the Clojurescript API via externs
Option 2: Write the user-run server in Clojure and run a v8 instance where I eval anything written by users in pure JavaScript, returning and sending json to communicate (at the cost of some speed and cruft).

Any other ideas or thoughts? Or anywhere someone can point me?  Thanks."
21,1498146213.104968,Adelaida,"<@Nathan> - Don't have time to think deeply about this now, but your question strikes me as one that could be asked at the Clojure or Clojurescript subreddit. That way it's less likely to be buried by other conversations while people think about it."
22,1498149459.467574,Virgina,Any news on when clojure.spec become part of core?
22,1498149489.47882,Jodie,It won't. It's been split into its own library.
22,1498149968.664608,Margaret,"wasn’t it going to be merged in later, on a “when it’s done” kind of schedule (so after 1.9) ?"
22,1498150007.679413,Rene,There's a good discussion about this on the latest defn podcast (<https://defn.audio>) - with Stuart Halloway - it's not on the website yet but it's episode 23 - it's in the RSS
23,1498150288.786455,Jolene,"Hi, I'm trying to figure out how to do something that's embarrassingly simple, but im just having no luck lol.  Basically, I need something that does the following
```(check #{1 2} [1 2 3]) =&gt; true
(check #{1 2 4} [1 2 3]) =&gt; false
```

for check i've been through variations of some, every? not-any?, etc.  But still can't quite get what I'm looking for .  I just need to flag the fact that there's something in the first collection that's not in the second"
23,1498150407.832739,Otha,convert 2nd arg to set?
23,1498150428.840931,Willow,are you looking for set equality or set subset?
23,1498150485.863026,Jolene,"not equality, just that ""a has something that b doesn't"" ,it's ok if b has somethign that a doesnt; yeah I guess set/difference would work too; the problem is that 'set b' may be large"
23,1498150521.877213,Willow,"subset sounds like it?; oh, you need one to be a proper subset of the other"
23,1498150551.888508,Jolene,so was wondering about the cost of converting from a list/vector to a set to do the comparison; but i think I'll just go with that for now
23,1498150640.923381,Otha,"set uses transients, so don't think it would be a big overhead"
23,1498150660.93159,Jolene,ok wasnt sure how effcient it was in that scenario
23,1498150673.936709,Otha,"```
(defn set
  ""Returns a set of the distinct elements of coll.""
  {:added ""1.0""
   :static true}
  [coll]
  (if (set? coll)
    (with-meta coll nil)
    (if (instance? clojure.lang.IReduceInit coll)
      (persistent! (.reduce ^clojure.lang.IReduceInit coll conj! (transient #{})))
      (persistent! (reduce1 conj! (transient #{}) coll)))))
```"
23,1498150678.93861,Jolene,ok will give that a shot if it behaves then i'm good; cool
23,1498150694.944759,Otha,I just jumped to definition in my emacs/cider (M-.) :slightly_smiling_face:
23,1498150786.981902,Willow,so i guess it would be `(and (subset my-set (set coll)) (not-empty? (remove my-set coll))`
23,1498150923.039458,Sonny,the true answer is: we have not yet decided; it is effectively part of core now as Clojure depends on spec.alpha. thus users of Clojure get both. Whether and when the two units of code are co-located will depend on how things unfold (but should not actually matter to users)
23,1498152352.592185,Page,`(not-empty? (set/difference (set a) (set b)))` ?
23,1498152434.6238,Willow,that wouldn't ensure that a is a subset of b though
23,1498152523.659207,Margaret,"if the difference is empty, a is a subset of b; guaranteed"
23,1498152530.661728,Raul,"if you’re just trying to ensure a subset, can’t you just use `set/subset?` <https://www.conj.io/store/v1/org.clojure/clojure/1.8.0/clj/clojure.set/subset%3F> ?"
23,1498153205.9259,Willow,But disjoint sets have a non empty difference which was certainly not according to his original requirements
23,1498154394.398816,Loretta,"<@Willow> he said ""I just need to flag the fact that there's something in the first collection that's not in the second"" -- disjoint sets certainly seem to fulfill that requirement, as there is definitely ""something in the first collection that's not in the second"""
24,1498154604.489494,Candace,"what is the ""best"" way to store a c3p0 pool to be accessed by multiple namespaces?"
24,1498154858.59192,Raul,"mdrago1026: You can use something like <https://github.com/tolitius/mount> or <https://github.com/stuartsierra/component> to manage complex required system dependencies.

Or for something simple like a c3p0 pool, which keeps track of it’s own errors for the most part, I tend to just use something like `(defonce conn-pool (delay (create-c3p0-connection))` and everywhere else you want to refer to it you can `require` the config namespace and reference the pool with `@conn-pool`"
24,1498154971.635636,Candace,awesome. thanks a ton. I will take a look at these
24,1498155212.729144,Raul,"<@Candace> on a very random, unsolicited side note, I prefer <http://brettwooldridge.github.io/HikariCP/> over c3p0. Nothing inherently wrong with c3p0, and I’ve used it in production quite a lot, but hikariCP fits better with what I’m used to in Clojure (in terms of “it just kind of does the correct thing”)"
24,1498155344.779988,Candace,very interesting. let me read up on this. I've heard of Hikari and simply always default to c3p0 since that's what i always have used
24,1498155375.792105,Raul,"way more than the speed of things (which is not insubstantial), this is why I prefer hikaricp: <https://github.com/brettwooldridge/HikariCP/wiki/Pool-Analysis#c3p0>"
24,1498155528.851052,Candace,wow this is neat; I'm going to try this out
25,1498158867.149234,Cuc,"I am looking for some help for code coverage tools for clojure, has anyone used cloverage before?"
25,1498159991.545755,Hiram,"<@Cuc> worked fine last time I used, gave a nice report for lisp (based on forms covered); straightforward -&gt; <https://blog.jeaye.com/2016/12/29/clojure-test-coverage/>"
25,1498160621.765921,Cherelle,:slightly_smiling_face:
25,1498160674.785294,Cuc,"thanks <@Hiram>; just figured out why I am not able to get it..so my tests goes through all well when I do lein test, but are failing when I use cloverage; apparently they have this issue open <https://github.com/cloverage/cloverage/issues/164>"
26,1498160932.878358,Page,"Another piece of unsolicited advice: you should not think of namespaces as accessing anything; namespaces are passive collections of functions. And if a function needs access to a connection pool, it should receive it as an argument, regardless of what namespace it's in."
26,1498160977.894004,Danelle,"<@Candace> Use `defstate` from <https://github.com/tolitius/mount>, or look into <https://github.com/stuartsierra/component>.
BTW, do you *need* to stick with c3p0? I enjoyed <https://github.com/tomekw/hikari-cp> quite a bit.; Oh, sorry for replying out-of-thread. :flushed:"
26,1498163167.67742,Raul,"hansen-pansen: :smile: you and me? We’re on the same page, apparently…just different threads :smile:"
26,1498163289.720974,Candace,"<@Danelle> No problem. I don't need c3p0 (used it before for work, so I just default to it). <@Raul> also told me to look at hikari and it looks awesome. So thank you both; and mount and component both look great too; makes sense. I always got confused when it came to ""sharing a connection"" because everything else is functional and stateless, then comes the connection"
26,1498163677.86127,Danelle,"I felt quite ashamed that I sent the same advice hours later :grinning:; Is there a library that offers a worker-queue type of concurrency, i.e. enqueue work for a fixed-sized thread pool? I looked into `claypoole`, but it works on sequences."
26,1498164223.0512,Raul,"hansen-pansen: if you’re familiar with java, you can do it the same ways you would in java with clojure.

If I’m not too worried about thread priorities and contention, then I’ll just use core.async with a fixed number of “workers” (i.e. go-loops) that are pulling from a shared channel, and then write jobs to that channel"
26,1498164318.084099,Danelle,"I already rolled a n00b-version with core.async, but it felt … too low-level. I looked into the amazing `manifold`, which offers backpressure and all the nice stream operators, but it lacks the pooling part.
Just wondering whether somebody else stumbled over the same problem.; Ohh, and I have close to zero Java background, but if that is an option, I will take a look. I guess you mean something from `java.util.concurrent`?"
26,1498164507.148697,Margaret,agreed you can just use an ExecutorService
26,1498164523.154151,Raul,"depends on your requirements. the main problem with core.async for worker pools can be that it uses the same thread pool for *all* core.async related channels. So if this is supposed to be a background operation, and you also use core.async in something like handling production web requests, then your background jobs might be interfering with your web requests.

If that’s your case, you’ll probably want to use ExecutorService"
26,1498164534.157743,Margaret,"but if you use core.async pipeline-blocking properly you can do it at a high level with clojure too; where the queue is the buffer on the chan, and the thread count is the parallelism arg"
27,1498164879.279026,Gus,"So this function reflects; ```(defn test-reflect [^javax.servlet.http.HttpServletResponse resp]
  (proxy [java.io.FilterOutputStream] [(.getOutputStream resp)]
    (close []
      (proxy-super close)
      (println ""hello""))))
```; specifically the call to proxy-super reflects; and I’m wondering why; it seems like it should be possible to resolve .close()"
26,1498164973.312287,Danelle,"`pipeline-blocking` is what I used with my n00b version.
And yes, I try to use concurrency mostly for background web requests.; Thanks to your ideas on this topic, I propably should just put more brains on the `core.async/pipeline-blocking` idea and think of some error-passing messaging or channel.; <https://stackoverflow.com/a/41448848/2068691> brings me to some ideas.
Thank you very much for your ideas and inspiration!"
26,1498165895.622762,Margaret,:thumbsup:
26,1498166152.701818,Rebeca,proxy doesn't type hint `this`
26,1498166227.724351,Danelle,"Thank you very much, guys! Your help is very much appreciated. This community is so cool!"
28,1498166531.815697,Cherelle,<@Gus> I was about to make a PR with a fix for that.; Assuming you're in ring; looks like it to me.
28,1498166554.822829,Gus,beat you to it =)
28,1498166583.831564,Cherelle,Did you get the rest? :smile:
28,1498166600.837006,Gus,"ring-servlet no longer reflects, didn’t check the other subprojects; <https://github.com/ring-clojure/ring/pull/295/files>"
28,1498166625.844223,Cherelle,<https://gist.github.com/jeaye/3b650b3b584056d6440aaf161832247e>; That's what I had locally.
28,1498166654.852675,Gus,"hmm, lein check runs cleanly for me with just what I have"
28,1498166674.859058,Cherelle,"Did for me, too, but I see the reflection in my project using ring."
28,1498166682.861193,Gus,"ah, yeah"
28,1498166699.86638,Cherelle,"So I chose not to trust `lein check`, since I can see in the source how it would be reflecting. :slightly_smiling_face:"
28,1498166734.87645,Gus,huh
28,1498166757.883374,Cherelle,"Interested in applying the other changes, as shown in my gist, to your PR?"
28,1498166768.88651,Gus,I’ll look into it =)
28,1498166788.892567,Cherelle,Cheers.
28,1498166789.892791,Gus,"oh, you’re in the jetty adapter, I see; ah, yeah, lein check reports problems"
28,1498166854.912276,Cherelle,"Ah, fair enough. Sanity is restored.; My approach to fixing the `proxy-super` is different, but the effect is the same."
28,1498169347.573371,Gus,<@Cherelle> I also added a return type hint so my code wouldn’t reflect; <https://github.com/ring-clojure/ring/pull/294>
28,1498169417.589516,Cherelle,"Yep, saw that before I started on the reflection work.; That PR looks good; thanks for beating me to it and updating it for ring-jetty-adapter. :slightly_smiling_face:"
28,1498169540.617891,Gus,=)
29,1498171872.104519,Candace,can you use environ when making a war file and deploying via tomcat? for example when i run ` lein with-profile dev ring uberwar... ` does that do anything?
29,1498172058.139833,Aldo,"very occasionally, 'clojure.core doesn't appear in the list returned by `(loaded-libs)`. that would be a bug right?"
29,1498172288.18368,Rebeca,"hard to say; loaded-libs only contains namespaces loaded via require or use, if I recall"
29,1498172804.282978,Aldo,mmmm that's not really what the docstring implies
30,1498173402.388838,Shavonda,"So I am using an exception tracker that has mediocre clojure support (Sentry), but I'm working to improve it. Exception ""rollup"" (grouping of exceptions based on their similarity) relies on the hash of ""in-app"" stack frames (frames that begin with com.myapp for instance) being equal to a previously seen exception's stack frames. I believe rollup is not working across runs of my application due to anonymous function names differing. So, for instance: `com.myapp$fn__12345` is the name right now, but on the next run it may be `com.myapp$fn__99999`. Are there other patterns in clojure stack traces beyond `foo.bar$fn__12345` that I should let the maintainers know about which are specific to clojure, so exception rollup works as intended?"
30,1498173572.417936,Hiram,<@Shavonda> check <https://github.com/hcarvalhoalves/raven-clj>; the way its sending the tracebacks seems to make Sentry happy (it manages to group by Exception type nicely)
30,1498173710.441577,Shavonda,"<@Hiram> I'm kind of meh on manually reading source files from disk with no cache and parsing the exception object by hand. This is something that can be accomplished on the server side.; As of a week ago or so, the `getsentry` folks picked up coda hale's wrapper around `raven-java`.; One other thing to add in case you're interested: I skipped the need to have `in-app` by simply setting the package names of my app as a param on the `DSN`; Finally, I spoke with the sentry maintainers and they said it would be no problem to just fix the hashing of the problematic frames.; <@Hiram> err maybe one more thing: I tried variations on what you're using, and I still managed to have mixed results. I fixed that same `nth` `IndexOutOfBoundsException` for `:context_line` for instance.

Here's the ""official"" sentry-clj lib now -- PRs as I understand it, are welcome: <https://github.com/getsentry/sentry-clj>"
30,1498174688.603582,Hiram,IMO the killer feature is having source code context around the error; without that Sentry is just an expensive log aggregator
31,1498176179.849387,Gus,Would it be possible to arrange things so that `(when (instance? Foo x) (.fooMethod x))` wouldn’t reflect?; ie special-case compilation of (if (instance? …) …) so that the then branch was automatically hinted?; …I guess this belongs in <#C06E3HYPR|clojure-dev>
30,1498180518.453801,Shavonda,"<@Hiram> I was talking to the sentry folks and it sounds like the source code context will be something that's pulled from github in the near future. All of the data required to do it is there, just hasn't been plumbed into the product. I think it's better than a log aggregator, but I'm using an on-premises install which affords some extra flexibility you don't really get in the SaaS product."
30,1498185896.137825,Ava,<@Shavonda> interesting to see that the sentry folks picked up maintaining a clojure client. I'll have to give theirs a spin to see how it compares to the fork of raven-clj (which currently works very well for me).
32,1498207363.140213,Wilfredo,"G’day everyone, I have a macro puzzle question - how can I access an atom from within a macro? I have the following:

```
(def tatom (atom nil))

(defmacro tmacro
  []
  `(let [t# (deref tatom)]
     (if t#
       (prn ""tatom is nil"")
       (prn ""tatom has value""))))

(tmacro)
""tatom is nil""
=&gt; nil

(reset! tatom 1)
=&gt; 1
(tmacro)
""tatom is nil""
=&gt; nil
```

Anyone got any ideas as to why the atom is not being correctly deref’d here?; The gist of the question is - I want to access mutable storage from within a macro, how do I do that?"
32,1498207544.183149,Kareen,<@Wilfredo> the branches on your if are the wrong way around; also there's no need for that to be a macro
32,1498207590.19384,Wilfredo,"This is just a contrived example, not real production code which is what this question is really about - and I want that one to be a macro for various reasons.; Thanks for pointing out the ordering, I knew it had to be my morning idiocy. :facepalm:"
33,1498213503.573434,Nicki,"in which ns is the tatom ? the same as defmacro, or the same as its usage?"
32,1498217748.382548,Dirk,"<@Wilfredo> I can’t repro. The first call to `(tmacro)` causes it to print `""tatom has value""` and after the `reset!` it causes it to print `""tatom is nil""`"
32,1498217988.425844,Wilfredo,"Thanks guys, but as I mention above, this was just a morning brainfart on my part, with the branches reversed. This was just a contrived example that I quickly put together to verify that I can deref atoms (from the same ns, but it doesn’t really matter if they’re fully ns-qualified) and screwed up in the process."
32,1498218101.447285,Dirk,"<@Wilfredo> Right, understood that the branches are reversed. I still can’t repro what you pasted above."
32,1498218218.469098,Wilfredo,"The other half of the morning brainfart was the behaviour of things. The behaviour above cannot really be reproduced, it’s just my bad copy paste.

This has stirred quite a conversation here. I wonder if I should just remove the question but the sharper minds will at least get a good laugh out of it if I leave it hanging here.; _Sometimes, rubber-ducking makes one look like an idiot if he uses the whole community for it._"
32,1498218299.484422,Dirk,OK cool. I thought you might have a bad REPL environment or something exhibiting a low-level bug.
32,1498218316.487782,Wilfredo,I had a few things mixed up together as I was re-defing things.; Then add to that me being half asleep and this is the result. Still thanks for all the help!
34,1498221383.141619,Reginia,"for a hobby project, i’d like to implement some kind of extension system. the “modules” (or whatever they’ll be called) should be able to extend the system in various predefined ways depending on their type (think “themes”, “content elements”, …). my question relates to being able to add them “dynamically” somehow, if that’s the right word, without me having to recompile the app (but maybe the individual module?); i’d be thankful for any pointers"
34,1498221435.154482,Jodie,<@Reginia> `load-file` should do the trick :slightly_smiling_face:
34,1498221436.154653,Reginia,i’m aware of the added complexities; is this maybe a bad idea in general for reasons i’m unaware of?; uh neat! thanks. with clojure it’s always those functions you find after months … :wink:
34,1498221466.162052,Jodie,"I think Lisp is well suited to this, it was designed to receive code over sockets &amp; such. In fact Clojure has made decisions to ensure that this is the case."
34,1498221507.171575,Reginia,"my thoughts exactly, but coming from OOP it seems so… daring; :‘D"
34,1498221982.287684,Jodie,"Well, this isn't OO vs functional. Smalltalk could do this too.; More about live programming I guess :slightly_smiling_face:"
34,1498222440.405837,Reginia,"i wasn’t referring to the technical aspects, more the mindset. in my experience this idea would be considered “hacky stuff”"
35,1498224978.183459,Evelina,"Hey all, compujure-api throws an exception ""No such var: compojure.response/send"" when I try to import it in my namespace. I'm using [org.clojure/clojure ""1.9.0-alpha17""]. Anyone exprienced this issue?"
35,1498225100.223848,Otha,what compojure version are you using?
35,1498225263.279254,Evelina,"It is a transitive dependency over compojure-api currently. By the way the error message is like this: 2. Unhandled clojure.lang.Compiler$CompilerException
   Error compiling compojure/api/async.clj at (24:1)

1. Caused by java.lang.RuntimeException
   No such var: compojure.response/Sendable; That means the version of the compojure 1.6"
35,1498225600.396743,Page,what compojure version does `lein deps :tree` report?
35,1498225849.485151,Evelina,Ok another dependency overrides it I will try with an explicit dep; Ok it did work thanks!
35,1498226741.818301,Page,Be slightly careful when adding an overriding dep like that as the final result depends on the order of the dependencies vector; it's safer to add explicit `:exclude`s in addition to pinning the version.
36,1498228270.405076,Dede,"if I have an initial value `100`, and I want to apply successive arbitrary functions to it which will result in a final value, what's a good way to do so? I'm looking for something that would allow me to do this: `(some-fn 100 [:inc :dec :set-50 …])`; or something in the spirit of that at least :wink:"
36,1498228361.441656,Willow,could be a really elegant reduce in there; `(reduce (fn [val fn] (fn val) 100 [functions go here])`
36,1498228577.525869,Laci,Why in Clojure we are encouraged to use `recur` instead of making self-calls? I imagine is for performance reasons but couldn't find much information about it.
36,1498228613.539849,Dede,`(reduce (fn [val fn] (fn val) 100 [dec dec dec])` gives an error: `Wrong number of args (1) passed to: core/reduce`
36,1498228630.546122,Willow,your parents are off; ah because mine were; `(reduce (fn [val fn] (fn val)) 100 [functions ...])`
36,1498228678.564572,Mia,&gt; your parents are off; :joy:
37,1498228689.568692,Hiram,<@Laci> <https://clojure.org/about/functional_programming#_recursive_looping>
36,1498228693.570298,Willow,haha
36,1498228706.575136,Dede,"that works beautifully, thank you"
36,1498228707.575655,Mia,that’s some deep stuff
37,1498228720.580428,Hiram,"&gt; Since Clojure uses the Java calling conventions, it cannot, and does not, make the same tail call optimization guarantees. Instead, it provides the recur special operator, which does constant-space recursive looping"
36,1498228721.580965,Willow,didn't mean to get so personal :slightly_smiling_face:
36,1498228740.588138,Dede,"oh, they are, trust me :wink:"
37,1498228802.612441,Laci,"hcarvalhoaves: Awesome, that makes sense. Thank you Henrique."
36,1498228829.622642,Willow,"`((apply comp [dec dec dec]) 100)`; you could also just apply compose; which is very much the mathematical definition of what you want to do. really conveys the intention; ""compose these functions and apply them"""
36,1498229307.811572,Dede,"ah, I like that solution"
36,1498235874.357972,Margaret,dpsutton: a goofy version of this `((apply comp (repeat 3 dec)) 100)`
36,1498235904.368339,Willow,he wanted for arbitrary functions. the three `dec`s are just placeholders
36,1498235924.37524,Margaret,"right, I called it goofy for a reason"
38,1498236349.520793,Casimira,"I'm curious how you all configure your web services? There seem to be a large number of libraries out there to do this. Is there one that is generally considered ""the Clojure way""?"
39,1498237867.049075,Weston,juxt/aero is nice. Or just env vars (with or without environ)
40,1498240374.930141,Lucio,Hi! Is anyone familiar with Datomic here?
40,1498240405.941017,Guillermo,there is dedicated <#C03RZMDSH|datomic> room <@Lucio>
40,1498240425.948257,Lucio,"<@Guillermo> oh sorry, I hadn’t noticed. Thanks"
40,1498240437.952814,Guillermo,np.  lots of helpful cognitect people seem to hang there
39,1498241834.455652,Ava,"<@Casimira> I usually see people pull config out of the environment (""12 factor""), a properties file, or (more rarely) an edn config. There is a commonly used library called `environ` that does this, but you could just use `System/getProperties` or `System/getenv` without needing a dependency. I feed certain values like an HTTP_PORT to my web server. I use immutant.web, which uses Undertow under the hood, but a lot of people use http-kit or Jetty. My web server knows how to serve a Ring handler (which is a spec for http handlers in the vein of Python's WSGI or Ruby's Rack), and I use a library for mapping http routes to handlers called compojure-api.; <@Casimira> I usually suggest people take a look at Luminus (<http://www.luminusweb.net/>) which is a curated collection of libraries and docs until they form their own opinions on library choices."
39,1498242464.678502,Brady,"<@Casimira> I don't know if there is a ""Clojure way"" but try cprop <https://github.com/tolitius/cprop>  or juxt/aero <https://github.com/juxt/aero>"
39,1498244847.510335,Casimira,Thanks dorab and bja!
41,1498248316.565325,Lucio,Hi! I am having a little issue setting up Datomic Starter. I posted this message in <#C03RZMDSH|datomic> but I suspect it might be a more general clojure/jvm question. Here is the error I am getting: <https://gist.github.com/hmaurer/b9d303055c7a9b7c4e4827b5b79e2acc>
41,1498248692.675754,Casimira,"<@Lucio> I can't help you, but would you mind updating us with the solution when you find it?; Also, I like to open these kinds of questions on StackOverflow and then answer them when I find a solution. Helps everyone!"
41,1498248741.690594,Lucio,"<@Casimira> sure thing, although I suspect it’s an issue due to my own ignorance and not a problem with Datomic’s tutorial"
41,1498248757.695488,Casimira,"Well, I'm also ignorant, so your answer will help me. :slightly_smiling_face:"
41,1498248785.703584,Lucio,":smile:; <@Casimira> it’s odd, the jar doesn’t seem to contain any “peer server”"
41,1498249523.919221,Casimira,That *is* odd. It sounds like maybe you have an invalid installation or something.; What version of Datomic did you download?
41,1498249635.951951,Lucio,"The latest one, but I also tried `0.9.5561` (the one mentioned in the “Getting Started” guide, and I downloaded an earlier version just to check they didn’t rename the peer server"
41,1498249796.998719,Casimira,"Hm. I haven't messed with Datomic at all, but I'm planning on doing it soon. So... yeah... definitely let us know what you find, if you ever resolve it.; What do Clojurists use to send emails? A bit of searching turned up this: <https://clojars.org/org.clojars.sethtrain/postal> Which looks nice and Clojurey, but it only has 250ish downloads...; Ah... to answer my own question: <https://clojars.org/com.draines/postal>; That seems pretty popular... I wonder, is there a way to sort clojar search results by popularity?"
41,1498250578.223568,Lucio,<@Casimira> I didn’t realise there was  difference between “datomic free” and “datomic starter”; c.f. <https://groups.google.com/forum/#!topic/datomic/P69c3q__5gw>; datomic free does not include the peer server
41,1498250752.27392,Casimira,"Ah! I see. What's the point of ""datomic free"", I wonder?; Thanks for posting the solution!"
41,1498250817.29263,Lucio,"<@Casimira> I have expanded on the topic in <#C03RZMDSH|datomic>; quoting this google group:; &gt; The primary use case for Free is not new users, but rather people who need a license that includes redistribution rights."
42,1498252264.690229,Krystal,I think `(-&gt; 100 inc dec set-50 ...)` is the most idiomatic way to do this.
42,1498252455.73651,Cecile,`(fn [value fn-list] ((apply comp (reverse fn-list)) value))`
42,1498252494.745889,Willow,^ that's the one we settled on. i always forget the order of comp so i left off the reverse earlier
42,1498257456.754867,Andra,"dpsutton: Order is same as in math: 

```
((comp h g f)x)    ; =&gt; h(g(f(x)))
```"
42,1498258967.990164,Margaret,"<@Krystal> the problem with `-&gt;` is it isn’t a function composition, it’s a syntax. You can’t pass it a list of functions."
42,1498259757.09781,Krystal,Valid. I hadn't inferred that the list part was important. My bad!
43,1498266545.754395,Ramonita,"Does anyone happen to know of any decent OAuth2 client libraries? There’s a lot around, but all the ones I’ve found are weirdly designed :confused:"
43,1498276818.326916,Ila,weavejester: The best I could find was clj-oauth
44,1498278344.405286,Berry,"in clojure/match, can I do

[x &amp; ys] // x matches first elem of vector, ys matches rest

or do I have to do

([x &amp; ys] :seq) ?"
45,1498319088.392503,Lashon,"Hey friends; Anyone have a good way to split a vector (of CLI args in my case) into pairs?; I have e.g. `-m 4 -y 2016` and want to end up with `[[""-m"" 4] [""-y"" 2016]]` or maybe a map"
45,1498319203.400463,Lucy,"I believe you may be looking for `zip`; Alternatively, `(partition 2 [""-m"" ""4"" ""-y"" ""2016""]) =&gt; ((""-m"" ""4"") (""-y"" ""2016""))`"
45,1498319362.410927,Lashon,hm tbh I don't get what zippers do from reading the docs lol; *feels dumb*
45,1498319392.412923,Lucy,"I've not used zip in Clojure at this point, but in my experience zip functions pair 2 values together"
45,1498319432.415951,Lashon,ah like zipmap?
45,1498319445.416867,Lucy,But I think it's more often something like `'(1 2 3) '(4 5 6) =&gt; (1 4) (2 5) (3 6)`
45,1498319462.417974,Lashon,oh yea I remember that one. I think that's the reverse operation. let me try the partition.; your partition example does exactly what I want; thanks :slightly_smiling_face:
45,1498319553.423779,Margaret,"clojure has ""zippers"" which are an abstraction for navigating complex nested structures, and zipmap which creates a hash-map out of a collection of keys and a collection of values"
45,1498319652.430114,Franklin,"zippers are for driving a turtle around a nested structure, optionally editing it along the way. so for example xml-zip gives you a zipper that can walk through the data structure returned by clojure.xml/parse.  you can go next-next-next, or at any node you can ask what are all the parent/ancestor nodes, etc."
45,1498319686.432428,Lashon,I see. That sounds way more complex than my program :slightly_smiling_face:; One day :wink:
45,1498319752.437075,Franklin,ok. don't forget clojure.tools.cli.
45,1498319855.44415,Lashon,"Thanks, I'll check it out. This is more to teach myself a few things anyway, and it seems like partitioning a vector sounds like a useful thing to know."
45,1498321206.539768,Giovanna,The `zip` function found in other langs isn't in clojure. You just use `map`.
45,1498325409.817078,Sonny,Use zipmap
46,1498325550.8262,Lynelle,Is this a good place for a total noob to learn or should i check elsewhere?
46,1498326289.871299,Margaret,<@Lynelle> there's a <#C053AK3F9|beginners> channel
47,1498332072.216806,Ramiro,"Hey guys, trying to setup a connection pool with c3p0. It seems to have trouble connecting to the production database using ssl (heroku, needs sslmode=require). I’ve tried
```
(.setJdbcUrl my-datasource (format ""jdbc:%s:%s?sslmode=require"" (:subprotocol dbspec) (:subname dbspec)))
```
and
```
(.setProperties my-datasource
                (doto (java.util.Properties.)
                  [...]
                  (.setProperty ""sslmode"" ""require"")))
```

C3p0 doesn’t seem to pick this up, I keep getting `SQLException: Connections could not be acquired from the underlying database!`. Getting a connection for the db-url string with the sslmode query-params does indeed work. Has anyone else experienced this?; where `my-datasource` an instance is of `om.mchange.v2.c3p0.ComboPooledDataSource`; Update: just tried with apache’s `DBCP2`, and that seems to pick the sslmode just fine. Is there an issue with c3p0 I’m not aware of?"
48,1498334066.327012,Maddie,"You might also try HikariCP for pooling, it's rock solid. <https://github.com/brettwooldridge/HikariCP>"
47,1498335271.394268,Ramiro,"Thanks <@Maddie>. Already looked at it, looks great indeed :slightly_smiling_face:"
49,1498391047.604446,Darcel,does any one knows how should i use fast-resource or even resource to server some static files on pedestal  ? how should the route be like ?
50,1498398361.930439,Risa,"Hey fellow Clojurians, I'm looking for a lein plugin that can deploy binaries directly to github releases (similar to <https://github.com/aktau/github-release>) any ideas?; Done see any at <https://github.com/technomancy/leiningen/wiki/Plugins>; Dont*"
50,1498406210.347014,Margaret,seems like something you could do with `lein shell` if it doesn't need to be cross platform <https://github.com/hyPiRion/lein-shell>
51,1498428499.650461,Alishia,"guys, I’m struggling to make my own flat tail call, can you guys give me some enlightenment ? 

```
(defn flat
  [[h &amp; t :as list]]
  (cond
    (empty? list) nil
    (sequential? h) (concat (flat h) (flat t))
    :else (cons h (flat t))))
```"
51,1498428632.657464,Margaret,"are you aware that clojure never optimizes tail calls?; generally with list processing, you don't want to use recur (which acts like an optimized tail self call) but instead make a lazy-seq, which works with your current code if you wrap the else `(lazy-seq (cons h (flat t)))`"
51,1498429419.698436,Alishia,"&gt; are you aware that clojure never optimizes tail calls?
yeah, but the loop-recur ( looks like uses go-to ) can help me with that, isn’t ?"
51,1498429487.701686,Margaret,"you could use recur, but that tends to be clumsy for sequences"
51,1498429496.702065,Alishia,yep
51,1498429503.70243,Margaret,especially with a function that has a tree call structure
51,1498429643.709882,Alishia,what you mean by tree call structure ?
51,1498430409.750922,Margaret,"every call leads to 0 or more self-calls; as opposed to 0 or 1, which is linear, 0 or more means you end up with a tree of calls; and a linear series of calls is neccesary for tail call  -you can't have two tail calls; you can force it by adding a state accumulator which makes the code more complex and moves data out of the stack and into the heap"
51,1498430573.759486,Alishia,"I see; yeah; correct me if I’m wrong, but all tail call function they have some kind of accumulator, isn’t ?"
51,1498430658.763796,Margaret,not always - but it's very common; actually I think a tail call function with no accumulator would be pretty weird
51,1498430716.76659,Alishia,i can’t see
51,1498430721.766851,Margaret,but I could see it for eg. something that repeatedly accesses a resource and eventually returns a result
51,1498430722.766896,Alishia,"yeah; clojure is not lazy by default, like haskell right, how the lazy works on clojure , `(lazy-seq (cons h (flat t)))`"
51,1498430873.774631,Margaret,right - but many functions are lazy
51,1498430874.774687,Lucy,Lazy is only there when you don't want it to be &gt;.&gt;
51,1498430875.774744,Margaret,including concat
51,1498430887.775312,Lucy,"&gt; trying to print something
&gt; LAZY SEQ HELLO"
51,1498430923.77704,Margaret,"that's only if you call str - just printing won't do that; ```+user=&gt; (str (map inc (range 10)))
""clojure.lang.LazySeq@c5d38b66""
+user=&gt; (println (map inc (range 10)))
(1 2 3 4 5 6 7 8 9 10)
nil
```; and if you need to build up a string, `pr-str` will help ```user=&gt; (str ""fixed: "" (pr-str (map inc (range 10))))
""fixed: (1 2 3 4 5 6 7 8 9 10)""
```"
51,1498431116.786882,Lucy,Well how-about-that; learn something every day
52,1498463625.879593,Dani,yada seem to have implemented something themselves <https://github.com/juxt/yada/blob/master/ext/oauth2/src/yada/oauth.clj>. Maybe its time we see a new repository appearing under your github account :wink:
53,1498465653.319506,Corine,"Does anyone know how to store state in one instance of a simulation in `clj-gatling`?

/edit Answer from the docs:

<http://i.imgur.com/SISAxzT.png>; Hmm looks like the `context` is passed along in every step. Hopefully I can just assoc.; That’s not it. `assoc`ing to that context is not persistent; over steps; One solution is to keep a separate database, but it is not very clean; Aaah you can send the context forward; Return `[result context]`; Next question: in `clj-gatling` my response times are way longer than they actually are. It seems like it is not only counting the time my request takes, but also the time it takes to run on my computer. Is there a way to fix this?; When I time the request

```
(defn login-request [ctx]
  (go
    (time (let [{:keys [status] :as res} @(http/get ""<https://www.google.com>""
                                                    {:headers {""Accept"" ""text/html""}})]
            [(= status 200) (assoc ctx :state ""state"")]))))
```

It prints “Elapsed time: 200ms”.

But the end result in the Gatling reports states it lasts longer than 1200ms."
54,1498474517.287582,Dani,why is it wrapped in a go block? Is clj-gatling designed around this; cause you're doing a blocking call with @?
53,1498478116.971576,Corine,"Well spotted; If I don’t wrap it in a go-block the same problem occurs; I think if I use ```(defn- http-get [url _]
  (let [response (chan)
        check-status (fn [{:keys [status]}]
                       (go (&gt;! response (= 200 status))))]
    (http/get (str base-url url) {} check-status)
response))``` like in the example things will work.; <https://github.com/mhjort/clj-gatling-example/blob/master/src/clj_gatling_example/simulations.clj>; Okay not using a go block works!; This works:
```
(defn login-request [ctx]
  (let [check-result (fn [{:keys [status]}] (= status 200))]
    (http/get ""<https://www.google.nl>""
              {:headers {""Accept"" ""text/html""}}
              check-result)))
```

No problem :slightly_smiling_face:

Up to 4000 users"
55,1498487538.943465,Heike,"How can I refer to a var inside ns1 when the macro defined in ns1 is called from ns2?
```
(ns ns1)

(defn a-fn* [] ""hello"")

(defmacro a-marco []
  `(defn a-fn [] (a-fn*)))

(ns ns2)

(ns1/a-marco) ;=&gt; Can't refer to qualified var that doesn't exist
```"
55,1498487803.054933,Kareen,"that's going to work; I don't believe you see that error message on a fresh repl, you must have some stale state; also that macro is slightly wrong, should be ```
(defmacro a-macro [] `(defn ~'a-fn [] (a-fn*)))```; needless to say macros like that are discouraged in clojure"
55,1498488101.177801,Viva,"I'm playing with an event sourcing/CQRS style system in Clojure. It involves some number of load-balanced app servers. My idea is to have local in-memory caches, and then ""catch up"" by applying pending events before any read operations.; I'm trying to avoid having any extra pieces like a message queue; does that seem sane?"
55,1498488235.233575,Heike,"<@Kareen> It worked, with the unquote-quote. But now I'm pretty discouraged."
55,1498488296.25901,Kareen,"generally, macros that inject global names into a namespace are not idiomatic in clojure; a slightly better version would be e.g. ``` (defmacro a-macro [name] `(defn ~name [] (a-fn*)))``` but still, this doesn't look like a very useful macro"
55,1498488377.293664,Nicki,"they have their uses, probably finding out what is the goal is a step to take before judging something as not idiomatic"
55,1498488378.294149,Kareen,"why would you intern a var in a namespace that just delegates to a var in another? just refer that one directly; coming off as judgmental was not my intention, if that's how it came across"
55,1498488472.333925,Otha,"```
#'ns1/a-marco
```"
55,1498488528.358112,Heike,"delegating is part of if, passing some variables, but not all is the other half (something like partial, but on macro level); I couldn't use `partial` because what's passed might be an atom that needs to be derefed later.; Needless to say my example was stripped down to the bare minimum to illustrate the problem I was having. :slightly_smiling_face:"
56,1498493447.457461,Jodie,"Wondering what people do for translations in their application? The key based stuff puts me off (<https://translation.io/blog/gettext-is-better-than-rails-i18n>), and I'd like to use industry-accepted systems (PO, XLIFF, MessageFormat). Doing this for cljs &amp; clj."
57,1498495274.155794,Cary,"How can I extend a type, like `java.util.HashMap` to support `conj`. Which is the protocol for that?"
57,1498495377.193644,Kareen,you can't in clojure; clojure implements its basic operations in terms of interfaces not protocols
57,1498495516.245515,Willow,here's how it was done in the priority-map <https://github.com/clojure/data.priority-map/blob/master/src/main/clojure/clojure/data/priority_map.clj#L255>
57,1498495598.27618,Kareen,"right, you can do that if you're in control of new types but it's simply not possible to retrofit on existing types like `java.util.HashMap`; (and even it it could be possible, `conj` is defined as an operation on persistent colls, so on mutable ones it would be breaking its contract)"
57,1498495772.342841,Cary,"okay, so If I want to wrap something, for example `Array[ResultSet]` to vector of map. I can't just extend-type, I should iterate it.; thanks for help!"
58,1498497790.098995,Margaret,"<@Cary> you could define a multimethod which is identity for vector of hashmap, but uses `into` to populate clojure datatypes if it gets arrays and java.util.HashMap"
59,1498500219.028593,Roger,"Hi all, I am trying to load a keystore file in clojure:; (let [a (try (java.io.FileInputStream. keyObjectFile)
                  (catch Exception e (println (str ""1caught exception: "" (.getMessage e)))))]
          (println a)
          (try (.load keystore a)
            (catch Exception e (println (str ""2caught exception: "" (.getMessage e)))))); but I am getting: java.io.FileInputStream cannot be cast to java.security.KeyStore$LoadStoreParameter"
59,1498500257.043186,Delana,"<@Roger> 

```
(defn load-key-store [keystore-filename keystore-password]
  (with-open [is (<http://clojure.java.io/input-stream|clojure.java.io/input-stream> keystore-filename)]
    (doto (java.security.KeyStore/getInstance ""JKS"")
      (.load is (.toCharArray keystore-password)))))
```; works great :+1:"
59,1498500301.06011,Roger,mm i do not have the keystore-password; i need only the file
59,1498500356.082003,Delana,check the javadoc of `java.security.KeyStore/getInstance` maybe there’s a method that doesn’t need a password?
59,1498500429.109603,Roger,"actually, the load does not need a password"
59,1498500438.113138,Viva,the password can be null i.e. nil
59,1498500801.24821,Roger,"can I set something like:; ```(defn load-key-store [keystore-filename]
  (with-open [is (<http://clojure.java.io/input-stream|clojure.java.io/input-stream> keystore-filename)]
    (doto (java.security.KeyStore/getInstance ""JKS"")
      (.load nil))))```; ????"
59,1498500816.253801,Viva,sure; or you could use the `defn` from above and just call `(load-key-store filename nil)`; then you won't have to change it when you *do* have a password on the keystore
59,1498500895.282488,Roger,ok perfect I am gonna try and let you know what happens!!!
60,1498502734.977682,Roger,"mmm now I have a problem when I put in the jetty configuration the Keystore object it send me this error in the browser; SSL_ERROR_NO_CYPHER_OVERLAP; in jetty I put; ``` :keystore (load-key-store ""filename"") ```; and send me that message; but if I put the path it works,.; ``` :keystore ""path to file"" ```; any idea why this is happening?; :cold_sweat:"
60,1498503182.144206,Rebeca,it means the ssl server and your browser are unable to agree on a cipher suite; which is likely due to using an out dated version of either
61,1498505247.891609,Viva,BTW I would strong recommend *against* doing SSL termination in Jetty; it's much better to do it with a reverse-proxying load balancer; e.g. NGINX or an ELB in AWS; you can do SSL termination in Jetty just fine but it just doesn't seem worth the effort when other tools do it better
62,1498505891.112164,Viva,"if you really really really need one host to serve up HTTPS from a single Java process, then sure"
61,1498505904.116869,Viva,"otherwise you're probably already deploying your app behind something that can do SSL termination; or you should be; sorry, <#C03RZGPG3|off-topic> and uninvited advice; but if you're developing a web app in Clojure, trying to set up SSL in Jetty is probably pretty orthogonal to the real problems you're trying to solve"
61,1498506558.33777,Roger,yeap!!! actually jetty is working well for what I need!!!; maybe there are other complex things which are not supported or they are better with other server!
61,1498506652.369775,Viva,it's more about *not* doing it; when you don't have to
63,1498508056.864418,Lucy,"So what resources exist for learning deployment? My app is Clojurescript with a Clojure REST api, I have a dedicated ""server dude"" but I don't know that he'll know what to do with me. I'm assuming for Clojurescript I'd just NGINX-up the html and js file that makes the app go round, and for clojure I guess I could just run my Compojure rest api, but that leaves the question of how tf do I load balance that and etc.

I have a ton of questions about this, so if anyone has a clojure/script deployment bible, smack me with it"
63,1498508241.928879,Daniell,"<@Lucy> I think the answer is “the same way you’d do any JS / JVM combination web app” really — load balancing etc, and most of the deployment considerations, aren’t Clojure-specific. I know that doesn’t help but…"
63,1498508343.963067,Viva,<@Lucy> your Compojure rest API should be able to serve the HTML and compiled cljs
63,1498508352.96614,Daniell,"I can tell you what we do at World Singles: we host the HTML and JS on S3 and serve that up through Amazon (using their CDN, DNS, etc) and the Clojure code gets wrapped up as uber JAR files and deployed to a bunch of servers and spun up with `java -jar` via scripts/services, and proxied via Apache, and F5 load balancers etc.; We have a separate deployment chain for front and back end components — since they are actively developed on different schedules, by different teams."
63,1498508448.999786,Viva,"ah, my client/server (i.e. cljs/clj) code is all in one uberjar"
63,1498509037.206014,Lucy,"<@Viva> some of us don't have the same kinda foresight lmao; Developing one project, oh - let's make a rest api, oh, now they're both gigantic; and here we are"
63,1498509571.392284,Viva,":slightly_smiling_face:; every project starts out fresh and beautiful, and then reality hits; At least it's not a Clojure uberjar that starts up Jetty with an embedded JRuby on Rails *and* Spring web app loaded from precompiled WAR files.; where the Rails app calls the legacy Spring app to provide a REST API :slightly_smiling_face:; and the Clojure code is creating DAO objects to be loaded by the Spring app via dependency injection; all in one process!"
63,1498509753.454745,Hugo,That sounds terrifyingly specific.
63,1498509769.460073,Viva,"I mean, just a hunch, but I think a project like that would be pretty crazy.; it would be even *worse* if the Spring app only communicated via SOAP"
63,1498510069.562686,Johanna,now i’m super curious to know explicitly if you’ve had to work on such a thing and how it came to be
63,1498510159.593778,Viva,"you should be :upside_down_parrot:; I can make up more totally hypothetical aspects too; like if you couldn't instantiate classes like (Foo.) but instead had to look them up by name every time, and the bulk of the code was interop requiring lots of this sort of thing; or static method invocations; without being able to do (Foo/bar); that would be silly; in such a case, it would also be helpful to know how to get a Java enum value without being able to reference classes directly; `(.invoke (.getMethod (get-class system class-name) ""valueOf"" (into-array Class [String])) nil (into-array String [value]))`; for reference, just in case I or anybody else ever need that :slightly_smiling_face:"
63,1498510575.738634,Margaret,wow…
63,1498510603.748589,Viva,classloader problems suck
64,1498512539.357645,Elvin,"is there any kind of string function that works with named parameters in a map?  like python's string formatting (3+)?; `(format ""hello {:foo}"" {:foo ""world""})`; or something"
64,1498512639.387927,Margaret,that’s close to how selmer does templates <https://github.com/yogthos/Selmer>
64,1498512649.390703,Giovanna,Selmer is kind of like that <https://github.com/yogthos/Selmer>; Jinx
64,1498512671.397433,Elvin,"hahahaha, nice"
64,1498512672.3976,Margaret,maybe we should call it `juxt`
64,1498512719.411566,Elvin,"lol, nobody is gonna be cool with me pulling in a whole template rendering library for the string parser"
64,1498512898.461893,Margaret,I wonder if something similar could be hiding deep in `clojure.pprint/cl-format`
64,1498512921.468575,Elvin,"I should probably just use format and not be a lazy person.  I dont have a special use case, I just margianlly prefer the syntax"
64,1498512936.473035,Giovanna,There's a _lot_ of stuff hidden in cl-format
64,1498512943.475049,Margaret,insane stuff
65,1498513474.621538,Lucia,"tjtolton: `(format ""hello %s"" (:foo m))`?  what am i missing?"
65,1498514426.872799,Barbera,"we just released the library we wrote for AWS Step Functions, in case anyone’s interested: <https://github.com/uwcpdx/stepwise>; readme is incomplete but being worked on"
65,1498515264.071263,Ava,"tjtolton, it's pretty easy to write that if you (or a dependency) is already including instaparse or cljr-antlr (check `lein deps :tree`). See this for a minimal example: <https://github.com/philipsdoctor/DST>"
65,1498515586.142241,Elvin,bja: neat!  good suggestion.  I'll take a look tomorrow morning
66,1498527312.061399,Eugenie,"Is there a nice way to get specific elements, by index, from a vector, returning a new vector?"
66,1498527407.073742,Viva,`(mapv #(get v %) indices)`
66,1498527414.07477,Eugenie,Thanks
67,1498528429.204089,Cristopher,or even just `(mapv v indices)`
67,1498528510.214581,Viva,"that won't return a vector; oh sorry; I misread that as ""map""; good catch!; vectors are functions of their indices; I forgot about that"
68,1498531742.609595,Loretta,"yes, just have to be careful with index out of bounds with the `(mapv v indices)` version. Can filter out `nil`s from the `get`-based version and not have to worry about exceptions. Unless you want an exception with a bad index, in which case the vector-as-a-function solution works perfectly"
69,1498554429.115665,Sherrie,Do we have some nice tools for remotely debugging JVMs? I have a Clojure app thats leaking memory
69,1498554948.247677,Shameka,"<@Sherrie> i've used yourkit with great success. there is also visualvm which is a lot freer, but i haven't used it"
69,1498555143.297266,Sherrie,"<@Shameka> , I’ll check ‘em out, thanks"
68,1498557180.811852,Adena,"A quick question: Clojure supports closure where the closure has access to data defined in the parent function.; On the other hand, you can re-assign a new value to an existing variable. And this variable might be visible to the closure.; Doesn’t this cause data race?; Isn’t this some kind of mutable shared state?"
68,1498557645.93356,Otha,"if your data are atoms, why not?"
68,1498558302.095239,Adena,Suppose that they are atoms.; I see. In this case it won’t be data race.; But it will still be a shared mutable state (but in a safe way); Is that correct?
68,1498558489.137662,Otha,"well, more or less — yes; You just have to remember what atoms really are; and no, there won't be data race (at least there shouldn't be :)"
70,1498559140.283392,Lucio,Hey! Could anyone recommend me a great Clojure book for someone who is new to the language but mostly familiar with functional programming? I have already read Clojure for the Brave and the True
68,1498559380.336369,Senaida,"I purchased Living Clojure and thought it was great. I've also heard good things about The Joy of Clojure, but as a more advanced follow-on book"
70,1498559897.448191,Lucio,Thank you!
68,1498560371.547485,Wilfredo,"The Joy of Clojure is advanced, and I’m not sure if you need that much info upfront. I maintain that Programming Clojure by The Pragmatic Bookshelf is by far the best resource available, and written in a style that is true to the language. There is a new 3rd edition coming up, see <https://pragprog.com/book/shcloj3/programming-clojure-third-edition>."
71,1498560918.660905,Ruben,`Clojure Applied` is also one to look at
70,1498561365.759722,Lucio,<@Wilfredo> thank you! How advanced are we talking about here with regard to the Joy of Clojure?
68,1498561398.766583,Wilfredo,"You should have written something in the language already to really benefit from the book.; I wouldn’t rush into it, personally - I’m into my second year doing Clojure commercially after years of FP in Erlang and hobby toying around with Clojure/Scala, and I’ve yet to seriously touch the book. I find that actually writing code is more useful than reading about it - which, admittedly, is much easier to do when you’re paid to do it!; This is also the reason why I like Programming Clojure so much - the book doesn’t faff around and  goes straight to the point, all the while (indirectly) teaching you all the good habits required for writing nice, clean, composable Clojure code."
68,1498561590.80741,Lucio,<@Wilfredo> I’ll definitely get myself a copy then! Have you read the ebook? Or is there a way to get a paperback?
68,1498561656.821274,Wilfredo,"I have both the paper and the electronic version of the second edition, which covers version 1.3. Personally I would get the beta ebook for the 3rd edition and just read that, all PragProg books are super easy to read on screen and very well hyperlinked, plus it’s nice to have a bit of color as well."
68,1498561792.848904,Lucio,"<@Wilfredo> Ok, thanks a lot for the advice"
68,1498561892.869547,Wilfredo,"Np. I also recommend <http://4clojure.com|4clojure.com> if you haven’t come across that already, it’s a good way to learn an idiomatic way of solving isolated problems using the standard library.

And above all, try to get a job with it. That’ll boost your understanding much quicker than any book ever can."
68,1498561920.875362,Lucio,"<@Wilfredo> I am actually pushing to use clojure on a new project at my current job; thus my interest; I didn’t know 4clojure; thanks!; Out of curiosity, what has your experience been going from Erlang to Clojure <@Wilfredo> ?; It’s one of those languages (Erlang) that is on my “to learn” list but never quite got around to doing it; And did you have a good time with Erlang?"
68,1498562254.944063,Wilfredo,"Clojure is a much better language. Erlang is more interesting from a concurrency perspective than an FP one, since the FP there is completely incidental (it was deemed necessary to implement the platform) rather than intentional. Both teach you something new, so if you feel like learning something else after Clojure I can recommend it. I enjoyed my time with Erlang but after 4+ years of it I think I’ve exhausted the platform, and I personally don’t think it’s the right fit in 90% of modern distributed/concurrent system development as a lot of the big selling points (failure handling, concurrency etc.) have been implemented outside of the VM these days and I just think that’s the right way to do it instead of having to think about these explicitly within a service."
68,1498562913.079402,Brande,"hmm, seems that eastwood doesn’t like defrecord forms produced by [org.clojure/clojure “1.9.0-alpha17”]"
72,1498563075.114967,Kareen,what's the issue?
73,1498564049.323714,Ayesha,"Hello! Can anyone help me understand the use-case of defrecord? Everytime I write a code, it is usually enough with just a function, but I'm afraid I'm missing the good parts of it!"
73,1498564096.333211,Corine,"Joy of Clojure is fun, and from a practical point of view I loved Learning ClojureScript, but that’s about ClojureScript"
73,1498564109.336101,Brande,"```== Eastwood 0.2.4 Clojure 1.9.0-alpha17 JVM 1.8.0_131
Directories scanned for source files:
  src test
== Linting lol.core ==
Entering directory `/private/tmp/lol'
src/lol/core.clj:3:1: suspicious-expression: condp called with 3 args.  (condp pred test-expr expr) always returns expr.  Perhaps there are misplaced parentheses?``` where source is ```0% cat src/lol/core.clj
(ns lol.core)

(defrecord Lol [])```"
73,1498564152.345091,Marx,"<@Lucio> I’m planning to learn Erlang too. Well, ok, I’ll probably learn Elixir instead, but that’s derived from Erlang."
73,1498564155.345784,Corine,"When running around 1000 simultaneous clj-http/get requests with `:async? true` I get this error:

```Exception in thread ""async-dispatch-6"" Exception in thread ""async-dispatch-5"" java.lang.OutOfMemoryError: unable to create new native thread```

Is there a way to circumvent this?"
73,1498565024.546772,Lucio,<@Marx> yes Elixir looks interesting!
73,1498565129.572236,Berry,<@Daniell> : is it public if your team uses GAE or AWS ?
73,1498565765.727205,Brande,"hrm, having hard time trying to teach eastwood to ignore defrecord; ```(disable-warning
 {:linter :suspicious-expression
  :for-macro 'clojure.core/defrecord
  :reason ""Clojure 1.9 defrecord output causes false warning""})``` doesn’t seem to work"
73,1498565876.755898,Pearlene,what's the proper spelling for a new version of `foo-bar`? `foo-bar2` or `foo-bar-2`?
73,1498566188.834079,Brande,"hmm, not actually clojure 1.9 problem <https://github.com/jonase/eastwood/blob/eb58d6fb2628e1d178d4b8d2c46d4788b2a20094/cases/testcases/suspicious.clj#L8-L11>; so the actual use for a defrecord without fields was a `com.stuartsierra.component`"
73,1498566641.952608,Elvin,"gfredericks: seems like it would be the former in most cases; `foo-bar-2`, I think, more strongly implies it was intended to be a distinct symbol with a similar naming scheme, while `foo-bar2` is more clearly a mutation of the original `foo-bar`"
73,1498566832.004555,Beulah,is there a spec for the s/describe of a spec ?
73,1498567025.056551,Pearlene,and what about `foo*`? `foo*2` or `foo2*`?
73,1498567677.240159,Elvin,"again, my preference would be appending the mutation to the original symbol unmodified.  so `foo*2`

this strategy will help you out if you ever need to grep your service for any instances of that function, in any versions that exist"
74,1498567704.248126,Viva,"`foo-bar'`; that's how I've usually done it; read as ""foo-bar prime""; and `foo-bar''` etc."
73,1498567752.262481,Elvin,"for instance, if you did ctrl + f `foo-bar*` you would get instances of `foo-bar*` and `foo-bar*2`"
74,1498567762.2657,Margaret,"mahdix: atoms won't race if you use them correctly: that is, if you use `swap!` to update their value, and don't have side effects or `deref` other mutable containers in the function you pass to `swap!`."
73,1498567769.267776,Elvin,"if you altered the symbol in some other way, that trick wouldnt work; obviously <@Viva> is using the same strategy, just with prime ticks instead of numbers"
74,1498567936.31785,Margaret,"erwinrooijakkers: the correct way to deal with this is to use a queue or channel to line up requests, and then use a fixed number of threads to do the work on that queue or channel. The claypoole library makes it easy to create a pool that works this way and call it the same way you would use futures of pmap normally."
74,1498567988.333776,Pearlene,"<@Viva> this is specifically re: the new guidelines from rich etc. regarding avoiding breaking changes, which explicitly recommended integers"
74,1498568006.339101,Margaret,"of course you can also increase your max memory usage parameter, but there's still always a limit beyond what your hardware can support, and then you need to control thread creation / usage"
74,1498568020.343192,Viva,I haven't seen that
74,1498568055.353747,Pearlene,<@Viva> <https://www.youtube.com/watch?v=oyLBGkS5ICk>
74,1498568158.385929,Viva,"cool, thanks!; I'd love to use spec, but I'm not brave enough to jump onto an alpha version of Clojure itself"
74,1498568197.398471,Pearlene,"I guess the slides in that talk probably indicate an opinion about `foo2` vs `foo-2`; ah ha! the slides have `foo-2`; which was my preference anyhow; stu halloway was in town last week and made a big deal about ""alpha"" merely meaning ""subject to change"" and not ""low quality"" or any of the other associations"
74,1498568384.457376,Beulah,yeh I've been using Spec for a couple of projects &amp; its great!
74,1498568391.459608,Margaret,"yeah, clojure alphas tend to be quite good (as long as you are willing to rewrite code that uses the new features)"
75,1498569309.770744,Laverna,`real-foo` :stuck_out_tongue:
74,1498569710.912842,Pearlene,<@Laverna> and `real-real-foo` for the next one? 
74,1498569962.004438,Laverna,yes; only then can you go `real-real-foo-2`; after that its `real-foo-final` and that's all the `foo` you need
74,1498570253.115573,Pearlene,Okay phew
76,1498570851.344101,Nilda,Is it good practice to use `(get a-collection :a-key)` over `(:a-key a-collection)`?
74,1498570896.361164,Margaret,I use get only if the keyword is in a bound name and not a literal
76,1498570905.364784,Margaret,"when it's a literal, it's always clear what the keyword is doing"
76,1498570960.386652,Nilda,"Whereas if it’s in a bound name, it’s ambiguous whether it’s a function, keyword or what-have-you. Gotcha."
76,1498571222.490276,Beulah,"eh I use keywords, vectors and maps as functions - because they're all functions"
76,1498571234.494909,Nilda,Fair enough
76,1498571276.512162,Beulah,so what if it might seem ambiguous - if it works and you've tested it then it's clear by the fact that they're first in the list that they're supposed to be a fn
74,1498571321.530233,Sonny,<@Beulah> you should only vectors/maps as functions when they are guaranteed to be non-null (because otherwise you’ll get an npe)
76,1498571327.532767,Margaret,"<@Beulah> my concern is readability and refactorability, I like to use constructs that reduce ambiguity when they are available and they don't impede other development goals"
76,1498571383.555055,Beulah,"<@Sonny> naturally, but then anything could be nil and cause a NPE - that's part of testing &amp; maybe Specing"
76,1498571401.562597,Sonny,"no, using a keyword as function (or get) will not have that behavior"
76,1498571415.568069,Margaret,"but using get directly is free, and solves the issue"
76,1498571415.56817,Beulah,"I don't think it affects readability at all, actually it's more clear sometimes"
76,1498571426.572699,Margaret,I strongly disagree
76,1498571436.576919,Viva,I only ever use keywords like `(:foo bar)` when it's exactly like that: a keyword literal and a very simple form; if I want to get a default value I use `get` like `(get bar :foo :default)`; never `(:foo bar :default)`
76,1498571555.62592,Nilda,It’d certainly be easier to see what `(get a-collection unknown-thing)` is doing as opposed to `(unknown-thing a-collection)`
76,1498571605.645896,Viva,:point_up:
76,1498571632.656992,Beulah,why is your unknown-thing unknown ?; just ensure it's a keyword
76,1498571648.663609,Viva,because we aren't using Haskell
76,1498571670.672467,Beulah,"no we're using a better language, with a REPL and Spec"
76,1498571676.674892,Viva,:stuck_out_tongue:; Clojure lets you inspect the state of things *after* you run your code; which is nice
76,1498571791.723267,Beulah,"running a compiler (which is a program) to infer what your program _would_ do if run, is no more powerful than simply running your program"
77,1498573023.2601,Elvin,"huh, well.  how about that.  my preference differs.; `real_foo_final_fixed_fixed_for_real_this_time`"
77,1498573391.421977,Kenia,"<@Sonny> out of curiosity: is there a general convention for the naming of `clojure` repos in github? I see lots of `data`. `math` but also some more exotic names, just got me thinking :smile:"
78,1498573860.634977,Roger,"Hi I have a problem with ssl in jetty, I implemented https with an issued certificate by a recognized institution however, I am receiving in firefox this message: SSL_ERROR_NO_CYPHER_OVERLAP"
77,1498573931.667497,Roger,"in chrome it works well; but in firefox it does not work, it shows a yellow message"
78,1498574042.716895,Roger,any idea about how to fix that in Clojure?
78,1498574332.845418,Viva,<@Roger> Jetty and Chrome do not have any ciphers in common
77,1498574348.852483,Viva,<https://confluence.atlassian.com/fisheye/configuring-ssl-cipher-suites-for-jetty-414188522.html>
78,1498574401.875927,Terra,<@Roger> also look here: <https://stackoverflow.com/questions/41626616/cant-connect-to-jetty-9-server-via-ssl-with-firefox-50>
78,1498574445.895946,Viva,"but it's worth repeating: asking ""how do I fix the SSL cipher suite in Jetty"" is like asking ""what's the best shoe to hammer a nail?""; Put something that's better at SSL in front of your app.; Don't do SSL in your embedded Jetty."
78,1498574543.939589,Roger,I understand that there are better ways to do that <@Viva>; but in this application i cannot change or implement other things; I have to adjust to jetty; :disappointed:
77,1498575416.339065,Sonny,"carocad: there are just a handful of top level “categories” used for contrib libraries - algo, core, data, java, math, test, tools. And then there are other things as well (web sites like clojure-site and clojurescript-site), clojurescript, clojure clr and clr ports"
79,1498576427.814503,Lucy,"This may sound like a strange question; But would it be possible in any way to observe Clojure as it runs; so that one could track all evaluated code; and implement a way to say; EVERYTHING UP TO THIS BIT WORKS; b/c that would fix like half of what makes clojure so broken, the dumb error messages"
79,1498576571.878477,Viva,"yes, you want a debugger; with breakpoints; I'd recommend IntelliJ IDEA with Cursive"
79,1498577381.247343,Daniell,<@Berry> we use a mixture of traditional data center and AWS at the moment. ; <@Viva> we're on alpha 17 in production. High traffic. Large codebase. Heavy use of spec. 
79,1498577560.331462,Elaine,<@Lucy> for your use case I would go for `clojure.tools.trace` which allows you to print out everything that is going on in a namespace or for a var ; <https://github.com/clojure/tools.trace/blob/master/README.md#example-usage>
79,1498577640.367389,Lucy,"<@Viva> I don't need a debugger, I'm plenty comfy in Emacs, I'm just wondering how dead-simple it'd be possible to make troubleshooting"
79,1498577658.375319,Viva,but you described a debugger with breakpoints; so
79,1498577666.378994,Lucy,I suppose it's similar; but it's less about defining breakpoints; and more about deducing where the issue is exactly programmaticallyy
79,1498577698.393061,Viva,stack traces get you most of the way there; the trick is defining the starting point of tracing executing
79,1498577739.411355,Lucy,"It'd probably be something you defined in the code, which may be cumbersome; (trace this-ns)"
79,1498577783.431071,Viva,well as <@Elaine> suggested you can trace the fns in a namespace; `(trace-ns some.problematic.namespace)`
79,1498577803.440137,Lucy,I'm gonna write the best damn debugger that ever did darn dun existed
79,1498577825.449523,Viva,but you have to specify each namespace and/or function that you want to show up in the trace
79,1498577865.467135,Elaine,Cider has trace built-in if I remember correctly so you might not even need to evaluate that at the repl
79,1498577938.499891,Jaqueline,<@Lucy> did you try <https://github.com/razum2um/clj-debugger> ?
79,1498577951.505843,Lucy,"I haven't tried anything, it was just an idea I had; But this actually looks like almost exacttly what I wanted; so maybe I'm late to the party"
79,1498578051.551003,Viva,Oh? That's reassuring! Thanks.; I might give it a try after all.
79,1498578086.566898,Earl,I would appreciate if someone can guide me on reading data from AVRO file in clojure?
79,1498578134.588013,Viva,<https://avro.apache.org/docs/1.2.0/api/java/index.html>; Just use the Java libs
79,1498578144.593133,Lucy,"Well, never used hadoop, but slurp it in and go from there?"
79,1498578257.643567,Otha,<@Earl> there are also several clojars <https://clojars.org/search?q=avro>
79,1498578381.6988,Earl,<@Otha> <@Viva>  thanks
80,1498579126.037271,Daniell,"FWIW, we’ve been using Clojure Alphas in production since 2011 (1.3 Alpha 7 or :sunglasses:. I think we’ve had one “bad” build in all that time (degraded performance). We happened to skip 1.5.0 in production (the only memory leak I can recall) because our release schedule fell in such a way that we went from a solid prerelease of 1.5 directly to 1.5.1."
81,1498580631.676865,Brandy,"re: debugging / finding the source of issues, i find an approach like stu’s here to be the easiest &amp; most widely applicable: <http://blog.cognitect.com/blog/2017/6/5/repl-debugging-no-stacktrace-required>"
81,1498583317.752352,Margaret,"Also - an underrated approach is to experiment in the repl, but reify those experiments into unit tests. I wrote a library that makes it easier to take data you have in your repl and inject it into tests <https://github.com/noisesmith/poirot>; experimenting in the repl helps today, and is great if you are never going to edit or refactor your code, tests are great to have if you think your codebase might ever change"
80,1498583678.892357,Elfreda,"any jdbc experts know why `(j/execute! pg [""SET LOCAL app.session_id = 'x'""])` works but `(j/execute! pg [""SET LOCAL app.session_id = ?"" ""x""])` yields a BatchUpdateException “was aborted” with syntax error at the column with the `?`?"
81,1498583700.900878,Elfreda,"the exception message shows the interpolated query, which seems to have the right ‘x’ in it"
81,1498583739.916641,Otha,<@Margaret> looks promising! how about publishing it on clojars?
81,1498583756.923416,Margaret,I thought I had; I probably need to add the info to the readme; <https://clojars.org/org.noisesmith/poirot>
81,1498583846.959235,Otha,thanks!
81,1498583863.966112,Margaret,"it's still pretty young, but good enough to be useful, in my experience at least"
81,1498583914.986207,Otha,"BTW, TIL about Reader Conditionals! thanks again!"
81,1498584077.051254,Margaret,"<@Otha> I don't think I've pushed the cljs support to clojars yet, but you can get it via `lein install` - I haven't used the feature enough to make it feel publishable (I work on clj code a lot more)"
82,1498586752.159483,Barbera,"afaik clojure 1.9 doesn’t muck with many internals in a risky way, too. mostly adding features"
83,1498586898.218218,Adella,Hey I am new to Clojure and I was wondering if you guys could share some of your favorite resources for learning Clojure. I have already checked out Clojure For The Brave And True but I am learning Clojure for the purpose of eventually building React apps with clojurescript and reagent. Thanks!
83,1498587153.322455,Barbera,"i’m late to the using maps and vectors as functions discussion, but i don’t think anyone mentioned polymorphism. e.g. can be handy to have the option of passing a map or a function depending"
83,1498587318.389091,Margaret,sure - but the context was implying that it was always being used for lookup; and I'd definitely pass in :foo instead of #(get % :foo)
83,1498587424.432522,Barbera,"hmm, yeah maybe not as useful when expecting a map and passing a fn vs expecting a fn and passing a map(?)"
83,1498587874.618526,Lucio,<@Adella> check out my earlier message: <https://clojurians.slack.com/archives/C03S1KBA2/p1498559140283392>
84,1498589035.093809,Willow,"i highly recommend this book by alex miller <https://pragprog.com/book/shcloj3/programming-clojure-third-edition>; interesting code and examples, good narrative, and pretty comprehensive. It's made for new people. It also isn't scared of java so you'll have a good introduction to the host language if you're unfamiliar"
84,1498590896.820709,Lucia,FOO-DAMMIT!
85,1498593522.782462,Elfreda,"heh, wow, just remembered that `::keys` is new in clojure 1.9 - feels like i’ve been using that forever :stuck_out_tongue:"
85,1498594201.038453,Barbera,<@Elfreda> i hit that with `seqable?` the other day =)
85,1498595584.551221,Eufemia,"<@Margaret> this looks interesting. weve been having trouble with data in defs getting too large for tests (yay memory issues), wonder if this could help"
86,1498595699.593547,Eufemia,(referencing poirot)
86,1498595830.641988,Margaret,<@Eufemia> it might help - especially if you load the data locally in the test so that it gets cleaned up when that test exits...
86,1498595880.660418,Eufemia,ya that would be the idea.
87,1498598537.601567,Andra,"I’ve always found `tools`, `util`, etc. to be problematic namespaces--everything gets shoved in there. E.g. why does `java.util.Date` belong with `java.util.LinkedList`?"
87,1498599066.767938,Altagracia,Is there a difference between `(for [x l] ...)` and `(map (fn [x] ...) l)`?
87,1498599100.778275,Margaret,"not if the binding vector looks like that, no"
87,1498599105.779709,Altagracia,I.e. between `for` and `map` with one coll.
87,1498599126.786202,Margaret,"but for has some other tricks you can do with the binding vector, even with one coll"
87,1498599149.793599,Altagracia,"Ok, but apart from that these expressions do the same thing"
87,1498599164.797981,Margaret,"yes; ```+user=&gt; (take 10 (for [x (range) y (range) :while (&gt; x y)] [x y]))
([1 0] [2 0] [2 1] [3 0] [3 1] [3 2] [4 0] [4 1] [4 2] [4 3])
```"
87,1498599341.851107,Altagracia,"Ah, a misplaced `)` is responsible for the confusion. Thanks for the backup!"
88,1498601106.352072,Sonny,"what’s the question?; a profiler dump isn’t too helpful w/o the code; I’ve been using Java since before LinkedList existed. back then, the JDK was a lot smaller and no one anticipated how Java would grow. at the time, it seemed fine!"
88,1498608728.869178,Daniell,"<@Alena>’s question was posted at 4:08am Pacific: “Hi, I’m optimizing my clojure app. Here are results from jvisualmvm. Could you tell me, when clojure.lang.util.hash is invoking? Maybe it should be cached?” /cc <@Sonny>"
88,1498608829.884311,Sonny,"Hash is called when using a hashed data structure (either hash map or hash set). In some cases it is cached, depends on what is being hashed.; Both keys and vals are hashed, so consider what types end up in keys and vals of hash maps"
88,1498609319.956699,Daniell,(thanks Alex — hopefully they’ll see that tomorrow when they come back online!)
89,1498628018.237228,Zelda,"Hi,
How to understand `*` notation from <https://clojure.org/reference/java_interop>, specifically `(. Classname-symbol (method-symbol args))* or (. Classname-symbol method-symbol args)*`
vs:
```
user=&gt; (. clojure.lang.RT contains #{1} 1)
true
user=&gt; (. clojure.lang.RT (contains #{1} 1))
true
```; I am not sure about placement of `*` , it would seam that `(. Classname-symbol (method-symbol args*)) or (. Classname-symbol method-symbol args*)` is more natural ..."
89,1498628143.251643,Terra,"charlieroth: ClojureScript Unraveled is also good, especially for getting started with ClojureScript if you are an experienced programmer: <https://funcool.github.io/clojurescript-unraveled/>"
89,1498630498.550323,Daniell,<@Zelda> Looks like typos -- The section above has the `*` in the correct place.
90,1498636233.58649,Kalyn,timeline rumors about 1.9 anyone? :sweat_smile: can't wait :slightly_smiling_face:
90,1498651712.269794,Jutta,Feel like a Debian release 
91,1498659005.720047,Berry,"given the keys are 0-n, is transient-vector significantly fastedr than transient-hash-map ?"
92,1498659719.031078,Zelda,seancorfield: ty for confirmation. Should I send a pull request?
89,1498660196.245818,Kalyn,lol
89,1498660852.539377,Loretta,"I think this would qualify as a ""small change"" so see the relevant section here: <https://clojure.org/community/contributing_site> <@Zelda>"
91,1498660983.597956,Loretta,"<@Berry> significantly faster at what, specifically?"
91,1498661312.7458,Margaret,"one would assume conj!, since that's what transients are for; seems like an easy thing to test with criterium; ```+user=&gt; (crit/bench (let [v (transient [])] (reduce conj! v (range 1000))))
Evaluation count : 3435960 in 60 samples of 57266 calls.
             Execution time mean : 17.803731 µs
    Execution time std-deviation : 319.760540 ns
   Execution time lower quantile : 17.305732 µs ( 2.5%)
   Execution time upper quantile : 18.382921 µs (97.5%)
                   Overhead used : 1.572942 ns

Found 1 outliers in 60 samples (1.6667 %)
        low-severe       1 (1.6667 %)
 Variance from outliers : 7.7727 % Variance is slightly inflated by outliers
nil
+user=&gt; (crit/bench (let [m (transient {})] (reduce #(conj! % [%2 %2]) m (range 1000))))
Evaluation count : 292260 in 60 samples of 4871 calls.
             Execution time mean : 204.650986 µs
    Execution time std-deviation : 11.916923 µs
   Execution time lower quantile : 197.407687 µs ( 2.5%)
   Execution time upper quantile : 223.127690 µs (97.5%)
                   Overhead used : 1.572942 ns

Found 3 outliers in 60 samples (5.0000 %)
        low-severe       1 (1.6667 %)
        low-mild         2 (3.3333 %)
 Variance from outliers : 43.4448 % Variance is moderately inflated by outliers
nil
```; so the map with number keys version is ~ 10x slower"
91,1498661803.973126,Weston,for a size 1000 &lt;thing&gt;
91,1498661814.9778,Margaret,right; perhaps a smaller input would better represent real use cases
91,1498661837.988627,Weston,"my guess is that for vectors it will be O(1) no matter the size; well it's a bit of a generalisation, but you get what I mean"
91,1498661892.014323,Loretta,"""real use cases"" depends on the use case. that's why when someone asks ""which is faster, x or y?"" it's important to understand the use case"
91,1498661975.053773,Weston,indeed
91,1498662027.080445,Loretta,"also <@Margaret> , you are creating a persistent vector in your `conj!` for maps, and it's faster for your test scenario to use `assoc!` instead
```(c/bench (let [m (transient {})] (reduce #(conj! % [%2 %2]) m (range 1000))))
Evaluation count : 385800 in 60 samples of 6430 calls.
             Execution time mean : 157.793112 µs
    Execution time std-deviation : 3.521488 µs
   Execution time lower quantile : 154.508093 µs ( 2.5%)
   Execution time upper quantile : 165.003217 µs (97.5%)
                   Overhead used : 1.312303 ns

Found 3 outliers in 60 samples (5.0000 %)
	low-severe	 2 (3.3333 %)
	low-mild	 1 (1.6667 %)
 Variance from outliers : 10.9550 % Variance is moderately inflated by outliers
=&gt; nil
(c/bench (let [m (transient {})] (reduce #(assoc! % %2 %2) m (range 1000))))
Evaluation count : 515160 in 60 samples of 8586 calls.
             Execution time mean : 118.954362 µs
    Execution time std-deviation : 4.101911 µs
   Execution time lower quantile : 115.324719 µs ( 2.5%)
   Execution time upper quantile : 130.422397 µs (97.5%)
                   Overhead used : 1.312303 ns

Found 4 outliers in 60 samples (6.6667 %)
	low-severe	 4 (6.6667 %)
 Variance from outliers : 20.6386 % Variance is moderately inflated by outliers
=&gt; nil```"
91,1498662081.106957,Margaret,"I'm redoing the test creating the input outside the benchmark for that reason; every result, regardless of pre-making vectors, or size of input, is showing vectors significantly faster than number keyed maps though; and the ratios are consistent across input sizes, number keyed hash-maps take 8x as long, for both 20 element and 1000 element inputs; (8x as long using assoc! of coure, 10x using conj!)"
91,1498663671.83067,Zelda,TY. The edited source reads `*(_._ instance-expr (method-symbol args*))*` - so the `*` is there ... just not shown or we need to quote it :slightly_smiling_face:  `**` will help
93,1498666522.101703,Carter,"I have a test assertion like this:
```
(not (nil? pin-config))
```
Where pin-config is a non-empty map.
But the test is failing with: 
```
expected: (not (nil? pin-config))
 actual: (not (not true))
```; It looks like `(not (nil? pin-config))` is transformed to `(not (not true)` but then this is not evaluated to `(not false)` and then to `true`; Any suggestions on what I might be doing wrong?; nvm"
94,1498667339.435181,Cristopher,"roberto: unrelated, but `(not (nil? x))` == `(some? x)`"
93,1498667389.455396,Carter,"ah, thanks, I switched to `(complement nil?)`; switching to `some?` :slightly_smiling_face:"
94,1498668266.803742,Otha,"Is thery any kind of ""memoization"" library that supports an external in-memory storage backend?"
93,1498668297.815728,Viva,<https://github.com/clojure/core.memoize> is very flexible
94,1498668306.819374,Viva,"what does ""external in-memory storage"" mean? like Redis?"
94,1498668345.835117,Otha,"Yes, Redis is fine."
94,1498668379.848253,Viva,then <https://github.com/strongh/crache>
94,1498668387.85107,Otha,Thanks! Exactly what I look for!
94,1498668505.897397,Aurelio,"Anybody knows how to make figwheel load all builds or at least a specific one, when calling (start-figwheel) ?"
94,1498668910.057042,Viva,"sort of a general design question, but I'm trying to figure out how fine-grained certain events in my system should be; we have records that move through various states; and I'm trying to decide if I should have events for each possible transition, which would be a lot; or just one event that records the new status as a parameter; so `(defrecord ProjectApprovedEvent [project-id])` vs `(defrecord ProjectStatusChangedEvent [project-id new-status])`; or maybe the difference between `(defn approve! [project-id] ...) (defn reject! ...)` vs. `(defn update-status [project-id new-status] ...)`"
95,1498671343.033926,Carmelina,"I have a Ring application that works perfectly fine running on jetty when compiled with `lein ring uberwar` and runs locally with `lein ring server-headless` but when I compile with `lein ring uberjar` and use nginx-clojure 0.4.5 locally, it complains that it can't find `medley` in the classpath.; Googling the medley classpath error led to a comment that said that it was likely the result of using an old clojure version but I'm running 1.8 (nginx-clojure runs on 1.5.1 but I don't think that should matter); Can anyone help?"
95,1498671433.069053,Ava,<@Carmelina> have you tried `lein clean` (this can clean up stale classes and resolve weird problems from time to time); `lein clean &amp;&amp; lein ring uberjar`
95,1498671551.115334,Carmelina,I have and I get the same error; <@Ava> I can use the same jar in EC2 with same version of nginx-clojure and it will run :confused:; There must be something different between my environment locally and the remote one but I can't figure out what it would be
95,1498671718.181416,Ava,"I'm not familiar with nginx-clojure, does it setup a classpath for you (and possibly include a different version of clojure)? In the past, I've witnessed systems like that (Storm and Hadoop come to mind) that cause weird dependency issues; oh, yeah it does; can you try to add a :provided profile to your project.clj and put your clojure dependency on that"
95,1498671860.237724,Carmelina,I'll try that now
95,1498671934.267684,Ava,the example for nginx-clojure seems to indicate that v1.5.1+ is okay (and uses 1.7.0 specifically)
95,1498672049.314607,Carmelina,<@Ava> I got the same issue after adding my clojure dependency to :provided :confused:
96,1498672585.533327,Garth,is the <#C0FM7N1SM|quil> channel dead?
96,1498675642.774297,Daniell,<@Garth> I’d say that it’s just _quiet_…
97,1498675657.780307,Darcel,how can I get the list of protocols which a type implements ?
97,1498676462.104992,Loretta,"<@Darcel> 
`ancestors` will include protocols implemented, along with superclasses
```
(defprotocol Foo
  (bar [this]))
=&gt; Foo
(deftype Baz [a b c]
  Foo
  (bar [this] nil))
=&gt; user.Baz
(ancestors (class (-&gt;Baz 3 4 5)))
=&gt; #{user.Foo clojure.lang.IType java.lang.Object}
```"
97,1498676687.194204,Darcel,"<@Loretta> nice, is there any way to get the methods for each interface or protocol ?"
97,1498677068.337246,Leanne,"is there a version of `run!` to use with transducers? I mean, some fn `run2!` that you use like `(transduce xf run2! init coll)`"
97,1498677156.370094,Loretta,"```(into [] (.getDeclaredMethods SomeClassHere))``` <@Darcel>; you can `.getName` on those for just the name, you can also call them since you have reflected and have the `Method` objects"
97,1498677239.401158,Darcel,thanks
97,1498677603.537204,Randee,<@Leanne>  `(run! #(prn %) (eduction identity [0 1 2]))`
97,1498677705.574796,Margaret,"if you look at the source of `run!`, I think `(transduce xf #(f %2) nil coll)` is the most parsimonious thing ```user=&gt; (source run!)
(defn run!
  ""Runs the supplied procedure (via reduce), for purposes of side
  effects, on successive items in the collection. Returns nil""
  {:added ""1.7""}
  [proc coll]
  (reduce #(proc %2) nil coll)
  nil)
```"
97,1498678218.763449,Leanne,"yeah... I thought so too <@Margaret> . and that's what I'm doing <@Randee> . I just wanted to know if there was some other fn to use directly, but thanks"
98,1498681501.975455,Wilfredo,I’ve been doing a bit of reading about functors recently and it just occurred to me that transducers might be exactly that. Only touched the tip of the iceberg so are they really the same thing or is there a counterexample of a transducer that cannot be classified as a functor?
98,1498681665.035785,Margaret,"`(map f)` can't be mapped over, so it isn't a functor; in fact I can't think of any transducer that you can map over..."
98,1498681775.076278,Guillermo,transducers exist outside of collections
98,1498681821.09398,Wilfredo,functors are really type classes so they’re not tied to concrete types from the get go either
98,1498681869.112343,Margaret,"right, but functors are things you can map over, and though you can map over a function, I don't know how I would apply that to a transducing function; perhaps that's my ignorance though?"
98,1498681889.12002,Wilfredo,(Or at least in their Haskell implementation they are. After years of Erlang and Clojure I feel a little bit like Alice in Wonderland reading about all that stuff.)
98,1498682058.18311,Margaret,"doing some reading to refresh my knowledge of this stuff, supposedly mapping over a function is composing it, and transducers are functions that when called on another function return a function that will compose their transducing actions when applied in a transducing context; but I don't know how to translate ""transducing context"" here"
98,1498682083.192642,Wilfredo,"^ yeah, that’s the angle I was coming from"
98,1498682160.221046,Margaret,"because looking at typical haskell examples `(+) 3` doesn't get applied to `(*) 2` to return a new function, it gets composed to make something you can apply; which isn't what transducers do...; in fact they are inside out of that right? you apply them to get something that composes the two; I feel like I'm over my head with all of this though honestly"
98,1498682239.249008,Wilfredo,_thinking this through_
98,1498682369.294956,Willow,apparently functors must preserve the identity mapping. ie identity in Category C maps to identity of Category D. If a transducer returns a non-empty list when given an empty list then it could not be a functor. (the categories being the collection of lists of the underlying set). This is my thinking.
98,1498682578.371352,Margaret,"so does this mean transducing mapcat, filter, remove, etc. are not functors but transducing map is?"
98,1498682687.410004,Willow,"asking the wrong person. got undergrad and graduate background in math but no idea about this. but start see if it makes sense by definition. ie, are the domain and codomain categories to begin with? If not the term has no meaning. To be categories we need the ""arrows"" on them and make sure they compose. blah blah. All I was looking for was a single counter example where a transducer would not behave according to the definition of a functor."
98,1498682722.422862,Margaret,:thumbsup:
98,1498683255.616437,Terra,caio: you can also use something like this: <https://github.com/curiousprogrammer-net/clojure-repl/blob/master/src/clojure_repl/java.clj#L40>
99,1498683517.711655,Hiram,there's also state (<https://github.com/matthiasn/talk-transcripts/blob/master/Hickey_Rich/Transducers/00.36.36.jpg>) which suggests to me transducers are it's own thing (hence why a new name); ((or maybe multiple things under the same umbrela name))
98,1498683542.72079,Margaret,"oh, right - functors can't be stateful like that"
99,1498684122.927671,Jen,"with `defmethod` is there an idiomatic way to handle “dispatch on anything in this set” instead of a singular dispatch value?; ```
(defmulti foo :my-type)
(demethod foo #{:a :b :c} [_] …)
```
instead of having to do 
```
(demethod foo :a [_] …)
(demethod foo :b [_] …)
etc
```"
99,1498684179.946801,Margaret,you could check for that set in your dispatch function and have that return ::foo; remember your dispatch function doesn't have to just return the thing
99,1498684215.958401,Jen,"ah i see, then wire in a defmethod like :a-set and :b-set"
99,1498684256.972419,Margaret,"`(defmulti foo #(if (contains #{...} (:my-type %)) ::foo (:my-type %)))`; then `(defmethod foo ::foo ...)`; I think that is the simplest choice (with a better dispatch function of course, that's just the basic concept)"
99,1498684302.987815,Jen,"great, that’s much nicer than what I was planning to do; any particular reason you use ::foo .. are defmulti’s global or something?"
99,1498684346.002703,Margaret,"because who knows what value you would find, and namespaced things are safer? you can use any placeholder you like of course; <@Jen> part of my instinct to use ::foo there is to indicate ""this keyword is something my namespace cares about and maybe not generally relevant in other contexts"""
99,1498684422.027939,Jen,i should probably be doing more of that. thanks again for the help
100,1498685887.483752,Andra,"Yeah, just hoping :clj: won’t follow down the same bad (class)path"
101,1498691138.734202,Debby,I use emacs and my cofounder uses Cursive. Is there a way to reconcile the formatting styles between the two so our code is consistent?
99,1498691182.742922,Margaret,my team uses the cljfmt plugin
101,1498691184.743233,Hiram,linter?; best thing would be a linter as a post-commit hook
101,1498691227.751291,Shira,<@Debby> Cursive is fairly customisable for formatting settings. You can probably match most things that Emacs does
101,1498691276.760311,Delois,"<@Debby> If you have specific issues, let me know over in <#C0744GXCJ|cursive> and I’ll help you."
101,1498691366.777193,Margaret,"with cljfmt I can even account for people that never remember to auto-format; before we started using it, we had repeated problems where person x would indent code totally wrong, and person y had parinfer turned on and moved all the parens around based on the indentation  - there were two human failures that kept happening but just making sure cljfmt got applied to the repo was easier than fixing the bad code practices"
101,1498691500.803162,Debby,I think it’s actually Emacs whose behavior seems to have more special cases. wondering if there’s a premade setting for either Cursive or Emacs? (surely I’m not the first one to try to reconcile the two)
101,1498691525.807713,Willow,from what i understand emacs will be more rigid and stubborn than cursive
101,1498691527.807993,Margaret,"that's why cljfmt is so great, it doesn't care what your editor is"
101,1498691530.808628,Willow,^; and by rigid i mean less adaptable
101,1498691551.81251,Delois,"<@Margaret> You still really need your editor to agree with it though, or you will suffer pain."
101,1498691559.813913,Debby,^ <@Delois> agree. and x2 with your partner’s code. the worst is when Emacs indentation breaks parinfer on Cursive- that actually changes the program’s behavior
101,1498691574.816827,Willow,i'll bet your easier path is making cursive behave like emacs
101,1498691590.819669,Margaret,"<@Delois> just running it before I check my code in catches little stuff, and my editor is smart enough to catch changed files; always running it before commit, and always running it after a pull or merge is a pretty smooth workflow, even when some people forget to run their editor's indentor at all; to be clear I'm not just running cljfmt, I'm using the optional `fix` arg that edits all the files in place"
101,1498691844.867154,Debby,"<@Margaret> cljfmt seems like a good first step, thanks for the suggestion. <@Delois> gonna give cursive formatting settings a shot"
101,1498692050.90544,Delois,<@Debby> I think the main one that’s required to make Cursive line up with Emacs’ initial settings is _Settings-&gt;Editor-&gt;Code Style-&gt;Clojure-&gt;General-&gt;One space list indent_
102,1498698881.971821,Ava,"which channel is best for posting links to talks?; err, found <#C13E20NF5|videos>"
103,1498719662.599249,Wan,"Maybe my google-fu is failing me, but is there a simple way to unzip a file on disk to a a directory using Clojure? Everything I've found is about unzipping a single file, but I have a zip that has several. I want to unzip it and then read a specific one into memory.; Trying to build an ETL tool that downloads a zip file, unzips it, reads a specific file into memory, and then does some stuff to it.; Ideally I could use .getNextEntry or something similar and read to memory when it matches a regex"
103,1498721563.976433,Joette,<@Wan> if you just need the information there is no need to unzip to files - you could read it file directly from the zip into memory
103,1498721603.984882,Wan,Oh that would be ideal! How would I do that with a specific file that's in the zip file? (One of multiple that are zipped in the archive)
103,1498721987.066309,Joette,"I’m live translating this from some groovy code I wrote a while back (we’ll see if I get lynched here), but you can iterate through the entries within a zip file and then call the ZipEntry `(.getInputStream zip-file zip-entry)` and then I believe you should be able to use slurp to get the contents of the input stream; to find the right entry within the zip you can filter on zipEntry.name; cigrainger: give me a few - will fire up a repl and see if I can cook up some example code. I’m not senior with clojure but I have spent a lot of time with file manipulations and zip files : )"
103,1498722408.15914,Wan,Awesome! Thanks. I'll play around with your suggestion re: ZipEntry as well. That was the general direction I was going but I couldn't find much and I'm not great with clojure yet either.
103,1498722659.215416,Dani,<@Joette> Have a look at <https://stackoverflow.com/questions/5419125/reading-a-zip-file-using-java-api-from-clojure#5419767>
104,1498722695.223625,Lorene,"Hey folks,
I have the following snippet:
```
(let [coll [1 2 3]] 
    (map #(println :test %) coll) 
    (map #(println :test2 %) coll))
```

This results in:
:test2 1
:test2 2
:test2 3
(nil nil nil)

And not my expectation:
:test 1
:test 2
:test 3
:test2 1
:test2 2
:test2 3
(nil nil nil)

Can anyone explain this behavior?"
104,1498722772.240441,Dani,"<@Lorene>  Yes, don't use map to execute side-effecting functions like println since map basically returns a lazy seq"
103,1498722849.258433,Dani,"you can wrap your map's in a (doall ... ) call, but it would be more idiomatic to use doseq for this case"
103,1498722852.259076,Joette,"```
(ns zip-files.core
  (:import (java.util.zip ZipFile)))

(defn get-entry-data [zip-file-path entry-name]
  (let [zip-file (ZipFile. (<http://clojure.java.io/file|clojure.java.io/file> zip-file-path))
        entries (enumeration-seq (.entries zip-file))
        matching    (filter #(= entry-name (.getName %)) entries)]
    (if (not-empty matching)
      (slurp (.getInputStream zip-file (first matching)))
      (println ""no entry"" entry-name ""found!""))))

```; ```
(get-entry-data ""test.zip"" ""test.txt"")
=&gt; ""Hello World!\n\n""
```"
104,1498722923.275472,Lorene,"Great, thanks :slightly_smiling_face:"
103,1498722930.277176,Joette,where test.txt was one of many files within test.zip and the contents of test.txt were “Hello World!\n\n”; returns a string in this case or nil if no entry was found; <@Dani> thanks for the so link - looks more or less like what I came up with
103,1498723375.387097,Wan,Awesome! Thank you!
103,1498723517.421024,Dani,"And be careful with slurp'ing in data, you'll have all in memory"
105,1498724619.689159,Cora,"Hey! I was wondering if repeated subvecs would ever allow the excluded data to be garbage collected if there was no way to access it any more? Or would I need to use `(vec (rest x))` if I wanted to _actually_ drop the first item in a vector?; I would use a persistent queue but I want in place updates too, performance of `(vec (rest x))` being O(n) is a non-issue for me too, looking for the ""idiomatic"" solution more than anything :slightly_smiling_face:"
105,1498725591.939799,Bernardo,"damn didn't realize `for` re-evals the inner range expression; ```boot.user=&gt; (for [x (do (println ""x"") [1 2]) y (do (println ""y"") [1 2])] [x y])
x
y
y
([1 1] [1 2] [2 1] [2 2])```"
105,1498725649.954891,Kareen,it's by design; how would `(for [x [[1 2] [3 4]] y x] y)` work otherwise
105,1498725678.962303,Bernardo,i was p confused for a bit because i was using `(q/random ...)` (from quil) inside the inner one xD; yea makes sense :open_mouth:
106,1498728241.651522,Otha,"<@Lorene> or you can make something like that
```
(let [coll [1 2 3]
      res (concat (map #(vector :test %) coll)
                  (map #(vector :test2 %) coll))]
              (doseq [x res]
                (apply println x)))
```; I prefer not to mix side-effects with pure stuff"
107,1498739311.250411,Shoshana,Someone Please suggest real-time-messaging clojure library. I might also need Screen Sharing and video chat.
108,1498740492.580002,Margaret,"jgeraert: `doseq` works great for this, but there's also `run!` which like this usage of map takes a function and a collection as args, but is run for side effects eagerly.; <@Lorene> meant to tag you above"
108,1498740601.61274,Lorene,"<@Margaret> Ah I see, thanks for the tip :slightly_smiling_face:"
109,1498745252.354973,Magdalena,"Is this expected on clojure 1.9-alpha17?

```
(keyword :foo) ;; :foo
(keyword ""anamespace"" :foo) ;; ClassCastException
```"
109,1498745335.391113,Kareen,"yes, the 2 arity of keyword only accepts strings"
109,1498745446.438276,Magdalena,I understand that supporting coercions can be problematic but it is a little counter intuitive given the arity 1 behaviour
110,1498749346.206273,Tameika,"can anybody tell me how to use pprint? I mean in a file, not the REPL. What is the magic :require :use  line i need to use?; i google this shit with no examples"
110,1498749483.268552,Weston,`(with-out-str (clojure.pprint/pprint x))`; then you can `spit` it in the file
110,1498749566.306581,Tameika,I build an uberjar; does compilation fails because it does not trecognize pprint; it is not properly imported; or called; java.lang.RuntimeException: No such var: clojure.core/clojure.pprint
110,1498749694.365424,Weston,you need to require clojure.pprint first
110,1498749704.37013,Tameika,"i know that i have to rewuire it; i am asking how to do it; [clojure.pprint :as pprint]
does not work; in the (:require   clause"
110,1498749829.427071,Weston,"the error says you're trying to call clojure.pprint, if you aliased it you need to call (pprint/pprint x), or (clojure.pprint/pprint x)"
110,1498749861.442226,Tameika,"what i need is one WORKING example, which unfotrtunately i was not able to find :D:D; one working example, i can copy paste, tht's all i need; so basically two line i need; 1) how to import prettyprint; 2) how to call it; currently i have; [clojure.pprint :as pprint]
 (pprint/pprint  ...; rhat does not work"
110,1498750073.539381,Ava,(ns foo (:require [clojure.pprint :as pprint]))(pprint/pprint {:this :is :so :pretty})
110,1498750074.539625,Tameika,"Exception in thread ""main"" java.lang.RuntimeException: No such var: clojure.core/clojure.pprint,; kurwa,; <@Ava>; i got exactly what you suggested; what else could got fucked up?; my projectfile?"
110,1498750186.589981,Ava,have you tried that in a bare repl?
110,1498750286.636185,Tameika,"wait, i got it; [clojure.pprint :as pprint] was in the ns clause, but outside the (:require clause; thanks for the quick help guys :slightly_smiling_face:"
110,1498750433.703029,Ava,"spec in 1.9 is really nice for that sort of thing; if you're just playing with the language, I recommend trying out the 1.9.0-alpha17"
110,1498750635.792666,Tameika,"well, ia m not just playing around with the language, i want to make money with it :slightly_smiling_face:; so i wont try anything with ""alpha"" in it"
110,1498750691.818508,Ava,"I run my startup on so many ""alpha""s and pre-alpha spur-of-the-moment forks that I've lost count."
110,1498750769.852629,Tameika,and those alphas run somewhere on production?
110,1498750772.853788,Ava,yes
110,1498750790.861523,Berry,"```
(defkeyframes blinkBlackGreyKF
  [:0.00001% {:fill ""#ddd""}]
  [:50% {:fill ""#000""}]
  [:100% {:fill ""#ddd""}])
```

works, but if I change the 0.00001 to 0.0 or 0 , it fails -- somehow the css refuses to display the % if it's 0"
110,1498750792.862188,Tameika,"well, tha is inspiering :slightly_smiling_face:"
110,1498750838.882581,Ava,"I usually prefer to have bugfixes and features over some mythical stability; `lein ancient`, which is a plugin for one of the common clojure build tools, leiningen, actually makes it really easy to speculatively upgrade packages and run the entire test suite, only keeping the upgrades if your tests pass"
110,1498750934.924382,Tameika,"hmmm... maybe the aplphas are so stable becuase of clojure's nature, i think it's harder to make bugs in clojure"
110,1498750936.925938,Ava,"of course, that requires that you actually bother to write tests"
110,1498750953.933169,Tameika,do you bother?
110,1498750963.937575,Ava,"when they make sense; whether to write tests and what kind of tests to write depends on how much time I have, what I'm writing, and what the lifespan of the code is expected to be; things like a compiler for a dsl ends up with a lot of tests"
110,1498751127.009964,Tameika,I see
110,1498751171.029889,Ava,"sometimes I'm wrong about how much time I have or what the lifespan of the code is going to be, and tests get added on a later iteration; i.e. I expect something to be a one-off prototype and it ends up in production. it'll grow tests sooner rather than later so I can be confident about happy paths when I need to make changes."
110,1498751299.08768,Tameika,"today i had the following problem: after one day braek of coding nothing worked,something was fucked up, i needed 3 hours to get it back to life"
110,1498751331.102525,Ava,that seems like a git-diff kinda problem
110,1498751357.114001,Tameika,last time i wordked for corporate i solved this problem in that everyday one hour before going home i started to clean up and do notes about everything that was doing problems; and put a piece of paper describing these problems on my keyboard; i think it'[s rather a psychological problem than a git one :smile:
110,1498751447.154796,Ava,"I find that only really happens to me if I'm not constantly evaling my code and tests during development. i.e. if I spend 3 hours just writing code without evaling for some reason. that code will take much longer to get working than if I had just been evaling the code and my tests while going.; <@Tameika> but if you had working code one day and two days later your code doesn't work, isn't the solution just to stash, revert to the working code, make sure it still works like you expect, then diff your stash and that working code?"
110,1498751529.190979,Tameika,"i think you undrerstand my problems, i am curretly figuring out the perfect workflow for me"
110,1498751532.192197,Ava,"that's what I meant by a git-diff problem; sometimes I end up writing pseudo-code that is only somewhat working lisp when trying to get ideas out of my head. that's the kind of code that takes forever to get actually working. I often put it into its own namespace that isn't required anywhere (a persistent `*scratch*` of sorts) and then reference it in another coding session when I actually write tests and eval it as I'm going. I've found that if I try to get the code working, as opposed to using stream of consciousness code as ""notes"", I spend a ton of time just making it work. As a consequence, I try to be disciplined about making sure I eval everything as I go, to avoid the kind of scenarios where I write unusable code for several hours and then spend the rest of the day trying to make it usable."
110,1498751987.397837,Tameika,how do you do the architecture?; also like a *scratch* ?; that gets proper?; or do you take a piece of paper?; it's really an interesting experience to write in clojure for me; recently i was coding the whole night; and in my opinion i did 1-2 weeks of work; in comparison with other languages; so i need to think totally different; i mean i have to organize my work different
110,1498755727.909763,Magdalena,"depends what you mean by architecture <@Tameika> and what you’re doing.  There are lots of orthogonal concerns; code layout (namespace hierarchy / load orders), runtime data flow, use of polymorphism, state, building for composition, structuring data etc…"
111,1498762156.461276,Guillermo,"Anyone ever generated a ""compact ECDSA"" signature (bitcoin style) from Java?; this is a #{64 65} byte signature -- as opposed to DER encoding which is #{70 71 72} byte sig; I've been using the bitcoinj library but can't figure out the incantation"
112,1498763524.989695,Leann,<@Delois> Any way to temporarily disable paredit to make parens balanced again after pasting unbalanced parens or deleting code leaving it unbalanced?
112,1498763750.071324,Eufemia,bottom right is a menu that lets you change your structural editing pattern; turn to Off -&gt; fix -&gt; turn back to paredit; also there is a <#C0744GXCJ|cursive> fyi; there might be a quicker way though ¯\_(ツ)_/¯
112,1498763910.129838,Leann,"I know about the menu, but I was thinking about, CTRL + ""("" or something (tried that); Thanks for the channel"
112,1498763918.132627,Eufemia,ah ya no idea; Toggle Structural Editing Style in keymaps <@Leann>
112,1498764067.185815,Leann,Let's give it a try!; That's wonderful :slightly_smiling_face:
113,1498764489.339141,Jen,"i often find myself with too many options to get something “polymorphic” done in clojure.. was wondering if someone could speak to this:

say I need to switch on a data’s type. there’s the standard map approach {:type :some-custom-type}. then you can wrap that `:type` with a more formal `multimethod` and `defmethod :type/foo :type/bar, etc.`. you can also create a record to further formalize the map, and thus get access to things like `(instance?  _)`. you can also define a protocol for the various types and gain access to things like `(satisfies? _)`. now with spec.alpha you can go another step and do things like `(if (s/conforms? _) ...)`. 

surely there’s a good blog post or two out there illuminating such matters… but every time I reach for polymorphism i find myself almost paralyzed with options, not really sure which is best in each case."
112,1498764625.389103,Leann,you'll love this <https://leanpub.com/clojurepolymorphism/>; i was asking myself the same question when i stumbled upon that
112,1498764709.420359,Jen,oh neat-o .. ill definitely take a look
112,1498764742.432486,Leann,even the sample is very helpful
113,1498766020.89243,Hiram,"<@Jen> I guess it boils down to the definition of ""polymorphism"". In Clojure you're not tied to any particular approach because you can dispatch on arbitrary fns, so you can have the equivalent of dispatching based on OO hierarchy (Java classes), nominal typing (your own taxonomy), structural typing (spec, etc) ...; While in other languages (most I guess?), polymorphism bundles type system + dispatch/pattern matching together"
113,1498776370.995582,Tameika,I'd like to run a couple of functions in my main function
112,1498776376.996756,Tameika,in sequence; like; -main (; (func1); (func2); ); how do i do this?
112,1498776485.018851,Loretta,"<@Tameika> this slack has a message limit that, when hit, removes the messages. I’m not sure whether multiple short messages like yours are counted as one, or as many, but consider combining them into a single, formatted message (a nice bonus is, they are more readable). just fyi; to answer your question — what does “I’d like to run a couple of functions” mean exactly? What you’ve posted certainly does just that. But what is the point?; ```
(defn -main []
  (func1)
  (func2))
```
The result of the above will be whatever `(func2)` evaluates to. Of course, if `(func1)` produces side-effects (I/O, etc), these side-effects will occur."
114,1498777117.144285,Cecile,*unless `(func1)` produces a lazy sequence which would never be realized.
113,1498777375.196638,Tameika,"you are right, it didnt compile because of some other mistake; but; (defn -main
  ""This should be pretty simple.""
  []
  (
   (println ""hallo"")
   (println ""hallo2"")
  )); prints both hellos; but gives after it a null pointer exceptoin"
112,1498777454.211998,Loretta,"yes, try this, and see the difference:
```(defn mainnn
  ""This should be pretty simple.""
  []
  (println ""hallo"")
  (println ""hallo2""))```"
113,1498777512.223044,Loretta,"You have an extra paren before the first `println`. This evaluates the result of the first `(println ""hallo"")`, which is `nil`, as a function, and this is what creates the NPE."
113,1498777522.225048,Tameika,"i see; thanks, i nearly solved my problem; i'll come later back to it after I enjoy some nightlife in Wrocław; Cheers :slightly_smiling_face:"
115,1498780190.685103,Natasha,"Hello, I have a small question about spec. How does one specify a constant value in a regex spec? Like a vector that always must start with a keyword. I can do something like this `(spec/cat :type #{:message} :contents string?)` (as part of a multi spec), but is there a way to say the first thing in the sequence must be `:message`?"
116,1498782620.04453,Debby,"is there an idiomatic way to create a keyword in the current namespace, or is `(keyword (str *ns*) s)` pretty much it?"
116,1498782635.046777,Rebeca,don't do that; the behavior of `*ns*` is almost certainly not what you expect it to be
116,1498782688.053905,Debby,you might have better luck asking in <#C1B1BB2Q3|clojure-spec>
116,1498782698.055297,Rebeca,"there is no such thing as the ""current namespace"" at runtime"
116,1498782762.06409,Debby,"what about at compile time? is there a shortcut for a keyword in the namespace I’m writing the code in? something like `::`. I could do `(keyword ""app.models.user"" s)` but that seems verbose and potentially brittle to refactoring"
116,1498782883.080049,Margaret,if you want it to be the namspace calling your function/macro then `*ns*` works - but that won't give you the ns your definition came from
116,1498783195.120411,Rebeca,"I am not sure how to read that, but it doesn't seem to be correct; `*ns*` is set by the compiler when *compiling* code, when running code its value is arbitrary"
116,1498783273.130577,Margaret,"sorry, right - it will be the arbitrary value of `*ns*` at runtime for a function, but for a macro it will be the ns being defined"
116,1498783280.131489,Rebeca,"some execution environments preserver the value of `*ns*` between compilations (the repl), but common environments do not; macro expansion happens at compile time, so macros can observe a meaningful value of `*ns*`; when a function is being compiled, the compiler uses `*ns*` to figure out which vars it uses, but those vars are then embedded in the generated bytecode, and when the bytecode is run, it never looks at the value of `*ns*` again"
116,1498784389.274112,Daniell,What we do at World Singles is to have `(def ^:private my-ns *ns*)` near the top of each namespace where we need the “current namespace” and then use `my-ns` instead of `*ns*`.; That way it’s bound to the file’s namespace at load/compile time and doesn’t change during program execution.
117,1498789050.865249,Wenona,"why does `(get-in {:a (vector {:b :c})} [:a 0 :b])` work, but `(get-in {:a (list {:b :c})} [:a 0 :b])` doesn’t?; ah, I guess the answer is “lists aren’t associative, but vectors are”; not that that’s all that satisfactory, but it makes sense"
117,1498794642.485815,Shavonda,"<@Wenona> it's good to have that choice, no?"
118,1498800366.093004,Christin,hi everyone; is this a good place to ask newbie questions?
118,1498800400.096666,Margaret,there's <#C053AK3F9|beginners>
118,1498800425.099446,Christin,"cool, thank you"
118,1498800608.120973,Tameika,I asked beginner questions here :slightly_smiling_face:; and nobody complained!
119,1498801631.239334,Daniell,Depends on the audience and the time of day. But we _try_ to encourage focus to ask beginner Qs in <#C053AK3F9|beginners> so folks can opt-in/-out.
119,1498801833.262966,Shavonda,What I remember of clojure IRC was that you were free to ask beginner questions. I know because I asked many of them. I'm not sure the distinction. I'm still a beginner.
119,1498801991.281365,Daniell,<@Shavonda> We're all beginners on different topics :slightly_smiling_face: The main difference from IRC (apart from the wonderful Slack UI/UX) is the plethora of channels here... (and this is getting meta so <#C03RZGPG3|off-topic> if we really want to go down that path).
120,1498807750.165494,Lucretia,"Hello everyone, I have an app which generates documents (for example blog posts). Each document has an ID and consists of Text, Tables, Lists etc. and is completely defined in EDN. I want to store these documents but due to not consistent, changing keys it is not easy to store this in a RDBMS-Table. So at the moment I have a table in my h2db which has two colums ""ID"" and ""data"", where data is a cblob and stores the edn serialized as a string..
Is there a better ""clojury""-way to store edn documents?"
120,1498816879.331682,Adrien,<@Lucretia> Maybe serialize it using something like <https://github.com/ptaoussanis/nippy/blob/master/README.md>
120,1498818053.596044,Gino,<@Lucretia> there’s also <https://github.com/cognitect/transit-format> which is what we’re using which is a good fit if you want to use it in a browser because it can be used on top of json
120,1498818159.618065,Adrien,"<@Gino> <@Lucretia> However, transit isn't for storing data (yet)
&gt; NOTE: Transit is a work in progress and may evolve based on feedback. As a result, while Transit is a great option for transferring data between applications, it should not yet be used for storing data durably over time. This recommendation will change when the specification is complete."
120,1498818342.655941,Gino,<@Adrien> right… we just ignored that. it does seem fairly stable at this point there’s not much activity in the repo anymore. Was wondering if that recommendation was going to change…
120,1498819077.80832,Lucretia,"<@Adrien> I was thinking about using nippy, because of their built-in compression functionality.  
But my main concern is not the serializing part, but using the clob or blob for storing the data. Accessing the document doesn't feel native (sql query, reading clob, deserialize data). I hoped there was an mongodb-equivalent for clojure/edn :sweat_smile:"
121,1498819502.893604,Evan,what about datomic?
120,1498819757.945273,Lucretia,"Its a low budget project, Im looking primarily for open/free software"
120,1498819825.958736,Otha,datascript
120,1498820034.00139,Evan,datomic starter is free
120,1498820222.040302,Lucretia,"<@Evan>: but after 1 year there will be no updates and my project relys on an old unmaintained version, if I understand the description correctly?"
120,1498820317.060133,Weston,Yup; No go for serious work imho
120,1498820406.07897,Evan,"ah didnt know that, havent used it myself yet :stuck_out_tongue:"
122,1498823619.720352,Dani,maybe it's time for an edn datatype in postgresql :wink:; like jsonb
123,1498829700.37984,Zelda,"<@Loretta> <@Daniell> due to non technical reasons, my PR <https://github.com/clojure/clojure-site/pull/194> did not make it. If anybody could adopt it, it would be great :morning:"
120,1498829764.402412,Danyel,"<@Lucretia> storing fressian in a BLOB or edn in a CLOB is fine as long as you don't need atomic updates or native queries, otherwise I strongly advise against it (you may then want to use JSON support in a sql db, or a document store). There is no such thing as a 'clojury' way of designing a database imho - this should be language independent :)"
124,1498830767.762294,Jutta,I still think that will be awesome do something like `:find ?edn :where [?e :graph/data ?edn] [(contains? ?edn :foo) true]`
120,1498830964.837563,Danyel,There is no way to make this efficient in Datomic currently
124,1498831054.872203,Ahmed,"starting nREPL for the first time on this machine says ""could not transfer ... unable to find valid certification path to requested target"". We have a custom certificate at work that sits at top of everything. What should I do to get nREPL (is it using maven behind?) to use it when downloading artifacts? E.g. in `pip` I need to add in `~/.pip/pip.conf` a line saying `cert = /etc/ssl/certs/ca-certificates.crt`"
124,1498831449.030822,Margaret,"by nrepl do you mean leiningen?; lein does not use maven, but it speaks to the same repos, you probably need to make sure your java certificates are properly set up"
124,1498831565.075868,Lucretia,"val_waeselynck: updates are rarely and only done from one person (the document author). Native queries aren't needed. The documents are self-contained, so there are no dependencies to other tables. 
But inside the document there are dependencies, thats why I was unsure if I should break the document hash-map into normalized database tables or just store the whole document in  a clob just like it is stored at runtime.
I think I'll stick with the clob solution."
124,1498831730.138232,Ahmed,<@Margaret> I installed leiningen and ran `cider-jack-in` in a `.clj` file in emacs
120,1498831776.156369,Margaret,"right, but nrepl doesn't download things, leiningen does"
124,1498831806.167615,Ahmed,"I get that, but I don't know where to stick in the certificate"
124,1498831813.170209,Margaret,"anyway, depending on your OS there's various ways to make sure your java certs are OK"
124,1498831860.187921,Ahmed,"well if you have a link or something, hit me :slightly_smiling_face: ubuntu; we use maven here but it's all proxied through a locally set up mirror"
124,1498831964.228591,Margaret,"oh, that's the one I know `/var/lib/dpkg/info/ca-certificates-java.postinst configure`; or perhaps this <https://stackoverflow.com/a/33440168>"
124,1498832097.279937,Ahmed,"that did write a lot of ""Replacing ..."" lines and a ""done."" in the end which didn't solve the problem"
124,1498832154.302531,Margaret,what about the SO version?
124,1498832182.31347,Ahmed,still a nope
124,1498832267.346491,Margaret,weird - is the cert installed in such a way that ubuntu ca-certificates would know about it / use it?; because that should have fixed it if it is; <https://askubuntu.com/questions/645818/how-to-install-certificates-for-command-line>
124,1498832360.383064,Ahmed,"yes it's correct, other package managers work fine with it; (once I set the ca-file)"
124,1498832381.391209,Margaret,"no I'm saying add the ca-file to ubuntu itself; then set up java's certs from ubuntu; though, if you want to do it the tedious way you could also manually add that cert to java..."
124,1498832432.411337,Ahmed,the askubuntu link you sent is how we set up the certs in ubuntu
124,1498832449.418037,Margaret,<https://stackoverflow.com/a/28324237>; then I have no idea what's wrong here
124,1498832582.471194,Ahmed,the best option would be to add the mirrors we use for maven into my leiningen profile. I'm just not sure how to write it down. I'd need a ~/.m2/settings.xml to leiningen profile converter
124,1498832598.477304,Margaret,"this isn't maven, lein doesn't use maven; it can access maven repos... but doesn't use maven itself; sorry, misread; this should be system level config properly propagated to java, it shouldn't even be leiningen's concern"
124,1498832711.52191,Ahmed,"it's hard to tell where the problem lies, it could even be that the network here is deliberately blocking direct access to the repos since they want us to use the supplied mirrors"
124,1498833092.679104,Margaret,one thing to rule out would be that ca-certificates.postinst or the purge / reinstall of ca-certs didn't undo your custom cert addition; there might be a less heavy handed way to add the cert and also make sure it updates java without doing a purge / install cycle...
124,1498833496.841464,Ahmed,"I managed to add our mirror to `profiles.clj` but it only mirrors the maven repo, so I get the same error when I get to dependencies that are on clojars :disappointed:; <@Margaret> I found the culprit - the certificates are OK, for some reason a bad java is being used. Now I just need to find out who picked that version and why"
124,1498834532.265119,Margaret,"in terms of the wrong java being installed, or the wrong one picked out of those installed?; if the latter, that can be fixed with update-alternatives"
124,1498834920.432208,Ahmed,"the wrong one picked, because I installed `lein` via `nix` :slightly_smiling_face:"
124,1498835070.495364,Margaret,that's not what decides it is it? I mean lein just looks for the first java on path; unless nix changes that...
124,1498835267.579287,Ahmed,"I'm pretty sure `nix` changes it since they are all about being reproducible and immutable etc. Also `command -v java` from emacs returns `/usr/bin/java` which points to ubuntu java, not the nix one; all in all I just got  it to wok :slightly_smiling_face:"
124,1498835704.758868,Margaret,"using lein via a package manager seems fishy to me, sort of like using the jvm inside a container - I know there are valid reasons, but lein already manages its version better than most package managers will and the jvm already isolates differences between environments..."
125,1498836169.948895,Lenna,"Hi, all! Does anyone have some good recommendations on resources covering/showing proper use of records and protocols? I’ve been using Clojure happily for three years without them, mostly on a hobby basis, and feel that I understand them pretty well, but when I start using them or thinking about how to do it, I feel like I’m going all OOP. Hopefully the question makes sense."
125,1498836643.143835,Edwin,<@Lenna> I cover this a bit in my presentations about Component <https://stuartsierra.com/presentations>
125,1498836771.196848,Lenna,"<@Edwin> Thanks, I’ll have a look.; A follow up question: In my current project where I believe records/protocols is the good fit, I start out with CSV records with lots of fields. Many are not always present. Is it ok to create a record with just a few fields as required (eg. “logtime” and “id”) and the rest as optional, event though many other fields are highly useful and used in calculation?"
125,1498837399.44841,Margaret,"that's a pretty normal way to use records - adding fields that aren't defined on them; but if you know what they will all be, you could just have them all nil by default..."
125,1498837582.522091,Lenna,"<@Margaret> Thanks. What’s the benefit of having them be nil? Would that make the generated -&gt;MyRecord requiring a lot of paramters, and possibly not making it a MyRecord if you use map-&gt;MyRecord if you provide a map missing some keys?"
125,1498837586.524002,Edwin,<@Lenna> Records are usually indicated when you also have Protocols (or interfaces) and you plan to have multiple different types of records implementing the same functions for polymorphic behavior.
125,1498837647.547863,Margaret,"<@Lenna> map-&gt;MyRecord always makes a MyRecord, even for an empty map; and yes, with more than ~4 fields I would always use map-&gt;MyRecord rather than a positional constructor"
125,1498837780.599716,Lenna,"<@Margaret> Thanks, the former was new to me. I guess I need to experiment and see how it goes.; <@Edwin> I guess my “fear” is to make everything a “method” instead of a function. &lt;- My best description of where I feel it turns strange when using a functional language."
125,1498838129.736997,Edwin,"<@Lenna> You only need ""methods"" in Clojure if you need polymorphism: different behavior for different types, where the caller doesn't know which type it is."
125,1498838725.975755,Lenna,"<@Edwin> I believe that is the use case I have in my current project, hence the desire to finally dive into records and protocols. I’m using re-frame for the GUI, and tend to aim for generic code. In this case I’m presenting information where the GUI code displays :display, creates tooltip from :tooltip, sets react key from :react-key and so on. What these keys contains differs based on type. I like the way generic code makes it clearer what the code is trying to accomplish, without mixing in a lot of “how”. Now the plan is to turn these keys (:display, :toolstip, :react-key, …) into method on a protocol like “Displayable”. Anyway, thanks so much for the imput. Now I need to focus on dinner preparations."
126,1498839865.382512,Jen,"what’s the idiomatic way to guarantee some unknown value is inside a sequence, where that value could or could not already be in a sequence?; ```
(into [] val) ;; fails if val isnt already in a seq
(conj [] val) ;; always works but might nest, i.e. [[val...]]
```; (oh and not be nested, if already in a seq)*; is it simply `(flatten (conj`?"
126,1498839944.410128,Margaret,(if (sequential? val) val [val]); flatten is terrible
126,1498840023.437881,Sonny,generally the best answer though is to arrange your data so this doesn’t occur in the first place
126,1498840035.442031,Margaret,the best thing is to not write code that sometimes returns a collection and sometimes a single item (but I realize you aren't always the one who implemented the source of the data)
126,1498840063.451999,Sonny,things that are either &lt;foo&gt; or &lt;collection of foo&gt; tend to be always broken and/or special cased
126,1498840071.455077,Jen,"^ agree with alexmiller, except in this case it’s relating to an `(assoc` vs an `(assoc-in`.. as in someone might hand me a value to put at `[:foo :bar]` or just `:bar`"
126,1498840082.458902,Margaret,and they create contagious complexity in consuming code...; <@Jen> there's a reason assoc and assoc-in are two different functions though
126,1498840177.492477,Jen,"if you’re familiar with http patch semantics, i’m trying to implement something following the `{:op ""replace"" :path ""/foo/bar"" :value ""bob""}`. the issue is with `:path`, which could be some arbitrarily nested path into a resource; so i figure assoc-in with a “guaranteed to at least be a sequence” is a good solution"
126,1498840222.508819,Margaret,"always turn path into a collection, even if it's a one item coll"
126,1498840243.516435,Jen,hmm .. that sounds smarter
126,1498840271.526319,Loretta,"and it's (computationally) cheap, versus the complexity that results otherwise"
126,1498840308.539572,Jen,"thanks guys, great help"
127,1498841037.79105,Tammie,"does anyone know of alternatives to slingshot for easily creating custom exceptions, or is it pretty much “de facto” if you don’t want to compile a bunch of custom exception types?"
127,1498841328.892497,Weston,ex-info and ex-data is all you need
126,1498841846.172681,Barbera,<@Jen> i think of e.g. transforming a scalar to a single element collection as desugaring that happens in the first layer of code that processes some input
126,1498842183.358769,Jutta,not efficient.. just possible :stuck_out_tongue_winking_eye:
127,1498842407.478762,Adelaida,"<@Tammie> - I've used `hara.event` before and enjoyed it. It's a little more than custom exceptions, though. It changes how control flow works with exceptions to be more like how Common Lisp does exceptions."
128,1498847163.966417,Roger,"Hi all, Is there any way to create a hashmap interactively. I mean, I have the keys and values in separate lists and I need to associate as a hashmap; for instance I have a list keys with 1 2 3; and values list ""one"" ""two"" ""three""; and need to create {:1 ""one"" :2 ""two"" :3 ""three""}"
128,1498847247.009037,Cecile,<@Roger> <https://clojuredocs.org/clojure.core/zipmap>
128,1498847812.3009,Roger,my problem is that I do not have an actual list; I use a method to get each element of the list; for instance I use doseq to get each value; how can I create a vector with the elements of the Doseq?
128,1498847895.343054,Rebeca,don't use doseq; use reduce; (reduce (fn [m k] (assoc m k (* 2 k)))  {} (range 10))
128,1498848076.433781,Cecile,Want to share code? Could you just wrap your method into a lazy-seq? a list where each item is the result of a function is still a list.
129,1498849587.190916,Margaret,"<@Roger> aside from the other excellent answers, if your inputs are [:a :b :c] and [1 2 3] this is exactly what zipmap is for; also, please don't use `:1` - the clojure reader accepts this keyword, but it's not actually valid, it's perfectly acceptable to use a number as a key in a hash-map if that's what you need"
128,1498850058.408383,Cecile,Why isn't `:1` valid?
129,1498850111.432621,Margaret,"the reader accepts it but the clojure docs rule it out; which means that in the future the reader might stop accepting it; I admit that's unlikely, but when we have the choice, I think it's better to not use things that clojure claims it shouldn't accept; <@Cecile> for example cljs read-string doesn't allow it; and that's not a cljs bug, since clojure's docs already say it's not valid; there's lots of things that accidentally work in clojure, but we shouldn't assume are intended; ```+cljs.user=&gt; (cljs.reader/read-string "":1"")
TypeError: Cannot read property '0' of null
+cljs.user=&gt; (cljs.reader/read-string "":a"")
:a
```"
129,1498850599.652968,Lashonda,i’m currently diagnosing some garbage collection issues and am wondering if maybe i should be using the oracle jvm instead of openjdk; i cant find any evidence that it matters but i cant say for sure
129,1498850621.662532,Guillermo,it won't make a difference
129,1498850623.663252,Lashonda,does anyone have any opinions on thi?
129,1498850631.667091,Guillermo,you suspect a leak in your code?
129,1498850667.682938,Lashonda,"no, im looking into very long stop the world pauses ~20 secs; i guess im wondering if the implementation of garbage collectors makes a difference; ok i just wanted to hear someone say it wont make a difference because that’s my instinct too; while we’re on the topic, just so i’m clear, the implementation of g1 garbage collector in openjdk is different than the implementation in oracle jvm right?"
129,1498851803.181079,Guillermo,it is not different <@Lashonda>
130,1498851806.18249,Guillermo,G1 is G1
129,1498851826.19066,Lashonda,ok thank you for clarifying that
130,1498851875.21179,Guillermo,have you looked at heap profilers?
129,1498851964.250483,Guillermo,"the choice of GCs makes a difference with pause times, and your allocations are going to be workload dependent...; i've found usually that there's an offending spot in my code, but it can be tricky to track sometime; A quick temporary fix for long pause times is to a) make your max heap size _smaller_ and b) remove any JVM command line flags that somebody pasted into your deployment  (probably directly from stack overflow)"
129,1498852122.318728,Margaret,"I was almost going to mention that making the heap smaller thing, but then I realized it sounded really weird and I didn't have a cite... thanks for confirming that though; also, I recently learned the term ""jvm smoke break"" for this kind of problem, which I find amusing"
130,1498852603.528734,Guillermo,lol; the advice is totally counterintuitive.  mem leak =&gt; long GC =&gt; increase heap size =&gt; larger leak =&gt; longer pause time
131,1498858968.966092,Lucio,Hi! Is Clojure 1.9 stable enough to start a project on it now which will be pushed to production in a couple of months?
130,1498858978.969078,Lashonda,<@Guillermo> which heap profilers do you recommend?
131,1498860888.506126,Torie,<@Lucio> looks pretty stable to me: <https://github.com/clojure/clojure/graphs/contributors?from=2017-01-01&amp;to=2017-07-01&amp;type=c>
131,1498862037.782635,Lucio,Is it ok to have side-effects in clojure specs? e.g. a database call. The application I am thinking of is checking that an email hasn’t already been used on a “signup” API payload
132,1498862389.861167,Rebeca,seems gross
131,1498862393.862022,Gerda,<@Lucio> only if idempotent
132,1498862409.865632,Rebeca,"and implies effectively global scoping of the database connection, which is also gross"
133,1498874194.446658,Sonny,It's ok to validate things outside of spec too 
131,1498876281.61256,Daniell,<@Lucio> Clojure 1.9 is stable enough for production use as far as I’m concerned — my company has Clojure 1.9 Alpha 17 in heavy production usage right now.
134,1498885507.142068,Valerie,"does anyone have recommendations on a good job scheduling library for Clojure? checked out Quartzite earlier, but had some difficulty getting it to play nicely with my loading of env vars from mount"
133,1498899095.927715,Terra,"Should I follow kibit's recommendations?
```
Consider using:
  (vec costs)
instead of:
  (into [] costs)
```
Is there any real difference between `vec` and `into []`? 
`vec` is a bit shorter and maybe more explicit but I've also seen `into []` being used a lot.
I've found following question on SO: <https://stackoverflow.com/questions/12044181/into-or-vec-converting-sequence-back-to-vector-in-clojure> but I don't think  the different behavior for small arrays mentioned in answer is true; I did following experiment:
```
(def my-a (int-array [1 2 3]))

(def my-v (vec my-a))
my-v
;=&gt; [1 2 3]

(aset my-a 1 10))
(java.util.Arrays/toString my-a)
;=&gt; ""[1, 10, 3]""

;=&gt; my-v
[1 2 3]
```"
133,1498899590.956406,Margaret,"<@Terra> it can't alias an int-array; ```+user=&gt; (def a (into-array [1 2 3]))
#'user/a
+user=&gt; (def v (vec a))
#'user/v
+user=&gt; a
#object[""[Ljava.lang.Long;"" 0x5c089b2f ""[Ljava.lang.Long;@5c089b2f""]
+user=&gt; (seq a)
(1 2 3)
+user=&gt; v
[1 2 3]
+user=&gt; (aset a 1 42)
42
+user=&gt; v
[1 42 3]
```; as you see, it can alias a Long array"
133,1498900751.032457,Terra,"I see, any thoughts on my original question? :wink:"
133,1498900909.041921,Margaret,"if the collection might in some cases already be a vector, or it's an array that won't be aliased, use vec; if you already have a vector and need to add to it, or if you need to do some transformation like mapping or filtering as you add things, use into; if none of those conditions apply, it doesn't matter which you use; when I mention transforms here, I'm talking about using the transducing arg to into btw"
133,1498901103.052888,Terra,"Wonderful, thank you very much for this piece of advice."
135,1498927436.984555,Allegra,"Hello,I am new here and to Clojure too,Is it okay if I post some code here to resolve an issue?"
135,1498927503.989967,Loretta,"yes <@Allegra>, you can ask it here -- there is also a <#C053AK3F9|beginners> channel that you may find helpful if your issue is not resolved here"
135,1498927570.995392,Allegra,"Hi <@Loretta>, thank you for the response; I have been exploring core.async; and tried to implement <https://www.youtube.com/watch?v=f6kdp27TYZs&amp;t=1600>; the gophers daisy chain whispering; and am stuck someplace; help would be appreciated"
135,1498927786.01313,Loretta,i would recommend you ask in <#C05423W6H|core-async> -- providing some details as to how specifically you are stuck
135,1498927798.01422,Allegra,okay sure; thank you
136,1498929613.171399,Sudie,"How to make class self as type hint  for field of `deftype`?
```
(deftype Foo [^some.ns.Foo parent])
```"
137,1498948080.54318,Malissa,"Has anyone see this error when trying to start your repl: `Exception in thread ""main"" java.net.SocketException: Protocol family unavailable, compiling:`?"
138,1498949065.599671,Margaret,"is this something that happens in every project, or only when loading a specific project's code?; sometimes I find that if I don't use lein's `init-ns` or `main` features, and just call require from user, the error is more informative; for example ```$ lein run -m clojure.main
user=&gt; (require 'my.ns)```; then I get a better idea of what code is blowing up"
139,1498952636.804557,Bethel,Does anyone know how to create a parameterized type instance (java interop)? E.g. new MyPType&lt;Integer&gt;
138,1498952928.820637,Margaret,<@Bethel> that doesn't actually exist
139,1498952950.82183,Bethel,"OK…because param types are only compile time, correct?"
138,1498952952.821962,Margaret,"it's a thing the java compiler pretends is there, but isn't actually a thing in the relevant bytecode"
138,1498952973.82296,Bethel,<@Margaret> mith ok thx!
138,1498953001.824313,Margaret,"<@Bethel> right, type erasure (with the exception that you can use reflection to find the generic type - but that's not actually as relevant as one might think); the important thing is the code just works without it"
138,1498953056.827204,Bethel,True..I should have known :slightly_smiling_face: thx
140,1498972586.805845,Dani,"<@Malissa> Sounds like an ipv6 issue. What OS are you running on, try adding -Djava.net.preferIPv4Stack=true to your JAVA_OPTS"
141,1498985347.429617,Altagracia,"Is there an obvious way to write the following without repeating `x`? `(if (some-pred? x) y x)`; Meaning if `x` is ok, just use it, otherwise use the alternative `y`"
142,1498985642.444811,Trevor,"Hi, guys when i am tring to deploy library to clojurejars i get “gpg: signing failed: Inappropriate ioctl for device
“. 
I generated key, published it and i added it’s id to ~/.lein/profiles.clj

What can be a root of problem?"
141,1498986772.507235,Trevor,The solution is to add this line to .bash_profile `export GPG_TTY=$(tty)`
141,1498987073.523393,Danyel,<@Altagracia> maybe look at cond-&gt; ?
141,1498987656.552688,Altagracia,<@Danyel> You'd have to repeat `x` just the same
143,1498995732.989784,Timmy,"hey all. I’m use data.zip.xml/xml-&gt; to parse some XML; deep breath… ok:; I’m trying to navigate a blob of XML and parse out a map of information; this gives me a list of the names of all the interesting nodes in my XML:
```
(xml-&gt; zipped :parameters :parameter (attr :name))
```; this works for me since I know how many `:parameter` nodes I have and I know they all have `:name`; these work similarily: ```
(xml-&gt; zipped :parameters :parameter :description text)
(xml-&gt; zipped :parameters :parameter :default text)
(xml-&gt; zipped :parameters :parameter :options :option text)
```; I get a list of descriptions, default values or options…

however!  not all my paramater nodes have a :`description`, `:default` or `:options` sub tag.

So the lists don’t have the same ordering as the `:name attr` we pulled out earlier…; Is there a simple way to pull out these values for each parameter? with say `nil` returned if it’s not present?"
143,1499007140.749192,Ramonita,"<@Timmy> Perhaps something like:
```
(for [p (xml-&gt; (z/xml-zip xml) :parameters :parameter), :let [z (z/xml-zip p)]]
  {:description (xml-&gt; z :description text)
   :default     (xml-&gt; z :default text)
   :options     (xml-&gt; z :options :option text)})
```; Or alternatively:
```
(defn parse-parameter [z]
  [{:description (xml-&gt; z :description text)
    :default     (xml-&gt; z :default text)
    :options     (xml-&gt; z :options :option text)}])

(xml-&gt; zipped :parameters :parameter parse-parameter)
```"
144,1499016719.498957,Malissa,<@Dani> It’s actually a docker container I use for my dev environment. I have set that environment variable to no avail. Have you had this issue?
144,1499018051.608703,Margaret,<@Malissa> is it something that happens to leiningen regardless of the project code? is it a specific network operation in the code that is getting that error?
144,1499019447.717567,Malissa,"<@Margaret> It seems to only happen when running on my docker-container. The repl is being started with this function:

```(defn start-repl-server []
  (loop [port (get-repl-server-port)]
    (if-let [server  (try (nrepl-server/start-server :port port
                                                     :handler cider-nrepl/cider-nrepl-handler)
                          (catch java.net.BindException _ nil))]
      (reset! repl-server server)
        (recur (inc port)))))```; If I start it using `lein repl` it starts fine just fine (please excuse the indentation, slack appears to have messed it up)"
144,1499019798.744495,Margaret,"what I'm asking is that if it's only with your project in the container that lein gets the error, or if other projects give a similar error; there's two likely failure points here, one internal to leiningen, the other specific to your project...; another thing you could test is whether an uberjar of your project, run without leiningen gets this error"
144,1499019931.755051,Malissa,<@Margaret> it is the only project I’ve experienced with this error. But I don’t usually do things this way. (with starting the repl in that way); That’s a good idea; I’ll try that now
144,1499020204.776208,Margaret,do you need to whitelist the ports your process in the container can use?
144,1499020392.790919,Malissa,"<@Margaret> I do, and I have whitelisted those ports; The uberjar didn’t work either; As that repl function is still unable to run to whatever ip restrictions"
144,1499020524.800618,Margaret,how does `(get-repl-server-port)` pick a port?; it might be worth trying to just listen to the port it should be listening on using `nc`; eg `nc -l 8888` should listen on port 8888 and wait for one connection and print whatever gets sent to it
144,1499020703.813675,Malissa,"That’s another good idea; It picks it from an environment variable:
```(defn- get-repl-server-port []
  (let [repl-port-string (get env :repl-server-port ""7888"")
        maybeNumber (clojure.edn/read-string repl-port-string)]
    (if (number? maybeNumber)
      maybeNumber
      (do
        (log/warn ""Unable to parse port number for REPL_SERVER_PORT"")
        nil))))```; Let’s move this to a thread, if you don’t mind? <@Margaret>; I’m unable to start the server while listening to that port. The address is already in use"
144,1499020993.835985,Margaret,what I meant was to test if you could open the port with nc - that rules out another point of failure
144,1499021027.838699,Malissa,"Oh yes, the port is definitely open. The api serves traffic. The nrepl server just won’t start"
144,1499021085.843203,Margaret,"I'm talking about the nrepl port not the api port, but OK"
144,1499021095.843978,Malissa,"Ah, let’s make sure of that; Yep, the nrepl port is definitely available as well"
144,1499021165.849299,Margaret,OK - that verifies it's an nrepl problem then?
144,1499021294.859746,Malissa,That’s my guess; But nrepl works fine when I start the server using `lein repl`
144,1499021321.862002,Margaret,is it trying to bind to localhost?
144,1499021324.862246,Malissa,It is
144,1499021333.862965,Margaret,you could double check eg. that localhost is resolved in the vm; sometimes you need to add that mapping by hand; and localhost not being found would be consistent with that error
144,1499021493.876524,Malissa,"So that might actually be it, when I start the nrepl server using `lein repl`, I also add `lein repl :headless :host 0.0.0.0 :port 4343`"
144,1499021551.88106,Margaret,you could try adding :host to the args map to start-server
144,1499021576.883072,Malissa,"That’s a good idea; I’ll try it now; Different error, not sure if it’s failing sooner: `Exception in thread ""main"" java.lang.NumberFormatException: Invalid number: 0.0.0.0`; The host is looking for a number?"
144,1499021731.895557,Margaret,"wait, are you providing `0.0.0.0` or ""0.0.0.0"" because clojure will give that error for the first one; 0.0.0.0 is an invalid literal in clojure, is what that means"
144,1499021783.899585,Malissa,I found this: <https://github.com/clojure/tools.nrepl/blob/9eed58bed6aa01cfeb3c328adc5a12d487a5d305/CHANGELOG.md>; If you look st 0.2.8
144,1499021811.901749,Margaret,right - just make sure :host is a String; I bet that will work
144,1499021868.905956,Malissa,That did it; :heart:
144,1499021878.906662,Margaret,sweet!
144,1499021885.907196,Malissa,Thanks for that <@Margaret>
144,1499021891.907689,Margaret,"np - glad I could help; btw it might be better for security to adjust /etc/hosts so that localhost is defined, rather than providing 0.0.0.0 as your host - I'm not an expert on these things though; IIRC 127.0.0.1 can be used instead of 0.0.0.0 and is safer (but if you intend to connect from outside the vm... maybe you need the 0.0.0.0 binding)"
144,1499022132.927871,Malissa,You’re right. If this were to be deployed with an nrepl server started it would certainly be a security concern
144,1499022172.931467,Margaret,"anyway, at least you know the precise parameters now and can make an informed decision"
144,1499022185.932581,Malissa,"Indeed, I very much appreciate the help"
144,1499022225.935749,Margaret,"I seem to recall a recommendation to bind on 127.0.0.1 inside the vm, and use an ssh tunnel to access it from the host; but maybe that's silly."
144,1499022344.944732,Malissa,I’ll test to see if 127.0.0.1 works as well
145,1499027707.347319,Noella,"<@Weston> hello! I’m trying out <https://github.com/mpenet/spandex>, and I’m getting this error when `take!`-ing from a `scroll-chan`:
```#error {
 :cause Response Exception
 :data #qbits.spandex.Response{:body {:error {:root_cause [{:type illegal_argument_exception, :reason Failed to parse request body}], :type illegal_argument_exception, :reason Failed to parse request body, :caused_by {:type json_parse_exception, :reason Unrecognized token 'DnF1ZXJ5VGhlbkZldGNoBQAAAAAAAAEKFlFLeXR6MDh2UTRxLVdkLVhEbXZSMFEAAAAAAAABCxZRS3l0ejA4dlE0cS1XZC1YRG12UjBRAAAAAAAAAQ0WUUt5dHowOHZRNHEtV2QtWERtdlIwUQAAAAAAAAEMFlFLeXR6MDh2UTRxLVdkLVhEbXZSMFEAAAAAAAABDhZRS3l0ejA4dlE0cS1XZC1YRG12UjBR': was expecting ('true', 'false' or 'null')```; any idea what might be going on here?"
145,1499028191.38235,Weston,If you give me the detail of the request I can have a look. Worse case tomorrow. We can do that in priv msg btw
145,1499028606.412118,Noella,<@Weston> done :+1:
146,1499045894.885271,Allen,"I am trying to test a `java.sql.SQLException` handler which unwraps the exceptions like below. However I'm not sure how I would throw this exception in a test.
```
       (-&gt; e
           (.getNextException)
           (.getMessage)
           (.startsWith ""ERROR: duplicate key value""))
```
current mock (`.getNextException` returns nil on this):
```
(throw (SQLException. ""ERROR: duplicate key value""))
```"
146,1499046038.904674,Daniell,(answered in <#C1Q164V29|sql> — use `setNextException()` <http://docs.oracle.com/javase/8/docs/api/java/sql/SQLException.html#setNextException-java.sql.SQLException-> )
147,1499060685.948412,Joi,"Hey, clojurians. I’m using `yesql` in my project to query postgres database. Some tables has boolean columns ending with question mark. How to properly use queries like this with yesql:
```
select name, email from user_accounts where ""activated?"" = true;
```
Seems `yesql` thinks that question mark is param placeholder and fires error."
147,1499063256.408427,Daniell,<@Joi> Could you try that same query directly with `java.jdbc` just to eliminate whether the problem is `yesql` or something else?; I've never seen a database with `?` in column names... I didn't even think it was legal.
147,1499063319.42158,Joi,"Me neither, but have to use it :slightly_smiling_face: Tried JDBC - works fine.; In postgres it is not legal, but can be escaped with column name with quotes"
147,1499063376.433139,Daniell,"OK, well, that confirms a bug in `yesql` so you should create a GitHub issue."
147,1499063453.449972,Joi,Seems that yesql is not actively maintained. Started evaluating hugsql instead.; Thanks anyway
147,1499063544.469073,Daniell,"Ah, right, I heard that folks are switching to HugSQL. BTW, there's a <#C1Q164V29|sql> channel that's probably best for Qs like this.; We use HoneySQL for complex queries and raw `java.jdbc` for most stuff."
148,1499066336.153203,Nancey,"Singapore Clojure Meetup tomorrow night, welcome to join. <https://www.meetup.com/Singapore-Clojure-Meetup/events/240601551/>"
148,1499066645.240862,Dani,"petr: I'm not sure about docker, i only recall that that specific exception was related to ipv6 on a non-clojure project."
148,1499067691.559543,Danuta,armed: you may be interested in my fork <https://github.com/tatut/jeesql>
148,1499068394.783392,Joi,"<@Danuta> wow, thanks. I’ll definitely look at your lib."
149,1499069196.059993,Fe,<@Nancey> event invitations are always appreciated. But it would probably be better to limit them to one channel (<#C03RZRRMP|events> seens best)
149,1499069489.16649,Danuta,"If you are feeling particularly adventurous, you can try <https://github.com/tatut/specql>"
149,1499069587.200871,Nancey,:ok_hand::smiley: <@Fe>
150,1499080982.221709,Laurette,"Anyone dabbled with Java 1.8's Nashorn (js runtime)? I’m a bit puzzled as to how it evaluates JS object literals:
```
(-&gt; (javax.script.ScriptEngineManager.)
    (.getEngineByName ""nashorn"")
    (.eval ""new Object({foo: 42})""))
=&gt; {""foo"" 42}
```
versus 
```
(-&gt; (javax.script.ScriptEngineManager.)
    (.getEngineByName ""nashorn"")
    (.eval ""{foo: 42}""))
=&gt; 42
```; Oh, this works (wrapping the exp with parens):
```
(-&gt; (javax.script.ScriptEngineManager.)
    (.getEngineByName ""nashorn"")
    (.eval ""({foo: 42})""))
=&gt; {""foo"" 42}
```"
151,1499086078.875585,Frankie,"Hello everyone, is there any book/online resource about functional architectural patterns? Something like Patterns of Enterprise Application Architecture by Martin Fowler but from a functional point of view..."
151,1499087229.341231,Jerry,Rich Hickey's Talks can be considered as source of some patterns I think
151,1499087671.523254,Dani,<@Frankie>  <http://mishadoff.com/blog/clojure-design-patterns/>
151,1499087808.580056,Frankie,"Thanks <@Jerry>, <@Dani>"
151,1499087987.65361,Kalyn,any spectacular clojure alternative to <https://github.com/Raynes/conch>?; clojure's built-in `sh` is limited (no support for processing stdout/stderr as streams)
152,1499094313.55126,Rosa,"Hi clojurians! I'm trying to pattern-match a hashmap, but this is what I get:
```(m/match [{:arst false}]
  [{:qwfp #""stuff.*""}] 1
  [{:arst false}] 2)
ClassCastException clojure.lang.Keyword cannot be cast to java.lang.CharSequence  clojure.core/re-matcher (core.clj:4775)```
What's going on here?"
152,1499095729.183668,Ferdinand,<@Rosa> I pasted exactly what you have into the repl and got `2`.
152,1499095752.193828,Philip,<@Rosa> Looks like that error message indicates a problem with the regex
152,1499095758.196421,Ferdinand,"Just to double check, what version of core.match are you using?"
152,1499096429.486956,Rosa,"<@Ferdinand> `[org.clojure/core.match ""0.3.0-alpha4""]`, with `(:require  [clojure.core.match :as m][clojure.core.match.regex])` in my ns; <@Philip> `(re-matches #""stuff.*"" ""stuff123"")` works, so no regex issues as well; clojure version: `org.clojure/clojure ""1.9.0-alpha15`"
152,1499097029.742295,Ferdinand,"I'm not sure what the design of this is, but it looks like it might be a boog.; macroexpanding the above yields:
```
(try
 (clojure.core/cond
  (clojure.core/instance? clojure.lang.ILookup x)
  (try
   (clojure.core/let
    [x_qwfp__6982
     (if
      (clojure.core/instance? clojure.lang.ILookup x)
      (clojure.core/get x :qwfp :clojure.core.match/not-found)
      (clojure.core.match/val-at* x :qwfp :clojure.core.match/not-found))]
    (clojure.core/cond
     (clojure.core/re-matches #""stuff.*"" x_qwfp__6982)
     1
     :else
     (throw clojure.core.match/backtrack)))
   (catch
    Exception
    e__6002__auto__
    (if
     (clojure.core/identical? e__6002__auto__ clojure.core.match/backtrack)
     (do
      (try
       (clojure.core/let
        [x_arst__6983
         (if
          (clojure.core/instance? clojure.lang.ILookup x)
          (clojure.core/get x :arst :clojure.core.match/not-found)
          (clojure.core.match/val-at* x :arst :clojure.core.match/not-found))]
        (clojure.core/cond
         (clojure.core/= x_arst__6983 false)
         2
         :else
         (throw clojure.core.match/backtrack)))
       (catch
        Exception
        e__6002__auto__
        (if
         (clojure.core/identical? e__6002__auto__ clojure.core.match/backtrack)
         (do (throw clojure.core.match/backtrack))
         (throw e__6002__auto__)))))
     (throw e__6002__auto__))))
  :else
  (throw clojure.core.match/backtrack))
 (catch
  Exception
  e__6002__auto__
  (if
   (clojure.core/identical? e__6002__auto__ clojure.core.match/backtrack)
   (do
    (throw
     (java.lang.IllegalArgumentException.
      (clojure.core/str ""No matching clause: "" x))))
   (throw e__6002__auto__))))
```; woof that was a lot, sorry ya'll; Anyways it looks like it's probably calling `re-matches` with `:clojure.core.match/not-found`.; There should probably be a guard there in `to-source ::m/regex`.; <https://dev.clojure.org/jira/browse/MATCH-123>"
152,1499097310.863497,Rosa,"<@Ferdinand> thank you, following the report..."
152,1499097349.88019,Ferdinand,<@Rosa> Be sure to upvote it if you want attention paid.
153,1499100333.029866,Jerry,"is there a formatter for clojure code that I can adapt progressively without converting the whole codebase at one? I tried parinfer for Atom, but it is too intrusive for me"
153,1499100389.048995,Otha,emacs
153,1499100415.057895,Margaret,`cljfmt` is a good plugin and unlike editor based options every collaborator can easily have the same rules; <https://github.com/weavejester/cljfmt>
154,1499103668.14018,Altagracia,"Is there an obvious way to write the following without repeating `x`? `(if (some-pred? x) y x)`
Meaning if `x` is ok, just use it, otherwise use the alternative `y`"
154,1499104185.305783,Otha,"it could be written like ```(or (somefn x) y)```, but inside somefn there definitely would be repetitions of x or % argument"
154,1499104203.311713,Cecile,"you have three values you care about, `x,` `y`, and `(some-pred? x)`, so you will need those three elements. if x is truthy, you could write the pred to return x or false and use `(or (some-pred? x) y)`, though that means custom predicates.; Doesn't work if you need pred to succeed on x being false / nil though"
154,1499104259.329968,Otha,```complement```
154,1499104393.371148,Danuta,"I think `(if (foo? x) y x)` is readable and repeating one name, once as a parameter to the predicate, isn’t bad"
154,1499104423.380356,Adelaida,"<@Altagracia> You can do that with a macro if you so desire. Something like this:

```
(defmacro pass-or-alternative [pred-expr value-expr alternative-expr]
  `(let [value# ~value-expr]
     (if (~pred-expr value#)
       value#
       ~alternative-expr)))
```"
154,1499104473.395959,Cecile,"you don't need a macro, just `(fn [pred x y] (if (pred x) x y)`, then you'd just use it like `(my-fn pred x y)`"
154,1499104511.408178,Malka,"you do need a macro, you don't always want to evaluate `y`"
154,1499104512.408361,Margaret,if y has side effects the macro version is better
154,1499104639.449778,Lin,although the original question did not mention any lazy evaluation requirements
154,1499104699.469255,Margaret,it wanted a replacement for if
154,1499104895.534535,Lin,i read it more as “how can I avoid re-typing ‘x’” rather than “how can I replace a call to ‘if’ while keeping the characteristics of ‘if’”
154,1499105283.656593,Altagracia,Thanks for your suggestions!
155,1499108251.545154,Sidney,is there a way to macroexpand a private macro?; `(macroexpand (private-macro foo))`; trying that gives “var #‘private-macro is not public”
155,1499108490.617922,Adelaida,I think you need to quote the to-be-expanded form.; `(macroexpand '(private-macro foo))`
155,1499108617.655484,Sidney,"that was slack formatting fail on my part; I know the standard way to use macroexpand, but it fails w/ private macros"
155,1499108686.674687,Adelaida,"Interesting. :thinking_face:; Have you tried `ns-resolve`ing the private macro? Not sure whether that would work, but maybe."
155,1499110182.082048,Sidney,"ah, looks like `tools.analyzer` will do it; but AFAICT, it’s not possible in the built-in implementation"
155,1499110477.163451,Adelaida,Wasn't aware of that limitation. Interesting.
155,1499110907.276934,Margaret,"<@Adelaida> the problem with resolve or ns-resolve is that the clojure compiler uses metadata on vars to decide if something is a macro, so using the var means it gets treated as a function - but! the fascinating thing is that this is a valid way to expand a macro, as long as you provide placeholders for &amp;form and &amp;env (nil here because I’m lazy and it doesn’t change the output) ```=&gt; ((resolve 'when) nil nil true :OK)
(if true (do :OK))```; <@Sidney> so yeah, see above, just give workable &amp;env and &amp;form, and call the var instead of macroexpand the macro call and it works"
155,1499111085.322024,Sidney,interesting; thanks!
155,1499111121.331402,Margaret,of course with macros that don’t access &amp;env or &amp;form (which is most…) two nils suffice
156,1499114198.114112,Adelaida,Very cool! Thanks for the info <@Margaret>. :simple_smile:
157,1499128636.51125,Marylee,hi all -- I'm using tools.cli and it's not clear how to pass multiple arguments to an option -- eg if I want an option to become a vector of numbers; nevermind -- ended up taking it as a string and doing this - `:parse-fn (fn [input ](into [] (map #(Integer/parseInt (str %)) input)))]`
158,1499137423.83481,Jerold,"This is rather odd, but has anyone experienced an issue where dereferencing agents of collections truncates some of the elements?"
157,1499138571.994689,Margaret,remember that send and send-off can return before their action finishes - or even before it starts sometimes
156,1499138992.051018,Margaret,"```+user=&gt; (let [a (agent []) f #(send a conj nil) g (fn [] (count @a))] (dotimes [_ 10000] (f)) (repeatedly 10 g))
(6622 6687 6716 6735 6757 6776 6794 6825 6851 6880)
```"
156,1499139551.127987,Jerold,<@Margaret> that's got to be it. I think I just got confused because I'm creating and returning the agent from inside a macro. That's where I see the trouble. If I create a `def` for the return value and then `deref` that it waits just long enough for the last results
156,1499139570.13057,Margaret,there's the function `await`
156,1499139971.186861,Jerold,"Thanks, Justin! :slightly_smiling_face:; Oh...actually I didn't realize `await` depends on the `:done` key. I'm using an `int-map` so no keywords..."
156,1499140794.299888,Margaret,"what?; there's no magic :done key, await just lines up a lock that won't unlock until every pending action is done, then waits on it ```(defn await
  ""Blocks the current thread (indefinitely!) until all actions
  dispatched thus far, from this thread or agent, to the agent(s) have
  occurred.  Will block on failed agents.  Will never return if
  a failed agent is restarted with :clear-actions true.""
  {:added ""1.0""
   :static true}
  [&amp; agents]
  (io! ""await in transaction""
    (when *agent*
      (throw (new Exception ""Can't await in agent action"")))
    (let [latch (new java.util.concurrent.CountDownLatch (count agents))
          count-down (fn [agent] (. latch (countDown)) agent)]
      (doseq [agent agents]
        (send agent count-down))
      (. latch (await)))))
```"
156,1499140955.325345,Jerold,"Oh, ok. I was confused by Clojure Docs: <https://clojuredocs.org/clojure.core/await>; I'll have to see why it's not still working"
156,1499141029.335865,Margaret,one possibility is that something is calling send after you call await?
156,1499141400.389625,Jerold,I would assume; Here's the macro:; I think `await` isn't doing anything since it can't know whether `pdiff` has finished
156,1499141581.41553,Margaret,it does do something - it waits on all actions that have been submitted before it is called - but you need something different if you want to wait on things pdiff might initiate after the point await is called; also calling def on the output of gensym is super weird -why not a let block?
156,1499141642.424526,Jerold,I'm confused as to what you mean in your second statement
156,1499141674.429419,Margaret,"def always creates namespace level bindings, using def with a gensym is weird because how would you even know which thing to look for later?; let is for locals, so I would expect let instead in a scenario like this"
156,1499141753.4409,Jerold,"Oh, the gensym isn't quasiquoted"
156,1499141771.443543,Margaret,"that has nothing to do with it; def creates a new var in your namespace; oh - I see, you create the gensym def once; that guarantees that pdiff-once is a race condition if it's used in two threads though"
156,1499141834.452587,Ramonita,What’s the purpose of the macro?
156,1499141840.453499,Margaret,that's another good question
156,1499141884.459595,Jerold,"The purpose of the macro is to automate three calls in one: creating the agent, calling pdiff, and returning the contents of the agent"
156,1499141976.472609,Margaret,"if two threads use that macro, the second one will replace the data used by the first; it's extremely unsafe"
156,1499141995.475282,Ramonita,"Okay, but why not:
```
(defn pdiff-once [poly order]
  (let [tape (agent (i/int-map))]
    (pdiff poly tape order)
    (await tape)
    @tape))
```"
156,1499142000.475939,Cassaundra,"why this: 
```router=&gt; (if-let [{params :params} {}] (str ""params:"" params ""."") ""NOT-defined"")
""params:.""```"
156,1499142043.482376,Ramonita,<@Cassaundra> because {} is not falsey.
156,1499142061.484961,Jerold,"weavejester: let me try that. I'm not sure it'll work, but I'm relatively new to agents."
156,1499142070.486249,Ramonita,`(if-let [params (:params {})] ...)`
159,1499142086.4885,Cassaundra,<@Ramonita> : thanks :slightly_smiling_face:
156,1499142113.492263,Ramonita,"With if-let, the expression on the right needs to be `nil` or `false` to fail"
156,1499142116.49262,Cassaundra,trying to hit else if params not defined; <@Ramonita> ok...
156,1499142167.500188,Ramonita,"<@Jerold> You could also use a promise.; It depends what `pdiff` looks like, but a promise is more usual."
156,1499142198.504797,Margaret,I assumed an agent was being used because there were multiple alterations; but doing that in a new thread makes using an agent problematic...
156,1499142227.508941,Jerold,It works
156,1499142237.510268,Ramonita,"The name `pdiff-once` also suggests a memoize, but it depends what you’re trying to do."
156,1499142238.510359,Jerold,But `await` is not working
156,1499142264.514086,Ramonita,"Could you give us an idea of what `pdiff` is doing, <@Jerold> ?"
156,1499142272.51517,Jerold,`send` calls inside pdiff have not finished by the time `pdiff-once` returns; it's just associng values with `send`
156,1499142302.519337,Margaret,"if await returns, that means those calls weren't even made before await was"
156,1499142325.52256,Ramonita,`pdiff` is parallel diff I assume.
156,1499142327.522923,Margaret,you need some other way to know pdiff is done
156,1499142348.525799,Jerold,This is exactly what I said previously...
156,1499142390.531697,Margaret,"you said ""await isn't working"" which I might have misinterpreted"
156,1499142415.535352,Jerold,"I said, ""I think `await` isn't doing anything since it can't know whether `pdiff` has finished"""
156,1499142418.535723,Ramonita,Would it be possible to post the definition of `pdiff` as well?
156,1499142435.538385,Jerold,It's not going to make a difference
156,1499142479.54483,Margaret,"it could, if there was a way to ensure you don't return from pdiff until it makes all it's send calls for example"
156,1499142551.555071,Ramonita,"I’m not clear on what `pdiff` is doing, or why you’re using an agent. I assume it’s doing something in parallel."
160,1499153394.685798,Dani,<@Jerold> do you get your functionality working without all the parallel stuff? Just plain idiomatic single-threaded clojure
161,1499158112.369353,Corine,"Does anyone know how to obtain the `Set-Cookie` header from `http-kit`, when you pass the `Cookie` header in the call as well? E.g.,

```
(defn visit-url [{:keys [cookies url] :as context}]
  (let [result-chan  (chan)
        check-result (fn [{:keys [status] :as response}]
                       ;; TODO: get new cookies here....:/ not visible in response
                       (log/error ""RESPONSE"" response) ; =&gt; no `Set-Cookie`
                       (go (&gt;! result-chan (= status 200))))]
    (http/get url
              {:headers          {""Accept"" ""text/html""
                                  ""Cookie"" cookies} ; cookies is string of earlier obtained cookies
               :follow-redirects false}
               check-result)
    result-chan))
```"
161,1499173278.4694,Refugio,"question: how to find a dependency a leiningen plugin pulls in at runtime?  I've run `lein deps :tree` on the most obvious dependencies, and I don't see where a particular version of ring is coming from.  I've sprinkled `:exclusions` all round.  Yet I find the dependency in `target/stale/leiningen.core.classpath.extract-native-dependencies` ...; (context: trying to upgrade gorilla repl to 1.9, but  it barfs on an old version or ring); happens when I do `lein gorilla :port 9000`, yet neither gorilla-repl nor lein-gorilla seem to need it"
161,1499173570.575524,Fe,have you tried deleting `target`?
161,1499173630.597369,Refugio,I've deleted all the content yes
161,1499173676.614149,Fe,"`lein deps :tree` should work, unless gorilla-repl does something funky; you can issue a global exclusion for ring; <https://github.com/technomancy/leiningen/blob/master/sample.project.clj#L86>"
161,1499173868.682371,Refugio,"hm.  the problem being that lein-gorilla does need ring, just not that old one ..."
161,1499173938.707375,Fe,"that's ok, you can specify the latest version; exclusion just means ""ignore whatever transitive dependencies there are relating to this"""
161,1499173980.722629,Refugio,"thank you, will try that :slightly_smiling_face:"
161,1499173984.724161,Margaret,to look at plugin deps there's a separate plugin tree command `lein deps :plugin-tree`
161,1499174002.730553,Fe,<@Margaret> did not know that
161,1499174023.738277,Refugio,"<@Margaret> nice one, that should help; thank you!"
161,1499174063.75302,Otha,```lein ancient``` can help with outdated deps (it's a separate plugin though)
161,1499174117.773195,Refugio,"well, it looks like it's something funky alright; (as in it still doesn't show up)"
161,1499174229.814437,Cathy,question-- does anyone have a homoiconic datetime solution/approach that they use in their projs?
161,1499174409.88232,Weston,"I like my dates served as longs, nothing else (I rarely have to care about TZ)"
161,1499174442.894843,Fe,I use only java.util.Date and js/Date
161,1499174458.90063,Cathy,just everything UTC -&gt; epoch <@Weston> ?
161,1499174460.901513,Fe,with the occasional goog.time and clj-time for formatting
161,1499174479.908339,Aileen,<@Cathy> I use this: <https://github.com/dm3/clojure.java-time>
161,1499174481.909026,Weston,"date as number works well as long as you don't need to be super precise with ""date math""; <@Cathy> yes; otherwise java 8 api seems decent"
161,1499174559.938675,Cathy,not a fan of `#object[java.time.LocalDate ...]`; seems strange those don’t get read
161,1499174613.958796,Margaret,that would require clojure to require java 8 right?; I guess it could do that conditionally?
161,1499174635.967413,Cathy,would be interesting to have those dump into a constructor/factory format like `(java.time.LocalDate. &amp; args)`
161,1499174697.990225,Margaret,the more likely option would be what clojure does today with java.util.Date - using a literal representation that the reader accepts
161,1499174715.996526,Cathy,oh rllllly; i did not know that
161,1499174786.023019,Margaret,"```+user=&gt; (java.util.Date.)
#inst ""2017-07-04T13:25:33.376-00:00""
+user=&gt; #inst ""1492-01-10T12:11:44.000-00:00""
#inst ""1492-01-10T12:11:44.000-00:00""
```; Date is a less than great API, but clojure makes it readable"
161,1499174886.059845,Cathy,does this `#inst` mean <https://clojure.github.io/clojure/clojure.instant-api.html>?
161,1499174903.06654,Margaret,"no, it's how Date objects are printed, its the instant reader"
161,1499175032.115103,Refugio,"I confirm the fishiness, was pulling a dependency in the code :facepalm:; so that was fun"
161,1499175094.138573,Cathy,this is cool. didnt know about `#inst` and `#uuid` and stuff; thx
162,1499178641.486584,Amado,"hello everyone, i have 4 heavy database queries that are running sequentially

```
      (benefit-db/transition-benefits-to-ongoing db/db-spec)
      (benefit-db/transition-benefits-to-consumed db/db-spec)
      (benefit-db/transition-benefits-to-ended db/db-spec)
```


is there an easy way to run this guys in parallel and do something else when they *all* finish?"
162,1499181015.371456,Corine,plins: `(let [results (map deref  [(future trans1) (future trans2)  (future trans3)] do-something-else))`
163,1499181805.640533,Timmy,hey all… for a number of strange reasons I want to create an instance of a class whose name I only have as a string. How would I instantiate one?
163,1499181910.676036,Weston,either via a macro or reflection possibly
163,1499181965.694575,Timmy,cheers <@Weston>. I just found `Class/forName` which does what I’m after
163,1499181976.698268,Weston,"(.newInstance (Class/forName ""foo.bar.baz"")); yes :slightly_smiling_face:"
163,1499182161.759915,Shameka,"tho `(.newInstance (Class/forName ""foo.bar.baz""))` only seems to have a 0-args sig; ah, you have to use `.getDeclaredConstructor` on the `Class` object to get the constructor method and then call that"
164,1499187885.262211,Wade,Do multiple threads just reading from (derefing) an atom that has a constant value block or cause any kind of contention?
164,1499187917.268968,Rebeca,no
164,1499187939.273603,Wade,Awesome -- so should be the same as just reading a var?; in terms of multithread contention
164,1499188137.315913,Rebeca,"that is kind of complicated, they are different things. my intuition would be that vars would be ever so slightly faster before the jit has kicked in, and an atom would be ever so slightly faster after; but they are different things, not drop in replacements for each other"
164,1499188690.430803,Wade,"understood. the story is that we have a system with config data in atoms, which are constant after configuration, and our multicore scaling is bad. the question came up of whether billions of accesses to  constant-valued atoms might be causing contention. the alternative we're considering isn't actually to use a var (actually, we'd get rid of the vars that currently hold the atoms), but just to pass all of the config data as an argument throughout the system. it'll be a relatively big job to try this, so i'm trying to figure out if the underlying theory is even true, that reading (derefing) the atom in a var can cause contention among threads."
164,1499188945.482756,Margaret,"atoms contain an AtomicReference <https://github.com/clojure/clojure/blob/master/src/jvm/clojure/lang/Atom.java#L20> and use the get method to access their value <https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/atomic/AtomicReference.html#get()>; get on an AtomicReference is the same overhead as reading a volatile, which sources claim is cheap; this should also be easy to microbenchmark though"
164,1499189123.518574,Rebeca,"you should actually hook something like visualvm and look at the hot methods; don't just guess; if your configs are in global atoms, then you are dereferencing both the var containing the atom and the atom"
164,1499189323.558608,Margaret,"that's a good point, based on profiling I've done I'd expect the var lookup to be more expensive than the atom deref"
164,1499189361.566147,Rebeca,"I mean for the config thing; for vars vs. atoms, without the jit, my guess is the atoms still have to traverse a few extra pointers for access, but with the jit I expect it is a regular reference that just uses atomic instructions; (I don't know, I haven't profiled it or looked at the code the jit produces); but I would expect just about anything else to dominate those differences"
165,1499190526.796076,Vannessa,there should also be some improvement with direct linking on
164,1499190540.798763,Rebeca,direct linking is only for functions
164,1499190672.824115,Margaret,"fwiw the differences are pretty small once the JIT has kicked in ```+user=&gt; (let [a (atom 42)] (reduce (fn [_ ft] @ft) (repeatedly 10000 #(future @a))))
42
+user=&gt; (let [a (atom 42)] (crit/bench (reduce (fn [_ ft] @ft) (repeatedly 10000 #(future @a)))))
Evaluation count : 900 in 60 samples of 15 calls.
             Execution time mean : 91.621587 ms
    Execution time std-deviation : 11.931053 ms
   Execution time lower quantile : 57.841222 ms ( 2.5%)
   Execution time upper quantile : 106.129733 ms (97.5%)
                   Overhead used : 1.534327 ns

Found 4 outliers in 60 samples (6.6667 %)
        low-severe       4 (6.6667 %)
 Variance from outliers : 80.6424 % Variance is severely inflated by outliers
nil
+user=&gt; (def a (atom 42))
#'user/a
:user=&gt; (crit/bench (reduce (fn [_ ft] @ft) (repeatedly 10000 #(future @a))))
Evaluation count : 600 in 60 samples of 10 calls.
             Execution time mean : 97.601813 ms
    Execution time std-deviation : 11.193445 ms
   Execution time lower quantile : 73.574920 ms ( 2.5%)
   Execution time upper quantile : 116.281827 ms (97.5%)
                   Overhead used : 1.534327 ns

Found 1 outliers in 60 samples (1.6667 %)
        low-severe       1 (1.6667 %)
 Variance from outliers : 75.5029 % Variance is severely inflated by outliers
nil
+user=&gt; (crit/bench (reduce (fn [_ ft] @ft) (repeatedly 10000 #(future *clojure-version*))))
Evaluation count : 780 in 60 samples of 13 calls.
             Execution time mean : 99.271467 ms
    Execution time std-deviation : 8.236914 ms
   Execution time lower quantile : 78.021114 ms ( 2.5%)
   Execution time upper quantile : 111.492377 ms (97.5%)
                   Overhead used : 1.534327 ns

Found 4 outliers in 60 samples (6.6667 %)
        low-severe       1 (1.6667 %)
        low-mild         3 (5.0000 %)
 Variance from outliers : 61.8161 % Variance is severely inflated by outliers
nil
```; that's comparing - direct access to atom and deref, access of atom in var and deref, and access to a value in a var; the futures are because there was concern about contention"
164,1499190846.858127,Rebeca,"obviously what you should do is preprocess your config in to a primitive array, and generate macros for accessing each config value that expand in to agets of the right array slot"
166,1499193247.307375,Wade,"all very interesting! point well taken about checking data before optimizing, and we have a lot of work to do on that front; it seems from the discussion here this use of atoms in vars probably isn't producing contention, right?"
166,1499193366.329433,Margaret,right- no evidence of contention there at all
166,1499193375.330983,Wade,"fwiw the alternative we're considering would be function args, rather than vars, with the config passed everywhere; awesome, thx!!"
166,1499193493.352455,Margaret,"I realize I didn't benchmark just having a data literal - checking that now to see if there's any difference worth noticing; but really profiling your own code and looking for the actual perf bottlenecks is the way to go; yeah - replacing @a with a literal 42 (but still reducing over futures etc.) ends up taking ~the same~ (actually slightly longer, but within the measurement epsilon so not meaningful)"
166,1499193933.431724,Wade,great to know -- thanks!
167,1499199931.464665,Lucio,"Hello! I am using Pedestal + Lacinia Pedestal to develop a GraphQL server, but I am not quite sure how to set up hot-reloading. Could anyone point me in the right direction?; I would like to hot-reload the GraphQL schema and the resolvers"
168,1499247589.09731,Hong,"Hi, could you point me some http/2/streaming clojure client?"
168,1499247744.154893,Serena,"We are trying to add clojure.spec and metosin/spec-tools to our codebase, and it looks like clojure 1.9 is a prerequisite. We tried upgrading to `1.9-alpha17`, but currently facing a bunch of problems related to the upgrade. Our app currently does not start, with errors similar to the followingZ
```Caused by: clojure.lang.ExceptionInfo: Call to clojure.core/defn- did not conform to spec:
In: [0] val: clj-tuple/conj-tuple fails spec: :clojure.core.specs.alpha/defn-args at: [:args :name] predicate: simple-symbol?```

A number of these are in libs and stuff. We’ve been upgrading a few of them, or fixing the error, which typically causes a new error to appear. Is there anyway to switch off clojure.spec validating the entire codebase + libs? Possibly get it to stick to a few namespaces only? Is this happening because we are trying to upgrade to an alpha?"
168,1499248060.272637,Kareen,there's no way to turn off spec checks on macroexpansion; your only option is to upgrade to versions of the libraries that include the fixes you need
169,1499250372.089083,Sharyn,hi  - is there a way to get all resources on the classpath - whether they be inside of jars of on the filesystem?
169,1499251164.341911,Rasheeda,<@Sharyn> I’m sure there must be but I don’t know what it is. eg. iirc Spring does a bunch of classpath scanning
170,1499252134.641753,Terra,jonpither: something like this (in java): <https://stackoverflow.com/questions/3923129/get-a-list-of-resources-from-classpath-directory>
168,1499253833.154908,Serena,<@Kareen> thanks
171,1499256889.120644,Verna,"Hi! I wrote an article about PostgreSQL to Datomic migration. Hope you’ll find it useful.
<http://grishaev.me/en/pg-to-datomic>"
171,1499257040.172853,Lucio,"igrishaev: thank you for writing this up; very useful!; there is a <#C03RZMDSH|datomic> channel, you might want to post it there too"
171,1499257135.206675,Verna,"thank you, makes sense"
171,1499257244.245985,Beulah,does the describe of a spec always have a similar structure to the data it specifies ? Can you give a counterexample ?
171,1499257371.292835,Lucio,"<@Beulah> I am not overly familiar with clojure specs, but map specs are represented as vectors I think; well, as a map with a `:req` vector"
171,1499257464.326669,Beulah,"yes, ```(keys :req etc)``` -- but that has basically the same nesting structure; I'm trying to think of a case where you describe a nested structure of collections by a flat spec"
172,1499264759.073746,Zola,does clojure have a representation of infinity that can work with mathematical operators? something like `(&lt;= 1 2 Infinity)` ?
172,1499264966.20488,Beulah,```Double/POSITIVE_INFINITY```; or ```Number.POSITIVE_INFINITY``` in CLJS
172,1499265064.269242,Zola,!! thanks :slightly_smiling_face:
172,1499265114.300863,Kay,hey guys; what's you're preferred method of checking for nils before assignation ?
172,1499265147.321542,Kareen,<@Zola> see also <https://dev.clojure.org/jira/browse/CLJ-1074>
172,1499265181.342018,Kay,i just realized I am repeating `(:username respone)` when I `(if-not (nil? (:username response) (:username response) fallback-value))`; isn't there a syntactic sugar around this ?
172,1499265217.364896,Beulah,```(or maybe-nil-thing default-value)```
172,1499265251.385639,Kareen,assuming you also want to exclude `false`
172,1499265265.394734,Beulah,(assuming that)
172,1499265284.406483,Kay,ok; (-&gt; good sounds)
172,1499265320.429544,Nannette,"<@Kay> I end up writing functions like `(?apply pred f val &amp; args)` for these purposes. If the predicate fails, then pass the value along"
172,1499265322.430869,Beulah,but ```(if (nil? maybe-nil-thing) default-value maybe-nil-thing)```; is clear
172,1499265349.447546,Kareen,"if you specifically want to exclude nil and not false, there's `if-some`; `(if-some [u (:username foo)] u default)`"
172,1499265388.472008,Kay,there-s also (some-&gt;
172,1499265389.472582,Beulah,if-let
172,1499265401.480031,Kay,which short circuits when nil
172,1499265969.838724,May,<@Kay> I usually use some? when checking for nil. <https://clojuredocs.org/clojure.core/some_q>
172,1499266063.898893,Kay,"I think points for brevity go to `(or value fall-back)`; but yeah, some? is nice"
172,1499266101.922955,May,There is always when-some and if-some as well if you need to bind the value or branch accordingly when nil
172,1499267499.831872,Ferdinand,"<@Kay> For your particular case, `(:username response fallback-value)` will work as you want."
172,1499267518.843511,Kareen,not if username is set but nil
172,1499267528.849401,Ferdinand,"ah, yes"
172,1499267552.864563,Kay,true ! good catch
172,1499268155.248147,Evelin,"this might be a dumb question but how do i get org.clojure/algo.graph on lein?; i have `[org.clojure/algo.graph ""0.1.0""]`; the repl complains that it doesn't exist in clojars or maven; i believe the github page <https://github.com/clojure/algo.graph> is out of date so i looked inside clojure contrib and it seems the namespace is actually `clojure.contrib.graph` here <https://github.com/richhickey/clojure-contrib> though the project name is 'algo.graph' from here <https://github.com/clojure/algo.graph/blob/master/project.clj>; but unfortunately that isn't working for me either"
172,1499271604.370942,Daniell,"<@Evelin> The `clojure.contrib` stuff was for Clojure 1.2. It was discontinued when Clojure 1.3 came out.; `clojure.algo.graph` is as recent as it gets in the ""modern contrib"" libs. Let me check Maven Central for a version.; Confirmed -- no releases have been made to Maven Central. I'll bring it up in the dev channel..."
172,1499273022.153373,Marx,"<@Evelin> I haven’t done enough graphs work to be sure this is related, but I remembered seeing a recent announcement about <https://github.com/Engelberg/ubergraph>, perhaps that might have some of what you’re looking for in algo.graph?"
172,1499273044.165009,Evelin,"i considered loom and ubergraph, but i really don't need to pull in all of that; i really just need a topological sort, preferably one that partitions appropriately into sets"
172,1499273110.201042,Marx,Fair enough.
172,1499273159.227682,Evelin,right now i'm just ripping out algo's source; if sean comes back with any info on it being added to maven
172,1499273175.236216,Rebeca,<https://gist.github.com/hiredman/075b45eaeb01e4b526ce6f8854685487#file-ur-component-clj-L1-L13>
172,1499273177.237831,Evelin,i'll depend on that instead
172,1499273200.25037,Jodie,<@Evelin> toposort? <https://github.com/stuartsierra/dependency> :tada:
172,1499273252.278748,Evelin,thanks for the link i haven't' seen this before; thats not exactly what i wanted but its nice to keep in mind in case i need transitive dependencies
173,1499273938.657634,Lucio,"Hi! I have two “beginner” questions on `clojure.spec`:
(1) would it make sense to use `clojure.spec` to validate input API payloads?
~~(2) in that case, how would you work around the restriction that `clojure.spec`‘s map validation works by using namespaced keywords for key&amp;spec names?~~; just found an answer to (2); only (1) remains :slightly_smiling_face:"
174,1499276122.830773,Daniell,bcbradley: Just make sure you respect the EPL license and copyright!
172,1499276542.056411,Evelin,"if i got the gist of it, the EPL basically says i have to EPL my library if i have any EPL protected code in my library, right?"
174,1499277159.39004,Daniell,"IANAL (I Am Not A Lawyer) so I'd have to go research it. At a bare minimum, with all OSS, you must retain the copyright notice (along with any additional copyright you add).; Several OSS licenses are incompatible with other licenses so, yes, you are often ""forced"" to release your modified version of the code under the same license.; Unless you are doing this totally for an internal project and not planning to release it outside your company in any form.; (I had several, depressingly long meetings with the Legal Team when I worked at Adobe about OSS license compliance and compatibility... and the upshot of one of those meetings was that we had to ask one OSS project to re-license their code under a more friendly license for us to be able to continue to use it!)"
172,1499277732.713827,Shameka,another toposort <@Evelin> - can't remember where it was originally homed - <https://github.com/employeerepublic/deferst/blob/master/src/deferst/kahn.cljc>
175,1499279300.558903,Lucio,Hi. I am getting the follow error when trying to run `lein repl` with Clojure 1.9.0-alpha17. Could anyone please tell me what’s going on? <https://gist.github.com/hmaurer/47dfa107025f51ec71966170c537a578>; &gt; Caused by: java.lang.IllegalStateException: Attempting to call unbound fn: #‘clojure.future/ident?; <@Roseanna> maybe?
175,1499279506.672713,Margaret,oh - here’s a fun one <@Evelin> - stuartsierra/component comes with a toposort (used for figuring out which order to start components in); oh wait someone mentioned that already
175,1499279863.865258,Lucio,"I fixed the issue by reverting to Clojure 1.8.0 and adding `[clojure-future-spec ""1.9.0-alpha17""]` in my dependencies, which is what `lacinia` specified as a dependency (a library I rely upon). However I would still like to know exactly what the issue was if possible :slightly_smiling_face:"
175,1499279953.911408,Margaret,"at a certain point spec was taken out of the clojure 1.9 alphas so that it could be updated independently of the clojure code; code that was made for a different 1.9 alpha version prior to the split, won’t have that dep; so if you are using the newer alpha17 or later, you need to provide that dep"
175,1499280036.954333,Lucio,Oh I see. How are deps resolved by Lein by the way? If a library I rely upon has for dependency a different version of a library that I also use?
175,1499280055.964983,Margaret,you can see the actual versions used via `lein deps :tree`
175,1499280058.966238,Lucio,Will it just pick the most recent version? Or both?
175,1499280062.968087,Margaret,eariler in the list beats later in the list
175,1499280099.987786,Lucio,"oh, so it flattens all dependencies and sub-dependencies in a list, and the first one wins?"
175,1499280118.99787,Margaret,also you can use `:exclusions` to say “don’t use this dep to get this other dep” and avoid versions it asks for; <@Lucio> it’s more complicated than that - it’s an ordered tree
175,1499280138.008717,Lucio,"`lein deps :tree` is awesome, thank you :slightly_smiling_face:"
175,1499280140.009506,Margaret,but it does use the first one it finds
175,1499280166.023693,Lucio,"how does the ordered tree behaviour differs from what I was saying, if you don’t mind elaborating?"
175,1499280207.045911,Margaret,because it’s not flattened anywhere afaik - it traverses the tree and adds items to a set of deps if you don’t have a version already
175,1499280224.055023,Lucio,"oh right, ok, but the behaviour is similar"
175,1499280228.057043,Margaret,I guess conceptually that difference doesn’t matter - it’s as if you flattened and took the first you found
175,1499280260.074403,Lucio,"Will lein report if dependencies conflict? e.g. if I try to use a version of a dependency that introduced breaking changes, and a library I later require uses an old version of that dependency?"
175,1499280309.101988,Margaret,"no, lein will not complain, but `lein deps :tree` will report the conflict and tell you which it picked"
175,1499280347.122876,Lucio,"great, thank you :slightly_smiling_face: that clarifies some things"
175,1499280350.124697,Margaret,you can use `lein pedantic` (a plugin) to make it bail out with an error <https://github.com/xeqi/lein-pedantic>; oh wait that’s depricated and lein has the pedantic feature… never mind!; <@Lucio> see also `lein help deps`
175,1499281167.573559,Berry,"Is there a way to create a 'struct' that IS CONSTRUCTABLE ... but is NOT UPDATEABLE.

{} does not wok since it's updateable via assoc

Is there some way via deftype / defrecord to create something where (1) I have a constructor and (2) it can't be updated via assoc (or if it is updated, it becomes a plain map and is no longer a type / record)"
175,1499281435.723522,Margaret,sounds like you want deftype - you can’t assoc or conj etc. a deftype (unless you extend to those protocols of course)
176,1499281504.760623,Willow,"```
user&gt; (deftype Trial [a b])
user.Trial
user&gt; (def t (Trial. 1 2))
#'user/t
user&gt; t
#object[user.Trial 0x5e0c24f4 ""user.Trial@5e0c24f4""]
user&gt; (assoc t :a 2)
ClassCastException user.Trial cannot be cast to clojure.lang.Associative  clojure.lang.RT.assoc (RT.java:792)
user&gt; 
```"
175,1499281542.781178,Willow,"from the deftype page in the clojure docs: `deftype provides no functionality not specified by the user, other than a constructor`"
175,1499281550.784997,Guillermo,qqq: `{}` is _not_ updateable
176,1499281569.795124,Guillermo,persistent data structure
175,1499281581.801562,Berry,"sorry, by 'update', I meant create new obj with same 'type' as old obj"
176,1499281591.806401,Berry,I'm concerned with 'invaild objects'
175,1499281599.810822,Berry,"that claim to satissy certain constraints, but in reality do not; due to assoc; <@Willow>: defrecord doesn't does not work, as assoc 'prserves the record type' ; with deftype, how do I read the 'a' and 'b' ?"
175,1499281651.837238,Willow,"```
user&gt; (.a t)
1
```"
175,1499281684.854213,Guillermo,&gt; The XY problem is asking about your attempted solution rather than your actual problem
175,1499281697.861248,Berry,"<@Willow>: this was not part of the original request ...

but is there a way to have this also work with cljs + optimizations advanced; <@Guillermo> : I agree that my question was poorly formulated."
175,1499281723.874858,Guillermo,"invalid data is a gating problem -- you validate at the edge of a subsystem, then you operate with the data"
175,1499281731.878894,Willow,what was not part of the original request?; you asked how do you read the fields of the deftype
175,1499281746.886525,Berry,"I wnat field acccess to also work via cljs optimiazationsa dvanced; (.a t) I suspect, will not work as cljs optimizatinos renames the .a"
175,1499281793.910571,Guillermo,IMHO this is not a data structure problem / impl detail but a program design problem
175,1499281799.913848,Margaret,it would rename your accesses too if it did that - that’s kind of why advanced compilation ever works…; or would it? now I’m unsure
175,1499281877.953018,Berry,"<@Margaret> : optimizationsa-dvanced has me so scared I jus use (aget ... ""field-name"") everywhere"
175,1499281882.955767,Guillermo,"also if you suspect that something is generating invalid data, that is something clojure.spec + instrument is really good at catching"
175,1499281889.958939,Willow,but if you're scared of bad data getting into your data i think you're working on the wrong side
175,1499281901.965083,Berry,"here's the thing; I'm dynamically checking some type constraints; but if I ask that question, ppl tell me to use spec or core.typed :slightly_smiling_face:"
175,1499281919.973924,Willow,so what happens if the types don't align?; and who would introduce the bad data
175,1499281924.976577,Berry,throw an assertion; bad data introduced to my programming bugs
175,1499281940.984671,Margaret,"<@Berry> ```(ins)dev:cljs.user=&gt; (deftype Foo [a b])
cljs.user/Foo
(ins)dev:cljs.user=&gt; (aget (Foo. 1 2) ""b"")
2```"
175,1499281955.991928,Berry,<@Margaret> : nice; thanks!
175,1499281990.009792,Willow,"well that looks dangerous; that looks like ""b"" may not track what the fields get renamed to in aggressive compilation"
175,1499282045.036933,Guillermo,i still don't understand why you can't filter bad data at the edge
175,1499282078.052638,Berry,<@Guillermo>: the problem is not bad user input
175,1499282080.053641,Margaret,just spitballing: system that isn’t designed with the right edges in place?
175,1499282091.058674,Berry,"the problem is that I, the programmer, introduce bugs; these are bugs that a static type checker would catch at compile time; but in clojure, the next best thing I can do is to catch them at runtime; the input data is fine; it's internal functions that manip the data that violate type constraints"
175,1499282139.082845,Evelin,"which of these two implementations would you prefer and why?
```(defn inversion [nodes edges]
  (transduce
    (mapcat (fn [[k v]] (map #(vector % k) v)))
    (completing (fn [acc [k v]] (update acc k conj v)))
    (zipmap nodes (repeat #{}))
    edges))```
```(defn inversion [nodes edges]
  (reduce-kv
    (fn [acc k v] (reduce (fn [acc i] (update acc i conj k)) acc v))
    (zipmap nodes (repeat #{}))
    edges))```
expected shape of `nodes` is like `[:framebuffer-0 :framebuffer-1 :framebuffer-2 :texture-0 :texture-1 :texture-2 :texture-3 :program-0 :program-1]`
expected shape of `edges` is like
```
{:framebuffer-0 #{:texture-0 :texture-1 :program-0 :framebuffer-1}
 :framebuffer-1 #{:framebuffer-2 :texture-2 :texture-3 :program-1}
 :framebuffer-2 #{:texture-0 :program-1}}```
correct output for those specific inputs:
```
{:framebuffer-0 #{}
 :framebuffer-1 #{:framebuffer-0}
 :framebuffer-2 #{:framebuffer-1}
 :texture-0 #{:framebuffer-2 :framebuffer-0}
 :texture-1 #{:framebuffer-0}
 :texture-2 #{:framebuffer-1}
 :texture-3 #{:framebuffer-1}
 :program-0 #{:framebuffer-0}
 :program-1 #{:framebuffer-1 :framebuffer-2}}```"
175,1499282202.113106,Margaret,<@Berry> I’d think accidentally calling an accessor and constructor would be a lot less likely than accidentally calling assoc on the wrong object
175,1499282754.381191,Berry,"<@Margaret> : I can make the constructor private, then have a function (which calls the constructor) do checks beforehand"
175,1499283394.698935,Dirk,"<@Berry> For accessing object properties (as opposed to array elements), consider `goog.object/get` instead of `aget`."
175,1499283482.740708,Guillermo,<@Berry> creating custom types that have their own field accessors completely negates the value of generic data access from the clojure std library
177,1499283536.766691,Guillermo,your code will essentially be a non-reusable DSL
175,1499283560.777407,Guillermo,"I firmly believe you are going down the wrong path, and that the advice you're getting about specific implementation is misguided; you should test against invalid / incorrect data (even from your own code).  Have you considered writing generative tests for your datastructures?  (either from test.check or from spec); test against bad data while allowing bad data to exist; Lots of things that are common in other languages (e.g. privileged data) are the exact wrong approach in Clojure.; when I say 'generic data access' here is an example of what I mean:; ```
(get-in order [:line-items 2 :product :picture :url])
```
If you make a custom type, you'll need to do:; ```
(-&gt; order
  (get-in [:line-items 2 :product])
  (.-picture)
  (get :url))
```; You will infect the codebase with specificity; and negate a whole lot of the benefits of ""the clojure way"""
178,1499286019.014942,Wenona,is it possible to tell if you’re already in a `clojure.core.async/go` block inside a `defmacro`?
178,1499286087.048769,Willow,you could call `&lt;!`; the code of that is literally throw an error; the go macro totally rewrites everything in it. so if that throws an error then you are not in a go block. otherwise have it take from a channel that has a single value ready to give; super hacky
178,1499286449.231253,Wenona,our devs went a bit bonkers with nested `go`s
178,1499286492.252861,Rebeca,"the go macro actually macro expands everything before it does its thing, and the way it macro expands has some differences from the way the compiler does it; so you could try observing differences in the &amp;env map; really, if you are in that place, I would just write everything to assume it is being run from a go block in the async threadpool"
178,1499286679.34758,Margaret,"it seems like an `assert-go` macro would be good, or even `assert-not-go`, but code that changes behavior in/out of go seems like it’s asking for maintenance issues and subtle bugs"
178,1499286704.360525,Sandy,<@Wenona> what problem are you trying to solve?
178,1499286751.383573,Wenona,"it’s stuff like “inject tracking of metrics in async calls”; in retrospect, it probably should have just been a fn instead; And a few mistakes/misunderstandings (like “wrap in a go call to run this in a different thread”)"
178,1499286853.435223,Rebeca,:disappointed:
178,1499286941.479709,Wenona,"it only became clear after updating core.async to a newer version, since we started getting method too large errors"
178,1499287147.580917,Sandy,"So unless you're mixing core.match with core.async you shouldn't hit those problems often.; I mean 65k instructions is fairly large for a method, you might just be able to pull a few functions out the body of the go and reduce the method size a bit."
178,1499287259.635919,Willow,"i'm not able to get that hacky way to work. tried inlining the function, not sure; it might need to be a macro for the async compiler to do its thing?"
178,1499287288.650466,Evelin,"does anyone know if anyone has tried making futures as efficient as goroutines?; as far as i know futures spin up another thread, but I don't think they are pooled; maybe someone has their own implementation of futures?; i'm only asking because I really dislike core async's approach to concurrency (not that it is worse than most of the alternatives)"
178,1499287413.711038,Wenona,"after thinking about it, it seems like the urge to “hack how this macro works to handle go” would better be served by “rewrite some stuff as fns, and split things up a little”"
178,1499287542.77398,Margaret,"<@Evelin> futures are pooled, the fundamental thing is that threads are OS level and OS level context switching can’t be as fast as in-process context switches"
178,1499287568.786849,Evelin,ah well i'm misinformed about the whole kitnkaboodle then; do you think it would be possible to implement futures using in process context switching rather than os level switching?
178,1499287649.826062,Margaret,"then you require either 1) an interrupt and pre-emptive context switch or 2) cooperative multitasking; 1 will perform a lot worse - probably as bad as OS task switches, and introduce massive complexity; 2 is core.async :smile:"
178,1499287686.84438,Sandy,"Yeah, and futures aren't slow at all, they're just memory heavy; <@Evelin> have you looked at `agent`s?"
178,1499287730.866127,Evelin,"i though agents were pooled, and thats the reason i figured futures weren't; probably shouldn't assume though xd"
178,1499287746.874089,Sandy,futures will re-use threads though
178,1499287771.886921,Evelin,well thats reassuring
178,1499287801.901967,Margaret,futures use the agent send-off pool <https://github.com/clojure/clojure/blob/master/src/jvm/clojure/lang/Agent.java#L53> <https://github.com/clojure/clojure/blob/master/src/clj/clojure/core.clj#L6838>
178,1499287836.919588,Evelin,"i didn't know that, thanks for that"
178,1499287870.936066,Sandy,"They use a Java `Executors.newCachedThreadPool`, which means that once created the threads stick around awhile incase they need to be re-used. In my experience ""awhile"" is something around a minute.; but that's undefined"
178,1499287886.943902,Evelin,"i don't want to start ranting, but the reason i dislike core async so much is because it is pretty much just imperative programming; i'm not suggesting hardware threads plus semaphore hell is better"
178,1499287915.957993,Sandy,"Nope, I agree with you :slightly_smiling_face: and I ranted on that subject at some length at Clojure/West"
178,1499287947.974056,Evelin,i feel like futures + promises are the cleanest concurrency mechanism anyone has come up with so far
178,1499287951.976049,Margaret,"<@Sandy> btw thanks for that talk, I often find myself linking the youtube for people who are clearly confused about how to use core.async properly"
178,1499287954.977631,Evelin,"its clean, simple-- and doesn't surprise you"
178,1499287970.985258,Sandy,"But the answer is almost always: move the async, non-deterministic, bits to the edge of your system"
178,1499287971.985853,Willow,from the most recent clojure/west?
178,1499287982.991266,Guillermo,rich hickey elaborated on the problems of promises in a strange loop talk
178,1499288002.001094,Evelin,ooh can you link me that?
178,1499288005.002277,Sandy,dpsutton: <https://www.youtube.com/watch?v=096pIlA3GDo>
178,1499288009.004235,Margaret,<@Evelin> I’ve still seen suprises eg. someone writes code that creates futures inside doseq - eventually they get a collection big enough that the VM goes nuts
178,1499288013.006182,Willow,:+1:
178,1499288022.010563,Guillermo,<@Evelin>  <https://www.infoq.com/presentations/clojure-core-async>
178,1499288027.012665,Evelin,thanks!
178,1499288046.021931,Margaret,"if they were doing channel ops inside a doseq, the reason for the failure would be more clear and the mitigation strategy would be more straightforward"
178,1499288076.036306,Evelin,"i can pretty much sum up my stance on the matter with one simple comparison; core async and the go-lang tradition of concurrency involves imperative programming on stateful (chans are queues) entities; promises are simply unrealized values; clojure is a language of values, so i would prefer to use promises; and futures allow you to realize something concurrently; seems like a clean separation of responsibilities to me"
178,1499288246.119632,Sandy,"Nothing stoping you from doing this:
(&lt;!! (thread ...))"
178,1499288277.134663,Roseanna,"sorry missed this, did you try a `lein clean`? could be some stale `.class` files lying around"
178,1499288315.153675,Margaret,"<@Evelin> having worked on a large system which was using futures inside idiomatic fp constructs as a pervasive pattern, give me statefull queues of some kind any day - at least queues give you a straightforward mechanism for flow control and backpressure; you might prefer agents with their implicit queue to core.async of course - but you’ll eventually need a queue of some type if you need concurrency"
178,1499288407.199664,Sandy,"<@Evelin> promises encourage a request/response style of code. This is fairly limited. As <@Margaret> mentioned, CSP focuses on data flow, pipelines and queues. It's a ""steps of processing"" model vs a ""call and wait for a response"".; At least it should be, people use core.async as a request/response system, but it doesn't work out very well."
178,1499288503.248933,Evelin,i feel as though steps of processing could be implemented clearly with just chains of promises
178,1499288504.249138,Ferdinand,"&gt; people use core.async as a request/response system, but it doesn't work out very well"
178,1499288541.267256,Evelin,i do think backpressure is an issue though
178,1499288549.271346,Sandy,<@Ferdinand> we've all done it :slightly_smiling_face: no condemnation from me.
179,1499288633.311385,Lucio,<@Roseanna> Someone helped me out (see later messages in <#C03S1KBA2|clojure>). Basically it was a dependency issue
178,1499288702.343715,Tobie,is there a neat way to remove an element from a vector at index i
178,1499288758.370039,Margaret,"you could use a finger-tree instead of a vector, they are designed for such things <https://github.com/clojure/data.finger-tree>"
178,1499288843.407862,Tobie,"thanks for the suggestion, ill take a look :slightly_smiling_face:"
178,1499288874.421704,Shameka,"<@Evelin> chains of promises, composed with a promise-monad like 
<https://github.com/funcool/cats/blob/master/src/cats/labs/manifold.clj> 
or 
<https://github.com/funcool/cats/blob/master/src/cats/labs/promise.cljc>
works brilliantly for us"
178,1499288920.442376,Evelin,<@Shameka> wow i'll have to put that in a tab and read through it
178,1499288947.454827,Lucio,mccraigmccraig: <http://s2.quickmeme.com/img/44/44b0bd758f8ee5c81362923f0d5c8e017c9ddf623925e60c29a4c015b89fbb45.jpg>
178,1499288965.462713,Shameka,some sample code chaining promises this way - <https://github.com/employeerepublic/er-cassandra/blob/master/src/er_cassandra/model/alia/unique_key.clj#L61>
178,1499289089.517819,Willow,michaellindon: `(apply concat ((juxt (partial take 3) (partial drop (inc 3))) [1 2 3 4 5 6]))`
178,1499289162.549771,Garth,is `core.match` ok? it’s been on `0.3.0-alpha4` for the last 3 years
178,1499289539.713743,Daniell,It's pretty stable and hasn't needed much maintenance I suspect.
178,1499289595.737264,Willow,spoke with dnolen at conj last year. the way the decision tree is made is fine in java but removes some optimizations in cljs since it uses exceptions for backtracking.
180,1499289619.747974,Willow,"if i remember correctly, this was what he wanteded to implement a non-alpha release"
178,1499289627.751414,Daniell,"Versions aren't much of an indicator in Clojure-land, and a contrib library that has gone without updates for a while doesn't indicate it's been abandoned either. Which, yeah, can make it hard to tell the difference between very-stable-ware and abandon-ware :neutral_face:"
180,1499289635.754536,Garth,yeah; ok
178,1499289653.762446,Garth,"if the official status is Don’t Worry About It, then all the better; i just really like it and was worried something bad had happened"
178,1499289683.775355,Daniell,Someone just pointed out that `algo.graph` never actually got a release on Maven (and it hasn't had an update in four years).
180,1499289744.800948,Garth,"that’s bad, right?"
180,1499290220.001651,Trudie,"trying to use clojure 1.9 from emacs with cider, but when I run cider I get"
180,1499290316.041091,Willow,can you run a lein repl in this project without emacs?
178,1499290416.082294,Margaret,this is a known issue with clojure 1.9 and old core.async
180,1499290425.085695,Margaret,upgrade to a newer core.async and it goes away; <@Trudie> ^ forgot to tag
181,1499291248.406953,Owen,"<@Tobie> with specter:
```
(setval (nthpath 2) NONE [1 2 3 4 5])
;; =&gt; [1 2 4 5]
```"
180,1499291273.416052,Owen,also works with lists
180,1499291303.427271,Trudie,<@Margaret> Hm... now to find out which dependency has the wrong core.async version...
180,1499291369.452562,Margaret,you can specify your own core.async version and the deps will have to use it; or use `lein deps :tree` to see where it comes in
180,1499291403.465637,Sandy,<@Owen> Isn't that O(n) on the size of the new collection though? Why not just `(into [] (filter-nth ...) input)`
180,1499291409.467814,Margaret,"(that is, if your deps is earlier in the deps list it overrides)"
180,1499291512.50576,Owen,"<@Sandy> yea the underlying impl is O(n), but your snippet looks like O(n) as well"
180,1499291537.515141,Sandy,oh it is; but the whole idea behind conj and the like is that they are not O(n) on the size of the new collection; so I would flag both of our approaches in a code review for being a possible bottleneck
180,1499291610.542016,Owen,I don't think you can do better than O(n) for that task on a vector
180,1499291640.552495,Sandy,that's why we suggested finger trees
180,1499291680.567557,Owen,performance and just being able to do the task elegantly are two separate things; sometimes you need to remove an element from the middle of a vector and it's not a bottleneck; unreasonable to require every operation to be O(1)
180,1499291736.587965,Sandy,even then I'd be tempted to use take + drop to do the same thing
180,1499291743.590699,Willow,`(apply concat ((juxt (partial take 3) (partial drop (inc 3))) [1 2 3 4 5 6]))`
180,1499291748.592404,Sandy,or split-at or whatever it's called
180,1499291770.600931,Kareen,core.rrb-vector could be used aswell to keep performance sub linear
180,1499291772.601461,Owen,`nthpath` can encapsulate the optimal method; whatever it is
180,1499291785.606516,Kareen,has log subvec &amp; log vector cat
180,1499291814.616994,Owen,"I haven't investigated the optimal implementation for this particular task, but whatever it is it can be encapsulated behind the abstraction; specter is optimal for most of its functionality"
180,1499291847.629826,Trudie,"<@Margaret> Thanks, that worked! What a relief! Nothing more annoying than debugging the dev environment when in a hurry :slightly_smiling_face:"
180,1499291850.631108,Sandy,on that we'll agree to disagree
180,1499291864.636169,Owen,what are we disagreeing on?
180,1499291888.645013,Kareen,I think nathan was talking about performance &amp; tim about api?
180,1499291917.655816,Sandy,"yeah, I mean the problem is that specter in this case abstracts so much away that I really don't know what it's going to do"
180,1499291952.668521,Owen,you don't know what it will do semantically or performance-wise?
180,1499291998.686457,Sandy,"performance wise, there's a underlying assumption in specter that it will do ""the right thing"" while maintaining the data type. Many times I don't care about the datatype, instead I care about performance.; so our definitions of ""optimal"" differ"
180,1499292077.717874,Owen,"the original questioner asked about removing an element from a vector, which sounds like he cared about maintaining the datatype"
180,1499292124.734927,Sandy,"perhaps, but sadly I've run into too much code already that falls apart because someone did (nth ...) on a seq."
180,1499292213.767322,Owen,I really don't understand what you're asserting there
180,1499292223.7708,Sandy,"And what does ""the same type"" mean in the face of PersistentArrayMap? (I'm actually wondering on this one)"
180,1499292290.793994,Owen,`MAP-VALS` or `ALL` on a `PersistentArrayMap` output another `PersistentArrayMap`; even one that's already above the threshold; which is surprisingly possible
180,1499292350.814523,Sandy,and if I do something that grows it?
180,1499292362.818115,Owen,you can't grow it with those operations
180,1499292384.825505,Sandy,whatabout ops that you can grow with
180,1499292409.83398,Owen,"they'll convert to PersistentHashMap; maintaining the literal type isn't the goal of specter, rather to maintain a type with the same expected semantics; PersistentHashMap and PersistentArrayMap are implementation details; that specter maintains PersistentArrayMap on `ALL` and `MAP-VALS` is because that's the most performance optimal way to do the transformation"
180,1499292615.902308,Willow,"I've used an array map to maintain ordering for writing out columnar data, a persistenhashmap would make my site more dynamic than i like."
180,1499292644.912102,Owen,yea there are isolated cases like that where it matters but not for 99% of use cases
180,1499292648.91334,Willow,for sure; i hate some of the subtleties of the clojure datatypes; like conj being beginning of a vector and end of a seq; or backwards sorry
180,1499292756.948601,Sandy,"I also hate some of the side effects of these datatypes, and that's why I've backed off a bit from specter, hiding all these complexities behind a abstraction is nice, but it leaks in performance. How fast is ""remove nth""? Well it depends...; Same is true of recursive concat, conj, etc."
180,1499292785.95837,Willow,"what do you mean ""side effects of these datatypes""?"
180,1499292792.96078,Sandy,"bad wording, sorry; ""subtleties of these datatypes"""
180,1499292812.967312,Willow,figured. but wanted to know what you meant; ah yeah
180,1499292883.98891,Owen,actually for most uses of specter it's extremely difficult to outperform it
180,1499292887.989999,Sandy,"So yeah, back to the original problem, I think we should educate users of Clojure to say: ""What you are trying to do isn't supported natively by the datatype, you can fake it in these ways, but it's going to have performance problems with larger collections""."
180,1499292902.994698,Owen,"for most programmers I would say it's impossible because it requires too much internal knowledge of clojure; <https://github.com/nathanmarz/specter/blob/master/src/clj/com/rpl/specter/navs.cljc#L253>; that's 60% faster than next best method for transforming every value of a small map; as for ""remove nth"", specter is probably not currently optimal but that's only because the work hasn't been put into it; the abstraction can be optimal"
180,1499293083.051179,Sandy,optimal given the input data type...that's the catch
180,1499293107.058915,Owen,how is that a catch?; it can run different code for different data types
180,1499293231.097948,Sandy,"remove-nth will always be O(n) on a vector. No way to improve that. However, by educating users as to how the underlying collections work, maybe the'll reach for a different more optimal datatype."
180,1499293323.126784,Owen,"I 100% agree it's the programmer's responsibility to understand the data types they're using and the impacts of that, but that's completely orthogonal to specter; specter lets you manipulate your data way more elegantly, especially compound or recursive data, and in many cases with far better performance; I completely reject characterizing it like some magic library with performance ""leaks"""
180,1499293535.191792,Berry,"I don't think <@Sandy> was blaming specter for the ""leaks"" -- but rather, unless you already have a mental model of how the nested datatype looks, you can have a single piece of Specter code that is (1) very fast for certai nstructures and (2) very slow for other structures, because some stuff are O(log n) or O(n) depending on the underlying datastructure"
180,1499293627.219007,Owen,"whatever the underlying types are, specter will do the operation in the fastest way; it's the responsibility of the programmer to choose the most appropriate types for their app; criticizing specter for a programmer choosing inappropriate types doesn't make sense"
180,1499293844.284436,Berry,"1. I've studied specter a bit, even tried to implement a mini one myself.
2. I don't think I could do a better job myself.

3. I think ""leaky"" here just means -- as a programmer, you have to keep track of the underlying data structures, i.e. it's ""leaky"" in that you can't ignore the underlying details; not ""leaky"" as in space/time leakage.; I think this is the standard definition of ""leaky abstraction."""
180,1499293879.294691,Owen,"I wouldn't call that leaky; ""leaky"" more appropriately refers to details that you have to worry about that should be encapsulated"
180,1499294004.330818,Berry,"Quoting wikipedia:

In software development, a leaky abstraction is an abstraction that exposes details and limitations of its underlying implementation to its users that should ideally be hidden away.

But here, Spectre queries (or any other queries for that matter) are 'leaky' in that different data structures have different runtimes for different ops, and the programmer has to keep them in mind, so this isn't really abstracted away from the programmer.

[I don't know a way to do this better.]

[I think this 'leakiness' problem can not be solved -- i.e. any attempt to build a DSL that allows easy manip of heterogeneous datastructures will have to deal with this[]; Just to be clear, I don't know of a way to improve Specter -- I think it's hit local optima -- and this 'leakiness' is a fundeamtanl problem due to different data structures having different runtimes."
180,1499294067.349599,Owen,"data structures are never a detail that should be hidden away; we're just quibbling over terminology, I think we agree on the underlying principle"
180,1499294162.376927,Berry,"To someone who expects specter code to be ""what, not how"" it is leaky because they have to consider underlying datastructures.

To somehow who expects to always keep data structuresin mind, it's not leaky.

:slightly_smiling_face:; Let's argue over something else,; like ... where can i get a good set of exercises for learning how to write a nanopass compiler :slightly_smiling_face:; I'm watching the 2013 clojure conj <https://www.youtube.com/watch?v=Os7FE3J-U5Q> talk ... and I really want to try this out."
180,1499294385.440177,Owen,we can agree on that :slightly_smiling_face:
180,1499294477.465586,Sandy,"<@Berry> records for the AST, postwalk for the passes, run till fixpoint, about all there is too it; or hashmaps even for the ast, whatever you prefer"
180,1499294595.49785,Margaret,"or you could get creative and event source a queue of characters and fold over it to generate a projection representing your compiled code; just kidding, don’t do that"
180,1499294614.502931,Rebeca,"depending on your source and target you can do it without an ast; if you say your target is a superset of your source, it is macroexpansion; (or pretty close)"
180,1499294674.51974,Sandy,"true, but working with order dependant types is unpleasant; may be better with spec, but {:keys [fn-name body]}) is easier than `[_ fn-name _ body]`"
180,1499294741.538347,Rebeca,"sure; <https://github.com/hiredman/qwerty> ""macroexpands"" a lisp in to something like go in parens, then the emitter strips the parens so you can feed it to the go compiler"
180,1499294805.555621,Sandy,cool!
180,1499294851.568442,Rebeca,"I dunno if it rates an exclamation point, it was fun to fiddle with it for a while, then I gave up on it"
180,1499294856.569779,Berry,"hmm, and if I write the passes as transducers, can I easily get a monolithic compiler out o fthis?"
180,1499294884.577556,Sandy,"you can, but you'll quickly find that some passes need to be run more than once, or need to be run before/after other passes; tools.analyzer is a nano-pass compiler imo."
180,1499294913.585621,Kareen,and in different traversal orders
180,1499294931.590696,Sandy,"yeah that too.; <@Kareen> does tools.analyzer.jvm still walk the AST backwards for locals clearing? Maybe I'm mis-remembering, but I thought that was cool the first time I saw it."
180,1499295000.609879,Kareen,yeah; makes the algorithm much simpler than walking forward &amp; collecting usage points; I did it that way just because I couldn't understand the forward algorithm implemented in Compiler.java TBH :)
182,1499297425.242282,Celestine,"I'm struggling to wrap my head around clj-oauth.  All the examples use twitter, but I can't seem to get it to work with Google.  Google and twitter's terminology doesn't seem to be the same, and it's confusing the heck out of me.  Are there any examples using  google's api I can look at?"
182,1499298074.393296,Nita,I'm having trouble with core.async pub/sub. It seems like there must be something I'm not understanding. I can see that my system sometimes is publishing a lot of events really close together. Say 20 within 2 seconds. There are times that all but one of my subscribe loops (event listeners) aren't doing anything during this burst of activity. Then a while later (a couple of min sometimes) during another burst of publish activity the subscribe loops come to life and grab some data and push on to the subscriber channels.; I started out by not using any buffering on the channels. I'm not really clear when additional buffering makes sense or not; It really seems like some of my published events are being lost
182,1499298232.430126,Rebeca,the first thing to do is check that your topic-fn is returning values from the set of things you are subscribing to
182,1499298233.43031,Nita,"when just using (chan) for pub should my source threads block if the subscribers are idle?; yea, I have lots of debug messages that all looks pretty good"
182,1499298265.437697,Rebeca,how sure are you?
182,1499298275.440293,Nita,well I currently only have one topic
182,1499298280.441418,Rebeca,"like, are we talking strings you know are byte for byte the same?"
182,1499298305.447438,Nita,my topic is just a keyword
182,1499298394.46782,Rebeca,"the next thing to log would be the identity (pr-str prints out the identity hash if I recall) of each thing involved; to make sure you are creating the pub/sub on the same channel you are publishing to, and you are subscribing to the same pub/sub you are publishing to; if the channel you are publishing to isn't being consumed for some reason, your publishes with block if there is no buffer, and will block once the buffer is full; if I recall, a pubsub will consume everything and just ignore messages it has no subscribers for"
182,1499298538.500167,Nita,"right, that's the thing, it appears that my publishers never block"
182,1499298574.508442,Rebeca,"so I would double check your topic-fn, make sure it returns what you think it does on the inputs to the channel"
182,1499298591.512636,Nita,"when no buffer is supplied to the channel, does that mean it will block after the first put, until the first take?"
182,1499298628.521141,Rebeca,"e.g. if your topic-fn is a keyword, and your messages are maps, calling a keyword on a map that doesn't contain it would just return nil"
182,1499298662.52878,Nita,"yes, that is how my events are structured just as maps"
182,1499298696.536594,Rebeca,so invoke your topic-fn on one of the maps to see what it returns
182,1499298748.548409,Nita,"that's the thing it all works fine when I do it by hand, things get weird once there is lots of simulatneous activity; based on my logging I can see all the topics that are published and those that are received by the listenr loops"
182,1499298777.554909,Rebeca,how do you know your publishers don't block?
182,1499298888.580297,Nita,"I say that just based on my theads that push out lots of messges saying that they're publishing.... hmm wait you might be on to something; my log message happens right before I push not after, I might be misinterpreting whats going on; push=publish; ok, made some changes to logging and restarting everyting,; so could you help clarify about when is it appropriate to specify a buffer in these sceanrios?"
182,1499299103.630631,Margaret,"If things lock up under lots of activity, and you aren't buffering, and lots is &lt; thousands, I'd double check for blocking ops in your go blocks."
182,1499299144.639999,Nita,"yea I'm not into thousands of events, generally should be less than 50/sec"
182,1499299225.660704,Rebeca,buffering is going to mask any problems with feedback you have
182,1499299346.690351,Nita,"ok, just got a big burst, it looks like I'm not blocking when I publish, the pre/postpublish log messages are all within the same millisecond"
182,1499299352.691718,Rebeca,"it sounds like you are interfacing regular thread using code and core.async, and my bet is you are either using put! to publish or (async/go (&gt;! ...)), when you should be using &gt;!!"
182,1499299402.703307,Margaret,"Also, go blocks can die without visible feedback or error messages, you could just get backed up as consumers silently fail."
182,1499299403.703677,Nita,"yes, I'm using async/go &gt;!"
182,1499299424.708545,Rebeca,the question is how you using it
182,1499299428.70948,Nita,its funny but every example of pubsub I came across did it this way
182,1499299464.717473,Rebeca,"if you create a go block from a normal thread, you should wait for its result using &lt;!!; I mean,  I am kind of guessing here  and what are likely to be issues; I still think it is some kind of issue with your topic-fn, but you have assured me it isn't"
182,1499299627.755203,Berry,is identical? guaranteed to be an O(1) time pointer comparison
182,1499299648.760259,Rebeca,"if the publishers aren't actually blocking, all the symptoms point to a disconnect between pub and sub, the likely reason is the result of topic-fn isn't what you think; so I might do something like replace the topic fn with `(constantly 1)` make a channel subbed to 1, and verify it is getting all the traffic"
182,1499299739.780616,Nita,"<@Rebeca> ok, but I think based on what <@Margaret> was saying is that my usage of go (&gt;! ...)  could be the prob; literally all of my topics are the same {:transformer-event :ev1 or :ev2 or ev3}"
182,1499299823.798914,Rebeca,"definitely, like I said, ""if publishers aren't actually blocking"" if they are blocking and you just can't tell, or they are just dying, then that would be your problem"
182,1499299870.808995,Nita,"cool, I'm gonna change my publish to use &gt;!! and see how that affects the situation"
182,1499299968.830482,Rebeca,"`&gt;!!` is really blocking, not for use in go blocks, only for use on real threads"
182,1499299992.835583,Nita,yea I took out the go block; doesn't seem to be making any different behavior
182,1499300041.846519,Rebeca,your producer threads are still not blocked?
182,1499300108.861158,Nita,"I have a log message before the publish and another after, and they are always within a millisecond; doesn't look blocked to me"
182,1499300170.87554,Rebeca,are you sure those aren't spurious log messages coming from threads left running from a previous attempt?
182,1499300293.902869,Nita,"valid question, I'll restart the whole shebang; this is really puzzling to me.; given that I'm not buffering what are the scenarious that would cause events to be dropped?"
182,1499300481.943528,Rebeca,"well, you could think events are being published when they are not, because your producers are just blocking. the topic-fn could be returning something you are not subscribed to so messages get dropped, or your subscribers do get the messages and just don't do anything"
182,1499300560.959941,Nita,givent that I only have 1 publication on one channel there should be no pub log messages that are publishing into nothing; there are however of course several sub channels and loops
182,1499300597.967525,Rebeca,are you sure you are subscribing to the same pubsub you are publishing to?
182,1499300600.96829,Nita,"ok, now i'm finally seeing some blocking; I see several pre publish logs, with no coresponding post publis logs"
182,1499300655.979522,Rebeca,"right, that blocking is back pressure being communicated back from the downstream async bits, which are stuck where or going really slow; are the down stream bits re-publishing to the same pubsub?"
182,1499300805.009623,Nita,no thats part of this whole business I've never been too clear on. I have no logic for re-publishing; by downstream bits are you referring to the sub handlers?
182,1499300886.026232,Rebeca,"yes, things downstream of the pubsub"
182,1499300926.034648,Nita,"oh, well my sub handler loops publish on to the sub channels, is that what you mean?; the sub channels are obviously differnt than the pub channel"
182,1499300954.040105,Rebeca,"that could be the source of deadlock; whenever you have a feedback loop (a process that feeds output back in to its input) it is really easy to deadlock; since the sub channels don't have a buffer, publishing to them blocks until someone else consumes from them; depending on what you are doing, adding a buffer might fix it, or might not, because a buffer is fixed in size, and if you feedback more than the size of the buffer, you are deadlocked again"
182,1499301173.084765,Nita,"ok let me get this straight, my listener loops take off of the sub channel; the clojure publisher logic puts on to the sub channel based on the topic-fn; all of my sub loopse run forever taking from the sub channels and then calling a handler; I think you're saying if my sub loops get stuck then that could be causing the deadlock, like handler never returning I guess"
182,1499301321.114054,Rebeca,oh; if you are calling a function that never returns that is another problem; you cannot do that kind of thing from a go block
182,1499301348.119377,Nita,"that would all make sense if the whole thing locked up and never recovered, but that doesn't happen"
182,1499301357.121062,Rebeca,it will block the threadpool go blocks use
182,1499301360.121615,Nita,"no I don't thnk I'm calling a function that runs forever; I'm not seeing anything like that; if my handlers got stuck the whole system should eventually lock up, and that never happens"
182,1499301419.133474,Rebeca,"or if they run slow,  or if they do blocking stuff on the async threadpool"
182,1499301494.148157,Nita,"the handlers can be slow compared to the publishers, when there is lots of activity, they all run in their own go blocks"
182,1499301514.15213,Rebeca,you are ddosing the async threadpool
182,1499301554.159588,Nita,too much activity for the go blocks that the handlers are in?
182,1499301564.161753,Rebeca,"I dunno about too much; it sounds like everything is behaving as designed, feedback is slowing your publishers to a rate that matches the consuming"
182,1499301615.172125,Nita,well except for the lost events; that I still don't understand
182,1499301629.174722,Rebeca,"in this case, the processes reading from the sub channels aren't able to get time on the threadpool to run; are you sure they are lost? or are they just waiting to run in a completely backed up system"
182,1499301733.194604,Nita,"you see the thing is, my publishers are bursty, there are short periods of busy activity and long periods of relative calm,; given that the system never locks up, all events should eventually be handled in the calm period, but that isn't what is happening.; aggh, I'm gonna have head home soon, thanks for being a sounding board on this pub/sub stuff"
182,1499301852.217488,Rebeca,"you might want to look at one of the pipeline variants, it may simplify things a lot"
182,1499301919.230939,Nita,"I didn't even know about pipelines, something new to learn tomorrow I guess; cool, thanks, have a good evening (or what ever timezone appropriate part of day is appropriate)"
183,1499311846.08261,Loretta,"<@Berry> if you didn't already look at the source a few hours ago, yes, `identical?` is just:
```static public boolean identical(Object k1, Object k2){
	return k1 == k2;
}```"
184,1499324874.444285,Darci,"Trying to flatten a nested map to a 'referenced nested map':
```
{:a1 {:b1 ""val1"" :c1 2}
 :a2 {:b1 ""val2"" :c2 {:d1 3}}}
``` 
to
```
[{&lt;0&gt; {:a1 &lt;1&gt; :a2 &lt;2&gt;}
  &lt;1&gt; {:b1 ""val1"" :c1 2}
  &lt;2&gt; {:b1 ""val2"" :c2 &lt;3&gt;}
  &lt;3&gt; {:d1 3}]
```
`&lt;n&gt;` being some value, doesn't really matter a lot - just a number would certainly do."
185,1499329445.943737,Gerda,<@Celestine> did you get an answer ? is this useful <https://github.com/r0man/oauth-clj/blob/master/src/oauth/google.clj>
186,1499330283.265972,Nannette,"I am somewhat bewildered by core-async terminology. `pipeline` is for computation (non-blocking all the way), `pipeline-async` is for ""async"" operations which seems to be operations which may park the statemachine and `pipeline-blocking` is used for straight up blocking ops.

I am mostly confused about  ´pipeline-async`.

Am I right in assuming:
  * (#A1) some operations, say `(a/&lt;! (a/timeout 3000))` - would park for approximately 3 seconds - so operations like it (take from a channel) are OK inside of `pipeline-async`.
  * (#A2) the reason the `af` fn in `pipeline-async` receives a channel onto which the result should be delivered is because I can then easily wrap a typical callback-style async operation by letting the callback put a message onto this result channel ?"
185,1499330887.498141,Gerda,<@Celestine> this might be better .. I think you need OAuth2 for google and this repo has a google example <https://github.com/craygo/clj-oauth2/blob/master/src/clj_oauth2/google.clj>
186,1499342483.511913,Nannette,No one has some thoughts / can confirm/deny my assumptions mentioned above ?
186,1499345043.460868,Margaret,<@Nannette> the purpose of the chan passed to af is to allow N results (0 or more) onto to from each call too af; Otherwise it would have to build and return a collection.
187,1499360092.399196,Berry,"<@Loretta>: (re identical? being pointer equality check) -- nope, haven't read source yet; thanks for checking for me :slightly_smiling_face:"
188,1499364129.745017,Laci,"Is there a `exports.default` equivalent (from Node.js) for Clojure? Use case, I have a file called `config` that loads an EDN file, parse it and store it to a variable called `config`. Whenever importing it I have to `config/config` which looks... Weird."
188,1499364295.84306,Lucio,<@Laci> what about refer? `(require 'my-app.config :refer [config])`
188,1499364352.876954,Laci,"<@Lucio> Thanks, that could work. However, I am also exposing two other variables on this file that I later want to reference too. As far as I understand, with your solution, I would only be able to refer to the `config` variable and nothing else."
188,1499364384.895767,Lucio,<@Laci> you can add any number of variables/function in the vector after :refer
188,1499364403.907007,Laci,"<@Lucio> Oh I see, let me try that."
188,1499364457.938041,Lucio,"<@Laci> actually I got the syntax a bit wrong. It’s
`(require '[my-app.config :refer [config]])`"
188,1499364761.111141,Margaret,"<@Laci> another thing to consider is that since good clojure style is to use the namespace prefix, you can use a name that isn’t redundant with the prefix; for example if the ns were environment so it was `environment/config` and the other things in the ns were environment related but not the config data itself, or if the var were settings, so it’s `config/settings` and the rest of the ns is about things that are about config but not the specific settings"
188,1499364828.149655,Lucio,<@Margaret> is using :refer bad clojure style? I am new to clojure so I don’t really know
188,1499364871.173842,Margaret,<@Lucio> it’s OK in moderation - but there’s a reason nobody writes ns forms with `:use` any more
188,1499364899.189246,Laci,"Thanks both <@Lucio> and <@Margaret>.; Since it only exposes 3 public vars for now, I'm going with `:refer`"
188,1499364939.212505,Margaret,that’s the most I’d want in a client ns period; not just from one ns - from all combined
188,1499364957.222607,Lucio,"<@Margaret> :use is an order of magnitude worse though, right? it just refers everything"
188,1499364969.229381,Margaret,"right, but it’s a matter of degree not kind"
188,1499364975.233355,Lucio,"yep, true"
188,1499365407.480204,Laci,<@Margaret> What if I have a library that exposes a bunch of stuff but I just need a few of them. Still the best practice is to go with namespaces instead of using `:refer` and `:only`?
188,1499365447.502419,Margaret,use :as; unless you are using the function extremely frequently
188,1499365473.517957,Laci,But `:as` would still load everything from that file into memory no?
188,1499365481.521936,Margaret,that has nothing to do with it; all :as does is create an alias in your ns
188,1499365499.531772,Aldo,the whole file is compiled and loaded into permgen regardless of how you refer to it
188,1499365511.538743,Margaret,"not using :refer is not about memory usage, it’s about poluting a namespace with bindings that are irrelevant"
188,1499365511.538861,Laci,"Gotcha, that's nice to know. Thanks."
188,1499365515.541202,Margaret,it’s about code readaiblity
188,1499365547.559144,Laci,So I don't really see a use case for anything other than `:as` (perhaps only `:use` because can be handy on the REPL)
188,1499365562.568054,Margaret,yup - that’s almost always the right way to do it
188,1499365573.574209,Aldo,yeah tht's the general consensus that's emerged
188,1499365575.575254,Margaret,but there are exceptions eg. if every function in your ns is using &gt;! from core.async; that makes sense to refer
188,1499365586.581777,Willow,notable exceptions `deftest` and `is`
188,1499365615.598813,Margaret,"<@Willow> yeah, to me that’s the same exception  - every form in my test ns uses deftest once and is multiple times; so it’s ubiquitous enough to drop the prefix"
188,1499365652.62027,Willow,for sure. i'm a big fan of the namespaced functions. common lisp gets difficult to read because of that. also emacs-lisp...
188,1499365793.700762,Margaret,it’s another flavor of the same problem overuse of inheritance causes - “where the hell is this name defined?”; but inheritance tends to get into a worse state because it’s so common to rebind the same names
188,1499366314.000627,Evan,<https://stuartsierra.com/2016/clojure-how-to-ns.html>; i quite like these principles
189,1499367304.551253,Barbera,"i actually alias clojure.test, mostly to get completion and automatic require in cursive"
188,1499367814.843067,Aldo,yeah cursive actually makes :use/:refer even less appealing
189,1499368232.068002,Willow,oh can it not suggest things that aren't in the current namespace if they don't have an alias?
190,1499370552.257784,Jutta,"I'm writting a macro that transform a keyword into a symbol
This symbol will be used on a `(def ~symbol ...)`
There is a ""default"" way to normalize `:foo.bar/quoo` to a valid symbol?"
190,1499370835.406477,Wenona,`(symbol (namespace kw) (name kw))`?
190,1499371225.612313,Margaret,def can’t take namespaced symbols though
190,1499371467.739996,Wenona,"yeah, probably just munge the ns &amp; name into a string, separated by some other string, if the namespace is important"
190,1499372002.012763,Jutta,<@Wenona> I need a local symbol. Some like `foo_bar__quoo`
190,1499372020.022372,Margaret,"if it needs to be “local” why is it going in a def?; perhaps I misunderstand what you mean by local here, but by the standard clojure definition, def doesn’t and can’t be used to create locals"
190,1499372174.102204,Jutta,`(my-cool-macro :about.this/keyword [some cool dsl])` ~macro-magic~&gt; `(def about_this_keyword :result-of-my-macro)`
190,1499372258.145491,Margaret,"That addresses the question, that doesn’t do anything with locals as clojure defines them. But given that in order for the macro to work :about.this/keyword needs to be a literal, why not just provide the symbol directly?"
190,1499372273.152993,Aldo,"<@Willow> no it suggests them fine, it just feels more useful when it narrows it down to a specific alias"
190,1499372288.160581,Willow,ah yeah. easier to browse; CIDER has a browse namespace feature which is really nice
190,1499372367.203247,Jutta,"noisesmith: because I'm talking about a a keyword. I will generate a rule for clara.
Dynamic symbols will cause difficulties on debug"
190,1499372413.226672,Margaret,what I am saying is that the macro won’t work unless the keyword is a literal in the form; a symbol as a literal in a macro that becomes a binding does not cause any debug difficulties; do you mean the keyword literal is the same as a keyword that gets used elsewhere?
191,1499372934.498141,Marina,"hello, i’m trying to take a sqlvec like ```[""SELECT * FROM ? WHERE (? = ? AND ? = ?)""
 ""Aliens""
 ""WritesPoetry""
 ""True""
 ""TheirPoetryIsGood""
 ""False""]``` and convert it into a sql string

usually, i would be content with this as clojure.java.jdbc accepts this. but in my current situation i am communicating with AWS Athena which accepts a string representing a sql query."
191,1499373012.539355,Aldo,replace ? with '%s' and [...] with (format ...)?
190,1499373147.611861,Marina,that would certainly do the trick
191,1499373181.629502,Marina,but sufficient to prevent against malicious input?
191,1499373218.648279,Aldo,definitely not :slightly_smiling_face:
191,1499373274.677322,Marina,therein lies the rub
191,1499373396.739788,Aldo,if athena doesn't have prepared statements then you'll need a function that escapes sql in a manner that's safe for athena
191,1499373399.741349,Rebeca,"the ? after FROM isn't actually valid jdbc if I recall either; jdbc, or all the jdbc drivers I have used, don't let you parameterize the table name; apparently the .toString method on a prepared statement for some jdbc drivers will give you the sql string; athena also has a jdbc driver, so you could just use that"
191,1499373657.871804,Marina,"as it turns out athena does have a jdbc driver; happy days; <https://docs.aws.amazon.com/athena/latest/ug/connect-with-jdbc.html>; thanks all, much appreciated"
191,1499374004.048524,Millicent,what clojure libraries exist for desktop ui's? is there anything like re-frame for clojurefx? not really interested in electron; i found a lot of things that are out of date.... looking for something that's been maintained
191,1499374226.160274,Sandy,"<@Millicent> I maintain fn-fx, but to push it much further we need users. Not a whole lot of people trying to do JavaFX with Clojure; <https://github.com/halgari/fn-fx>; That being said it's React for JavaFX and works fairly well for ""normal"" apps, the rough edges are around things like animation."
192,1499374330.213078,Leann,"hi, just a quick question, how do you do comment blocks? do you just put a string inside (comment)?"
191,1499374358.227553,Millicent,"<@Sandy> i see... well, i'm a student trying to build a portfolio, so this seems like an interesting area that clojure could improve on... do you know if javafx is popular in the java world?"
192,1499374360.228309,Danyel,<@Leann> #_(this block is commented)
192,1499374461.281534,Leann,"ok, i see, thanks!"
191,1499374465.28353,Sandy,"<@Millicent> there aren't a lot of Java desktop apps, but JavaFX is a really nice platform. It's fast, GPU accelerated, and the API is *very* uniform. Infact the vast majority of fn-fx is auto-generated code created by the library introspecting on the JavaFX API."
191,1499374694.40107,Millicent,"<@Sandy> sounds interesting, i'll check it out! thanks"
192,1499375588.84502,Willow,"<@Leann> ""comment block"" is a little ambiguous. do you just want a block of comment text (like a multiline comment) or do you want to comment one or more sexp's?"
193,1499375643.869705,Aldo,"<@Joette> without going too far into it, your `filter` example is lazy and your transducer example isn't, and you're only taking the first result. so the comparisons are going to be a bit meaningless"
192,1499375652.873765,Danyel,<@Joette> are you sure of your measurements? The above benchmark code looks very questionable
193,1499375709.899749,Aldo,also without showing what `year-dirs-only-xf` is defined as we can only really guess as to what's happening
192,1499375777.930242,Leann,"<@Willow> yes, most of my project is commented like that but it's a little bit of a pain"
192,1499375787.934503,Willow,"not sure which editor you're in, but most should have some way to format a long single comment"
192,1499375793.936859,Leann,Cursive
192,1499375797.938462,Willow,what is the pain point in using the language's comment syntax?
192,1499375823.950193,Leann,"it does not bother me to use it, it bothers me to write ;; all the time when i am writing it"
192,1499375867.96894,Willow,i'll bet cursive will do it for you; but if that's what you prefer go for it
192,1499375899.982802,Leann,"i'll try to activate something in cursive for that, because right now it does not"
193,1499375907.986394,Aldo,<@Joette>: ok then yes it looks like it's pretty much because your latter example is lazy and your format example is not
193,1499375921.992614,Joette,<@Aldo> was trying to not spam the channel with too much code. Any easy way to keep the composability of transducers but stay lazy and fast?
192,1499375935.998706,Willow,don't enter newlines? i'll bet the autoformatter takes care of it for you
192,1499375982.019797,Aldo,"if the situation/algorithm benefits from laziness my first instinct is to say ""don't use transducers there"""
192,1499376050.050852,Leann,"doesn't look like it <@Willow> , there's an option to auto-wrap at the 80-columns limit but i don't want that for code, i will ask in the cursive channel"
192,1499376052.051614,Joette,<@Aldo> is non-laziness inherent for transducers or is it just the way I use them?
192,1499376106.076007,Aldo,"I believe so, one of the reasons that they're faster (in situations where laziness isn't a benefit) is because they don't have the overhead of keeping track of unrealised computations"
192,1499376151.095661,Margaret,"it’s a lot simpler to enumerate the things that are lazy (there’s very few), and sequence is the only built in lazy thing using transducers and I forget the details but saw it explained that sequence was sub-optimal in important was compared to other lazy functions; a transducing function just transforms a single result, so would hardly benefit from laziness, a transducing context can be lazy or not (and sequence is the only lazy built in transducing context)"
193,1499376283.15265,Joette,"<@Aldo> <@Margaret> thanks, I will go back and meditate some more on transducers and laziness…"
194,1499377004.461817,Debby,is there a way to access the value of the default ring memory store atom from the repl?
194,1499377909.827545,Tobie,"```
(* 3 (/ 1 3))
=&gt; 1N
```
I am confused why I would get a BigInt here; is there a design choice which made the return value a BigInt and not an Int?"
194,1499378181.932252,Hiram,"<@Tobie> ```user=&gt; (type (/ 1 3))
clojure.lang.Ratio```; and `Ratio`  is defined in terms of `BigInt` <https://github.com/clojure/clojure/blob/f572a60262852af68cdb561784a517143a5847cf/src/jvm/clojure/lang/Ratio.java#L23>"
194,1499378285.972746,Tobie,"ah ok, thank you"
195,1499379495.401761,Agnus,<@Leann> ```#_(this s-exp will be entirely ignored)``` ?
195,1499379543.417305,Leann,"<@Agnus> yes, someone told me about that macro, thanks anyway"
195,1499379643.449833,Agnus,"Didn't realise where my scrollbar was at the time, too early :wink:"
196,1499382887.410139,Kalyn,"Any book (or blog) recommendation, specifically for clojure concurrency?
I've spent some time today wrangling atoms, agents, `add-watch` and promises, for managing a work queue. It has been a nice drill. I'm undecided what's the best queue management technique and might suspect clojure.async or even some Java implementation might be more performant/safe.; Maybe someone's written a book I'm not seeing about that?; :slightly_smiling_face:"
197,1499383264.514337,Celestine,<@Gerda> Thanks.  That second did the trick.
198,1499384110.722938,Mardell,"one of these two expressions looks wrong to me:
```user&gt;  (* 2.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001M 1.0)
2.0
user&gt;  (* 2.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001M 1.0M)
2.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010M
```; are bigdecimals special in being coerced to a less precise type in `*` ?"
198,1499384663.854741,Rebeca,"```
user=&gt; (.doubleValue (BigDecimal. ""2.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001""))
2.0
user=&gt; 
```; basically, fixed precision floating point numbers are dirty and their dirtiness will contaminate any math they are used in; 1.0 in that expression is a fixed precision float (a jvm double), and that is what causes weirdness; clojure, encoded as a big honking class file, has rules about how you convert types to do math operations, and doubles as a type dominate pretty much everything, meaning if you have doubles in your expression, internally numbers that are not doubles are going to be turned in to doubles when doing math"
199,1499385553.065131,Mardell,so long as it's done on purpose i guess
200,1499392285.444023,Celestine,"Is there a known issue between com.datomic/clj-client, figwheel, and clojure-1.9.0 ?  I cannot get them to compile together. Trying to start a repl gives a spec error:
```
Exception in thread ""main"" java.lang.ExceptionInInitializerError
	at clojure.main.&lt;clinit&gt;(main.java:20)
Caused by: clojure.lang.ExceptionInfo: Call to clojure.core/refer-clojure did not conform to spec:
In: [2 1] val: :as fails at: [:args :exclude :op :quoted-spec :spec] predicate: #{:exclude}
In: [2 1] val: :as fails at: [:args :only :op :quoted-spec :spec] predicate: #{:only}
In: [2 1] val: :as fails at: [:args :rename :op :quoted-spec :spec] predicate: #{:rename}
In: [2] val: (quote :as) fails at: [:args :exclude :op :spec] predicate: #{:exclude}
In: [2] val: (quote :as) fails at: [:args :only :op :spec] predicate: #{:only}
In: [2] val: (quote :as) fails at: [:args :rename :op :spec] predicate: #{:rename}
:clojure.spec.alpha/spec  #object[clojure.spec.alpha$regex_spec_impl$reify__1200 0x43f50bfe ""clojure.spec.alpha$regex_spec_impl$reify__1200@43f50bfe""]
:clojure.spec.alpha/value  ((quote :exclude) (quote [reduce transduce into merge map take partition partition-by bounded-count]) (quote :as) (quote core))
:clojure.spec.alpha/args  ((quote :exclude) (quote [reduce transduce into merge map take partition partition-by bounded-count]) (quote :as) (quote core))
 {:clojure.spec.alpha/problems ({:path [:args :exclude :op :spec], :pred #{:exclude}, :val (quote :as), :via [], :in [2]} {:path [:args :exclude :op :quoted-spec :spec], :pred #{:exclude}, :val :as, :via [], :in [2 1]} {:path [:args :only :op :spec], :pred #{:only}, :val (quote :as), :via [], :in [2]} {:path [:args :only :op :quoted-spec :spec], :pred #{:only}, :val :as, :via [], :in [2 1]} {:path [:args :rename :op :spec], :pred #{:rename}, :val (quote :as), :via [], :in [2]} {:path [:args :rename :op :quoted-spec :spec], :pred #{:rename}, :val :as, :via [], :in [2 1]}), :clojure.spec.alpha/spec #object[clojure.spec.alpha$regex_spec_impl$reify__1200 0x43f50bfe ""clojure.spec.alpha$regex_spec_impl$reify__1200@43f50bfe""], :clojure.spec.alpha/value ((quote :exclude) (quote [reduce transduce into merge map take partition partition-by bounded-count]) (quote :as) (quote core)), :clojure.spec.alpha/args ((quote :exclude) (quote [reduce transduce into merge map take partition partition-by bounded-count]) (quote :as) (quote core))}, compiling:(clojure/core/async.clj:9:1)
```
The stack trace lists a few references to figwheel_sidecar, otherwise it's all clojure.lang and clojure.core.

If I switch to clojure 1.8.0 or remove com.datomic/clj-client, then everything compiles fine.  But that combination of clj-client and clojure 1.9.0 keeps throwing this error.  Any ideas what might be causing it?"
200,1499393708.717671,Margaret,1.9 enforces things that are silently accepted by older versions; are you using the newest figwheel?
200,1499394087.785898,Celestine,"I think so, 0.5.11; It's listed as the newest on clojars"
200,1499394161.798743,Margaret,<@Celestine> <https://github.com/bhauman/lein-figwheel/issues/540>; there's a snapshot figwheel that eliminates the issue
200,1499394322.827818,Celestine,"Nope.  Still get the error.  It does seem to be the same error though.; It really seems weird that adding datomic/clj-client introduces the error (and removing it resolves it), but the stack trace mentions figwheel.; It does work with clojure-1.9.0-alpha15 though, but not alpha16 or 17; I suppose for the moment that's my workaround, to use alpha15 instead.; Bah, I spoke too soon.  datomic/clj wasn't included.  Still doesn't work with the client library at all.  I guess I'll have to give up trying out spec altogether for now."
200,1499395013.952459,Daniell,"<@Celestine> according to that issue "" you can upgrade figwheel to 0.5.10-SNAPSHOT or greater. """
200,1499395040.957271,Celestine,"Yeah, I was using 0.5.11.  Tried the snapshot too.  They both don't work.; They work if I'm not trying to use datomic"
200,1499395059.960762,Daniell,"And if datomic/clj-client is causing the problem, add an exclusion on org.clojure/core.async on that dependency"
200,1499395373.015497,Celestine,Adding the exclusion seems to work.
200,1499395535.044266,Daniell,"I'm surprised there isn't a more recent datomic/clj-client with an up-to-date core.async dependency that works cleanly on Clojure 1.9 Alpha 17.; FWIW, we have Clojure 1.9 Alpha 17 in production -- spec is awesome!"
200,1499395580.051741,Celestine,"Yeah, it looks really neat.  I'm looking forward to trying it.  Thanks for the help."
200,1499418347.115985,Nilda,There must be a nicer way to write this `(-&gt; csv-rows (nth 7) (#(drop 10 %)))`
201,1499418579.1998,Nilda,Is `(as-&gt; csv-rows tmp (nth tmp 7) (drop 10 tmp))` optimal? Or is there a better way?
201,1499418676.235343,Otha,"```(-&gt; csv-rows (nth 7) (nthnext 10))```, if I got it right"
201,1499418781.272995,Wilfredo,"What exactly are you trying to do there, <@Nilda>?"
201,1499418829.29042,Nilda,"<@Wilfredo> Take the 7th row in a two-dimensional vector, drop the 10 first items in that row."
201,1499418831.291116,Otha,nthnext version is shorter :slightly_smiling_face:
201,1499419174.416716,Nilda,"<@Otha> A superior editor, I know. I’ll sit down and learn it when I become a real developer."
201,1499419194.424047,Wilfredo,<@Nilda> Just use Cursive. :stuck_out_tongue:
201,1499419273.454175,Otha,„And thus the peace was broken once more.“
201,1499419384.495169,Nilda,"Cursive and Emacs are roughly at the same level of approachability for me. I’ll pick a proper editor to learn when The Guild of Real Developers write my name into their books.; I briefly used Atom and Proto repl. Went back to Sublime when I couldn’t figure out a way to automatically clean up indentations/spaces in a document in Atom.; I.e., ctrl+i from LispIndent."
201,1499419504.53911,Otha,"Cursive is nice, the only thing is I don't like to use multiple editors, and since Clojure isn't the only language I use, Emacs is my editor of choice :slightly_smiling_face:
Also, Emacs is written in lisp, so it's pretty simple to hack it yourself."
201,1499420651.960607,Wilfredo,"That’s the thing, because Cursive is just a plugin for IntelliJ IDEA you install that plus whatever other plugins you need and you have a single environment for everything.; After years of Vimming this plus IdeaVim just works for me, and I don’t have to learn a whole new operating system to write text files. :wink:; Of course, tongue half in cheek. Everyone use what they are comfortable with, but unless someone is strongly entrenched in the Emacs ecosystem I think he/she would be better off just using Cursive. Plus it earns <@Delois> some dough for the great effort he put in when said person then proceeds to write Clojure commercially and decides to stick with Cursive (and hence will need a commercial license)!"
201,1499423697.99221,Delois,Thanks <@Wilfredo>! I appreciate it.
202,1499429488.73183,Carline,Is anyone still using Light Table? I'm unsure of it's current status. I've tried emacs a few times but didn't put as much effort into it than when I learned vim a few years ago. Light Table + vim mode works well for me...
202,1499430578.10686,Jodie,"<@Carline> afaik, LightTable is abandoned. But that might be incorrect.; Vim &amp; Clojure work well together. Whole community of us in <#C0DF8R51A|vim-fireplace>, I've written some blogs which I'm happy to share if you're interested."
202,1499430667.140038,Gerda,<https://github.com/LightTable/LightTable/commit/5db6b70f8a4fec3e4806d9d062d95d15fc7a4b36>; mluisbrown committed with sbauer322 on 29 May 2016
202,1499430735.165102,Otha,"&gt; Light Table + vim mode works well for me...
JFYI spacemacs uses evil-mode (vim emulation layer) by default; it also has a preconfigured layer for clojure"
202,1499430799.187725,Lucio,I just started using proto-repl for atom and it’s *amazing* so far
202,1499430841.202598,Gerda,actually there are newer commits to LightTable
202,1499430888.21888,Carline,"At first I though I'd just ""learn emacs"" and then move to spacemacs, but the more I procrastinate the more I think I'll just go straight into spacemacs soon."
202,1499430968.247488,Lucio,<@Carline> have you tried atom + proto-repl?
202,1499430994.256536,Carline,"I've used Cursive for a while, but I don't know why it just doesn't work for me. Also the instalRepl thingy is a killer feature for me.; I must admit I haven't try atom + proto-repl, days only have 24 hrs :joy:"
202,1499431180.327498,Gerda,but moving from 0.8.1 is taking a while but .. <http://lighttable.com/blog/>
202,1499431250.353175,Carline,"I've read that, that's why I said I was ""unsure""."
203,1499439538.720705,Kyung,Does Atom+proto repl have an interactive debugger like cider?  
203,1499439628.7791,Nita,"I'm curious about private functions and data in Clojure. As my application has grown, there are now some fairly large (to me at least) maps that hold app state. So I have functions to handle a lot of the manipulation of that state. It seems rather unnatural for me to these large state objects in the global space so I've made them private. However every time I make something private in Clojure I feel like  I'm kinda going against the grain.; any thoughts on app design and when to it makes sense to shed some of the old OOP style organization and when to keep some of those features in Clojure?"
203,1499439966.993781,Lavera,"<@Nita> I personally find that having private functions and data is not something that is worth doing, see <http://steve-yegge.blogspot.de/2010/07/wikileaks-to-leak-5000-open-source-java.html> for a (probably mildly satirical :wink: ) overview; If it's large maps that you're struggling with, it's usually more helpful to split their handling in a clean way, e.g. with something like cursors in particular or having your functions only operate on well defined subtrees in general"
203,1499440311.201012,Nita,"well that's only part of the problem. I'm actually more interested in design philiosophy when it comes to ensuring that data is consistently maintained. Spec will help a lot with this however its isn't production ready so I'm not using it. If someone updates app state and fubars an inner struct by removing a necessary key word, or accidentlally replaces a map with a vector, this is all possible when the app-state is available to anyone. THose kinds of concerns have always guided my design choices and its kinda hard to shake those concerns, know what I mena?; mena = mean"
203,1499440401.255019,Lavera,"Sure, and I do agree that it's a problem, but making functions private doesn't prevent them from breaking something in your state :wink:; You prevent that by limited scope and good tests"
203,1499441013.630878,Earlie,"I'm using clojure.tools.namespace.repl to reload my code and reset my system, however it seems to be caching old code. If I change a testing println, it continues to print the old string.
Even in Cursive's debugger, I'll be ontop of the line to print one thing, and it will print the old thing.
Any ideas?"
204,1499441500.930914,Jodie,"<@Earlie> What is your setup? Do you use `defonce`, component, anything like that? Or is this just with plain ol' functions?

Are you using boot or leiningen?"
203,1499441554.965168,Earlie,"Nope, no `defonce`s or anything.
Actually just tried <https://github.com/weavejester/reloaded.repl> and the same thing happens.; <@Jodie> Just adding a println into one of my system constructors, and it seems to hold onto the old function."
203,1499441780.101459,Jodie,"Just ftr, records hold onto the old behaviour for `stop`, but the subsequent start should work."
203,1499441848.141931,Earlie,"Hmm, good to know.
I think I've gotten it to work.
Instead of passing a function into `reloaded.repl/set-init!`, I passed an anonymous function, and that causes it to update.; Kinda strange, but oh well."
203,1499441861.150113,Jodie,"that's odd :thinking_face:; Oh, maybe it isn't.; How did you require the function you were passing to reloaded.repl/set-init?"
203,1499441898.172625,Earlie,"The function was originally in a (ns user) with a (disable-reload!) maybe/; It was in the same namespace.; Yeah, seems to work for the deeper more confusing methods now too.
That was confusing."
203,1499442174.336489,Jodie,"I'm wondering if you had a missing `(:require)`, that would cause the refresh to not fully work I think"
203,1499442207.356241,Earlie,"No, I don't think so. I'd tried with an alias to my system namespace and fully qualified.; Oh well, I'm not too worried about it now. I'm sure I was doing something that's mentioned in the readme."
203,1499442247.379192,Jodie,¯\_(ツ)_/¯
203,1499442252.381369,Earlie,Thanks :slightly_smiling_face:
205,1499445268.067862,Shameka,"<@Nita> we've got large state maps client-side in our re-frame app - we've been using prismatic schema to ensure that state is updated consistently during development, though since schema doesn't do efficient delta checks we don't do it in production"
205,1499445711.293312,Sandy,"<@Nita> quite a few people use spec in production. Most of what's ""not finished"" in spec is around feature requests, not so much in api changes or bugs."
205,1499445723.299637,Nita,"<@Shameka> yea, I'm aware of prismatic schema also. I was kinda more interested in having a discussion about why building apps this way (everything open vs certain things being walled off and only accessible via well defined interfaces).; I thought spec was only part of clojure 1.9, no?"
205,1499445793.335558,Sandy,"One of the reasons IMO is code bloat, writing all those interfaces will result in simple changes to the data model requiring devs to add new ""add-person"", ""add-contact"", etc. interfaces.; Sure but there's a fair amount of people using 1.9 in production as well :slightly_smiling_face:; Clojure is very good about adding new features that don't interfere with previous code. So it's very rare that upgrading to a new ""alpha"" of clojure will break existing code."
205,1499445856.368021,Nita,maybe I'm just too old school ( or just old! ) I've never used alpha/beta versions of languages in prod; so far none of the arguments for having everythng global are convincing to me
205,1499445914.39762,Sandy,"The other problem you'll hit is that Clojure doesn't put any real meaning to the words alpha and beta. Core.async, core.match, etc. have all been in alpha for quite some time, and yet they're used in production a lot and relatively bug-free."
205,1499445915.397701,Willow,i don't think that's unreasonable at all
205,1499445958.420199,Sandy,"But about global state, we should talk about it in this way, with a global atom for your app state you have one place to look for the state of your app. You can ""go back in time"" simply by replacing the state with a previous state (global undo)"
205,1499445988.435758,Nita,I guess I am a little more open to libs like core.async
205,1499445990.436454,Sandy,Debugging is simply a matter of grabbing the state and then using Clojure's normal functions to poke around.
205,1499446056.471689,Shameka,"a global *persistent* state, solid consistency checking and a principled model for managing updates beats fragments of state in lots of places, variable consistency management and ad-hoc updates every time for me"
205,1499446090.489437,Sandy,"Yeah, it all depends on what sort of state we're discussing"
205,1499446136.513643,Margaret,"also - global app state as the output of a reduce over an immutable stream of events is a model with a bunch of really nice properties, and is easy to pull of with clojure, with help of tech like datomic and/or kafka; for example: “bug just happened, dump the last N events into transit data so I can replay them in a unit test reproducing the bug”; that saves days of debugging in a microservices type app; or even… “bug happened last week, dump the N events preceding the bug” etc. - so much nicer than reading log files for 3 servers in parallel"
205,1499446347.621013,Lucio,<@Margaret> do you have good articles/examples of this other than datomic?
205,1499446453.67512,Adelaida,"hmaurer: This one talks about some of the same ideas:
<https://circleci.com/blog/why-we-use-om-and-why-were-excited-for-om-next/>"
205,1499446455.676432,Margaret,"<@Lucio> I have an open source lib that’s still young, working on moving more of my production proprietary app’s logic into the open source lib… but it really can just be done as a reduce that calls resset! on an atom, where the input sequence is a lazy infinite sequence of kafka messages (or even rabbitmq or whatever if you want to do your own persisting)"
206,1499446471.684588,Lucio,<@Adelaida> thank you!
205,1499446485.692241,Margaret,the thing is that the approach is natural enough for clojure that you hardly need a framework
205,1499446520.71091,Lucio,<@Margaret> what is the open source lib?
205,1499446569.736532,Margaret,"it’s very young, but it’s ludic (named because the initial metaphor was a game of chess by mail) <https://github.com/noisesmith/ludic>"
205,1499446588.746876,Lucio,"awesome, thank :slightly_smiling_face: I’ll take a look"
205,1499446600.753086,Margaret,also useful for dumping and replaying data even outside such a context <https://github.com/noisesmith/poirot>
205,1499446624.765433,Lucio,"it seems to me that a lot of the headaches with event sourcing come when you try to have a distributed, async system; but in a single process, as you said, it fits nicely with clojure’s model"
205,1499446691.800911,Margaret,if you do it right (with deterministic processing) you can replicate state - the trick is that every “decision” needs to be reified as an event sent to the rest of the system; this is the part that ludic is going to flesh out more in the future (still closed source stuff now sadly)
205,1499446751.833411,Lucio,do you use event sourcing in production on any project? (excluding Datomic)?
205,1499446774.846427,Margaret,"yes - like I mentioned, this closed source app, which is my day job and a production app"
205,1499446791.855708,Lucio,"oh, sorry, missed it. Do you use Kafka with that app?"
205,1499446792.855975,Margaret,and I mean really every db from postgres to cassandra to mongo is using event sourcing internally
205,1499446810.866713,Lucio,"right, yes. By “using event sourcing” I mean as a first-class citizen; not an implementation detail"
205,1499446818.871473,Margaret,"yes, I use kafka, since it simplifies the persist / replay part (and guarantees ordering which is a huge benefit)"
205,1499446819.872118,Lucio,if that makes any sense; Do you use Kafka as your primary datastore (e.g. with infinite retention period)? Or do you store your data elsewhere and only have a retention period of X weeks on kafka?
205,1499446855.893066,Margaret,"right, just pointing out for the postgres etc. devs event sourcing is a first class part of their architecture :smile:; for client data we use postgres and mongo - kafka is for system state / messaging; if every server needs to agree about the state of FOO - FOO is managed by events on kafka; I’m also working on a scheme to migrate events off the kafka log into s3, and off of s3 back into the app (via an adaptor compatible with our kafka input…) - but that’s in design stage still"
205,1499446988.963331,Lucio,so you do use kafka as a datastore? or just as a transient message broker?
205,1499447035.988174,Margaret,message (I don’t like the implication of “broker” - for example with a proper broker you can’t do rewind/replay and these are trivial with kafka); where some messages are explicitly stored because they are relevant to some bug or question etc.
207,1499449244.131633,Tobie,"I have a multimethods question. Suppose I am dispatching on the class of two arguments so my dispatch-fn looks like `(fn [x y] [(class x) (class y)])` I can create a method matching against [class-a class-b]. Suppose for a given class-c occuring in the second position I don't care what was in the first position. I want to match on something like [_ class-c]. Is this possible? Otherwise I need to write a number of methods, one for each [class-a class-c] [class-b class-c]  I'm not actually working with classes."
205,1499449401.212835,Margaret,"<@Tobie> why not ```
(fn [x y]
  (let [y-class (class y)]
     (if (contains? magic-classes y-class)
      [:magic y-class]
      [:mundane (class x) y-class]))```"
207,1499449603.318332,Tobie,"I think this could work, thanks"
208,1499454080.67686,Chun,"Hello, is there some library to do http requests using kerberos auth in clojure? We have a couple of servers setup with kerberos SSO (i.e. I do kinit on my notebook and then browser connects without further manual authentication) and I need to execute http requests to these servers from my clojure code. I have found some java examples, but they seem very, very painful 8("
208,1499456515.814262,Hiram,"<@Chun> if the Java examples work, I would start w/ it, and just wrap the mess / state management behind a clj fn (instead of rewriting). do you have links for the examples?"
208,1499456620.860597,Chun,"<@Hiram> Well, that’s my plan (b). I was hoping there’s already some nice clojure library to do that…"
208,1499456714.901922,Hiram,these kinds of libraries (just wrappers around Java) seem to be rare. I suspect it's because either it would be 1) too thin 2) it's easy enough to roll your own; <@Chun> here are some examples of Java interop that can be useful -&gt; <https://github.com/life0fun/clojure-idiom/blob/master/java-proxy.clj>; `proxy` in particular is :heart: ... it's easier to program Java in Clojure than in Java IMO
208,1499456921.996102,Chun,"Thanks, will check that out."
209,1499460169.451711,Agustina,"The original example on <http://clojuredocs.org|clojuredocs.org> works well, but it is using a map as an input parameter. <https://clojuredocs.org/clojure.core/defmulti> Is it possible to dispatch according to a simple string input value’s value?"
209,1499460249.485683,Willow,ugh sorry. hate when it puts it in the channel *and* the thread
209,1499460320.516817,Adelaida,"Me too. Happens when commenting on a snippet/image/video, since I think those are considered comments instead of threaded messages. :confused:"
209,1499460389.547319,Agustina,Thx. I’ll try to restart; It works well after the REPL restart. Thank you!
209,1499460559.620775,Willow,:+1:
210,1499466020.500573,Magdalena,"michaellindon: I’d suggest using the dispatch function you have and just changing the dispatch value to 

`[Object ClassC]`

Remember dispatch values use `isa?` and work across each argument in a vector form.  multimethod hierarchies are underused IMHO."
211,1499472362.784658,Barbera,<@Chun> if you end up having to get lots of data in and out of java beans you might try this: <https://github.com/uwcpdx/bean-dip/>
212,1499506148.148709,Lavera,"Hi! Can someone give me a hint on how to add error handling to my logic programs? I already asked in <#C0566T2QY|core-logic>, but it's all tumbleweeds and cricket noises there... 
I'd like to receive a little more information than `()` when my program fails to produce a result :slightly_smiling_face:
I was thinking about a fall through case that unifies an error parameter to something meaningful, but I am not sure if that is a good idea or even how to do it well"
213,1499526979.577584,Claudine,is anyone eager to help me? pretty new to clojure so the question is pretty basic :slightly_smiling_face:
213,1499527026.581896,Lucio,<@Claudine> I am new to clojure too but that might be even better as I am familiar with some of the beginner’s struggles. Shoot :slightly_smiling_face:
214,1499533030.114159,Darci,"Transit seems to be the way to go for transmitting clj datastructures. 
... but it seems to be work in progress:

&gt; NOTE: Transit is a work in progress and may evolve based on feedback. As a result, while Transit is a great option for transferring data between applications, it should not yet be used for storing data durably over time. This recommendation will change when the specification is complete.

... and it's been over a year since there was a commit; So I wonder: is it stable? Is it still maintained? Is it still wip? ...?"
214,1499533998.207542,Giovanna,"What I understand from that warning is that the details of how it encodes edn as json or messagepack is subject to change, so if you save something to disk today, there's no guarantee that you can read it back with a future version of transit. If you want to transmit data, you're good."
213,1499534118.217996,Giovanna,"I wouldn't worry about a lack of commits, that probably just means it's stabilized."
214,1499534731.271903,Darci,"allright, thx.; another transit question: in order to be able to read json data, it seems one has to stringify it first. Here's a function receiving a `POST` request and handling the request (using express/node.js)
```
                                        (-&gt;&gt; req
                                          .-body
                                          (.stringify js/JSON)
                                          (t/read (t/reader :json))
                                          str)
```
It feels a bit weird to have to stringify first, but that's how it's supposed to work? (Or am I missing something?)"
213,1499540371.756662,Aldo,that seems wrong; you're going json-&gt;data-&gt;json-&gt;data there
214,1499543193.98338,Darci,"right... my feeling as well, but how to make it work properly? 
```
                                        (-&gt;&gt; req
                                          .-body
                                          (t/read (t/reader :json)))
```
doesn't work - oh, that last `str` can be omitted, that's just to print it in a readable way.; `transit` does seem to take a json-string, not a json-object, if I'm right."
214,1499544290.073213,Sophie,"So, here’s a question I had over in <#C053AK3F9|beginners> about namespace-qualified keywords, if anyone has any thoughts.  Thanks.  <https://clojurians.slack.com/archives/C053AK3F9/p1499543674615216>; Just wondering where they are “tragically underused” and where/why I should be using them."
213,1499547614.315079,Darci,"<@Aldo> found it: express parses json if you add `(.use app (.json body-parser))`. I changed that line to: `(.use app (.text body-parser #js {:type ""*/*""}))`. 
(I'll have to refine it a little... having type `*/*` doesn't seem a good idea, but at least, it works now.)"
215,1499550178.491044,Zola,"has anyone had success serving '206 partial content' responses with their favourite clojure http server? i'm trying to serve streamable videos (where 206 responses are required), however <https://github.com/remvee/ring-partial-content/blob/master/src/ring/middleware/partial_content.clj> doesn't seem to respond with an 'Accept-Ranges: bytes' header."
215,1499557787.954143,Georgianne,"Is there a decent Clojure HTTP client that mimics browser cookie behavior? Aleph doesn’t support cookie stores, it does… something with cookies but there’s no docs so it’s not clear what — clj-http cookie handling is totally broken if the cookies get set on a redirect request; I would like to not have to have a headless browser and instrument it with selenium, but that’s lookling like an increasingly viable option"
216,1499560709.120346,Rebeca,"have you looked at htmlunit? it might be slightly easier to stomach than going full selenium; I don't know, but clj-http unit has an option to automatically follow redirects or not, and I wonder if turning it off and handling redirects manually might unbreak the cookie stuff"
215,1499564123.316046,Georgianne,"I haven’t, but that’s a good suggestion. clj-http with disabled redirects doesn’t fix the problem, unfortunately.; I wonder what even happens when you have repeat header values — the response headers look like they’re just str/str maps"
216,1499566692.457141,Rebeca,the header map in clj-http is actually a special map type for dealing with header name case insensitivity
217,1499575782.913216,Rudy,"I'm trying to write a  csv file, but the data is truncated when I look at the output file. If I print out the vector that I pass into write-csv I see all of the results, but only part of them make it to the file.; I've also tried doubling the data `(into data data)` and that prints the rest of the result as well as some additional lines when it starts gets to the beginning of the original dataset again.; Ha! I should write in here more often, it gave me an idea to use `(with-open [writer (io/writer output-file-name)]
        (csv/write-csv writer data))` and it worked!"
218,1499595254.863448,Marnie,"i'm specifying an enviornment var in my project.clj in the :profiles :dev :env map. but when I try to run lein with-profile dev repl, that env variable is not there when using environ.core to load it. is there a piece to this process I'm missing?"
216,1499607993.627613,Georgianne,"<@Rebeca> Sorry; yeah — I meant “I’m not sure how this would deal with a header value set twice”, which explains why I only see parts of the set cookies :slightly_smiling_face:"
219,1499614270.091002,Millicent,"i've seen many recommendations to use clojure.spec.alpha, but doesn't that require clojure 1.9? is the alpha stable enough for production or something?"
217,1499618071.388828,Jodie,I'm trying to create a java object &amp; getting no matching ctor. Is it possible to show the available ctors somehow?
217,1499618253.403455,Kareen,use `clojure.reflect`
217,1499618442.418569,Jodie,"<@Kareen> I'm trying, but not really sure what I'm looking for in there?"
217,1499618519.424276,Kareen,"e.g. (sorry for the awkard code, wrote it on the repl) ```user=&gt; (-&gt; (cr/type-reflect String) :members (-&gt;&gt; (filter (comp #{'java.lang.String} :name)) (filter (comp #(contains? % :public) :flags)) (map :parameter-types)))
([byte&lt;&gt;] [java.lang.StringBuilder] [int&lt;&gt; int int] [byte&lt;&gt; int int java.nio.charset.Charset] [byte&lt;&gt; java.lang.String] [] [byte&lt;&gt; int] [java.lang.StringBuffer] [byte&lt;&gt; int int java.lang.String] [char&lt;&gt; int int] [char&lt;&gt;] [byte&lt;&gt; int int int] [java.lang.String] [byte&lt;&gt; java.nio.charset.Charset] [byte&lt;&gt; int int])```; to get the public ctors; unless I'm not understanding what you're asking"
217,1499618831.449145,Jodie,"Hmm, it's non-public. That's... odd right?"
217,1499618936.457435,Aldo,"<@Jodie> in java land that's usually a sign that you're supposed to use a factory method, builder class, or some other way of getting instances of the object"
217,1499619059.467801,Jodie,I see :thinking_face: <https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/api/GetRevCommitFromObjectId.java> so I need to walk the git repo history instead. That sucks.
217,1499619258.483873,Aldo,"```
 // You can also get the commit for an (abbreviated) SHA
                walk.reset();
                ObjectId id = repository.resolve(""38d51408bd"");
```; ^ that doesn't help?"
217,1499619915.539925,Jodie,"That made me reconsider, I can get the sha from objectid, but it was in a higher class... *sigh*. I hate java.; Oh, nvm, repository.resolve doesn't return a RevCommit, ^^; It's okay, the walker is simpler than expected"
217,1499620172.559923,Aldo,"yeah... this is a pretty good example of ""god dammit there's a whole magical DSL around traversing the commits in a repo"" rather than the repository just being represented by regular data structures; iirc a git repo is DAG of immutable nodes, so would be perfectly representable as a persistent data structure"
220,1499630257.367387,Millicent,"is there a way to have multiple handlers in bidi? i want to use `-&gt;ResourcesMaybe` with a fallback route... something like `[[""/"" (-&gt;ResourcesMaybe ...)] [""/"" index-handler]]`"
217,1499641004.19788,Rebeca,"the comment on <https://github.com/juxt/bidi/blob/master/src/bidi/ring.cljc#L110> seems to indicate it would work that way; it may depend on you using bidi in a particular way to work; the problem is ResourcesMaybe is a handler, not a route, you could make a custom  implementation of whatever bidi calls its routing protocol (I forget, maybe Pattern), that succeeds or fails based on the existence of a resource"
220,1499642772.349827,Millicent,"yeah, i tried making something that wraps handlers, detects if it's a vector, and if so, tries each of the handlers with some; i don't see anything in the code to support multiple handlers with fallbacks though"
217,1499646487.7132,Rebeca,"thats not what I meant; a bidi route is sort of two parts, the routes(the left hand side) which are like a pattern that the url is checked against, and then the handlers (the right hand side) which are returned if the route matches; ResourcesMaybe is a handler, so by the time it is running, routing is ""done"". Routing ran, determined that ResourcesMaybe is the handler to use; what you want to do is move the resource existence checking from the right hand side (the handlers) to the left hand side (the routes), so existence of the resource is checked for while routing, not after routing; but all that being said, the way I usually solve this problem is by not having it, I put all static resources under a prefix that no other routes start with, so if ResourcesMaybe fails then there isn't anything else to route to"
221,1499654102.750802,Daniell,"<@Millicent> Took me a while, experimenting and searching on Bing, but I think this will help you <http://grokbase.com/p/gg/clojure/151d2ffehq/equivalent-of-compojure-resources-in-juxt-bidi>"
221,1499657749.274449,Millicent,"<@Daniell> seems like exactly what i need, thanks!"
222,1499674772.792892,Terrence,"Not sure if I should ask here, i'm using Intellij with cursive, but it seems to be unable to resolve some of my code (like `(db/add-message)`. I have been watching a video by <@Elanor> and it seems he has the same problem in the screen cast. So I'm assuming it is normal?"
222,1499680652.03243,Delois,"<@Terrence> There’s a <#C0744GXCJ|cursive> channel, probably best to ask over there."
222,1499680701.051079,Terrence,"<@Delois> will do, thanks"
223,1499690270.174117,Beulah,is there a spec for spec ?
223,1499690332.199159,Weston,<@Beulah> there's a jira for spec for spec
224,1499697351.03248,Jenniffer,Hey I’m pretty new to clojure and the whole java ecosystem and I’m having some issues using this slack clojar. It’s been telling me that it can’t locate `clj_slack__init.class` or `clj_slack.clj` on the classpath. I declared the dep in my project.clj file and I checked that it was installed with `lein deps :tree`… so at this point I’m lost
224,1499697583.182915,Otha,"who's been telling you and who can't locate? :slightly_smiling_face:
Also: <#C053AK3F9|beginners>"
224,1499697606.197721,Jenniffer,":0 I didn’t even know that existed. thanks; and `lein run` and… java I think; ```
(ns thing.core
  (:gen-class))

(require 'clj-slack)
```"
224,1499697747.290205,Otha,require should be :require inside ns declaration
224,1499697836.348403,Jenniffer,same issue
224,1499698087.511877,Aldo,"<@Jenniffer> the clj-slack library does not seem to have a namespace `clj-slack`, so you can't require it; I see `clj-slack.users` etc"
224,1499698114.530421,Fe,should it be clj-slack.core ? <https://github.com/julienXX/clj-slack/blob/master/src/clj_slack/core.clj#L1>
225,1499699803.654941,Irmgard,"I would like to create a registration form with ```ClojureScript``` using ```React-Native``` (and ```Reagent``` thereafter). And I would like to include the different components with MaterialDesign, and I do not know how to do it. Do you have any suggestions? I have already found on the Internet, but I did not have much.                  I just want to create a simple registration form, using `ClojureScript` `MaterialDesign` `ReactNative`.; Thanks in advance for your feedback."
226,1499700376.036166,Irmgard,"Name

```Your Name```

Email

```Your Email```

Password

```Enter your password```

`Send`    `Cancel`"
227,1499711513.715321,Amado,"hello everyone, im trying to figure out uncessary dependencies on my project (im using lein)

searching the webs ive found `lein deps :tree` but its output is quite large and im not sure where exactly to look; does anyone has any suggestion?"
227,1499711655.798304,Aldo,"so I have a project, which has :aot :all in the :uberjar profile (in this scenario compiling at runtime was significant, trust me, I measured) but I'd prefer not to have that accidentally interfere with dev if a dev creates an uberjar on their machine. is there any way to either have leiningen delete the .class files after the uberjar is created, or exclude target/classes from the classpath?"
227,1499712300.169996,Gus,"I’m a little bit confused — ^bytes is supposed to be a valid type hint and I’m supposed to be able to type hint the return value of a function by hinting the function name, right?"
226,1499712340.193489,Gus,"but if I do; ```(defn ^bytes foo-bytes []
  (.getBytes ""foo""))

(defn foo-string []
  (String. (foo-bytes)))```"
226,1499712361.205726,Aldo,"<@Gus> I didn't know ^bytes was a valid type hint. I've been using ^""[B"""
226,1499712365.208119,Gus,"I get an error; I can use it on arguments and it works fine; ```(defn string-from-bytes [^bytes b]
  (String. b))```; gives me no problem; it seems odd that I can use it to hint arguments but not return type; <@Aldo>"
226,1499712465.267196,Kareen,<@Gus> don't type hint the var name
226,1499712466.267615,Gus,"maybe create an alias that creates an uberjar outside the target folder, then runs lein clean?"
226,1499712470.270465,Kareen,type hint the argvec
226,1499712522.300432,Gus,"<@Kareen> cool, thanks, that works; how come type-hinting the name sometimes works?"
226,1499712540.310467,Kareen,"type hints on the var name don't work in case of primitive/""special"" type hints; because they get resolved; so you're type hinting using the `bytes` function rather than the bytes type"
226,1499712568.326645,Gus,right
226,1499712645.37147,Kareen,"there's a number of other pitfails when you type hint no the var name; everything that you acn express by type hinting on the var name you can express by type hinting on the argvec, and more; so I always suggest to only type hint on the argvec; and avoid having to know about the edge cases"
226,1499712689.398042,Gus,"…would it make sense to print a deprecation warning when type hinting the var-name for a release or two, and then disallow it?"
226,1499712697.402781,Sonny,"var meta is resolved, meta on args and argvec is not and the “special” hints can be used in those locations; we have no plans to stop allowing meta on vars"
226,1499712730.421624,Aldo,"ah, so type hinting the return with ^""[B"" would work?"
226,1499712730.422029,Sonny,as it would break existing code
226,1499712738.426831,Kareen,"correct <@Aldo>; but again, there are other issues when you're typehinting on the var name; like, type hinting primitive hints won't cause the funcntion return type to be optimized; if you type hint the argvec it will"
226,1499712794.461073,Gus,"huh, ok, I’ll try to remember to do that =)"
226,1499712816.473995,Kareen,I think eastwood might complain about bad type hints
226,1499712840.487764,Gus,"huh, ok, I’ll check if it complains about hinting the var name, if it doesn’t it probably should"
226,1499712870.506083,Kareen,"it might complain about bad type hints, not about all hints on var names; can't remember; it's been a while"
226,1499712978.570776,Gus,<@Aldo> did you see my aliasing suggestion? would that work for you?
226,1499712999.583855,Kareen,<https://dev.clojure.org/jira/browse/CLJ-790> upvote this maybe
226,1499713010.590223,Giovanna,<@Amado> You should check out <https://github.com/walmartlabs/vizdeps> It draws a graph of the info found in lein deps :tree.
226,1499713042.60979,Kareen,and <https://dev.clojure.org/jira/browse/CLJ-1863>
226,1499713081.632577,Aldo,"<@Gus> it would work, but looking for a solution that won't require me to change anything other than the leiningen project.clj. getting an alias rolled out to all devs, all deploy boxes etc is a chore"
226,1499713115.653041,Gus,"oh, you can have aliases in project.clj"
227,1499713120.656076,Aldo,"<@Amado> as sad as it is, I'm not actually sure all the information required to know whether a dependency is used or not exists statically"
226,1499713425.838341,Aldo,I think I actually just need to understand :target-path and :compile-path a bit better and I can make this work
226,1499713455.854874,Jen,"this isnt really a clojure specific question, but I’m curious to hear how to handle it idiomatically (if one exists) in clj. how does one evolve data (domain entities in an application) over time with minimal changes and minimal complexity? <https://groups.google.com/forum/#!topic/clojure/hA0so8Fp8lg>"
226,1499713518.890373,Aldo,namespaced keys and addition over destruction :stuck_out_tongue:
226,1499713545.904881,Margaret,also - generally keep your data as flat as possible
226,1499713550.907698,Aldo,^ oh yeah and that
228,1499713569.91792,Jen,"just keep accreting the changes, leaving the old keys there?"
226,1499713598.934506,Aldo,"finicky nested over ""organized"" data models are magnets for repeated restructures into a new ""better, more organized"" structure"
226,1499713612.941893,Margaret,you can deprecate keys - move them from required to allowed but not mandatory
226,1499713678.978092,Hiram,"<@Margaret> any arbitrary nested object can be seen flat w/ namespaced keys, so things go hand in hand"
226,1499713693.986361,Jen,"more specifically, say I have some client entity
```
{:thing """"
:schedule {:start """" :end """"}
```
are you saying instead to 
```
{:thing """"
:schedule/start """"
:schedule/end """"}
```"
228,1499713726.003959,Margaret,<@Hiram> right - it’s not an absolute but a tendency - and I would discourage using namespaces as if they were a series of nested keys…
228,1499713728.004742,Jen,"then maybe evolving end to “completed” would equal
`{:thing """" :schedule/start """" :schedule/end """" :schedule/completed}`?"
226,1499713757.020769,Aldo,<@Hiram> what about (s/def ::tree-node (s/keys :req [::left ::right]))
228,1499713777.031468,Jen,"or perhaps more appropriately `{:thing """" :schedule_start """" :schedule_end """" :schedule_completed}`; to avoid namespaces being a series of nested keys"
226,1499713869.080732,Jen,"but at some point code that renders a view by looking at an entity’s `(get-in x [:schedule :start])`, or in a better organized entity `(:schedule_start x)` would have to be changed either way, no?"
228,1499713913.104378,Hiram,`(:schedule/start x)`
226,1499714520.431443,Hiram,"<@Aldo> by ""nested"" I'm thinking document-oriented representation. this tree-node definition is more like a memory model (you're describing the shape of a tree vs. a tree that represents anything in particular - e.g. company org chart)"
226,1499714554.449765,Giovanna,"<@Margaret> Can you elaborate on what you mean by ""using namespaces as if they were a series of nested keys"""
229,1499714878.623807,Roger,"Hi all, I am trying to get the value of a key from a hashmap in clojure but I am getting always nil."
229,1499714898.634416,Margaret,<@Giovanna> replacing `{:foo {:bar {:baz 0}}}` with `{:foo.bar/baz 0}` where there is no foo.bar ns in your app; <@Roger> can you show how you put the value in and how you get it out?
229,1499714946.660638,Roger,"for instance I have something like [{:one ""something""}]; I do (:one nameVariable)"
229,1499714996.687385,Margaret,"well, that’s not a hash-map, it’s a vector with a hash-map at index 0; in that example `(get-in v [0 :one])` would work"
229,1499715146.770016,Roger,:scream:; sorry I did not realize that!!!; I am new to clojure!!
229,1499715225.812917,Margaret,it’s OK - maybe you don’t need the vector part?
229,1499715424.918159,Roger,actually is the response from a REST service; so I do not have any option!!!
230,1499716478.484895,Dewayne,you could map or reduce over the collection you receive. (map key coll)
230,1499716671.591182,Willow,"Loom (the graph library) has an Edge protocol which has `src` and `dest`. But when you call `add-edges` on a graph it expects the edges in the form [n1 n2]. What's the point of that protocol is i can't easily extend it how I like and instead have to implement nth?; ```
:add-edges*
   (fn [g edges]
     (reduce
      (fn [g [n1 n2]]
        (-&gt; g
            (update-in [:nodeset] conj n1 n2)
            (update-in [:adj n1] (fnil conj #{}) n2)
            (update-in [:adj n2] (fnil conj #{}) n1)))
      g edges))
```; ```
(defprotocol Edge
  (src [edge] ""Returns the source node of the edge"")
  (dest [edge] ""Returns the dest node of the edge""))

; Default implementation for vectors
(extend-type #?(:clj clojure.lang.IPersistentVector
                :cljs cljs.core.PersistentVector)
  Edge
  (src [edge] (get edge 0))
  (dest [edge] (get edge 1)))

```; these seem incompatible. Add edge and destructure [n1 n2] so why bother with defining edge on peristent vector as 0 and 1 elements?"
231,1499718461.567722,Ellyn,I guess so; The library author coded against his implementation of edges; Which makes the whole thing busted; I am sure you can create a pull request to fix this
231,1499718819.76109,Willow,just making sure I wasn't overlooking anything
231,1499719100.91179,Dede,"anyone using clojure w/ grpc? I've found a few examples on github, but nothing official looking. trying to find some good boilerplate."
232,1499722566.649838,Noella,"anyone watch Stuarts talk on REPL-driven development? <https://vimeo.com/223309989>; at 16:55 he talks about “REPL at a point of interest”, anyone know a library that does that?; I’m looking at <https://github.com/razum2um/clj-debugger>, but when I tried that I got weird error involving `java.lang.UnsupportedOperationException: Can't type hint a primitive local`…"
232,1499722782.742973,Ellyn,I guess his code is busted; can you publish whole code and stacktrace
232,1499723729.139746,Rebeca,the issue is likely <https://github.com/razum2um/clj-debugger/blob/master/src/debugger/core.clj#L12-L16>
232,1499725385.763877,Noella,here’s the full stack trace:
233,1499725416.774441,Noella,"but yeah hiredman, you’re probably right"
233,1499725545.818491,Rebeca,&amp;env will contain symbols with metadata like {:tag 'long} (where long is a primitive type hint) and the compiler will barf with that error message if you use a symbol like that as the name in a binding
233,1499725555.821865,Tobie,"i agree, i think this is what i was looking for, thank you"
233,1499725603.83852,Rebeca,the compiler wants `(let [x (long ...)] ....)` not `(let [^long x ...] ...)`; it bites everyone writing a big macro eventually
233,1499725637.849966,Tobie,"If I want to create a logo for a clojure library that I have been developing. is there any sort of legal issue if I use the same colourscheme as the clojure logo? That is, I use the 2 green and 2 blue colours to colour my logo?"
233,1499725644.852502,Sonny,go for it
233,1499725710.873979,Tobie,"ok cool, thanks"
233,1499725740.883309,Eufemia,just dont make it a blue c with two green strokes through it and come near kansas city
233,1499725771.893668,Tobie,"lol, ok"
233,1499725794.900741,Eufemia,michaellindon: <https://www.cerner.com/-/media/Cerner-Media-folder/Home-Page/logo-2x.ashx?la=en&amp;hash=BC8406D09620541FFB525E9C27687C750297C604> sorry for context
233,1499725833.91392,Tobie,what does t do?; <https://raw.githubusercontent.com/michaellindon/sss4clj/master/logo/sss4clj.png>
233,1499725864.923573,Eufemia,that looks nice
233,1499725880.928734,Tobie,thanks
233,1499725904.936603,Eufemia,`what does t do?` sorry what?
233,1499726001.967468,Tobie,"hehe sorry, i thought Cerner was the name of a clojure library; what dose it do?*; i just chekced the website; do you work for them?"
233,1499726604.153324,Eufemia,yep; sorry ya its a med tech company
234,1499730719.293758,Laci,Is there a best practice to read/write ZIP files in Clojure? I have found the fs library today and the Java way but unsure what's the recommendation.
234,1499730772.307197,Rebeca,I've only ever used the java.util.zip package; works fine
235,1499734274.118618,Celestine,"Is there some kind of shortcut for programmatically associating a symbol with it's same-name key?  Sort of the inverse of `{:keys [a b c d]}`, instead of having to type `{:a a :b b :c c :d d}` to create a map."
235,1499734331.130519,Margaret,there's a macro in flatland/useful that does that <https://github.com/amalloy/useful/blob/develop/src/flatland/useful/map.clj#L9>; and it's totally legit to just copy/paste one function from that lib if you don't need the rest IMHO
236,1499735942.474125,Celestine,"Thanks, just what I was looking for"
236,1499736094.505467,Rubie,<@Celestine> or zipmap?
236,1499736251.53773,Celestine,"No, zipmap still requires you to write you your keys.  I was looking for something equivalent to JS's `{a, b, c, d}` notation which produces the equivalent of `{:a a :b b :c c :d d}`  The keyed macro in flatland does exactly that.; With the macro `(keyed [a b  c d])` becomes `{:a a :b b :c c :d d}`"
236,1499736384.565442,Rubie,I see
237,1499749878.037542,Jaqueline,"<@Noella> <@Rebeca> I’m the author, but frankly speaking, haven’t used it for long :slightly_smiling_face: can we solve this?"
237,1499750532.148197,Daniell,<@Jaqueline> looks like you'd need exclusions in there to avoid certain `sym` values (any primitive Java type symbols)
237,1499750712.179202,Ivelisse,"I am new to clojure-api. I develop small app using clojure-api. I have done DB connection, Logs capturing mechanism in my APP. I need help in exception handling mechanism. Is there any library to catch exception all types of exception and to send exception to developer mail?"
237,1499751681.348042,Daniell,"<@Ivelisse> A Google/Bing search reveals lots of Clojure wrappers for SMTP mail but, to be honest, I'd just use javax.mail directly. It's not hard."
237,1499751908.387855,Ivelisse,<@Daniell> Okay. Thanks for quick reply.
237,1499752041.412475,Daniell,Sending email to developers every time you get an exception is... less than best practice... You could cause a denial of service attack on your own email provider if you app goes wrong. I definitely would not recommend that approach.
237,1499754437.904424,Shameka,<@Ivelisse> we use <http://sentry.io|sentry.io> for such exception capturing purposes... and there are many similar services out there
237,1499755534.164331,Ivelisse,"<@Shameka>, <@Daniell> Okay. Thanks for valuable suggestions."
238,1499758173.919068,Terrence,"How would I wrap this in a swap! ? 
```(map #(make-boolean! %) @items)```"
238,1499759496.351838,Jarrett,`(swap! items #(map make-boolean! %))`; that's one way to do it
239,1499766138.944379,Jonnie,Is there a way to tell `lein repl`  to not go check the dependencies? (if I have no internet or the artefact server is down?)
239,1499766328.018835,Quinton,`-o` for offlinemode
239,1499766806.202251,Jonnie,"`export LEIN_OFFLINE=true &amp;&amp; lein repl` seems to work.
Tried `lein -o repl` and `lein repl -o` but they still seem to go look for dependencies"
239,1499767289.391282,Fe,"<@Jonnie>, do you have SNAPSHOT dependencies in your project.clj?"
239,1499768002.653031,Jonnie,"Had one, thanks :slightly_smiling_face:"
239,1499768531.83671,Fe,"<@Jonnie>, you can pin SNAPSHOT deps: <https://www.martinklepsch.org/posts/maven-snapshots.html>"
239,1499768552.843895,Jonnie,"Yes, just did that :slightly_smiling_face:"
239,1499768646.87515,Fe,":dart:; <@Allena> looks great as a series of forms typed into the repl. For me the next step would be to copy it to a file and refactor into functions. Idiomatic clojure meant for .clj files (i.e. not typed ad hoc into a repl) eschews dynamic `def`s; in this case, it could look like this: ```
(let [cc (read-line), startswith (first cc), credit-card (case ...)] (println ""credit card:"" credit-card))```; (of course you shouldn't type it all in a single line, I was too lazy to use an editor)"
239,1499769370.114505,Allena,<@Fe>  thanks for that. I'm stuck on a my chromebook using an online  repl So I think I'll have to try it on an editor later. I appreciate the insight
239,1499769396.123259,Fe,"ah nice, which online repl do you use?"
239,1499769441.137727,Allena,<http://repl.it|repl.it>; It has its limitations but is sufficient enough to play a bit with clojure
239,1499769630.197099,Fe,nice!; it's quite fast
239,1499769750.235232,Allena,"It's the best I've found; It's been a bit rough learning clojure. Probably because it's new enough that there aren't as many resources available compared to other languages; a lot of what I find seems to be targeted at more advanced users; anyway, thanks again. I'll have to pop in some more"
239,1499771660.841303,Terrence,<@Allena> did you look at <http://www.braveclojure.com/> ?
240,1499771694.851179,Terrence,"<https://www.reddit.com/r/Clojure/> also has a nice list of resources; Tnx, that did the trick"
241,1499777876.109881,Jen,"if I want to implement an n-node tree structure in clj, where each node can be one of a few different “types”, and wanted to use spec to describe the data. what’s a good option for polymorphism on the standard tree functions?

1) define a node that can be one of `(s/def ::node #{:node/a :node/b :node/c ...etc})` , and each node has a corresponding spec and `defrecord`. these records all implement some sort of `INode` protocol for insertion, lookup, etc.
2) define a node that’s a simple map with a `:type` property. standard tree functions will all be multimethods dispatching on the type of a node. define a more generic spec that uses a lot of `(s/multi-spec)`.
3) … ?; the problem i’m trying to model is a hierarchy-tree with directories, files, drives, etc."
242,1499784462.04965,Virgina,"What's a good lightweight way of managing configurations in a clojure project? Like environment type stuff? Urls, user/passwords, etc?"
242,1499785109.496626,Tobie,""" Expresso makes great use of clojure’s abstraction mechanism like protocols and multimethods and uses a datadriven approach where possible."" what does ""datadriven"" mean in this context? :slightly_smiling_face:"
242,1499785212.569743,Shameka,<@Virgina> <https://github.com/juxt/aero> is pretty good
241,1499785806.983971,Weston,+1 for aero
241,1499785838.005733,Noella,<https://github.com/tolitius/cprop> is another option
241,1499786355.357445,Magdalena,n/p
242,1499786933.760667,Virgina,Thanks guys! I'll check them out
243,1499787675.273273,Evan,"to me, data-driven means that the most fundamental abstraction in your code is just clojure's data structures, rather than functions, or macros, or protocols, etc

your program is controlled and organised in terms of data, with `map`, `assoc` and so forth being your tools of choice

<http://www.lispcast.com/data-functions-macros-why>
<http://blog.cognitect.com/blog/2016/6/28/the-new-normal-data-leverage>; you could say that datascript and datomic are data-driven databases, compared to something like MariaDB; there's also this interview with Rich - <https://gist.github.com/rduplain/c474a80d173e6ae78980b91bc92f43d1> (ctrl-f for ""information"")"
242,1499793143.675015,Hiram,lwhorton: 2) map and multimethod dispatch on some key.   any code can consume nested maps and mutate it conforming to the spec. I would avoid the 1) OO trap
242,1499793271.748519,Jen,what’s the issue with using records and protocols in #1?
244,1499798226.719472,Hiram,unnecessary bundling data + behaviour.
245,1499800211.898877,Cassaundra,Anything more idomatic?
245,1499800448.030309,Aldo,"aside from ""I hope this isn't a real system"" the clojure looks good"
245,1499800692.162999,Loretta,"<@Cassaundra> it is clear and you will find different opinions on this as it’s largely a question of style and idioms.
personally, I would either pass in the valid users:
```
(defn valid-user? [users username password] ...```

or, close over them and return a function:
```
(defn valid-user-fn [users]
  (fn [username password]

```; this way you avoid the global `def` and it becomes more easily testable; stylistically, I don’t like the threading macro as you’re not really transforming a piece of data, threading it, as it’s often used. I’d prefer `some`:
```
(defn valid-user-fn [users]
  (fn [username password]
    (some (fn [{u ::user/name p ::user/password}]
            (and (= u username)
                 (= p password)))
          users)))
```"
245,1499800808.226255,Steffanie,"```
(defn valid-users
  [username password]
  (-&gt;&gt; users
       (map (juxt :user/name :user/password))
       (some #(= [username password] %))))
```"
245,1499800874.263237,Loretta,"Now you can make your function:
```
(let [valid-user? (valid-user-fn master-users-list)]
  ;; now use valid-user? as you wish...
  (if (valid-user? ""bob"" ""abc123"")
    ...```
and if you want to use a different set of username/passwords, you’re not tied to any particular one. just make the new `valid-user?` function by calling `valid-user-fn` with your list"
245,1499801132.406636,Cassaundra,"<@Steffanie> <@Loretta> thanks this is what I was looking for...  both great suggestions.  <@Aldo> lol, right not a real system...lol... just creating an om-next tutorial, so just for edification purposes! :slightly_smiling_face:"
246,1499802144.968241,Jen,hmm. i always seem to have a hard time pinning down when to use a protocl
247,1499804377.217488,Hiram,"generally, it's useful when 1) you're interop-ing w/ java (so you can use `extend-protocol` and do type-based dispatch) 2) you create a protocol + record to manage state lifecycle; otherwise, if you're just manipulating data (not state), simple data structures + the ad-hoc dispatch available w/ multimethods works nice and is more flexible/open; in other words... type-based (in Clojure case, actual Java types) dispatch = nominal typing, ad-hoc dispatch = more like structural typing"
247,1499805082.615242,Jen,"much to ponder. thanks for letting me take your time, btw"
247,1499805160.659335,Hiram,:+1:
248,1499809790.968561,Laci,How can I get the total bytes of an input stream in Clojure?
248,1499810312.179987,Lily,"Is this a bug?
```
(defn callable
  [fun]
  (proxy [clojure.lang.IFn] []
    (invoke [&amp; args] (apply fun args))))

((callable +) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18) =&gt; 171

((callable +) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19)
1. Unhandled java.lang.UnsupportedOperationException
   invoke
```"
248,1499810329.18674,Aldo,of an input stream? that's kind of impossible by definition; <https://docs.oracle.com/javase/7/docs/api/java/io/InputStream.html>
248,1499810361.199716,Lily,<@Laci> count a byte-array; U4SKJCP3K change your name
248,1499810440.233072,Hiram,<@Laci> I guess this works (if you have memory) `(-&gt; stream slurp .getBytes alength)`; otherwise use `<http://clojure.java.io/reader|clojure.java.io/reader>`
248,1499810467.243778,Lily,"aaah sorry, I got a slack bug, your guy's name was for a moment some hash haha"
248,1499810535.27122,Laci,"<@Aldo> Yeah, that does sound weird. What I am doing now is:

1. Make an HTTP request and get back a JSON file
2. Convert that to a ZIP file (gives me back an input stream)
3. Need to know the size of this payload; hcarvalhoaves: Nice, I will try this. Thanks :+1:"
248,1499810559.280938,Willow,<@Lily> i think you're running into the limitation that you can only have 20 arguments to a function
248,1499810590.29334,Laci,"hlolli: Interesting, I will give it a shot. Thank you."
248,1499810621.305951,Willow,"and i 've heard someone talk about ""trivial"" functions through the repl are not invoked in the same way as normal functions"
248,1499810643.314469,Hiram,<@Laci> are you're trying to determine the file size to send on the response?
248,1499810655.319372,Lily,"any hacks to bypass it? It's a bug in `overtone`, changeing the implementation where this is defined would be pain"
248,1499810676.327643,Laci,<@Hiram> Precisely. I'm trying to do all these steps without performing IO.
249,1499810697.335884,Willow,i'm way out of my depth on that one. I think <@Rebeca> or <@Margaret> would know way more than me
248,1499810705.33893,Hiram,"<@Laci> you would have to hold all response in memory, use a buffered reader + this instead -&gt; <http://greenbytes.de/tech/webdav/rfc2616.html#rfc.section.3.6.1>"
248,1499810768.362702,Laci,"hcarvalhoaves: Oh God, this looks crazy :slightly_smiling_face:"
248,1499810779.367103,Rebeca,"yeah, proxy doesn't rest args like that; doesn't support"
248,1499810813.379873,Lily,*facepalm*
248,1499810816.380961,Hiram,otherwise you have to make sure you don't OOM :wink:
248,1499810885.406267,Rebeca,I surprised the first thing works at all
248,1499810887.407267,Laci,I am sending this payload to S3 and one of the requirements is to pass in the content length alongside the payload; I guess temp files are the simple solution to this here
248,1499811024.456362,Rebeca,"maybe proxy does sort of support that, I am not sure, depends on how you read the docstring, but I have never read it has supporting that"
248,1499811102.484715,Lily,"<https://github.com/overtone/overtone/blob/master/src/overtone/helpers/lib.clj#L146>
here when the range is changed I bump into the same error as I posted above.; the proxy is defined on line 100."
248,1499811180.512051,Rebeca,"I  was going to say, that is defrecord which is a different beast entirely from proxy"
248,1499811224.527024,Lily,I think this hack could have been done better when this was written way back.; a macro that takes all arguments and puts them into a map or vector.
248,1499811299.553225,Rebeca,"it is also likely really old code, given that it uses proxy instead of reify there"
248,1499811359.574688,Lily,"Yes, reify a protocol would maybe be a better solutin?"
248,1499811402.589659,Rebeca,"no, I mean, those are all interfaces it is proxying so reify is likely a better choice"
248,1499811419.595387,Lily,ah
248,1499811431.59943,Willow,`(~invoke_fn this# ~@args)`. does this have to many arguments with `(range 21)`?
248,1499811437.601639,Rebeca,"I am not familiar with the codebase, but from scratch I might prefer to pass around a map with a key that maps to a function; the issue is, the last arity of invoke needs to call applyTo, or something like that, you should check out AFn.java"
248,1499811489.619183,Lily,"the limit is 10 arguments because in overtone they come in pairs.; this limit has been there for long time, nobody has taken the time to fix this"
248,1499811556.641995,Rebeca,"if it is going to use proxy, it shouldn't proxy IFn, it should proxy AFn; there are invoke arities from 0 to 21, the 21st arity takes 20 args + an array as the 21st"
248,1499811791.724134,Lily,"I see what you mean, but I can't see how that would be implemented. It's macroexpanding to a argument pyramid of invoke.; Or just somehow collect all the arguments as one parameter.; ah ok, read better, last arity invokeing applyTo, I see"
248,1499811999.794785,Rebeca,you can't do it with proxy; or anything really
248,1499812104.829973,Lily,"this macro `defrecord-ifn` has always some function or macro wrapped around it, there an &amp;rest sequence could be used.; no, sorry, forget what I wrote, it's the defrecord that gets called in the end; macros, brainfuck"
250,1499826573.322324,Jen,"does anyone have experience with clojure.walk/postwalk? it says it walks on each form but sometimes there’s strange vectors showing up where there should be maps.. not really sure how to write what I’m trying to write; looking for a generic way to walk a structure and convert something like
```
{:a 1 :b {:c {:d 2}}}
into 
{:a 1 :b {:c {:d 2 :id :c} :id :b}}
```; but to do this seems like postwalk needs some sort of “look back”"
250,1499827380.481259,Margaret,"<@Jen> hash-maps are made of two element vectors (entries) - you can see it if you call seq on one; you can do that transform above by checking for hash-maps inside each hash-map, and updating them to include their id key before returning it; so your conditional would check if the arg was a map, then if it is check for maps in vals of the map, and update those vals"
251,1499827658.53576,Tobie,"Hey <@Evan> , thanks for the links; Sorry for the late reply, I took some time to read the articles. I think I get the gist of what is meant by data-driven. I never learned Object Oriented design patterns anyway, so its hard for me to contrast what I'm doing in clojure against say, java.; I am curious about the following, isn't creation of a record and association protocols a more object oritented, less data-driven approach?; For example, a data-driven approach to me would just be an associated map. Maybe it has a type keyword. I can write a function which looks up :type in the map and does something with the corresponding value; whereas creating a new record seems similar to creating a new object, and writing protocols seems to me to be like creating methods; i find it hard to reconcile my use of records and protocols with a data-driven approach; can you explain?"
251,1499828216.642912,Leola,"I have a stupid question.  I want to make a project with a different project as a foundation - is there a simple way to get Lein to do that so I don't have to manually edit a bunch of files?  Sorry if there's something obvious, Google did not yield results"
251,1499828265.652145,Margaret,"why not just recursively copy the old project then edit?; it's possible to make your own template, but that seems like overkill to make one project"
251,1499828391.675878,Leola,"the project has a bunch of files, and I'm messing with something new (importing React components into Reagent), so mostly I just wanted to avoid the risk of forgetting something.; buuut it shouldn't be too bad.  Thanks!"
251,1499830644.073412,Jen,thanks <@Margaret> ill work on that
252,1499842319.286692,Ivelisse,"I have defined logger format in log4j.properties and the file is kept inside resource folder in clojure api. But logs is not getting displayed in given in log4j.properties. Logs getting displayed on console in this `[qtp681891967-13] INFO clojure-dauble-business-api.core - Function begins from here`.; I also specified log4j.properties path in project.clj with this line `:profiles {:dev {:resource-paths [""resources""]}}`; As per log4j.properties logs should be append to app.log file. It is not happening. Where I am doing wrong? Can anybody help me out?; I figured out solution to the logging issue.  Dependency [org.slf4j/slf4j-simple ""1.7.12""] overriding log4j.properties configurations."
253,1499853139.197059,Marnie,i've been trying for a couple days to resolve this problem when i run lein repl: `Error loading clojure.tools.nrepl.server: Could not locate clojure/tools/nrepl/server__init.class or clojure/tools/nrepl/server.clj on classpath`; i cannot figure out how this dependency works and how to resolve it
253,1499853788.453543,Weston,"technically they are clojure.lang.MapEntry instance, and you can check for it via map-entry?; they inherit from the .toString of vectors"
254,1499855523.0608,Lucio,<@Marnie> is your code accessible publicly on github?
253,1499855544.067755,Marnie,<@Lucio> no
254,1499855573.077189,Lucio,<@Marnie> could you push it to github? I am happy to take a look
254,1499855589.082286,Marnie,"<@Lucio> thanks, and i wish i could. it's a company project"
254,1499855597.084978,Lucio,ah :confused:
254,1499855626.094582,Marnie,"<@Lucio> i'm trying various things, i should be able to get to the bottom of it.; it's due to one of those sticky situations in clojure where sometimes building a project depends on the actual editor used by the developer. give the project to another developer with a different IDE and it blows up; i think it's the only language i've used where a project's build process can be coupled with the code editor"
254,1499855867.17399,Randee,<@Marnie> I'd first inspect the classpath and see if you have the `nrepl` jar on there
254,1499856003.21899,Lucio,<@Marnie> try `lein deps :tree`
254,1499857475.697098,Marnie,<@Lucio> <@Randee> i managed to resolve the problem by installing and using cider. not my preference but it's a quick solution for now
254,1499857929.841476,Lucio,<@Marnie> odd… glad it worked though
254,1499858627.059202,Marnie,"are environment variables cached somehow. I removed one that was set in my project.clj, and instead put it in a separate profiles.clj. Even after a lein clean and restart of cider, calling the environ function to read an environment variable reveals the old value that was removed."
254,1499859452.318852,Willow,"<@Marnie> not sure how that's working but i can wager a guess. Emacs starts up with an environment and its possible that this process, since it is spawning the others, is preserving that environment you started with. perhaps restart emacs and see if the environment is updated then"
255,1499859711.399448,Weston,Check if you have a . lein-env file in the root of the project 
254,1499860224.561555,Marnie,thanks. my probably was actually resolved after a reboot of the machine
256,1499865167.607412,Phil,"Is there a function to process the values of a map and get back a map with the original keys and updated values? A `mapmap` function? I find myself doing this a lot and use reduce like: ```(defn process-map
  [m]
  (reduce #(let [v (get m %2)
                 new-v (some-processing-here v)] (assoc %1 new-v)) {} (keys m)))``` but seems like this is a useful method to have built in."
256,1499865400.730869,Noella,there is no built-in for that; with Specter: `(transform MAP-VALS your-fn your-map)`
256,1499865576.825639,Terrence,"I have an atom with a vector with an map, how would I update the value :done of one item?
```[{:id ""1"", :title ""Learn Clojure"", :done ""active""} {:id ""2"", :title ""Learn ClojureScript"", :done ""active""}]
```"
256,1499865595.835593,Noella,which item?; by index or by id?
256,1499865643.862389,Terrence,by id; if possible; Pasted the wrong code :neutral_face:
256,1499865863.98307,Noella,"<@Terrence> again, with Specter: `(setval [ATOM ALL :id #(= your-id %)] :your-value your-atom)`"
256,1499865917.013639,Nilda,"I’d like a version of `empty?` that doesn’t throw on numbers (etc), but simply informs me that, no, the number `9` (for example) is not empty, whereas `""""` is empty. What’s the least unintelligent way to achieve this?; (my current method is quite unintelligent)"
256,1499866001.061539,Noella,can you post it?
256,1499866111.123988,Nilda,"Basically a protocol that dispatches on type. Seqs and strings, return empty, java.lang.Object: return false."
256,1499866123.130381,Terrence,tnx <@Noella> didnt know about Specter
256,1499866152.146834,Noella,"give it a try, it’s made exactly for these kinds of problems!; <@Nilda> maybe just catch `Exception` and return false if it throws?; certainly not the prettiest method either"
256,1499866323.246704,Nilda,"True, but perhaps better than straining the input to `empty?` through a protocol and hoping that I’m not straining too aggressively. Or not aggressively enough."
257,1499873936.31176,Evan,"yes, you have that correct. Protocols and Records arent simple data-types, you should only use them when you need something more abstract/powerful/clear than simple data-types can offer; data-driven doesnt mean *only* use simple data types; it means reach for them first, and use more meaty abstractions where data falls down; Records and Protocols exist for a reason, the key is to use them when they make sense and are needed, but to use simple data as much as you can (within reason); see here <https://clojure.org/reference/datatypes#_why_have_both_deftype_and_defrecord>"
258,1499875467.349763,Sidney,Is `classlojure` the best way to have multiple clojure runtimes in the same JVM?
258,1499875548.403357,Guillermo,probably `shimdandy` <@Sidney>
259,1499875578.421732,Guillermo,<@Candi> or jim crossley are the experts there
258,1499875594.431939,Sidney,<@Guillermo> I’m writing a library where I won’t have control over how the JVM is started up. Does shimdandy still work there? From the readme it looks like it wont
258,1499875604.438166,Guillermo,not sure what boot uses but they do it too; dunno
258,1499875642.461734,Carletta,Boot uses shimdandy
258,1499875654.469008,Candi,<@Sidney> meaning you can't control the classpath?
258,1499875741.522762,Sidney,"I’m working on <https://github.com/arohner/spectrum>. Spectrum uses tools.analyzer. Tools.analyzer uses eval, which breaks defrecords and protocols when files are reloaded. I’m looking for a way to isolate the code reloading"
258,1499875799.558722,Candi,"Ah, a library, so you can't keep clojure.jar off of the cp"
258,1499875808.56398,Sidney,right
258,1499875823.573586,Candi,"yeah, shimdandy won't work for you there"
258,1499875970.664167,Kareen,<@Sidney> could you try maybe isolating the classloader that t.a uses?
258,1499876026.697742,Sidney,"AIUI, it’s compiler.java that’s creating new classes via eval, so it’s the compiler’s classloader that matters?"
258,1499876049.711995,Silas,You were simply missing a dependency on nrepl. Cider jack in injects a few repl only dependencies. Not all editors do this. 
258,1499876163.783804,Jen,"how is one supposed to use `loop/recur` to reduce a nested collection?

```
given {:children {1 {:children {3 {:children {}} 2 {:children {}}

(defn recurse-children [acc root]
  (reduce (fn [a node] 
    (if (empty? (:children n)) 
      (do-accumulation acc node)
      (map #(recurse-children a %) (:children n)))))
```
^ this is what I _want_ to do, but I know that will result in an overflow"
258,1499876196.8046,Kareen,I think if we provided a custom classloader that extends DynamicClassLoader we could be able to isolate the evaluation that happens through tools.analyzer and the clojure runtime
258,1499876215.816657,Jen,"except if I try to rewrite that in `loop/recur`, i will end up with some sort of `(map #(recur acc %) (:children n))` at some point, which I know isn’t valid either"
258,1499876225.822954,Kareen,don't have time right now but if you're stuck on it I can give it a try this weekend
258,1499876254.841167,Sidney,"<@Kareen> I’m happy to work on it now, but I’m not following yet. which behavior in the CL needs to change?"
258,1499876351.901277,Margaret,"<@Jen> it can be done breadth first if you add an extra accumulator for nested children, so you process items if leaves, or append to the accumulator if branches, then recur on the vector of branches"
258,1499876357.905085,Kareen,"DCL has a map that goes classname -&gt; class, and that's how the Compiler resolves classes, if analyze+eval did evaluation using a different classloader using a different class cache, it might not impact the regular evaluation context (so no redefining of defrecords); I've literally given it just 20 seconds of thought tho, it might not work"
260,1499876396.928717,Margaret,"<@Jen> that said, the result often looks weird enough that it’s worth just using non-optimized recursion until you know you have inputs too big for that"
258,1499876418.942941,Kareen,in particular there might be some more issues to solve around namespaces
260,1499876452.964367,Jen,"as always, a big help <@Margaret> .. dont think I’ll hit that limit for quite some time"
258,1499876461.970419,Sidney,"The most recent thing I tried doing was 1) grabbing the current classpath. 2) creating a new URLClassLoader using the current classpath URLs, but setting the parent classloader to `(.getParent (.getClassLoader clojure.lang.RT))`. 3) Using classlojure to `eval-in` in that supposedly isolated classloader."
258,1499876919.252021,Margaret,"<@Weston> they will not be MapEntry instances when processed in postwalk, postwalk returns vectors"
260,1499876929.257845,Margaret,and vector? returns true for instances of MapEntry
258,1499876985.291303,Margaret,"now, there are definitely cases where I changed my algorithm so I could use prewalk instead just because prewalk gives you MapEntry instead of vector"
261,1499877032.320853,Phil,<@Noella> Thanks for the pointer to Specter. Looks useful beyond my use case. :slightly_smiling_face:
258,1499877073.346934,Sidney,"hrm, using `(.getParent (clojure.lang.RT/baseLoader))` seems to work"
258,1499877186.416727,Kareen,<@Sidney> what's the issue specifically btw? something we have to fix in t.a.jvm?
260,1499877187.416959,Virgina,How do you load a local jar in a clojure project? Is there a lein way?
258,1499877218.436421,Kareen,ideally t.a.jvm/analyze-ns shouldn't behave differently than normal clojure namespace reloading
258,1499877222.438783,Sidney,"<@Kareen> still trying to figure it out :slightly_smiling_face: not sure if it’s user error or bug; I’m also trying to get analysis for e.g. clojure.core, so normal reloading is not good enough"
258,1499877252.456203,Kareen,I've cried many many tears trying to make that the case and I thought that's how it behaved now; oh; hm; yeah that might cause some issues; altho with clojure.core you should be able to avoid eval; as everything is already evaluated
258,1499877425.56099,Sidney,"oh, so write an `analyze-ns` that doesn’t call analyze+eval?"
258,1499877447.574258,Kareen,"either that or wait for me to add a :no-eval option to analyze-ns :); but yeah you can try that for the time being; hm, deftypes might get corrupted as t.a.jvm does an internal eval to set up reflection contexts :( so not as easy as just not using eval; I have to go now but I'll think about it. I'm sure there's a way to make this less painful"
258,1499877998.900855,Giovanna,There's the `map-vals` function from <https://github.com/weavejester/medley>
262,1499880923.663099,Margaret,<@Virgina> the easy way is to install that jar in your local cache (which is `lein install` for lein projects) then you can just add it to your deps; though when you deploy you’ll probably need to make sure the deployed jar can find the artifact; which might mean deploying the jar to clojars (for open source you want to share) or might mean building an uberjar on your local machine or hosting a secure private maven repo of your own
262,1499884500.844906,Laurette,"In Datomic, I can test my queries on an inline datastructure, like `(d/q '[:find ?e :in ...], [[123 :att :val] [[456 :att :val]])`
Does something similar exist for SQL tables, so that I do not have to spawn a real database for integration tests?"
263,1499885313.330752,Marnie,How would I add this dependency without using cider? Where would be the best place?
264,1499886165.84484,Rebeca,"there are file back and memory backed sql databases, but none of them are entirely compatible with the popular client/server sql dbs"
265,1499886337.943452,Rebeca,"generally, the way I deal with wanting to run things entirely in memory is I create a protocol that represents a set of queries, and then have some kind of in memory store that satisfies that protocol, a long with something that satisfies the protocol for storing in a database,  and swap one for the other in tests or whatever"
266,1499888248.988098,Delana,<@Laurette> did you try the code sample you shared? it should work :slightly_smiling_face:
262,1499888422.083551,Noella,<@Laurette> <http://www.h2database.com/html/main.html> is an in-memory Java SQL DB
266,1499889377.608863,Lanora,wouldn't merge-with suffice for this? possibly a bit obscure looking:; `(mege-with (fn[_ v] (some-processing v)) m m)`
265,1499894682.470134,Barbera,<@Laurette> there tend to be enough vendor specific differences between SQL databases that <@Rebeca>’s solution is the only one i’ve had success with; worked on a codebase that tried to do sqlite tests with postgres prod and bugs persistently crept in
265,1499894754.504798,Hugo,"You go to production with the isolation level you have, not the isolation level you want to have."
267,1499898882.170231,Shameka,<@Laurette> docker compose offers a decent way of running integration tests against a throwaway copy of your actual db
266,1499902666.303904,Tamra,<https://twitter.com/degree9io/status/885280570204315648>
268,1499926731.023268,Tari,"Hi, does task defined using mount (<https://github.com/tolitius/mount>) ‘s `defstate` and started using `mount/start` running in a new thread or in the main thread? Can I `defstate` a function that blocks the thread ? Thanks."
269,1499930454.96716,Dani,You can even map the directory of your db to a tmpfs speeding it up massively.
267,1499931819.396412,Laurette,<@Rebeca>  and others: Thanks for the great hints regarding integration-testing and databases! I think docker sounds like an interesting approach.
270,1499932984.800079,Noella,"what do you have to do to make reader tags work?; I have a `data_readers.clj` in my source dir which looks like `{kh/test kleinheit.pg.impl/maybe-map}`; but when I try it out in the REPL I just get
```dev=&gt; #kh/test {:a 1 :b 2}

        java.lang.IllegalStateException: Attempting to call unbound fn: #'kleinheit.pg.impl/maybe-map
clojure.lang.LispReader$ReaderException: java.lang.IllegalStateException: Attempting to call unbound fn: #'kleinheit.pg.impl/maybe-map
```"
269,1499950749.187509,Tammie,"so, I need a function that takes a nested data structure (only concerned with maps right now) like {:a {:b {:c 1} :d 2}} 
and returns all the paths to leaves: [[:a ::b :c] [:a :d]]… 
not sure where to start"
270,1499952792.246717,Noella,"<@Tammie> <https://github.com/nathanmarz/specter>; if you ask your question in <#C0FVDQLQ5|specter> I’m sure someone will help you out; I’d love to take a look but that will have to be later, I’m at work at the moment"
269,1499956843.767235,Tena,I’ve been using Clojure for a long time now and one question randomly popped into my head:; is there ANY case where map destructuring of *keys only* can throw an exception?; I know that vector destructuring can throw all sorts of fun stuff :slightly_smiling_face:
269,1499956973.853099,Aldo,if you pass it something that's not a map
269,1499956999.868948,Tena,"hm … :slightly_smiling_face: really?; =&gt; (let [{:keys [x y]} 1])
nil"
269,1499957019.882166,Aldo,blows up on my version of clojure
269,1499957022.884396,Malka,`(let [{:keys [a b]} 0])` throws `Can't type hint a primitive local` lol
269,1499957051.903592,Tena,woah… different in ClojureScript!
269,1499957056.907447,Aldo,"I (think) it's probably much more likely to blow up in 1.9 with spec too; huh, nope. interesting"
269,1499957074.919148,Tena,latest ClojureScript; yes it blows up on Clojure JVM; ok that’s very interesting… good to know
269,1499957097.934418,Aldo,"yeah, blowing up is an implementation detail by the looks; ```
(macroexpand '(let [{:keys [foo]} 1]))
=&gt;
(let*
 [map__43828
  1
  map__43828
  (if (clojure.core/seq? map__43828) (clojure.lang.PersistentHashMap/create (clojure.core/seq map__43828)) map__43828)
  foo
  (clojure.core/get map__43828 :foo)])
```; sooooo maybe if clojure.core/get gets a spec it will start blowing up"
269,1499957246.033913,Tena,that is so very interesting… it’s important to think about if your inputs are unpredictable/dynamic
269,1499957277.053511,Aldo,"if your inputs are unpredictable you're screwed, add a layer that makes them predictable :stuck_out_tongue:"
269,1499957303.071112,Tena,"well yea… but if {:keys []} was NEVER throwing; that layer could just be a (if (nil? x) …) check after; now it’s clear that you need a more “proper” check ala-spec, etc"
269,1499957483.188843,Aldo,"yeah definitely, if you have uncertain input then use tools that are made for validating it as data (spec, schema, clojure data functions etc)"
269,1499957559.240857,Tena,"yea… I was just calling some JavaScript APIs from ClojureScript, so I assume *everything* there is unpredictable :stuck_out_tongue_closed_eyes:"
269,1499957624.284325,Aldo,safe assumption
269,1499957773.386623,Tena,"yea…. ok this is actually more interesting than I thought …; ((fn [x]
   (let [{:keys [a b]} x]
     a)) 1); so in this more… *ahem* realistic example; no error!; since we’re no longer destructuring a Primitive Local!; but; ((fn [^long x]
   (let [{:keys [a b]} x]
     a)) 1); throws… which is logical given the previous things we just tried; so actually… as long as: 
1. the things you’re passing are not literals (which I’ve never done in real program) 
2. and you don’t type hint an unpredictable dynamic thing (highly unlikely but possible to do)
…  it seems that {:keys […]} is actually “safe” from throwing exceptions; not saying that you *should* rely on it lol… I tried looking and I couldn’t find any place where it’s stated that it’s safe… so I assume it can be considered an implementation detail? someone pls correct me if you know better :slightly_smiling_face:"
271,1499958761.053985,Aldo,"if it's not documented otherwise then you should consider the behaviour of something when you pass it an unexpected value to be ""undefined""; ie, will do any random ole shit, and will change between versions and builds and days; nature of the beast with a dynamic language"
271,1499959087.268772,Willow,"i'm not sure its the keys part that is throwing. I think you're just doing something Clojure doesn't allow in typehinting :
```
user&gt; (let [^long x 1]
        x)
CompilerException java.lang.UnsupportedOperationException: Can't type hint a local with a primitive initializer, compiling:(*cider-repl employee-resizer*:67:7) 
```; it's not the keys, that's just not a valid place for a type hint"
269,1499959104.279905,Tena,<@Willow> yes that’s correct
271,1499959113.285882,Tena,see my follow up
269,1499959115.287097,Willow,ah ok. i thought you were still attributing it to the `:keys` destructuring
271,1499959115.287648,Willow,my bad
269,1499959494.538933,Tammie,<@Noella> - I ended up using postwalk with core.match
272,1499961134.630792,Noella,<@Tammie> nice! mind sharing the solution?
272,1499961313.749612,Tammie,"I suppose the map should be mapv; hmm, not sure how this is actually working without that :wink:; oh, and the outer seq needs to be there because our tree may have multiple paths, duh; ok, I have a bug when adding another path in the tree. I’m flattening at the wrong place"
272,1499962303.393918,Noella,"here’s my attempt with Specter:
```
(def TreeValues
  (s/recursive-path [] p
    (s/if-path map?
      [(s/collect-one s/FIRST s/FIRST) s/MAP-VALS p]
      s/STAY)))
```; ```
user =&gt; (s/select TreeValues m)
[[:a :b :c 1] [:a :b 2]]
user =&gt; (s/select TreeValues {:a {:fields {:b {:options [{:label ""foo"" :value ""bar""}]}}}})
[[:a :fields :b :options [{:label ""foo"" :value ""bar""}]]]
```; I haven’t figured out yet how to not include the leaf itself"
272,1499962526.529198,Tammie,map over the results with `butlast`
272,1499962594.570632,Noella,"just noticed that mine is not correct either, I get `[:a :b 2]` instead of `[:a :d 2]`"
273,1499963645.202598,Giovanna,"<@Tammie> Here's one implementation.

```
(defn all-paths [m]
  (letfn [(step [acc current-path x]
            (reduce-kv (fn [acc k v]
                         (let [path (conj current-path k)]
                           (if (map? v)
                             (step acc path v)
                             (conj acc path))))
                       acc, x))]
    (step [] [] m)))

(all-paths {:a {:b {:c 1} :d 2}}) ;=&gt; [[:a :b :c] [:a :d]]
```"
273,1499963702.235789,Tammie,"thanks, I’ll try that on my data set"
273,1499964632.774793,Ok,<https://stackoverflow.com/questions/21768802/how-can-i-get-the-nested-keys-of-a-map-in-clojure>
272,1499964716.824298,Noella,"sweet, there you have a working version of what I was trying to do:
```(def TreeValues
  (s/recursive-path [] p
    (s/if-path map?
       [s/ALL (s/collect-one s/FIRST) s/LAST p]
       s/STAY)))

user=&gt; (map butlast (s/select TreeValues {:a {:b {:c 1} :d 2}}))
((:a :b :c) (:a :d))
```"
274,1499967733.612407,Berry,what is the best data format for exchanging data between clojure and python?
274,1499967855.686168,Sonny,"depends on what your needs are, but you should look at <https://github.com/cognitect/transit-format>"
275,1499970558.306615,Oleta,"hey, has anybody ever had trouble requiring clj-time.types in a ns? I have the latest version from clojars but I get an exception when I compile complaining the ns clj-time.types doesn't exist or can't be found on the class path.; the namespace clearly exists tho in the github repo"
275,1499970705.398607,Rebeca,"yeah, but the latest in git doesn't have to match the latest jar on clojars; there are also a few clj-time artifacts on clojars, are you sure you are using the one that maps to the github repo you are looking at?; you should check `lein deps :tree`; if any of your dependencies require one of these other clj-time artifacts (which unfortunately likely have the same namespace names) you will get all kinds of weird behavior"
275,1499970898.514355,Oleta,"I followed the clojars link on github, maybe they just didn't push a newer artifact to maven?; er; clojars; ahah; that's exactly"
275,1499970988.567329,Rebeca,"could be, you also haven't shared the exception you are getting, clj-time.types could be failing to load because something is"
275,1499970988.567491,Oleta,"it; Nah, the last push to clojars was in Dec. 2016, the change I want was added in march 2017; crisis averted, I guess."
275,1499972098.221063,Daniell,<@Oleta> We'll be releasing a new `clj-time` very soon. I've been meaning to get to that for a week or two!
276,1499972147.250569,Oleta,"<@Daniell> , oh cool, I didn't even realize you we're in this channel! :stuck_out_tongue:"
275,1499972227.297018,Daniell,Here's all the fun new stuff <https://github.com/clj-time/clj-time/compare/86acab8a122e3229a2e5337075f52b6f75ae4584...master> -- I think I'll make it 0.14.0 when I do it (hopefully in the next few days).
277,1499974348.47755,Darci,clojure and jdbc... there seem to be 2 libs: `clojure.java.jdbc` and `clojure.jdbc`. Anyone any experience reports? Reasons why using one over the other? ...?
278,1499974800.718682,Guillermo,the first one is the standard one.  the second one's name is unfortunate
275,1499975546.119751,Daniell,"<@Darci> I'm the maintainer of the standard (contrib) one: `clojure.java.jdbc` and we use it extremely heavily at work (with MySQL) for large volumes of data/queries.; It's also tested against MS SQL Server (both MS driver and jTDS), PostgreSQL (both Postgres and Impossibl drivers), and H2, SQLite, Derby etc. There are Oracle and Terabase(?) users of it too. It's what most other JDBC wrapper libraries use under the hood.; If you run into any issues with it, feel free to ask in the <#C1Q164V29|sql> channel."
277,1499975661.182304,Darci,Right... Thx.
275,1499975812.265392,Darci,:)
275,1499976064.406866,Daniell,"You can also see from this initial commit that the author basically copied `clojure.java.jdbc` (without permission and without attribution -- I took him to task on the mailing list for that!): <https://github.com/funcool/clojure.jdbc/commit/dfb16894734c2a95838cd5f5b3fef3e63ac1c4bf>; In later commits he added some acknowledge of code he'd taken from `clojure.java.jdbc` and he did, over time, substantially rewrite the code base.; (but, yeah, years later I'm still pretty annoyed about it)"
279,1499977426.137067,Jen,"a list isn’t IAssociative, but I want to update a list with deeply nested values somehow like:
```
(def L '( '( '( :a :b '( :c :d '( 'needs-updating )))))
(update-in L [0 0 1 1] fn)
```
now it’s easy to do if the lists are vectors… but given that most-everything defaults to a list after running some process (map filter reduce etc.), I wonder whats the better way to do this that works for a more general `seq`?"
279,1499977473.162601,Margaret,"if you need associative updates, don’t use lazy operations for modification - map, filter, etc all provide transducers that can make vectors"
279,1499977538.197742,Jen,so pour things `into []` or use `vec-*` for map/filter/etc.?
275,1499977554.206938,Daniell,<@Oleta> `clj-time` 0.14.0 is available <https://github.com/clj-time/clj-time/releases/tag/v0.14.0>
279,1499977592.227126,Margaret,"<@Jen> right - but especially when chaining operations into with composed transducers is a better option; and I don’t think it’s vec-*, it’s *v; (and not all of the foov exist - but filterv and mapv do at least)"
275,1499977626.245784,Oleta,<@Daniell> awesome!
279,1499977642.254302,Jen,"ah, it’s `*v` yea … but why is into a better option? does it preserve laziness?"
279,1499977654.261129,Margaret,no - vectors cannot be lazy; by composing transducers you avoid creating intermediate data (which does nothing but create gc churn)
279,1499977833.35912,Jen,"hm, not totally following you but that’s okay. i know `(comp a b c)` will produce a transducer. are you saying there’s a way to do `into [] some-fn` where it doesnt use a transducer?"
279,1499977856.371534,Margaret,no - and comp doesn’t generate a transducer unless its args are transducers; if you call `(filterv pred? (mapv f coll))` that generates a vector you don’t need; if you use `(into [] (comp (map f) (filter pred?)) coll)` you get the same result without creating a data structure nobody uses
279,1499977968.431646,Jen,ooof. so much to learn I do have. thanks for the tips :yoda:
279,1499978003.450994,Margaret,"you can still get the right answer without composing the transducers, and it’s easy to change once you know how they work; but back to the original question, if you need to do updates by index, keep things in associative collections, there are good options for making them but you don’t need to do it the optimal way on the first pass through"
279,1499978138.523694,Darcel,what's your favorite logger library and why ?
279,1499978338.63036,Rebeca,"I tend to use tools.logging on top of log4j2. it works great, just about every other routing framework can be rerouted to log4j2; the dependencies for that are something like ```
                 [org.apache.logging.log4j/log4j-core ""2.8""]                                                                                                                                                                                   
                 [org.apache.logging.log4j/log4j-slf4j-impl ""2.8""]                                                                                                                                                                             
                 [org.apache.logging.log4j/log4j-jul ""2.8""]                                                                                                                                                                                    
                 [org.clojure/tools.logging ""0.3.1""] 
```; since you were asking about pedestal logging on irc, last I checked(years ago), it was a simple wrapper on log4j; my mistake, it is a wrapper on slf4j"
280,1499978851.905381,Ellyn,"when accessing nested maps, do you guys prefer (-&gt; a-map :a :d :c) or (get-in a-map [:a :d :c]) ?"
280,1499978902.932749,Hugo,`get-in`
280,1499979061.016229,Rebeca,"I think most people prefer `get-in`; I like the uniformity of `-&gt;`; you can stick some functions in there; `-&gt;` may also be faster if you are dealing with nested records; `-&gt;` is a syntax short cut, it is gone at runtime, `get-in` is actually a function and will run and exist at runtime; and you have this key vector that has to exist at runtime"
280,1499979314.14918,Guillermo,I'll add one consideration: keyword accesses add quite a bit of bytecode `(-&gt; :a :b :c :d)`; probably won't matter tho -- but if you care about jvm inlining i'd look into it
280,1499979421.206398,Rebeca,"sure, but at that point do you want to be dealing with nested maps?"
280,1499979477.235922,Owen,"<@Jen> you can do that with specter very easily:
```
(def L '(((:a :b (:c :d (10))))))
(transform (nthpath 0 0 2 2 0) inc L)
;; =&gt; (((:a :b (:c :d (11)))))
```"
280,1499979501.248539,Cecile,"I prefer `get-in` because it makes the intention clear, we know that the first argument is a map, and that the second argument is a path. That information is lost with `-&gt;`, also, that means you can't pull the path, `[:b :c :d]` from a data source or generate it without your own macro, because you can't apply to `-&gt;`"
280,1499979540.268706,Rebeca,"sure, that is the flip side to what I said about the key vector; if it is constant and known at compile time (which it seems like it almost always is) then keeping it around at runtime is (admittedly an insignificant) waste"
280,1499980344.676321,Guillermo,true that
281,1499981628.272051,Jen,specter keeps popping up here and there with some nice solutions.. i’ll have to look more closely around its api
281,1499981693.302541,Berry,"<https://aws.amazon.com/lambda/faqs/> &lt;-- java is listed as supporrted language; does this mean one can do ""clojure -&gt; java"" for lambda instead of ""cljs -&gt; js"" ?"
281,1499982055.474519,Aldo,"<@Berry> my guess is that startup times might be problematic for many lambda use cases; but yes, you definitely *could*"
281,1499982079.484843,Carlita,"Both clj and cljs can be used, but yeah, startup times become a thing."
281,1499982105.496141,Aldo,"just a lot of the use cases I can think of for lambda, a very fast starting VM such as the js vm is more appropriate than jvm+clj"
281,1499982146.513506,Rebeca,"to be clear, by java they mean jvm, clojure doesn't compile to java like clojurescript compiles to javascript; clojure generates jvm byte code"
281,1499982200.536068,Aldo,and with the incredible support cljs has for the node ecosystem these days... I would choose whichever vm makes the most sense for the scenario. which is a pretty amazing thing to be able to choose while keeping the language constant :slightly_smiling_face:
281,1499982214.542174,Eufemia,<https://aws.amazon.com/blogs/compute/clojure/>; relevant ^ though im sure most have seen it
281,1499982292.57453,Berry,"zylox: thanks for link, first time I'm seeing it"
281,1499982330.590464,Cecile,<@Berry> <@Aldo> the data from this talk suggest it might not be as big of a deal as you'd assume (if you are running lambdas frequently enough to limit cold starts): <https://www.youtube.com/watch?v=GINI0T8FPD4>
281,1499982350.599382,Rebeca,<https://github.com/clojure/clojurescript/wiki/Differences-from-Clojure> just gets larger and larger
281,1499982393.617079,Aldo,<@Cecile> yes! true. my assumption is that most people using lambda are using it for reasonably infrequent operations (to take advantage of paying for only what you use). but if that's not the case then clj could be perfectly fine
281,1499982461.645355,Rebeca,somethings I know are different between clojure and clojurescript because I follow the jira issues aren't even on the list yet
281,1499982870.822441,Berry,"actually I'm using it to not think about scaling; i.e. if my problem can be decomposed into an 'obviously parallel' setup, then AWS just scales everything for me; and I no longer think at the grainualarity of machines"
282,1499985560.778297,Evelin,if you create a language binding to a library written in another language; how do you license it?; do you keep the license of the source library?
282,1499985937.89695,Cecile,"depends on the license of the source library. If you aren't distributing their library, you might be able to license it however you want. Not something that can be answered in the abstract"
283,1500029065.15413,Palmer,"Hi all, I'd like to fan out the same input sequence to several transducers and collect the results into a single sequence... is there a function for that?"
284,1500039920.968631,Terrence,"Any one experience with Lanterna?  I'm looking into making a snake game, and would like to know if it can do a non blocking ui"
284,1500040744.41033,Marx,"<@Terrence> I believe it does, haven’t used it in a while, but I see from the docs it has both `get-key` and `get-key-blocking` — the first returns nil if there’s no keypress waiting to be read."
285,1500043289.880686,Roger,"Hi all, Is there any way to mock a function in clojure. For example I have this function: 
``` (defn a [x]
        (utils/count x)) ```

I need to write a test, but I do not know how to mock the utils/count  (for example); what if I have several functions inside the same function and I need to test it; ``` (defn a [x]
        (utils/count x)
        (utils/count2 x)
        (test/other x)) ```"
285,1500043515.012375,Genaro,"<@Roger>, you can use `with-redefs` to ""re-bind"" a symbol; here is a useful testing pattern: <https://stackoverflow.com/questions/31157889/clojure-unit-testing-with-redefs#31309070>"
285,1500043539.02678,Willow,but in that function there's nothing to test; it sounds like you want to test `utils/count`
285,1500043561.039772,Roger,it is an example!
285,1500043568.043366,Willow,gotcha. just making sure
285,1500043592.057719,Roger,:smiley:
285,1500043602.064983,Willow,"how many dependencies are in it?; i'm saying that because if its not too many, i would make a function that accepts those and calls them inside it self, and you can create your production one with `(create-a [count count2 other] (fn a [x] (utils/count ...)))`; and then you can test that with just passing in your own mocks; but this doesn't work if there are quite a few functions required"
285,1500043866.226161,Domingo,"I'm looking for a way to remove/clear protocol implementations during testing. Is there a common way of doing this? I came across mention in Stuart Sierra's LazyTest where he says his method is broken. <https://github.com/stuartsierra/lazytest/blob/master/modules/clojure-language-tests/test/clojure/test_clojure/protocols.clj#L18-L28>; Looking in Clojure core, I suspect something similar to that would work: <https://github.com/clojure/clojure/blob/f572a60262852af68cdb561784a517143a5847cf/src/clj/clojure/core_deftype.clj#L791>; I'd rather not reinvent the wheel if someone has something for this already."
286,1500045389.149266,Margaret,@grzrm so your test needs to eliminate the extensions of your protocol?
285,1500045769.37446,Domingo,"yup. The library I'm testing provides alternative implementations, so I'm testing each one. Right now I'm running separate test suites, but that's a bit of a hassle."
286,1500045822.406295,Margaret,why do other extensions need to be deleted? can’t the individual extensions be tested independently of one another?; do you mean it’s two extensions of one type to a protocol?
286,1500045883.442582,Domingo,"If I have two different implementations on, say, IMap, only one takes effect."
286,1500045891.447606,Margaret,on one type?
286,1500045891.447726,Domingo,yes.
286,1500045893.449083,Margaret,"OK; my temptation would be to either replace the type or protocol when testing; because clearly both implementors can’t own both the type and the protocol, which would be good reason to make it modular…"
286,1500046099.57331,Domingo,"I'm not following. In this case the I'm trying to test specifically the implementation on that type. Swapping it out, like for a mock, would defeat the purpose in this case."
286,1500046176.619897,Margaret,it could be as simple as a proxy that uses proxy-super for every method you call
286,1500046201.634055,Domingo,Can you elaborate?; Or point to a reference of what you're getting at?
286,1500046438.780008,Margaret,"```user=&gt; (str (proxy [Object] [] (toString [] (proxy-super toString))))
""user.proxy$java.lang.Object$ff19274a@6e0ed78c""
```; you extend the supertype, and call the supertype’s method on method calls; it’s a different class, but has the same behaviors; another alternative is to use composition (a deftype with a Foo, which re-calls every method on that Foo)"
286,1500046597.874486,Domingo,Thanks for the alternatives. I'll ponder those for a bit to see if I can make them work. Cheers!
287,1500050020.823735,Beulah,"what's wrong with this spec expression that it doesn't return an explanation ? ```(s/explain (s/cat :this (s/* (s/coll-of :q/o)) :that :q/test-map) '((7 3 1) (9 7 3) {:q/b [2 4 6] :q/c [""abc"" ""xyz""] :q/d [:q :w] :q/a [1 3 5]}))
IllegalArgumentException Argument must be an integer: [:q/b [2 4 6]]  clojure.core/even? (core.clj:1383)```; ...each part of the s/cat works: ```(s/explain (s/cat :this (s/* (s/coll-of :q/o))) '((7 3 1) (9 7 3)))
Success!```; ```(s/explain (s/cat :that :q/test-map) '({:q/b [2 4 6] :q/c [""abc"" ""xyz""] :q/d [:q :w] :q/a [1 3 5]}))
Success!```; (where ```(s/def :q/test-map (s/keys :req [:q/b :q/a] :opt [:q/c :q/d]))``` and the various keys :q/a etc are simple ```odd? even? string? keyword?```"
287,1500050175.905422,Rebeca,even? isn't total; it throws an exception if something isn't a number; so you need something like (s/and number? even?)
287,1500050276.957287,Beulah,sorry I should have said :q/a and q:b are ```(s/+ odd?)``` and ```(s/+ even?)```
287,1500050358.000431,Rebeca,what is :q/o ?
287,1500050372.007711,Beulah,```(s/def :q/o odd?)```
287,1500050376.009844,Rebeca,"so the way s/* can tell it is done matching is something fails to match; yeah, odd? isn't total"
288,1500050389.016803,Clark,"Hey guys can someone help with this problem, I am new to clojure, may be I am missing something:
<https://stackoverflow.com/questions/45107883/clojure-reducers-foldcat-not-working>"
287,1500050392.018113,Rebeca,(s/and number? odd?)
287,1500050408.026843,Beulah,"what do you mean by ""total"" ?"
287,1500050450.049172,Daniell,"I suspect the problem here is that `s/+` is a regex matcher, not a collection matcher...?"
287,1500050473.061145,Margaret,<@Beulah> <http://mathworld.wolfram.com/TotalFunction.html>
287,1500050479.064458,Daniell,Change `:q/b` to `(s/coll-of even?)`; (you can specify a minimum length of 1 to require at least one element)
287,1500050499.075298,Rebeca,"that'll be the next issue, which will get him a weird failing spec; right now the error from feeding a non-number to odd? is bubbling out and killing the checking"
287,1500050560.106981,Daniell,"Ah, I see where you're going now. I was jumping ahead.; <@Beulah> ""total"" means ""defined for all inputs""; `even?` and `odd?` are only defined for numeric inputs.; Hence <@Rebeca>'s suggestion to use `(s/and number? odd?)`"
287,1500050662.159803,Beulah,"ok a simpler version works: ```(s/explain (s/cat :this (s/* (s/coll-of odd?)) :that (s/coll-of even?)) '((7 3 1) (9 7 3) [2 4 6]))```; using ```(s/def :q/b (s/coll-of (s/and number? even?)))``` does not work; ```(s/explain (s/cat :this (s/* (s/coll-of odd?)) :that (s/keys :req [:q/b])) '((7 3 1) (9 7 3) {:q/b [2 4 6]}))
IllegalArgumentException Argument must be an integer: [:q/b [2 4 6]]  clojure.core/even? (core.clj:1383)```"
287,1500050930.301915,Rebeca,you need to do it for odd? too
287,1500050936.305005,Beulah,"however, ```(s/explain (s/cat :that (s/keys :req [:q/b])) '({:q/b [2 4 6]}))
Success!```; oh"
287,1500050946.310537,Rebeca,if I recall odd? is just (not (even? ...))
287,1500050976.326141,Beulah,"ah yes that works ok; ```(s/explain (s/cat :this (s/* (s/coll-of (s/and number? odd?))) :that (s/keys :req [:q/b])) '((7 3 1) (9 7 3) {:q/b [2 4 6]}))
Success!```; please explain why!?"
287,1500051046.363521,Rebeca,"because odd? and even? as predicates aren't total, so they will throw exceptions when not passed numbers instead of returning false; s/and tries each predicate it order"
287,1500051066.374101,Beulah,yes but why should they be passed non-numbers ?
287,1500051089.386132,Rebeca,because in order for s/* to stop matching it has to fail a match; otherwise it would match everything
287,1500051153.419623,Beulah,"oh yes I see! ```(odd? {})
IllegalArgumentException Argument must be an integer: {}  clojure.core/even? (core.clj:1383)```; i had misunderstood how s/* worked; thanks so much!"
289,1500052164.972864,Loretta,"serg: I saw you deleted this. I noticed if you removed `into []` and just used the seq instead of a vector, it works. Did you solve it?"
290,1500052888.355247,Jen,"this is perhaps a little convoluted.. but now i’m curious just for curiosity’s sake. if I had a function that maps over some collection, invokes a provided fn, and returns the value of that invoked fn as a different shape, how does this work with compose?
```
(defn do-map [f coll]
  (map (fn [[foo val baz]] [foo (f val) baz]) coll)) ;; &lt;- notice the [a b c] 
;; wont work unless xform-2 and xform-1 are ""aware"" of the [a b c] shape
(do-map (comp xform-2 xform-1) coll)  
```; is there a generic way to compose transformations and, after each xform, re-shape the data?; the `do-map` couldn’t really know whether `f` was composed or not, it just sees a function. so it would be hard to do something like `(-&gt; coll f0 reshape f1 reshape ...)`"
290,1500053311.586004,Margaret,"<@Jen> sounds like you want `(fn [f] (fn [[a b c]] [a (f b) c])`; then you can wrap your functions in it?; and -&gt; isn’t a composer of functions, it’s a rewriter of forms, if you use `comp` it’s easier to get the right behavior via wrapping functions without jumping through syntactic hoops"
290,1500053635.767592,Jen,"not quite, but the more i think about it the less possible it seems. i essentially want an interface where I can pass in a single function (composed or not), and that function will be applied piecemeal. if the provided fn is a composed fn, it will invoke the first composed, reshape the results, invoke the second composed, etc… regardless of how many steps belong to that composed function.; I think it’s impossible to do it from the “inside”; there’s no way to call 1 step of a composed function and “steal” the result before calling the 2nd step.; i would have to make the interface something like `(do-map [coll f &amp; maybe-more-fns] (if maybe-more-fns (compose f reshape (first maybe-more-fns) reshape (second maybe-more-fns ...))` and do the composing on the inside, I think; that is, unless i’m totally misunderstanding your answer (happens often i find)"
290,1500054361.157739,Margaret,"<@Jen> `#(apply comp (map (fn [f] (fn [[a b c]] [a (f b) c])) (reverse %))` will take the functions in the order -&gt; would accept them, and return a composed function that does what you describe; or you could write a macro that inserts that function around or inside each function in the form"
290,1500054456.20706,Jen,"that’s pretty neat. i considered macros, too, but thats a whole ‘nother can of worms i havent opened yet."
290,1500054487.223256,Noella,"ooooh boy, you’re in for a treat! :smile:"
290,1500054513.236979,Margaret,"this becomes more clear if you name that function eg. ```(defn to-middle
  [f]
  (fn [[a b c]]
    [a (f b) c]))

(apply comp (map to-middle functions))```"
290,1500054668.318357,Jen,"yea that’s much more clear. funny now that you point that out I realize this is expressed in a protocol, which doesn’t support variadic arguments. so either enforce a seq like `(do-map v [f])` and use the fn above^, or I think something like `(-&gt; coll (do-map xform-a) (do-map xform-b)` (though more inefficient) works too; so much functional-ness, so little time"
290,1500054742.357915,Margaret,"that -&gt; form will break; that’s why I mentioned using comp to avoid syntactic hoops - since `-&gt;` is a form rewriter, it will put the coll in the wrong place"
290,1500054816.397371,Jen,"hmm, ill have to look deeper at that. thanks for the warning; so beautiful:
```
(map (apply comp (map reshape fns)) coll)
```
thanks a bunch !"
291,1500057308.754673,Roger,"I am trying to rename the keys from a hashmap with rename-keys
I have 
``` (def a {a ""A"", b ""B""} ```; and use ``` (set/rename-keys a {:a :aa, :b :bb} ```; but nothing changes; Am I doing something wrong?"
291,1500057480.845802,Margaret,nice
291,1500057504.857754,Ok,"Try `(def a {:a ""A"", :b ""B""})`"
291,1500057505.858392,Rebeca,"well for one, `a` and `b` are both unquote symbols which evaluate to some value where `:a` and `:b` are keywords that evaluate to themselves"
291,1500057650.935535,Roger,the problem is that I receive the Json as it is; I can not change the a variable; it was just an example; But i need to modify the names of the keys
291,1500057699.961536,Margaret,"sounds like your real problem is that you aren’t using the return value of rename-keys; nothing in clojure actually modifies the built in maps, vectors, lists, etc. - they return new ones you can use"
291,1500057730.977489,Roger,I did a println
291,1500057736.980261,Ok,You’re probably getting string keys.
291,1500057738.981447,Roger,but it printed the same a
291,1500057757.991059,Margaret,"don’t use println to look at data, use prn"
291,1500057767.996178,Brady,"If you are working with JSON, you're likely getting the map as `{""a"" ""A"", ""b"" ""B""}`"
291,1500057769.997425,Margaret,I bet a is actually “a” yeah; so you need rename-keys {“a” :aa} etc.
291,1500057852.041222,Roger,mmm I tried but I got this error :; java.lang.ClassCastException: clojure.core$map$fn__4781 cannot be cast to clojure.lang.IPersistentMap
291,1500057914.073386,Margaret,that means you used `(map f)` where it expected a hash-map
291,1500057956.095301,Roger,"wait, yes!!!!; I was doing it to another functionality; now it is working; rename-keys with ""a"" as key"
291,1500058066.153806,Margaret,"for future reference, this is the difference between `println` and `prn` ```kingfisher.core=&gt; (println {""a"" 0 ""b"" 1})
{a 0, b 1}
nil
kingfisher.core=&gt; (prn {""a"" 0 ""b"" 1})
{""a"" 0, ""b"" 1}
nil```"
291,1500058155.20054,Ok,"There’s probably other option — you can get json with keys as keywords, just look to documentation of your json lib."
291,1500058187.21767,Margaret,"that’s sloppy though - there are valid json keys that are not valid keywords, so then you end up creating keywords that shouldn’t exist"
291,1500058510.390767,Rebeca,"well that is a whole other thing; (are valid keywords only those keywords that can be produced by the reader?); but generally, turning keys in to keywords all the time is something every project (I have worked on) does, and I hate it; but if you do it you are doing the same thing  that everyone does"
291,1500059068.685267,Aldo,"""valid keywords"" are those that follow the rules in the docs imo, but the reader will create some keywords that don't if asked"
291,1500059344.822526,Rebeca,which docs?
291,1500059383.841775,Aldo,<https://clojure.org/reference/reader#_literals>
291,1500059399.849087,Rebeca,"those a docs on keywords that the reader can read; (which is why they are under the reader section); I've seen this discussion play out over and over again in chat, on the mailing list, and in jira issues, and it seems like the core team's general stance is what the reader excepts doesn't define what is valid"
291,1500059561.926889,Aldo,"the reader accepts more than those docs, but those docs do give a guarantee of what the reader will accept. so for me they make sense as a definition of valid. not the same thing as ""whatever the reader accepts""; eg
```
cljs.user=&gt; :&amp;
:&amp;
```; but it's not documented that that will always work (or become reserved for some special system/core usage) so I wouldn't use it"
291,1500059647.967367,Rebeca,"<https://dev.clojure.org/jira/browse/CLJ-1527>; the point is, just because the reader only constructs certain kinds of symbols and keywords, that doesn't restrict the Symbol and Keyword data types to only construct those types of symbols and keywords; <https://dev.clojure.org/jira/browse/CLJ-17>; <https://dev.clojure.org/jira/browse/CLJ-2009>; etc etc etc"
291,1500059862.069167,Daniell,"And at one point, very specifically, the Clojure/core team made `:1` (numeric keywords) illegal in the reader on the grounds that they weren't sanctioned by the docs -- and they broke a bunch of code out there in the wild so they reverted the reader change.; I was affected by that change (one of the OSS libraries I maintain) but I would have been perfectly happy to change `:1` to `(keyword ""1"")` -- which they said they would _not_ break... but they still reverted the change :slightly_smiling_face:; So we have prior art for the reader being publicly known to accept things that are not considered ""correct"" and not getting fixed -- and a statement that `keyword` (and, similarly, `symbol`) being able to produce ""junk"" output from arbitrary input :neutral_face:"
291,1500060006.138625,Rebeca,"the issue isn't that the reader and the reader docs are not in 100% agreement about what is a readable keyword (that is another issue) the issue is that a valid readable keyword is not the same as a valid keyword; for example, the keywords json libraries create for map keys never pass through the reader; so they can be any crazy thing"
291,1500060050.159882,Daniell,"Exactly my point, yes."
291,1500060096.181745,Rebeca,"which negates the purpose of turning them in to keywords in the first place, because the only reason people turn them in to keywords is since most maps in clojure use keyword keys, they more comfortable with them"
291,1500060127.196083,Daniell,Speed of lookup over plain strings. In theory.
291,1500060210.234825,Rebeca,maybe
291,1500060222.240198,Daniell,"`(identical? :abc (keyword (str ""a"" ""bc"")))` =&gt; true; So map lookup will be faster if it can check for `identical?` before falling back to ""equal""."
291,1500060270.2631,Rebeca,but do you want to be interning json coming in over the wire?
291,1500060283.269371,Noella,"what am I missing here?
```
user=&gt; (defn foo [args] (apply hash-map args))
#'user/foo
user=&gt; (binding [*data-readers* {'foo #'user/foo}] #foo [1 2 3 4])

             java.lang.RuntimeException: No reader function for tag foo
clojure.lang.LispReader$ReaderException: java.lang.RuntimeException: No reader function for tag foo
             java.lang.RuntimeException: Unmatched delimiter: )
clojure.lang.LispReader$ReaderException: java.lang.RuntimeException: Unmatched delimiter: )
```"
291,1500060307.280733,Rebeca,the whole form is read before the binding is run
291,1500060318.285447,Daniell,"Good question, given that converting arbitrary strings to keywords can open you up to a denial of service attack."
291,1500060368.309644,Rebeca,"I mean, you will likely be fine, and keyword's intern a weakreference, so the they will get cleared"
291,1500060387.318837,Daniell,"Ya, but... :slightly_smiling_face:"
291,1500060424.33581,Margaret,"```user=&gt; (defn foo [args] (apply hash-map args))
#'user/foo
user=&gt; (binding [*data-readers* {'foo #'user/foo}] (read-string ""#foo [1 2 3 4]""))
{1 2, 3 4}```"
291,1500060425.336375,Noella,"<@Rebeca> ahh, so you need this? `(binding [*data-readers* {'foo #'user/foo}] (read-string ""#foo [1 2 3 4]""))`; haha, timing :smile:"
291,1500060437.342134,Rebeca,yes
291,1500060514.379196,Noella,"while on the topic of tagged literals: is there anything special you need to do to get it to work with `tools.namespace`?; I’ve placed a `data_readers.clj` in my classpath root, but when I try to use it in the REPL I get something like “Can’t call unbound Var”; lemme dig up the exact exception"
291,1500060580.411299,Rebeca,"you need to require the namespace before you can use the reader; data_readers.clj sets up the tag, but doesn't actually cause the namespace where the function is defined to load"
291,1500060660.450343,Noella,"I’m pretty sure I did that, but let me double check; ok, so my `data_readers.clj` contains `{foo kleinheit.pg.impl/foo}`; `(defn foo [vs] (apply hash-map vs))`; wait a minute!"
291,1500060873.549404,Rebeca,"and every place where you read something using that tag, before that does a require of that namespace execute?"
291,1500060942.58067,Noella,"okay, I see the problem: if I use `(require 'kleinheit.pg.impl :reload)` first thing in the REPL, it works; but if I do `clojure.tools.namespace.repl/refresh`, it doesn’t; yep, `tool.namespace` clobbers it somehow; the prevailing wisdom on the internet when having problems with data readers is to call `(#'clojure.core/load-data-readers)`, but then I get: ```dev=&gt;   (#'clojure.core/load-data-readers)

clojure.lang.ExceptionInfo: Conflicting data-reader mapping```"
292,1500062214.167172,Margaret,"if you look at the ex-data on *e that should show you what went wrong, right?"
291,1500062388.249134,Noella,I’m getting a conflict with my own data reader file :neutral_face:
291,1500062418.264969,Margaret,"OK - so the data readers are already loaded, you have to reload the code they refer to, right?"
292,1500062461.28632,Rebeca,(which refresh would do if you properly required that code before using the readers)
291,1500062518.313394,Noella,still get the error after calling `refresh`
291,1500062534.321311,Rebeca,"right, because somewhere you aren't properly doing the require; so find all the places you use the tag, ensure in that namespace you require the namespace where the function the tag maps to is"
291,1500062614.35863,Noella,"```dev=&gt; (dev/refresh)
:reloading (... kleinheit.pg.impl ...)
:ok

dev=&gt; #foo [1 2 3 4]
        java.lang.IllegalStateException: Attempting to call unbound fn: #'kleinheit.pg.impl/foo
clojure.lang.LispReader$ReaderException: java.lang.IllegalStateException: Attempting to call unbound fn: #'kleinheit.pg.impl/foo
```; and it works if I just skipped the `refresh` and do the regular `(require ...)`, so I’m at a loss ¯\_(ツ)_/¯"
291,1500062723.408647,Rebeca,what kind of repl you are using?
291,1500062729.41137,Noella,`lein repl`
291,1500062764.427583,Rebeca,lein repl can be kind of weird
291,1500062789.439134,Noella,ehh… errhmm… how do I launch a REPL without lein? :sweat_smile:
291,1500062823.454724,Rebeca,"that depends, ```java -cp `lein classpath` clojure.main``` often works"
291,1500062869.475215,Margaret,rlwrap is very handy when doing it that way
291,1500062982.525819,Noella,still get the same behavior in that REPL unfortunately :confused:
291,1500063035.549531,Rebeca,put a println at the top of the kleinheit.pg.impl namespace to see if it is actually getting reloaded
291,1500063156.605032,Noella,"yessir, it prints; well, I’m gonna give this a rest for now, appreciate all your help folks"
291,1500063283.663507,Rebeca,"ah, I bet refresh breaks var interning, so you end up with two vars with the same name"
291,1500063334.687305,Noella,"ohh, now that sounds like it might be it!; time to dig into the source…"
291,1500063394.714409,Margaret,"yeah, it destroys namespaces which might also include doing something wacky with vars that other code has captured…; you might just want to blacklist the namespaces that define readers from auto-reload"
291,1500063747.872966,Noella,"yeah, I’ll see if I can figure out a way to do that, thanks!"
291,1500063822.907178,Margaret,<@Noella> it’s documented here <https://github.com/clojure/tools.namespace#disabling-refresh-in-a-namespace>
291,1500063968.97194,Noella,"yeah, the problem with that is if I call `disable-unload!` in the file, the “do not refresh” metadata will be added on the first refresh and I’m stuck again; can you add metadata to a namespace in the `ns` call?"
291,1500064027.997817,Margaret,"yeah- iirc it makes tools.namespace unhappy though (and various tools that use that, like eastwood); but maybe that’s old info…"
291,1500064400.1642,Noella,"well, that didn’t work :smile:; talking about interning got me thinking about a great clojure talk I need to rewatch: <https://www.youtube.com/watch?v=8NUI07y1SlQ>; (thanks for the preview Slack….)"
291,1500065516.648413,Evelin,"woot i just made a graphics library for clojure! if anyone interested in that kind of thing could run some of the examples, i'd be thrilled to know if they work for you or not.; <https://github.com/bcbradle/gl>"
293,1500101014.753654,Clark,"<@Loretta> Hi Josh, actually the problem was in my mac, prev I ran this func with long running async task in map,  it was like fetch 6k items and insert into db values for each one, so seems like it was running all this time consuming all available threads, that's why it didn't work, once it has finished I got my code working as expected.; The strange thing is that I ran this in REPL and I am sure I have cancelled this task, but somehow it was still running in background consuming all available threads"
294,1500129128.621394,Reginia,"hello everybody, is there a way to get the namespace of a map with uniformly namespaced keys?; e.g. `(map-ns {:some/key :val :some/other :val ,,,}) ;; =&gt; “some”)`"
294,1500130897.776272,Ok,"```user=&gt; (map namespace [::a ::b ::c])
(""user"" ""user"" ""user"")```"
294,1500131061.791226,Margaret,"the bot is kind of weird, the original hash-map was `{::a 0 ::b 1 ::c 2}`"
295,1500139235.541055,Yaeko,"can anyone let me know why this doesnt work
```
(defn what-is [x]
  (cond
    (identical? x 42) ""everything""
    (identical? x (* 42 42)) ""everything squared""
    :else ""nothing""))

(what-is (* 42 42)) ; ""nothing""
```"
295,1500139324.549409,Margaret,"<@Yaeko> ```+user=&gt; (identical? 127 127)
true
+user=&gt; (identical? 128 128)
false
```; there's a cache for the Longs, but only between -128 and 127, they aren't all cached; identical? isn't just an equality check, it checks if the data is stored in the same location on hardware; when you type in 127, clojure asks for an instance of Long, and java uses a cached set of Longs to look up the value, when you type in 128 clojure once again asks for a Long, but this time java makes a new one"
295,1500139560.569881,Yaeko,"Thanks a lot, i was using the wrong function. This worked 
```
(defn what-is [x]
  (cond
    (= x 42) ""everything""
    (= x (* 42 42)) ""everything squared""
    :else ""nothing""))
```"
295,1500139578.571459,Margaret,there's also `==` for numeric equality; eg. it would match 42.0 but = will not
296,1500141913.779954,Yaeko,Thank you for the help
295,1500152473.651861,Reginia,"<@Ok> <@Margaret> thank you, i was looking for something preferably in core that behaves kind of like `namespace` does, returning the namespace when all keys have the same, `nil` when not all keys are namespaced, and a set of namespaces when multiple. i’ll write my own then :slightly_smiling_face:"
295,1500152674.667855,Margaret,returning a set or a string from one function is probably less than ideal - that kind of thing tends to increase the complexity of everything around it for no benefit
295,1500152850.681234,Reginia,"you are correct, although it’s just for display purposes in a cli statement, so … :wink:"
295,1500164297.467506,Jutta,"<@Reginia> 
<https://github.com/clojure/clojurescript/blob/797e247fbef676544060a57da995f058db061f37/src/main/cljs/cljs/core.cljs#L9803>
on cljs, this function ""detect"" the NS of the map to print `{:a/b 33}` as `#:a{:b 33}` (reader 1.9 feature)
It may be usefull."
296,1500185218.640404,Berry,"In haskell, there is something called <https://hackage.haskell.org/package/threepenny-gui>
where there is a thin js layer, and you can write your entire app in haskell (when on localhost)

Is there something similar to clojure? where when on localhost, you can write webapps in clj because the 'client' side is just a very thin cljs code that sends events back to the clj side to be processed"
297,1500189016.838332,Daniell,I've read all the stuff about Threepenny and I still have no idea what it actually is/does...; (but that's how I feel about most Haskell stuff)
297,1500193348.083546,Berry,<@Daniell> : imagine ghcjs did not exist; imaginme haste did not exist; then there's no way to do js / browser dev in . ahskell
296,1500193385.085782,Danyel,"<@Berry> in the Java world, this reminds me of Java Server Faces. Given the horrible experience I had with it, I'm not surprised it was not much reproduced in the Clojure ecosystem"
296,1500193423.08848,Berry,"then haskell creates the js library which talks to haskell ober websocket; this js likbrary allows haskell to create/modify dom elements, and routes events back to haskell"
298,1500204717.763354,Tobie,does anybody here have experience with loom?
296,1500212587.330488,Torie,"<@Berry> so to ship your Threepenny-based app, you have to ship the haskell-compiled binary server as well?"
299,1500217974.790758,Alejandra,"hi everybody! does any one knows what happens to lein :repl-options :caught in headless mode?; it works when you start lein repl, but not lein repl :headless; hmmm more related to :repl-options :caught and nrepl"
299,1500219182.897249,Lavinia,So I'm thinking about writing a clojure desktop app. Does <https://github.com/halgari/fn-fx> seem relatively stable and usable?
300,1500223938.32415,Lanora,"RE: threepenny, seems like Haskell analogue to R's Shiny <https://shiny.rstudio.com/>"
301,1500231595.003278,Berry,"<@Torie> : if you were to ship it, yes; in practice, you'd never ship it, it'd only for apps you run locally and want a browser-dom-gui; <@Lanora> can R's shiny take *arbitrary* dom events, and send it back to R ?"
302,1500233505.166056,Jaqueline,"Is there a team here, who uses both emacs/cider &amp; intelij/cursive? Did you experienced indents issues like this? <https://github.com/weavejester/cljfmt/issues/97>"
302,1500233608.174629,Tamra,Can someone toss me a basic/simple macro that works in clj/cljs/self-hosted???
302,1500233668.179821,Ramonita,<@Tamra> like `(defmacro foo [x] x)` ?
302,1500233826.193244,Tamra,"<@Ramonita> hahah im looking for something that has reader conditionals, `(defmacro broken [] #?(:clj ""clojure"" :cljs ""clojurescript""))` resolves to “clojure” in JVM ClojureScript; ideally I would like “clojure” in clj and “clojurescript” in cljs/self-hosted; <@Ramonita> im just trying to wrap my head around the correct pattern for what I am looking for"
302,1500234099.216527,Ramonita,"<@Tamra> There’s a way to do that that involves looking at a var, but I forget which one."
302,1500234191.224186,Kareen,<@Tamra> see <https://github.com/cgrand/macrovich>
302,1500234234.227765,Tamra,<@Kareen> <@Ramonita> yeah I looked at macrovich/case but I figured there was a proper way to do it without `&amp;env` checking
303,1500237214.483718,Pearlene,I've been using clojure for 19 years and I just now figured out that you can use `(partition-all 2 1 coll)` to walk a collection with awareness of whether you're at the end or not.
303,1500237271.488598,Kareen,"huh; :upside_down_face:; yep, that's a funny trick"
303,1500237341.494327,Delana,"<@Pearlene> neat!

```
Give me some Clojure:
&gt; (partition-all 2 1 (range 5))
((0 1) (1 2) (2 3) (3 4) (4))
&gt; (partition-all 2 1 (range 6))
((0 1) (1 2) (2 3) (3 4) (4 5) (5))
```"
303,1500239329.667474,Fe,<@Pearlene> nice! that's actually a pretty common use case
303,1500239435.677064,Pearlene,suggested usage: `(doseq [[x more?] (partition-all 2 1 coll)] ...)`
304,1500241516.853294,Delois,"<@Jaqueline> Cursive allows you to control this, _Settings-&gt;Editor-&gt;Code Style-&gt;Clojure-&gt;General-&gt;One space list indent_; Recent versions of CIDER will also allow you to configure Emacs to do the opposite if you prefer that, I’m not sure what the setting is though."
305,1500257151.376684,Berry,"is there a way to get the emacs repl to display reagent/hiccup/react/dom/svg elements ? so I want to write sexps that return hiccup, then have emacs, instead of displaying the raw clojure data, to render it and display it; if I had this, it'd give me most of ipython in eamcs"
306,1500260210.756557,Lavinia,So I'm thinking about writing a clojure desktop app. Does <https://github.com/halgari/fn-fx> seem relatively stable and usable?
305,1500262602.050495,Berry,"<https://ring-clojure.github.io/ring/ring.adapter.jetty.html>; why is there no websocket option there?; how do I specify a websocket (which, iirc, jetty9 supports)"
307,1500265364.389454,Amado,can anyone recommend me an async http client based on core.async?
308,1500266196.490821,Darci,"config: nomad, aero, environ, cprop, ... who uses which library and why? (it's always nice to have some kind of experience reports before deciding); <@Amado> why should it be based on core async?"
308,1500267653.694737,Daniell,"<@Darci> We wrote our own. We haven't gotten around to open sourcing it yet tho'. It's partly inspired by `outpace/config` but does some specific stuff we needed, and it's Component-based. This is a good article comparing some of the config libraries: <http://realworldclojure.com/application-configuration/>"
309,1500267831.718368,Daniell,"Hmm, actually now I re-read that article, I suspect Sonian's `carica` is more likely the inspiration for what we ended up with."
309,1500267979.736837,Lanora,"Not entirely sure. Define 'arbitrary'. But on the face of it, I would think the answer is 'yes'. However, like all such things, it is not miraculous - it does not provide totally open ended automated UI generation..."
308,1500268239.769169,Darci,"<@Daniell> right, thx"
308,1500271831.277272,Shira,"<@Darci> we use aero, I like it's philosophy of centralising as much config as possible, and just separating out sensitive config"
310,1500274857.85897,Lavinia,"Does clojure have any sort of plugin loading library? I'd like to create an application which loads plugins, but I haven't seen anything around."
310,1500278529.870889,Dani,<@Lavinia> <https://yogthos.net/posts/2015-01-15-A-Plugin-System-in-Clojure.html>
308,1500278698.925518,Vannessa,<@Darci> we use <https://github.com/typesafehub/config> with a tiny clojure wrapper
308,1500278830.965871,Weston,"<@Darci> aero here too, it's just edn + some data readers. nothing too fancy, but quite powerfull. And you can extend it if you need it to do something it can't. It's quite lightweight."
311,1500281207.770325,Berry,"```
{:keys [in out] :or {in chan out chan}}
```

I am familiar with {:keys [...]} . What does the :or mean?"
311,1500281239.781795,Kareen,"if value is not present, use default"
311,1500281240.782254,Bibi,<@Berry> those are alternate values if not found
311,1500281268.791775,Kareen,note that it checks using `contains?` not nil/false
311,1500281296.801483,Berry,"ah, it's 

[in (if (contains? args :in) (:in args) chan))]"
311,1500281319.809678,Kareen,semantically yes
311,1500281340.817285,Berry,great; thanks!
311,1500281470.864448,Lavinia,Thanks!
311,1500281557.895399,Darci,"<@Shira> <@Weston> ok... I've been using cprop before. I might try aero for a change.
<@Vannessa> any reason why you don't use one of the clojure config libs?"
312,1500285410.281482,Vannessa,"no, I just like that config format; well documented, does everything I want; question: In Clojurescript it seems that the `&amp;env` passed to macros contains the `def` vars as well as locals. How do I get the same in Clojure?"
313,1500302602.503131,Anneliese,I need to filter this out by matching the inner vector for example this [[:x [3 2]] [:y [1 1]] [:z [3 2]] [:i [3 1]] should be [[:x [3 2]] [:y [1 1]] [:z [3 2]]]; [:i [3 1]]  will be removed because the first element of the inner vector appeared before with a different value of the last element
313,1500302879.683675,Joette,is there a clojure naming convention preference for a function which returns a predicate? Assumption here is that some extra data is required to create the predicate and we need a separate function taking that extra data and returning the predicate function
313,1500302971.743943,Weston,I think `foo-fn`is quite common; at least in clj.core
313,1500303070.809109,Tameika,"did anyone try to call an external program with clojure with timeout? none of the examples (conch), (clojure.contrib.shell-out with java.util.concurrent.TimeUni) did work... stuff runs forever; i mean a seperate process; like call a windows exe and kill it after 10 seconds if it still runs"
313,1500303443.055755,Weston,"I think you need to do the bookeeping yourself and call destroy on the Process instance if not completed; ```
(let [x (.exec (Runtime/getRuntime) ""htop"")]
  (try
    (Thread/sleep 10)
    (.exitValue x) ;; check value possibly
    (catch java.lang.IllegalThreadStateException e
      (.destroy x))))
```; something a bit like that"
313,1500303665.207132,Tameika,<@Weston>  you've seen a good working code example i can copy paste?; thanks!; this example will not wait 10 secs if the procs dies before?
313,1500303736.255122,Weston,"10ms; it's not a complete example, but you should be able to take it from here"
313,1500303819.311506,Tameika,"how about getting stdout, stderr from this example?"
313,1500303869.344798,Weston,-&gt; <https://docs.oracle.com/javase/7/docs/api/java/lang/Process.html>
313,1500303871.346502,Tameika,"the problem wit conch was that stdot/err was flushed at the end, which would never happen when process was destroyed earlier; should it be possible to do stuff like (let [x (.exec (Runtime/getRuntime) ""htop &gt; mylogfile"")] with mentioed example?"
314,1500304476.736739,Renata,I have a seq like `[:a :b :c]` and want to get a lazy seq like `[:a :b :c :a :b :c :a :b ....]` — any suggestions?
314,1500304507.75707,Noella,<@Renata> `(cycle [:a :b :c])`
314,1500304591.81211,Renata,"<@Noella> thanks, that’s what I missed! :slightly_smiling_face:"
315,1500305056.115639,Sibyl,"Hello. I'm looking at <https://dev.clojure.org/display/community/Maven+Settings+and+Repositories> and wondering about SNAPSHOT releases. In the example, is 1.1.0-SNAPSHOT before or after the 1.1.0 release? In other words, is it supposed to be a pre-release snapshot or a post-release patch?"
316,1500307457.692963,Margaret,"I don’t think any of the process stuff uses sh, and `&gt;` is sh syntax, so you need to wrap up your call into a string passed to `/bin/sh` to make that work; or you can create the redirection using the file handles Process gives you if you want to do it the hard/portable way, of course"
315,1500307860.936798,Xenia,"`1.1.0-SNAPSHOT` means ""the version that will eventually be released as `1.1.0`""; i.e., `*-SNAPSHOT` comes before `*`; under the hood, every time you `lein install` a snapshot version, a timestamped artifact is added to your maven repo, and the SNAPSHOT name just points to the latest of these; if you use the `lein-release` plugin then when you're ready to release it, you run `lein release` and it'll transition your `1.1.0-SNAPSHOT` to `1.1.0`, commit, tag and deploy that to your maven repo, and then bump the version to `1.1.1-SNAPSHOT`, so you're ready to start working on the future `1.1.1` release."
315,1500314083.553202,Sibyl,<@Xenia> Thanks!
317,1500320445.180703,Tamra,<http://github.com/degree9/meta|github.com/degree9/meta> has a fully open ended UI solution; uses edn and a template to generate a default UI or you can provide an alternate template or final cljs file for the ui
318,1500326387.331404,Lucy,"Hate to interrupt, but I'm having trouble splitting up the middleware for my different routes in Compojure; Anyone have information / a blog post / etc on the topic?"
318,1500326480.37481,Tobie,"I have a question about structural sharing in nested maps. Suppose I have a map called mymap that looks like this
```
mymap
=&gt; {:mykey [{:A 1, :B 2} {:A 2, :B 2} {:A 3, :B 2}]}
```
I want to write a function that goes down and increments each value for :A
I can do this with
```
(assoc mymap :mykey (map #(assoc % :A (inc (:A %))) (:mykey mymap)))
{:mykey ({:A 2, :B 2} {:A 3, :B 2} {:A 4, :B 2})}
```
do the keys :B ""point to the same place in memory"" after this modification as the original maps? That is, is there structural sharing going on between the maps in the vector before and after this modification?"
318,1500327022.621405,Martina,"Asymmetry in `string/split` and `string/join` makes me sad : ( ```        parts (string/split kafka #"":"")
        host (string/join "":"" (butlast parts))
```"
319,1500327166.685435,Roger,"Hi all, I am trying to write some test in clojure and I need to do some Mocks and proxies, however I cannot figure out how to proxy some java objects and methods

I have this function; ``` (defn singletest
  [cert]
  (let [x500principal (.getSubjectX500Principal cert)
        dn (.getName x500principal)]
    (apply str ""abcdefg""))) ```"
318,1500327228.712568,Roger,cert is a java object of type X509CertImpl
319,1500327296.742046,Roger,"I know that I am not using x500principal and dn; but it is an example; However I am having a hard time trying to do the test; ``` (deftest singletest
  (let [cert (.X509CertImpl)
        x500principal (proxy [X509CertImpl] []
                       (getSubjectX500Principal [] nil))
        dn (proxy [X500Principal] []
                       (getName [] ""works""))]
       (is (= """" (c/singletest cert))))) ```; throws me java.lang.IllegalArgumentException: Malformed member expression, expecting (.member target ...); any idea??; someone has worked with certificates before :sob::sob:"
319,1500327569.859866,Aldo,what is c?; c/singletest looks like a syntax error; oh sorry no it's not; god I'm tired
319,1500327665.901682,Roger,no worries
319,1500327680.908629,Aldo,this (.X509CertImpl); is invalid syntax; I think you want (new X509CertImpl) or (X509CertImpl.) (latter preferred generally)
319,1500327717.92474,Roger,"I change it to 
``` (deftest singletest
  (let [cert (proxy [X509CertImpl] []
               (getSubjectX500Principal [] nil))
        x500principal (proxy [X500Principal] []
                       (getName [] ""works""))]
       (is (= """" (c/singletest cert))))) ```; but I am getting; java.lang.VerifyError: Cannot inherit from final class; this is because X500Principal is a final class; then how can I work around that"
319,1500327802.960642,Aldo,I think you want to implement java.security.Principal not X500Principal
319,1500327837.97594,Roger,the problem is that I have everything working!
319,1500327845.979468,Aldo,"ditto you probably want to implement X509Certificate not X509CertImpl (program against abstractions, not concretions)"
319,1500327853.982713,Roger,"I mean, the only thing left is the test"
319,1500327870.990167,Aldo,"ok, test code is still code though"
319,1500327880.994292,Roger,yes!; and there is no X509Certificate class from sun.security.x509; what about the final class?; I cannot proxy that
320,1500329685.694814,Gerda,<@Martina> what is the asymmetry ?
320,1500329792.730934,Lucy,Would anyone know why all my api routes are being broken by CORS and/or the solution?; 404s and OPTION requests in the chrome console
320,1500329809.736798,Martina,"<@Gerda> In `split` the delimiter is last, whereas in `join` the delimiter is first; I only ever remember they are opposed, never which one is which"
320,1500329840.747319,Gerda,"oh, in the args .."
320,1500329851.750916,Martina,I literally have to try it in the repl every time I want to use them
320,1500329872.758094,Willow,string join works on a collection which always goes in the last positional argument; split works on a single object which always goes first positionally
320,1500329984.796587,Martina,"So you are saying the inconsistency is actually an example of a greater consistency?; This must be what Gödel was talking about; Still, why not always have ""the thing being operated on"" either always last or always first? What value does having one rule for single objects and a different rule for collections provide?"
320,1500330423.943922,Willow,`(map fn coll)` is a very standard idiom
320,1500330431.946595,Loretta,<@Martina> I didn't read all of these but it's exactly your question: <https://stackoverflow.com/questions/18234818/why-is-the-argument-position-of-split-and-join-in-clojure-string-mixed-up>
320,1500330445.951083,Willow,think of the threading macros `-&gt;` vs `-&gt;&gt;`. basically one is do stuff to object and one is do stuff to collection
320,1500330489.965558,Martina,<@Willow> But.... that doesn't answer my question; <@Loretta> Thanks!
320,1500330526.9774,Willow,"i thought the question was why do these seem inconsistent. so then yes the ""greater consistency"" sounds good to me"
320,1500330562.989197,Martina,"I did ask a few questions. The one I was referring to was this: ""Still, why not always have ""the thing being operated on"" either always last or always first? What value does having one rule for single objects and a different rule for collections provide?"""
320,1500330613.006177,Willow,well i can't speak to that i guess
320,1500330624.009799,Martina,"<@Loretta> Funny, they don't answer it there either : ); just show ways to work around it"
320,1500330672.026187,Aldo,I think it's nice having it obviously clear whether code is working on collections or objects myself
320,1500330802.068678,Loretta,"<@Martina> with things like this I think you are bound to find reasons for doing it one way or another, and just as with anything, there are likely to be differences of opinion. Particularly with functions one does not use very often, you'll need to look at the docstring or IDE hints anyway to determine what it takes, so unless if vexes you greatly, I'd say this is not much of an irritation :wink:"
320,1500330856.085554,Martina,"<@Loretta> Appreciated, though it does irritate me every time I have to look it up; It is okay, nothing is perfect; Really I gripe because clojure is so well-designed in most other ways, these funny inconsistencies stand out all the more"
320,1500330910.102614,Loretta,"Your point is well taken, and justifying its correctness may or may not be a losing battle -- if that's one of your irritations then I'd say you'll be just fine :thumbsup::skin-tone-2:  :wink:"
320,1500330910.102787,Willow,not sure what your environment is but if in emacs `eldoc` will solve that for you
320,1500331012.134833,Martina,<@Willow> Thanks I'll take a look at that
320,1500331054.147849,Willow,"if in CIDER, apropos, grimoire, browse ns and eldoc are quite nice; i've been using grimoire quite a bit; That's awesome. It's just so handy. Much appreciated"
321,1500333227.797511,Tameika,"can anyone explain me what a java.lang.IllegalArgumentException: array element type mismatch
means?"
321,1500333408.846361,Rebeca,it means the array type you are calling a java method with doesn't match
321,1500333516.874784,Tameika,so fi it expects an array of ints and i am using an array of strings; thanks
322,1500335241.318265,Micha,"Yes, there is.  You can verify yourself whether this is so using identical? on the pieces you hope are being shared, as shown below; user=&gt; (def mymap {:mykey [{:A 1, :B 2} {:A 2, :B 2} {:A 3, :B 2}]})
#'user/mymap
user=&gt; (def m2 (assoc mymap :mykey (map #(assoc % :A (inc (:A %))) (:mykey mymap))))
#'user/m2
user=&gt; (identical? (-&gt; mymap :mykey (nth 0) :B) (-&gt; m2 :mykey (nth 0) :B))
true"
322,1500340715.54501,Shauna,"Hmm, my gut tells me that's not a good example because: ```
user=&gt; (identical? 2 2)
true
```; This would be a better test:
```
user=&gt; (identical? {:test 1} {:test 1})
false
user=&gt; (def mymap {:mykey [{:A 1, :B {:test 1}} {:A 2, :B {:test 1}} {:A 3, :B {:test 1}}]})
#'user/mymap
user=&gt; (def m2 (assoc mymap :mykey (map #(assoc % :A (inc (:A %))) (:mykey mymap))))
#'user/m2
user=&gt; (identical? (-&gt; mymap :mykey (nth 0) :B) (-&gt; m2 :mykey (nth 0) :B))
true
```"
322,1500341005.606528,Micha,"The better test works, too, as I expected it would.  Thanks."
322,1500341127.633246,Shauna,"Also, for clarity, there isn't any structural sharing going on _within_ the vectors themselves - only at the same key ""paths"" between `mymap` and `m2`:
```
user=&gt; (identical? (-&gt; mymap :mykey first :B) (-&gt; mymap :mykey last :B))
false
user=&gt; (identical? (-&gt; m2 :mykey first :B) (-&gt; m2 :mykey last :B))
false
user=&gt; (-&gt; mymap :mykey first :B)
{:test 1}
user=&gt; (-&gt; mymap :mykey last :B)
{:test 1}
```; Yeah - this is a cool approach to discover the structural sharing. I hadn't thought of using `identical?` for this."
323,1500346448.689893,Berry,"keep, for, map -- they want pure functions and return a lazy list; I want something which is okay to pass an unpure function to ... and returns a strict list; in good clojure style, do people do (map impure-function ...) or do we do something else when we have to run an impure function and also get its return value ?"
323,1500348244.010064,Shira,<@Berry> usually you'll use `doall`; if you care about the return value
323,1500348710.089317,Loretta,"<@Berry> it is fine, as far as I know, to pass a function with side-effects to `keep`, `filter`, etc -- the gotcha is that you should not *expect* that your code will necessarily execute. So, your side effect may happen, and if you don't mind, great -- but, your side effect might *not* happen, and that's why it says to avoid impure functions (or in some cases, may get called *more than once*)."
323,1500348837.110381,Margaret,it also might happen 31 times more than you expected; right
323,1500348968.131658,Loretta,"<@Berry> not sure why you want a ""strict list"", but for eager evaluation with guaranteed ""run-once"", `reduce` would be a decent candidate to build it:
```(defn eager-map [f coll]
  (reverse (reduce #(conj % (f %2)) () coll)))```"
323,1500349389.203471,Lavinia,Does anyone know how to specify a stylesheet for a scene in fn-fx (a clojure wrapper for JavaFx)? <https://github.com/halgari/fn-fx>
323,1500350066.321145,Berry,"<@Shira> , <@Loretta> : okay, so despite the docs saying ""use pure function"", it's actually okay to assume *atmost once, in order* semantics -- i.e. we don't know how far it will exec (due to evaling thunks at a time) -- but we can assume that:

1. thunks, if evaluated, at evaluated at most once
2. thunks, if evaluated, as ""in order""
so
(head (map f '(1 2 3 4 5)))

won't do

(f 1)
(f 3)
eh, let's skip 3 &amp; 4 ... and then just eval (f 5) just for kicks"
324,1500350458.393204,Tobie,"hey <@Shauna> , <@Micha> , I didn't know that `identical?` could be uesd in such a way to examine structural sharing - thanks!"
323,1500350645.428111,Loretta,"<@Berry> in the case of the current implementation of `map`, I'd say so -- with the obvious disclaimer that making assumptions like this and relying on these details is not safe, and that I wouldn't use an approach like this (I'd prefer the `eager-map` function I put above, for example)
in the case of something like a comparator, it's quite likely that it will be executed more than once, per pair, so you would definitely not get any guarantees there."
324,1500350666.431891,Celestine,"I'm getting a bizarre repl error that occurs only when reloading a file:
```
2. Unhandled clojure.lang.Compiler$CompilerException
   Error compiling *cider-repl webtools* at (1:1)

1. Caused by java.lang.RuntimeException
   No such var: user/reset
```  
The project compiles fine.  The repl starts fine.  The problem only happens if I use `C-c C-x` to recompile.  If I restart the whole repl, it compiles fine.  It seems like it's trying to compile the repl buffer, but I can't for the life of me fathom WHY.  Wondering if anyone has any ideas what would cause this.  The only hit on stack overflow suggests that I must be requiring something `:as user`, but I'm definitely not."
323,1500351153.513942,Berry,"<@Loretta> : thanks for the eager map; it seems surprising that 1. core has no eager-map 2. many are probaly using (doall (map ...)) to simulate it, but 3. this revolves around assumptions that map doesn't really guarantee"
323,1500351318.541544,Celestine,Tried a `lein clean` but that didn't make any difference.
323,1500351386.552395,Berry,"<@Celestine> : what is user/reset ? is it part your lein config, part of cider, part of some reload package that you are using? [I use boot]"
323,1500351606.589003,Celestine,"<@Berry> User is the init-ns for a repl in my project.clj (lein config).; <@Berry> so It seems that it expects a symbol `user/reset` that suddenly doesn't exist.  But looking over my changes from the past day I don't see anything that I would expect to affect that.; <@Berry> Well, restarting emacs finally seems to have fixed it."
323,1500352045.662954,Berry,"yeah, emacs can be quirky like that"
325,1500368220.900416,Nickole,How to avoid reflection warning in gen-class state. Specifically I looking for answer for this question <https://stackoverflow.com/questions/6625104/adding-a-type-hint-to-a-clojure-gen-class-state-access>
326,1500376211.78187,Tempie,"Hello fellow clojurians. I am eager to refactor part of my function that use destructuring but having some problem.

Here is a code snippet that has sequence of files that are grouped based on hash, uploaded and flattened back.

```
(-&gt;&gt;        
      items
      (group-by :hash)
      (pmap #(let
               [[hash [{file :file}] :as group] %]
               (if (upload hash file)
                 (second group))))
      (flatten))))
```

Is there a better way to destructure *group* into key and values to avoid performing `(second group)`?; Ok, so the only thing I came up with is:

```
(-&gt;&gt;        
      items
      (group-by :hash)
      (pmap #(let
               [[hash values] %
                 [{file :file}] values]
               (if (upload hash file)
                 values)))
      (flatten))))
```

Is it any good?"
326,1500380885.357622,Ok,values is a vector
326,1500381106.444845,Tempie,"<@James>, <@Ok> is correct - *values* is vector. It may work if we update it:

```
(-&gt;&gt;        
      items
      (group-by :hash)
      (pmap (fn [[hash values]]
			(when (upload hash (:file (first values)))
                  values)))
      flatten)))
```"
326,1500381140.458273,James,"Oops, my bad. Missed that; That should work"
326,1500381268.510061,Ok,Though I don’t know if there is any point to removal of `(second group)`; You may as well do this `[[hash [{file :file} second] :as group] %]`
326,1500381357.545692,Tempie,<@Ok> Correct. That is my initial version. But don’t you think destructured version is more readable?
326,1500381519.611071,Ok,"<@Tempie> Nope, imo — you need to parse destructuring and for that structure it is not very easy."
327,1500385074.399689,Ellyn,"when using datomic, if I can freely choose between an SQL backed datomic or Cassandra backed datomic, which one is better?"
328,1500387621.00995,Lavera,"<@Agustina> It's because of the way transducers work. They *are* applied from right to left, but to the reducer fn.; You can think of each wrapping the earlier transducers"
328,1500387643.024487,Eufemia,"<@Agustina> <https://clojure.org/reference/transducers> checkout ""defining Transformations with transducers"""
328,1500387658.034576,Tobie,"I'm trying to do some Java interop using a Java library called Gurobi. I'm following their documentation which reads
```
import gurobi.*;
...creates outer class...
GRBEnv env = new GRBEnv(""mip1.log"");
GRBModel model = new GRBModel(env);
GRBVar x = model.addVar(0.0, 1.0, 0.0, GRB.BINARY, ""x"");
```
I am trying to work with this library in clojure. It seems I cannot wildcard import in clojure so I have 
```
(import '(gurobi GRB GRBCObj GRBCallback GRBColumn GRBConstr GRBEnv GRBExpr GRBException GRBGenConstr GRBLinExpr GRBQuadExpr GRBModel GRBSOS GRBVar GRBQConstr GurobiJni))
(def env (new GRBEnv ""mip1.log""))
(def model (new GRBModel env))
(.addVar model 0 1 0 GRB.BINARY ""x"")
```
however I get the error on the final line ""java.lang.ClassNotFoundException"" caused by GRB.BINARY. I believe I have imported everything using the extensive import above."
328,1500387748.09401,Lavera,"<@Tobie> Might be a static member, so it could be `GRB/BINARY`; Or, an inner class, in which case you need to import `GRB$BINARY`, but from the upper case spelling, I'd assume the former"
328,1500387775.111565,Tobie,bingo
328,1500387780.115504,Agustina,<@Lavera> <@Eufemia>  Thx. I’ll check it again.
328,1500387794.124221,Tobie,"it was `GRB/BINARY`, thank you; How would I convert `x.get(GRB.DoubleAttr.X)` to clojure; cider in emacs isnt giving me much help &gt;&lt;; can someone please help me convert `x.get(GRB.DoubleAttr.X)` to clojure code; so turned out I needed this; `(.get x gurobi.GRB$DoubleAttr/X)`

But I'm confused as to why I needed gurobi.GRB$DoubleAttr instead of GRB$DoubleAttr as I already imported gurobi.GRB in my import statement; and when I begin to type `gurobi.GRB$Dou....` cider doesn't autocomplete it; so this worked `(.get x gurobi.GRB$DoubleAttr/X)` but i feel like im in the dark; cider isn't giving me any autocompletion help so its hard to find the proper structure; cidre doesn't autocomplete `gurobi.GRB$...` at all"
328,1500391935.004119,Lavera,"<@Tobie> Yeah, nested classes are confusing to work with... You can probably directly import GRB$DoubleAttr as well, that should fix it"
329,1500396694.040487,Margaret,"<@Berry> <@Loretta> clojure has eager-map built in, it’s called mapv, and it will perform better than that reduce example, even if you need to call seq on the result to get a list instead of vector"
330,1500397028.251637,Clementina,"what's the best and most elegant way when using `environ/env` to ensure that values that can be coerced end up being so. Right now everything it reads as strings. I'd like values like ""true""/""false"" and numbers to be converted to be of the right type; Tried simply using edn/read-string, but it turned out to be not so straightforward.; some edge-cases when the exceptions thrown, I end up with code that doesn't look elegant. Clojure has spoiled me: If code doesn't look elegant - I feel it's not worth adding it."
330,1500397228.381313,Margaret,"I wonder if `plumatic/schema` coercers would help here…; <https://github.com/plumatic/schema#transformations-and-coercion>; &gt; Coercion is like validation, except a schema-dependent transformation can be applied to the input data before validation.; <@Clementina> consider that you’ll read this at startup, and IMHO startup is the perfect time in the run of an app to reject input outright and exit with an error; so I’d say, don’t try/catch, even explicitly throw AssertionErrors if the data isn’t “perfect” - then whoever set up the run environment can use your clear descriptive error message to fix the input and try again"
330,1500397525.570548,Clementina,<@Margaret> I'm not using schema in this particular project. Seems to be an overkill to have to use it to solve this particular problem
330,1500397546.582865,Margaret,OK - but my point about asserting / throwing / bailing out still stands
330,1500398286.030243,Callie,"RFC, all contributors to and users of nREPL: <https://groups.google.com/forum/#!topic/clojure/6SX7q39lK90>"
330,1500398942.428257,Cristopher,<@Clementina> you can check out <https://github.com/amperity/envoy> too
331,1500401046.717817,Andra,ag: Use `aero`: <https://github.com/juxt/aero>
331,1500401203.813022,Jen,"is there a way to change the signature of a defmulti after you decide on which arguments to dispatch?
```
(defmulti foo (fn [a b] [a b]))
(defmethod foo [:foo :bar] [just-foo?] (do ...))
```
or does every defmethod have to have the signature `[a b]`?"
331,1500401319.88188,Rebeca,"the defmethod only needs to be able to be invoked on the args given to it; so if you have a mutlimethod that can be invoked with differing numbers of arguments, and those differing  numbers of arguments are dispatched differently, each method only needs to handle the arity it would be invoked with; if you invoke a multimethod with N arguments, whichever method it dispatches to will be invoked with N arguments, you can't change that"
331,1500401478.975362,Jen,"okay, that makes sense. I just didnt want to have to change my signature across a couple files that implement the defmethod *if at all possible"
332,1500401782.155736,Ava,<@Clementina> <@Margaret> I did exactly that using the json coercer that ships with schema
331,1500401797.164892,Margaret,yeah- that’s what I was thinking of
331,1500401849.195381,Ava,"I have a file in each of my projects that looks like ```(def settings {:debug {:schema s/Bool :default false}
   :db-uri {:schema sc/URI :default ""<postgres://postgres@localhost:5432/foo>""}
   :redis-uri {:schema sc/URI :default ""<redis://localhost:6379/0>""}})
```; and then I have a component that takes a settings map in and can realize those at component/start time to be injected around to whomever needs them; although I have a vendoring of environ.core/env's underlying functions to allow me to invoke it in my start() and thus allow me to stop a system, change java properties, and then start the system again"
332,1500402078.330693,Ava,This is the matcher I use: <https://gist.github.com/8da9d6240679bbb57080682b20d4ba98>
333,1500403145.984503,Amado,"hello everyone, i have a giant regexp, is it possible to break it into various lines?

or build it from a string (which can be broken into various lines and assembled together with `str`)"
331,1500403237.04018,Guillermo,yes you can do that by calling `(re-pattern (str the pieces of the regex))` or java.util.regex.Pattern/compile
331,1500403309.08328,Amado,"thank you! the clojure docs are somewhat hard to navigate, sorry for the dumb question"
334,1500409120.367117,Verena,have you found your answers ?
334,1500409930.824815,Berry,"<@Margaret> <@Loretta> : I'm an idiot for forgetting mapv; for some reason, I always thought ""this was for ppl who wanted vector instead of list"" but never eager vs lazy or impure vs pure"
334,1500411256.577113,Gus,So I’m looking at the honeysql README; <https://github.com/jkk/honeysql>; and it has loads of example code; which is great; except sometimes it goes stale; and someone messages us to tell us that one of the examples in the README doesn’t run anymore; and I was thinking; we could set up a test case that actually parses the README; and finds the backtick-quoted sections and `eval`s them; finds the forms preceded by =&gt; and treats them as expected results; I’m wondering if anyone’s done this before/if this is something that already exists off the shelf; because if not I could imagine throwing together a sort of ‘literate testing’ library to do this and sharing that
334,1500411715.841043,Ava,it sounds like a combination of org-mode and pythons doctests
334,1500411719.843142,Rebeca,yes; there is a lein plugin for it if I recall
334,1500411773.873562,Ava,"as I understand it, the python community has largely shied away from doctests (although I don't particularly know the reason; it might be an implementation issue); <@Gus> it should be straightfoward to go the route you proposed using an augmented codeblock transformer with markdown-clj to grab the code blocks. See <https://github.com/yogthos/markdown-clj#customizing-the-parser>; (just thinking about it from the perspective of reusing existing stuff to avoid writing markdown grammar or some regexes)"
335,1500417049.160432,Tequila,<@Gus> Elixir has something like executable documentation that (I think) centers around iex.; Here you go: <https://elixir-lang.org/getting-started/mix-otp/docs-tests-and-with.html#doctests>
336,1500417573.332343,Darren,"Playing around with spec-ing `clojure.core/sort` and I came across something interesting:

```
(frequencies [Double/NaN Double/NaN])
=&gt; {NaN 1, NaN 1}
```"
335,1500417602.341599,Darren,"ah, this is why"
336,1500417619.347474,Darren,"```
(= Double/NaN Double/NaN)
=&gt; false
```"
335,1500417730.382969,Aldo,lol.... I guess that makes some math I don't understand work
336,1500419800.013366,Daniell,"<@Gus> If you're willing to live with Midje, there's a plugin to run the readme code as a set of tests -- clj-time uses it."
336,1500420648.248682,Gus,<@Daniell> I’ve got clj-time checked out and I’m actually having a hard time figuring out how to see/run the readme tests; docs say to run lein test-readme but I’m getting no such task; and the test/readme.clj file that got generated looks really short
336,1500422354.69719,Daniell,"`lein with-profile dev,default,midje test readme` -- only code annotated with `clojure` (not `clj`) is turned into Midje facts; I get a `test/readme.clj` that's nearly 400 lines long -- mostly whitespace but it does have all the ````clojure` code fragments as tests; (hard to backtick a bunch of backticks); ^ <@Gus>"
336,1500422594.761222,Gus,"heh, yeah, I ran into the same problem; cool =); <@Daniell> hm I don’t suppose you ever found a way to make that command exit with failure if a test fails?; also, wow, that found a lot of README errors XD"
336,1500424847.278923,Daniell,"`lein test` ought to get a non-zero exit status if tests fail? (Dunno, we switched to Boot ages ago at work); Ah, but *Midje* doesn't. Yeah that kinda sucks. ; I've always avoided Midje for... reasons... but I hadn't noticed it doesn't set an exit status in this case. ; Maybe I'll write a Boot task that does something similar :smile_cat: "
336,1500425091.328698,Eugenie,"What’s the idiomatic way of ‘namespacing’ keys in a map?; I have a map, and I want to namespace all the keys in the map (same namespace)"
336,1500425732.461891,Maxwell,"```#:person{:first ""Han"" :last ""Solo"" :ship #:ship{:name ""Millenium Falcon"" :model ""YT-1300f light freighter""}}
```; you mean like this?"
336,1500425937.50415,Eugenie,"Yeah, but that’s using a map literal.; What if I already have a map."
336,1500426441.611443,Jutta,"`(with-meta (first {:foo :bar}) {:foo :bar})`
=&gt; `ClassCastException clojure.lang.MapEntry cannot be cast to clojure.lang.IObj  clojure.core/with-meta--4962 (core.clj:217)`
Is it a bug?
My workaround is `(with-meta (first (map vec {:foo :bar})) {:foo :bar})`"
337,1500428477.031341,Jutta,"+1 to ""namespace utils"" for datomic, like ""split-by-namespace"" and ""qualify-map"""
337,1500429931.331931,Agnus,"<@Jutta> ~Nope, map is unordered, so there's no ""first"", technically speaking. Since vec is ordered, you get your first element. The problem is when there's more elements and you convert to vec, you'll get first somewhat randomly (not sure exactly how order is defined)~ Discard that, not the case."
337,1500431522.6399,Margaret,"<@Jutta> another alternative would be `(into ^{:foo :bar} [] (first {:foo :bar}))` but using first on a hash map is a code smell - it could for example be a sign that the data doesn't belong in a hash map, or that you are not looking something up the right way *fixed"
336,1500431557.646789,Margaret,that's putting the meta on a new vector and then emptying the map-entry into it
337,1500431977.727389,Jutta,"I'm not doing `(with-meta (first ..)`... it's just a minimal/synthetic example :stuck_out_tongue_winking_eye: In my case, I have a function that do some like `(map #(with-meta {:type t} %) my-seq)`. Then I think that should work with maps too (once maps in clojure are ""mappable"")."
337,1500432099.750171,Margaret,only if you put each map entry into a vector; but yeah; so my version would be `(map #(into ^{:type t} [] %) m)`
338,1500440544.042431,Lavinia,Not yet. Posted an issue on the github but no answers. 
337,1500444540.743342,Noella,"with Specter: ```(s/setval [s/MAP-KEYS s/NAMESPACE] ""your-ns"" your-map)```; with regular clojure you’re gonna have to do the usual for-loop dance (or something like it): 
```(into {} (for [[k v] your-map] [(keyword (name k) ""your-ns"") v]))```"
339,1500450447.313631,Berry,"Anyone here using <http://nd4j.org/> ? This library shows up first for ""java ndarray"", but reading the docs, this project seems to have a very high opinion of itself (and I can't find other people using it.)"
340,1500456393.585877,Merrie,"Is following ""thread safe""? Can there be a race condition?
```(reset! db @db)
```
e.g. changed `db` value between `deref` and `reset!`"
341,1500456501.628464,Rosia,unsafe
341,1500456505.62971,Noella,"the value can change; for the behavior you want, use <http://clojuredocs.org/clojure.core/compare-and-set>!"
341,1500456669.694514,Merrie,:hearts:
340,1500457303.939681,Janay,"Is there a way to time all sub-calls of a fn?; let’s say i have:
```(defn foo [x]
         (-&gt; (foo-1 x)
               foo-2
               foo-3))```; ofc i can do ```(time (foo x))```; but can i get the timings of the calls to foo-1,foo-2,foo-3 without wrapping each fn?"
342,1500458793.502989,Jaqueline,Is there any way (lib?) to rerun only “failed-last-time” clojure.test vars?
340,1500462316.633145,Merrie,<@Janay> have a look at <https://github.com/thunknyc/profile>
340,1500462908.810601,Janay,thx
343,1500465788.71286,Merrie,"what would be a use case for this? <https://github.com/weavejester/medley/blob/1.0.0/src/medley/core.cljc#L273>
same as `swap!`, but returns atom's previous value (before it was successfully swapped)"
343,1500466267.879989,Rosia,"<@Merrie> 
```
(def queue (atom clojure.lang.PersistentQueue/EMPTY))

(defn push! [x]
  (swap! queue conj x))

(defn pull! []
  (-&gt; queue (deref-swap! pop) peek))
```"
344,1500475443.844383,Lucretia,"Hello everyone, I have an app which stores documents (edn/json files, size from 100kb up to 1000kb) and I want to save the whole change-history (changes will be small, max 30kb maybe, but frequently) without storing the whole document for each change. Is there a free document database which supports document history with delta encoding?"
344,1500475576.934388,Tequila,"<@Lucretia> Datomic comes close to doing what you want, but it's not an exact match."
344,1500475607.956126,Rosia,git ?
344,1500476071.279337,Lucretia,"<@Tequila> yes, datomic looks promising, but the licensing doesn't fit. (only 1 year updates in free version etc.)
<@Rosia> I heard this from other people before. It sounds logical, but odd to use git as a ""database"" :grinning: 
Maybe I should give that idea a try. The documents are hold in-memory at runtime, and only written on disk if changes were made - so using git seems to be a good solution."
344,1500476242.397839,Weston,"there's irmin, but I am not sure there's a binding for java, it should not be impossible to do tho"
344,1500477825.492353,Tequila,<@Weston> <https://github.com/mirage/irmin> ?
345,1500478985.29021,Ava,is it possible to do local type extension?; i.e. extend something only in a let binding?
345,1500479196.433268,Otha,"```
(let [wtf (extend-fn wtf)]
 …
```
?"
345,1500479533.661926,Guillermo,<@Ava> nope.  What are you trying to achieve?
345,1500479550.673868,Ava,locally I want to encode JSON differently; was just looking through how cheshire.generate maps encoders via a protocol JSONable
345,1500479625.725266,Guillermo,I see. Unfortunately cheshire write methods are global =(
345,1500479636.732495,Ava,yeah
345,1500479642.736829,Guillermo,Transit and Fressian do not make that mistake; ( i know that doesn't help you immediately )
345,1500479659.748414,Ava,unfortunately my third party api doesn't accept either of those; I wonder if data.json is extensible locally
345,1500479749.810366,Guillermo,can you convert prior to sending down to cheshire?; we should have a new json library that does write dispatch the same way transit does
345,1500479864.889154,Ava,"trying to do that, but this is for serializing part of an ExceptionInfo object to an exception tracker"
345,1500479866.890727,Guillermo,not global protocols but per instance maps
345,1500479869.892535,Ava,"so sometimes I get things like Fns; and I don't want to completely lose the information, but I would be satisfied by an encoder that just did `pr`; but I don't want to just `(cheshire.generate/add-encoder Object pr)` globally"
345,1500480109.061126,Guillermo,<@Elfreda> don't you have some sort of 'local multimethod' gist somewhere?  for non global-dispatch tables
345,1500480129.074413,Ava,<@Guillermo> I have one of those too for testing purposes
345,1500480129.074692,Guillermo,maybe that was <@Kareen> ?
345,1500480140.082224,Ava,that lets me clone a multimethod; for local modification
345,1500480201.124147,Kareen,"in tools.analyzer I used a combination of dyn var initialized to a wrapping default fn and multimethods to allow extensibility through multimethods; the pattern I used is e.g. 
```(defmulti -foo dispatch-fn)
(def ^:dynamic foo* -foo)
(defn foo [] 
  (foo* ..))```; not the prettiest of patterns but it gets the job done; example setup:
<https://github.com/clojure/tools.analyzer/blob/master/src/main/clojure/clojure/tools/analyzer/passes/emit_form.clj#L12-L30>
and redef:
<https://github.com/clojure/tools.analyzer.jvm/blob/master/src/main/clojure/clojure/tools/analyzer/passes/jvm/emit_form.clj#L14-L46>"
345,1500480420.266985,Guillermo,"<@Ava> I have a small wrapper around Jackson that I used to parse instead of cheshire <https://github.com/ghadishayban/tinyjson/blob/master/src/ls/tinyjson/json.clj#L60-L138>

The writing side of it I used a protocol, which was a mistake.  Feel free to fork or PR"
345,1500480477.302771,Ava,thanks
345,1500480549.34816,Guillermo,I should have done a dispatch impl like <https://github.com/cognitect/transit-clj/blob/master/src/cognitect/transit.clj#L88-L123>
346,1500481847.150077,Elfreda,<@Guillermo> github: dispatch-map; warning: never actually used in anger; <https://github.com/brandonbloom/dispatch-map>; also likely out of date w/ any bug fixes or perf improvements that happened in clj/core
346,1500485855.519449,Guillermo,thanks <@Elfreda>
347,1500489225.563054,Marica,Hey can someone point me to the name of this syntax `&lt;&gt;` please? It's a pain to Google!
347,1500489254.58008,Margaret,"that’s not a syntax; but it’s a valid binding or def; clojure has very few syntaxes, the ones that are symbols usually start with `#`; <@Marica> if you tell us where you find it that might be a clue to what it means though"
347,1500489352.638948,Aldo,"<@Marica> as a random guess, you're probably looking at code that uses the swiss arrows library; (googling ""swiss arrows clojure"" will tell you if that's true)"
347,1500489568.767875,Marica,"I've just seen it around and was curious, doesn't appear to be swiss arrows, and here's some linkable code <https://github.com/metabase/metabase/blob/master/src/metabase/api/metric.clj#L44-L47>"
347,1500489598.785546,Margaret,"<@Marica> that’s just a binding that as-&gt; sets up; check out the doc for as-&gt;; it’s just a name they picked, you could find/replace it with `elephant` and the meaning of the code wouldn’t change"
347,1500489643.812053,Marica,":ok_hand: Perfect, thanks a lot :slightly_smiling_face:; A lot to take in coming from Golang as a primary language :smile:"
347,1500489710.851768,Margaret,"though `x` would be more idiomatic, and `&lt;&gt;` is a nice symbol for “fill in the blank” once you know what it means"
347,1500490191.136177,Rebeca,I like to use % with as-&gt;
348,1500495362.023444,Johnna,"we're having trouble finding docs on the exact meaning of the `#=` macro anywhere, anyone know where to find that?"
348,1500495450.071969,Margaret,"<@Johnna> it’s the read-eval reader macro, which causes arbitrary code to execute while reading, it’s disreccomended; the core read will eval if the right dynamic var is set and it finds that macro, clojure.edn’s read will not though"
348,1500495493.095064,Aldo,it's not officially supported according to the only docs I can find <https://clojure.org/guides/weird_characters#__code_code_reader_eval>
348,1500495517.108305,Johnna,"aha, thanks for that link"
349,1500497348.110074,Maxwell,what's the currently favored HTTP server library you guy are using? It seems Aleph and http-kit are favorites. Anything else I'm missing?
349,1500497442.160848,Sandy,"<@Maxwell> I use Pedestal quite a bit, and I like it."
349,1500497452.165827,Gus,We just use jetty; if that’s the layer you’re asking about
349,1500497512.198036,Sandy,"Yeah, on that layer I highly recommend using a well established library like Jetty. It removes a lot of questions from debugging sessions."
349,1500497893.404173,Maxwell,"Yup, agree on Jetty, although I prefer Netty (I did a bunch of work with Vert.x, so I'm familiar with async web servers). I was wondering which wrapper you guys are using for creating a REST endpoint (or GraphQL for that matter), registering something like routes/handlers (or do it Resource-style like in Jersey)"
349,1500497907.41249,Gus,"aha, we’re using compojure-api; last shop I was at used it too"
349,1500497931.425152,Maxwell,"particularly interested in support for full async operation and reasonable standards-support like CORS, JWT etc."
349,1500497938.428925,Gus,"it generates swagger specifications from your code, which is pretty nice"
349,1500497958.439406,Maxwell,"ah: swagger, pseudo-REST :wink:"
349,1500497963.442234,Gus,=)
349,1500497974.448355,Darci,Aleph
349,1500498017.472934,Maxwell,thanks!
349,1500498062.497573,Darci,"Really like it, it makes perfect sense. <http://aleph.io>; Uses Netty, btw"
350,1500498985.958213,Darci,"Oh, sorry: yada"
349,1500499068.99835,Darci,<https://youtu.be/tKFrqsFC1XM>
350,1500499175.04897,Darci,yada uses aleph
351,1500499465.18543,Sandy,<@Maxwell> Pedestal and Aleph are the only ones that support full async. IMO Pedestal is a bit simpler in design.
351,1500499491.197175,Maxwell,thanks everyone!
349,1500500114.484809,Jonnie,I like yada as well. It has built-in support for swagger and jwt. More importantly I find it well designed :slightly_smiling_face:
350,1500504533.111624,Ava,"compojure-api on top of Undertow (via immutant.web); compojure's 2.0-alpha releases support async as well but currently only works out of the box with ring-jetty. I haven't tried it out, but you should be able to bootstrap it onto Aleph, HttpKit, or Undertow. See here: <https://github.com/metosin/compojure-api/wiki/Async>"
350,1500505925.522871,Celestine,"Quick quesiton: cljs-ajax's documentation makes it sound like it can be used both clientside in CLJS and server-side in clojure, but when I try I get errors like ` No implementation of method: :-js-ajax-request of protocol: #'ajax.protocols/AjaxImpl found for class: ajax.apache.Connection `, which makes it sound like it won't work on the server side.  Am I missing something here, or is it actually CLJS only?  I know I could just use clj-http on the server, but that will mean some duplicated code between the client/server side instead of putting it in cljc."
349,1500506510.686012,Rebeca,<https://github.com/JulianBirch/cljs-ajax/blob/master/src/ajax/apache.clj#L135>
350,1500506547.696148,Rebeca,"likely you recompiled the file that defined the protocol without recompiling the file that extends the record; the record code also imports the interface generated by the protocol and uses that instead of actually using the protocol; which is common way to break things like this; that a project as active as that, with that many contributors, can have that kind of error in it makes me sad"
350,1500507158.85808,Celestine,I'm afraid I don't have a good grasp of how protocols and records work.  Is this something I should submit an issue for then?
350,1500507281.889767,Rebeca,I am typing up an issue
350,1500507553.959596,Celestine,Looks like you were right about the compilation issue.  Restarting the repl from scratch did clear the error.
352,1500508829.284916,Celestine,But it does crop up again eventually as I'm reloading different files.  I'll see if I can narrow it down.
350,1500508921.309418,Rebeca,"you are reloading the file where the protocols without reloading the file where the record defined, or you are reloading the file where the protocols are defined and trying to call the new (because of the reload) protocol on a instance of the record type that had the old protocol extended to it"
350,1500509029.336336,Celestine,"But I don't understand why that's happening.  The only file I ever require directly from cljs-ajax is `ajax.core`, as far as I know."
350,1500509147.364242,Rebeca,"sure, but how are you requiring it and what tooling stuff are  you using?; ugh; and core is importing the record class directly instead of using the constructor fns; I would just not use cljs-ajax"
353,1500511646.90932,Ka,"Can't imagine cljs-ajax would work in JVM-hosted clojure; ""ajax"" is a term only used in frontend programming afaik"
353,1500511771.934579,Aldo,"and yet, that file imports quite a lot of java classes and ends in .clj :slightly_smiling_face:"
353,1500512031.988085,Ka,Yeah looks like indeed the intent is there... interesting
350,1500513231.240723,Celestine,"The docs for cljs-ajax really make it sound like it should work in both, and it almost did, except for this reloading issue.  At any rate, I switched to using clj-http on the server and it's all working now.  It just means I can't share the code between the client and server the way I wanted."
350,1500537375.10739,Kenia,does anybody uses `eastwood` together with `clojure.spec`. It is becomming really annoying that eastwood complains about the spec macros even though I cannot do anything about it. Or can I?
354,1500539262.779945,Darci,<@Kenia> <https://github.com/jonase/eastwood/issues/222> ?
354,1500539432.844466,Kenia,"<@Darci> no, from what I understand it is about the macro expansion of the specs:
```
src/service/routing/spec.clj:40:17: suspicious-expression: and called with 1 args.  (and x) always returns x.  Perhaps there are misplaced parentheses?

src/service/routing/spec.clj:44:22: suspicious-expression: and called with 1 args.  (and x) always returns x.  Perhaps there are misplaced parentheses?

src/service/routing/spec.clj:38:20: constant-test: Test expression is always logical true or always logical false: 2 in form (if or__5058__auto__ or__5058__auto__ (clojure.core/or 0))

src/service/routing/spec.clj:38:20: constant-test: Test expression is always logical true or always logical false: nil in form (if nil (clojure.core/inc nil) 2)

src/service/routing/spec.clj:38:20: constant-test: Test expression is always logical true or always logical false: nil in form (if or__5058__auto__ or__5058__auto__ (clojure.core/or 
```"
354,1500539599.90776,Darci,"Well, I guess eastwood is not clojure.spec compliant yet. You may add an issue to <https://github.com/jonase/eastwood/issues> ?; similar issues seem to exist already: <https://github.com/jonase/eastwood/issues/207>"
354,1500540077.088011,Kenia,jumm I was hoping to be wrong. The question is rather is eastwood at fault or clojure.spec? because those expanded expressions do look suspicious
355,1500548044.956568,Lesia,Is `clojure.core/hash` always non-negative?
355,1500548074.966166,Kareen,no; it uses the full int range
355,1500548441.082469,Lesia,Thanks
355,1500548778.188824,Jasmin,this might be a dumb question - it likely is - but what is the best way to define a spec in `clojure.spec` for an argument that is a function of arity 1?
356,1500548782.189948,Jasmin,is that a thing?
355,1500548859.212425,Jasmin,"Something that could be used to spec a function like `take!` from `core.async`:

```
(defprotocol ReadPort
  (take! [port fn1-handler] ""derefable val if taken, nil if take was enqueued""))
```; for `fn1-handler`"
356,1500549271.335685,Hermelinda,How could I combine two images?
357,1500555644.613967,Lesia,What's the pattern in Integrant/Component REPL development to pick up an edited configuration file on reset? Do you make it a component in the system? I'm building my system object according to the config so I can't do that.
357,1500555716.649727,Tequila,"<@Lesia> I tend to read the config file each time and merge the result into my system map. Using Aero to read the EDN file I then do something like this: `(merge-with merge system config)`.; With a component like this:

```
(defrecord Datomic [uri]
  component/Lifecycle
  ;; ...
  )
```

And a config file like this:

```
{:datomic {:uri ""datomic:<mem://my-app>""}}
```; And a system map like this:

```
(component/system-map :datomic (map-&gt;Datomic {}))
```; Integrant does things slightly differently I believe?; Looks like Integrant will reload your config from this: <https://github.com/weavejester/integrant#configurations>"
357,1500556077.821479,Lesia,"<@Tequila> Integrant config is the equivalent to Component's system, so it won't just re-read my external config file."
357,1500556150.856139,Tequila,"Yeah, from a quick look at the Integrant README, there is no explicit system map in Integrant."
357,1500556176.868903,Lesia,"That's what I like about it, the system map is data."
357,1500556210.885421,Tequila,"Component's system map is data too. :slightly_smiling_face:; If you've got a `config` somewhere as per the README, and reloading is done via clojure.tools.namespace, I'd expect changes to the file to show up.

```
(def config
  (ig/read-string (slurp ""config.edn"")))
```; Can't say I've used Integrant before though. Sorry."
357,1500556298.928791,Lesia,You've given me a direction. Thanks
358,1500558509.137942,Hermelinda,How can I add java dependencies to my clojure project?
358,1500558580.179477,Aldo,<@Hermelinda> same way you add clojure dependencies. the project.clj dependencies list is just maven artifacts
358,1500558591.185907,Hermelinda,okay.
358,1500558787.303576,Ramonita,<@Lesia> you might want to look at Integrant-REPL
359,1500559727.900416,Jovan,"Does anyone know of a fuzzy finder lib for Clojure? By fuzzy finding I mean that you can, for example, search for ""msd"" and it would match, and give a high score to, ""my/secret/dir"", because the letters appear at word boundaries."
360,1500568883.870427,Pauline,"Hi <@Ramonita>, I was wondering if i could ask you a <#C5K1SHR6X|duct> related question?"
359,1500571021.109837,Darci,<@Jovan> <http://yomguithereal.github.io/clj-fuzzy/clojure.html> (and there's also a Java lib: <https://github.com/tdebatty/java-string-similarity> )
359,1500571125.169095,Jovan,"<@Darci> Does that do what I want? All the examples look weird, e.g. `(dice ""healed"" ""sealed"") =&gt; 0.8`"
359,1500571350.300954,Darci,"<@Jovan> oh, I must have misunderstood you. But it looks pretty easy to make it work as you expect: extract the letters at word boundaries and match it against one of the fuzzy string algorithms"
360,1500571369.311801,Ramonita,"Sure, <@Pauline> "
359,1500571382.319283,Darci,"so, the only thing to do for you would be: convert `my/secret/dir` to `msd`, right?"
359,1500571509.393602,Jovan,"<@Darci> I want some more features, like ""msod"" would not match ""my/secret/dir"" but it would match ""my/awesome/dir""; But I have now written it myself. :stuck_out_tongue:"
359,1500571554.420509,Darci,"oh... that's different, right :slightly_smiling_face:; So, you've written it in less than 3 hours, right? Nice :slightly_smiling_face:"
359,1500571586.439333,Jovan,Yes :stuck_out_tongue:
359,1500571808.572388,Aldo,I wonder if you could rip off elisp from one of the emacs helpers that does that and convert it
359,1500571858.602789,Jovan,"<@Darci> <https://ptpb.pw/y1Qw>; Ops, that last one should not have a score of 3 :stuck_out_tongue: I added it manually and did it wrong. :stuck_out_tongue:; I accidentally put s and d next to each other in the string."
359,1500572249.83131,Darci,got it. :+1:
359,1500572363.896366,Yoshiko,"Anyone have a pointer to a small-to-medium-size, open source codebase that uses `clojure.spec` in the ways that it is typically used?"
359,1500572711.097658,Darci,"I expect to have one next week :slightly_smiling_face:. Well, it still needs some work, but the current state is: <https://gitlab.com/kurtosys/lib/factoidic/>"
361,1500572853.181795,Yoshiko,Thanks!
362,1500573061.306497,Millicent,is there a good clojure library for very simple GIS/map data visualization? or am I better off using something like Om with clojurescript?
359,1500573113.338778,Darci,"<https://gitlab.com/kurtosys/lib/factoidic/blob/master/factoidic/src/clj/factoidic/config.clj> - spec for config (will be lib boundary, that's why it's in a separate namespace; other specs might not be in a separate namespace).; I use it for:
1. lib boundary validation
2. generative testing
3. instrumentation during debugging"
363,1500575157.563667,Alline,"may not fit your requirements, but <https://github.com/wiseman/leaflet-gorilla> could be relevant"
361,1500575831.971636,Yoshiko,"generative testing code is not in there yet, right?"
361,1500575931.032599,Darci,"right, that's one of the reasons why I keep it quiet and it's still in `SNAPSHOT`. I have to add more specs, testing and some benchmarking."
361,1500576352.282638,Yoshiko,awesome.  Thanks for the link
364,1500576968.652309,Pauline,"Okay <@Ramonita>, right now i'm trying to integrate `buddy`'s authentication middleware with `ataraxy` and `duct`, and looking at the ataraxy module docs, it says that for finer control i should use `duct.router/ataraxy` instead of `duct.module/ataraxy`. I was wondering if there was a way to add other middleware using the `module` instead of `router`?"
364,1500578233.380861,Ramonita,"<@Pauline> you can use both. Use the module to create the routes, then add the middleware to the router key."
364,1500578311.423428,Pauline,"<@Ramonita>, oh what would that look like? Would `duct.module/ataraxy` and `duct.router` be keys in the edn file?"
365,1500578495.52451,Emilie,"Hi, how do I write a response directly in http-kit? I'm building a tunneling proxy and need the very first response to be exactly `""HTTP/1.1 200 Connection established"",` but it seems http-kit renders that as a *body*, even if I do something like `{:status ""HTTP/1.1 200 Connection established""}`"
365,1500578627.596932,Margaret,sounds like what you want is to supply a :headers map? but I thought :status would automatically be lifted into the headers
365,1500578878.734804,Emilie,"<@Margaret> Oddly, it's not a header, it's a `status-line` in the HTTP spec; ```status-line = HTTP-version SP status-code SP reason-phrase CRLF```"
365,1500578923.759046,Margaret,"oh, OK - I don’t know how to override that via ring (assuming if you’re handing it a hash-map like that you’re using it via ring); sounds like you’d be better off using a TCP library rather than an http library if you want to specify that kind of thing by hand?; I might be wrong"
365,1500578995.798251,Emilie,"Ya, I'm not sure it's possible with ring. I'd rather not have to use a TCP library, as I don't want to have to glue reqeusts and responses together. But you're right. I may just fork httpkit/ring and kludge something in there"
365,1500579030.817369,Margaret,there’s also aleph which has an http server but also supports using tcp sockets in the same lib; i’d hazard a guess it would be more flexible; <https://github.com/ztellman/aleph#tcp>
365,1500579294.962049,Brandy,i’m surprised something is depending on that specific reason phrase and forcing you to not use “OK” :crying_cat_face:
365,1500579329.981578,Deloras,what an obtuse corner of the spec – you learn something every day
365,1500579359.99753,Emilie,"Yup, oddly enough, Ring or every HTTP server hard-codes an [int string] pair"
365,1500579372.00394,Margaret,"<@Emilie> also - thinking outside the box for a minute - it’s probably a good idea to reverse-proxy any jvm webserver behind nginx anyway, and I bet there’s a four line snippet to rewrite your status lines via nginx"
365,1500579396.017017,Emilie,<@Deloras> suppp
365,1500579397.017481,Deloras,"a quick web search reveals a lot of ""why would you ever want to do that? lol"" by library authors in general; <@Emilie> hiii"
365,1500579463.052888,Emilie,<@Margaret> That's interesting. Hm...
365,1500579535.09203,Lizette,looks like it could be for using http `CONNECT` requests?
365,1500579542.09602,Margaret,possible terrible kluges include “run server sockets through netcat / sed shell pipeline”
365,1500579549.099952,Deloras,"I'm not saying anyone in clojure-land would ever give that response, just seeing it in general for searching ""set status-line http"" :stuck_out_tongue:"
365,1500579551.100645,Margaret,(don’t actually do that)
365,1500579579.115181,Lizette,<https://textslashplain.com/2015/11/19/understanding-connect-tunnels/> seems relevant
365,1500579603.128488,Ramonita,"<@Pauline> Something like:
```
{:duct.module/ataraxy {""/"" ^:foo [:index]}
 :duct.router/ataraxy {:middleware {:foo #ig/ref :foo.middleware/auth}}}
```"
365,1500579617.135895,Lizette,"specifically:
&gt; Upon receiving such a request, the proxy is expected to establish a TCP/IP connection to the requested hostname and port and signal its success by returning a HTTP/200 response indicating that the requested connection was made:
```
  HTTP/1.1 200 Connection Established
  Connection: close
```"
365,1500579637.146345,Ramonita,"Come to think of it, I think middleware of `:foo` assumes a key of `:project.middleware/foo` already."
365,1500579725.193586,Pauline,<@Ramonita> so if i wanted to use a 3rd-party middleware i'd replace `:foo.middleware/auth` with `&lt;3rd party ns&gt;.wrap-auth`?
365,1500579842.256419,Emilie,<@Lizette> ahhh thanks!
365,1500579888.28079,Ramonita,"<@Pauline> You’d need to create an `init-key` method for it. Say your project name is “foo”. What I tend to do is have a `foo.middleware` namespace where I dump all the init-keys for middleware.; ```
(ns foo.middleware
  (:require [integrant.core :as ig]
            [buddy.middleware.auth :refer [wrap-auth]])

(defmethod ig/init-key ::auth [_ options]
  #(wrap-auth % options))
```; And then in my config:
```
{:duct.module/ataraxy {""/"" [:index], ""/private ^:auth [:private]}}
```"
365,1500580003.342385,Emilie,"Lol you have to set ""Connection: close"" but leave the socket open"
365,1500580018.350055,Lizette,yeah lol
366,1500580030.35655,Pauline,"<@Ramonita> ahh thanks, i'll give it a try!"
365,1500580220.457392,Emilie,"httpkit also forces you to add headers, tsk tsk. ```        if (!headers.containsKey(""Server"")) {
          headers.put(""Server"", ""http-kit"");
        }
        if (!headers.containsKey(""Date"")) {
          headers.put(""Date"", DateFormatter.getDate()); 
        }```; I guess the spec says you need these sometimes, and I'm a corner case anyway"
367,1500583514.220723,Lily,None; there are two boxes (and invisible chars) that I don't want in my string.
367,1500583685.309386,Rebeca,slice; <https://docs.oracle.com/javase/7/docs/api/java/nio/ByteBuffer.html#slice()>
367,1500583742.339301,Lily,"mindblow, try it... :slightly_smiling_face:; None; debugging charsets, I try all the combination until I get something working :slightly_smiling_face:"
367,1500584423.699238,Pearlene,"I love how `clj-time.core/today`'s docstring says ""LocalDate objects do not deal with timezones at all."", but it doesn't mention that the function is sensitive to the current timezone.


I don't think programmers have a good vocabulary for discussing time[-zones]"
367,1500584937.959477,Jaye,"My apologies if this is a FAQ, I did try searching here and in the Google Group… but I’m just curious, does anyone have a sense for when Clojure 1.9.0 might start making its way to beta and then final releases? I’m not stressed about it or anything, really I’m just curious. Thanks!"
367,1500585140.05734,Lily,"solved my shit above, someone from the past made osc message decoder that I could just use directly. This is what happens when I program without a beer."
368,1500585142.058828,Ramonita,<@Jaye> I get the impression sometime later this year. The hold-up is because 1.9 will include its own dependency management.
368,1500585344.154871,Pearlene,dependency management?
368,1500585440.199799,Ramonita,"<@Pearlene> There was a talk about it at EuroClojure a few hours ago. Because spec is now its own package, the idea is that Clojure needs to be able to download dependencies without requiring an additional build tool like Leiningen or Boot."
367,1500585452.205393,Pearlene,oh man
367,1500585495.225541,Guillermo,:exclamation:
367,1500585540.246419,Ramonita,So Clojure will get a `clj` script that will use a `deps.edn` file to retrieve packages and construct a classpath. The classpath will be cached so that the shell script can use it directly the next time its called.
367,1500585586.267864,Willow,huh. i wonder if stuart sierra was getting at this a bit in his recent article
367,1500585601.274566,Ramonita,It looks pretty nice.
367,1500585603.275371,Willow,or was that in the comments about caching the jar deps
367,1500585630.288018,Pearlene,"so it's definitely user-facing then?

the next question is how that composes with lein/boot; and where do you get the script from"
368,1500585703.321801,Jaye,Thanks <@Ramonita> !
367,1500585717.327886,Jaye,And thanks so much for all the excellent libraries and tools that you share with the community!
368,1500585787.359913,Ramonita,"<@Pearlene> Script will be packaged up in brew, apt, etc. I believe it’s a script around a Java jar for performance, IIRC."
367,1500585832.380582,Ramonita,"Lein and Boot probably won’t be affected at first, since it’s a separate system; But I can see a build tool being made that’s effectively just a bunch of `clj` aliases.; <@Jaye> You’re welcome"
367,1500585885.404617,Pearlene,"please tell me `deps.edn` uses the `[org.clojure/clojure ""0.9.0""]` syntax at least"
367,1500585931.426712,Ramonita,"<@Pearlene> Nope, it’s more like: `org.clojure/clojure {:source :mvn, :version ""0.9.0""}`; So it’s a map of symbols to maps.; But the idea is that it’s not necessarily limited to Maven"
367,1500585987.452453,Pearlene,"e.g., npm?"
367,1500586028.471527,Ramonita,"Yeah, or raw Github for example. Funny you should mention npm, since ClojureScript is getting the ability to use that directly."
367,1500586051.482206,Pearlene,via `deps.edn` or something different?
367,1500586071.491309,Ramonita,"Via a compiler option I believe; I imagine that it’ll converge with Clojure; Advantage is that npm packages can be pulled into Google Closure, so you don’t need externs; As well as being convenient."
367,1500586152.52902,Pearlene,computers are complicated
367,1500586273.585012,Jaye,":thinking_face: probably naïve, but when you first mentioned dependencies I thought of Rich Hickey’s talk last year (?) about maybe radically changing how we manage dependencies… IIRC to boil it down reductively, to track dependencies at the function level rather than the “library” level, and to never change the contract of any given function… pretty compelling stuff!; <https://www.youtube.com/watch?v=oyLBGkS5ICk> for those who have not seen it"
367,1500586336.613089,Ramonita,"It doesn’t go that far, yet, since it’s just for classpaths and only supports Maven currently.; But I get the impression it could go that way in future."
367,1500586355.621142,Jaye,yeah that makes sense; gotta start somewhere
367,1500586382.632707,Ramonita,And it has the advantage of not using Maven’s dependency resolution algorithm.
367,1500586442.658808,Jaye,"I don’t know the details of why that’s compelling, but moving away from Maven sounds positive to me"
367,1500586488.678569,Pearlene,so transitive deps are all entered manually?
367,1500586556.707768,Ramonita,"<@Pearlene> No, it’l resolve transitive dependencies, but I believe it all has to be unambiguous otherwise it’ll complain.; Presumably if the Maven artifacts lead to conflicts it’ll require that you resolve the dep explicitly.; Rather than the Maven resolution of just going with the “closest” dependency.; Same thing I heard with the cljs npm deps. They want the deps to be unambiguous and not subject to change.; Which I can get behind."
367,1500586708.771731,Darren,"So there is no support for specifying version ""ranges"" then; or is there a lock-file type thing? a la Bundler/Cargo/Yarn?"
367,1500586788.804953,Ramonita,"No support for specifying ranges, I’m pretty sure.; There’s support for overriding deps, though, IIRC.; And (eventually) for excluding transitive deps, but the syntax for that is pending a talk with Rich; Take what I’m saying with a grain of salt, until the EuroClojure videos comes out :slightly_smiling_face:; Since I’m a secondary source, and it’s late"
369,1500587281.00587,Daniell,That's Alex Miller's talk today?; Looking forward to the video ... hopefully tomorrow? :slightly_smiling_face:
367,1500587332.025723,Ramonita,"Yep, Alex’s talk was on the `clj` script, `deps.edn` thing.; I’m kinda thinking about a `build.edn` now…; Or a `tasks.edn`, either in the project root, or included in the resources path."
369,1500588295.400702,Daniell,"We use `deps.edn` for regular coordinates today and load them from various subprojects and concatenate them (and then update them from a list of ""pinned"" versions in a `versions.properties` file) as part of our dynamic Boot-based dependency analysis."
370,1500593027.847158,Krystal,"Is there a way to do something like map fusion on lazy seqs? Does it even make sense to do that (given chunking, or for some other reason I haven't thought of)?"
367,1500593134.875627,Rebeca,<https://clojure.org/reference/transducers>
367,1500593285.914457,Krystal,"Thanks! I'd been under the impression that transducers only made sense in an eager context, but further research suggests that belief may have been oversimplified :stuck_out_tongue_winking_eye:."
371,1500596646.695785,Jen,"i feel like i’m missing 2 things about protocols;
1) if a record implements a protocol, and that record has fields defined in `defrecord MyRecord [foo]`, what’s the difference between using `foo` and `(:foo this)` in a protocol function’s implementation?
2) how does a protocol call one of the other functions defined in its own protocol interface? I’m getting compiler warnings about `my-protocol-func not defined` if attempting to do something like
```
IMyProtocol
(foo [_ a] ...)
(bar [_ a] (foo _ a)
```"
371,1500596706.708726,Margaret,protocol functions need to be used the same way you would any other function
371,1500596707.708971,Rebeca,you look like you might be using the interface generated by the protocol instead of the protocol
371,1500596711.709768,Margaret,"they belong to the other namespace; you could also use the method call syntax `.foo` without namespacing of course, but it’s better to use the protocol function"
371,1500596773.722934,Jen,ahh.. they are defined in the `protocols.cljs` so you have to `protocols/foo` in the above example
371,1500596778.72401,Margaret,right; very common beginning mistake with protocols - to think their functions are like methods; (and they are - but not in this aspect)
371,1500596886.74585,Jen,so the `this` context is kind of the method context? “invoke my protocol func on `this`”
371,1500596918.752543,Margaret,it’s the object that the method was called on - and don’t call it `_` if you are going to call a function on it
371,1500596924.753714,Aldo,"I would say the answer to your first question is ""there is no difference use whichever you prefer"""
371,1500596938.756739,Margaret,"`_` is a naming convention that means “I plan on ignoring this, on purpose”"
371,1500596955.760462,Rebeca,the behavior of `this` is likely slightly different in clojurescript vs. clojure
371,1500596968.763249,Aldo,although honestly I haven't used a defrecord in 2 years so I may be misremembering something
371,1500596992.768498,Rebeca,"(this meaning the first argument to something defined inline on a defrecord, deftype, or reify)"
371,1500597004.771054,Margaret,"I suspect that using the name of the field directly leads to a faster lookup, but if that difference means anything in your code you probably want something more performant than a record anyway"
371,1500597024.775624,Jen,"so even if I invoke `(protocols/foo this)`, it still doesnt matter if I refer to the record’s field or the `(:foo this)` because at that point the context has already changed"
371,1500597044.779922,Rebeca,what?; the first argument is always going to be the thing you invoked the protocol function; on
371,1500597135.799477,Jen,"```
(defrecord MyRecord [field]
  IMyProto
  (foo [this a] (do-something field)) &lt;- here shouldnt matter if I use field or (:field this)?
  (bar [this a] (protocols/foo this a)
```; I just want to make sure I dont get this very subtle bug by implementing a protocol that’s using a field versus a lookup on this, when self-referencing(?) a protocol"
371,1500597180.809107,Aldo,`field` and (:field this) will always be the same thing
371,1500597199.812939,Jen,"i’ve been stabbed in the foot by javascript so many times I’m very paranoid; okay, good to know the context stays the same no matter how it’s invoked; thanks <@Rebeca> <@Aldo>  <@Margaret> :thumbsup:; ```
let my_obj = {
  lolGoodLuck(args) {
    let that = this
    function() {
      that.call(this, args)
    }
  }
}
my_obj.lolGoodLuck.apply(youWillNeverGuess)
```"
372,1500606014.492866,Billye,"Got a tough problem if anyone has an answer. Basically I have a large data structure (vector of hashmaps) about 50,000 hashmaps. And I need to pass the data to a Java function, but the hashmap has keyword keywords and those keywords need to be transferred to strings for the java function. Is there a fast way to convert keyword keywords to strings? right now the conversion takes about 2 seconds"
372,1500606298.542969,Ferdinand,Use strings from the start instead of keywords?; You're talking linear time + string manipulation. Probably not a fast operation no matter how you slice it.
372,1500606465.570835,Margaret,name shouldn't be manipulating strings - it should just be getting a field from the keyword
372,1500606479.573124,Ferdinand,"Turning string data into keywords is a bad habit that clojure developers have. Benefit is really only concision, downsides are slow and buggy translation."
372,1500606486.574349,Margaret,"(I mean, if you are converting by manipulating strings, use name instead)"
372,1500606499.576478,Ferdinand,Yeah right. Fair enough.
373,1500610816.457163,Loretta,"<@Billye> I just generated 50,000 keywords, at 50 random characters each (using c.s.gen), and both `str` and `name` take about &lt;10ms to convert the whole vector from keywords to strings

```
(defn trunc [s n]
  (subs s 0 (min (count s) n)))

(def kws
  (doall
    (gen/sample
      (gen/fmap
        #(keyword (trunc (name %) 50))
        (gen/keyword))
      50000))

(time (do (doall (map name kws)) nil))
""Elapsed time: 5.684874 msecs""
=&gt; nil
(time (do (doall (map str kws)) nil))
""Elapsed time: 5.781799 msecs""
=&gt; nil
```; (where `gen` is `clojure.spec.gen.alpha`)"
373,1500610917.472453,Billye,"<@Loretta> ya your test doesn’t compare as I am talking about a series of hashmaps with multiple keys in each one; but <@Ferdinand> your suggestion is what I landed on, so I’ll just change my json decoding to get string keys"
373,1500610981.482252,Loretta,"oh, so there are many such keywords in each hashmap?"
373,1500610996.484631,Billye,<@Loretta> correct
373,1500610997.484834,Loretta,how many total?
373,1500611005.485844,Margaret,"I bet the map construction when converting is the more expensive part, not the keyword/string part"
373,1500611012.486986,Loretta,^^ yep
373,1500611012.487012,Margaret,but avoiding converting avoids both
374,1500612077.650926,Daniell,"<@Jen> re: `field` vs `(:field this)` -- I asked a while back and Alex said to use `field` as it will be faster and it's the ""correct"" way to deal with records /cc <@Aldo> <@Rebeca> <@Margaret>"
375,1500619533.94763,Ofelia,"I'm using boot for my build system. Is there a library to help with the following task. I have a function TRANSLATE, which does *.foo -&gt; *.clj. I also have a bunch of *.foo files. Whenever any of them changes, I want TRANSLATE to be called to generate the corresponding *.clj file.
Is there a library to handle this for me?"
375,1500619655.973936,Giovanna,"<@Ofelia> This should probably do the trick <https://github.com/wkf/hawk>; Or, actually, I think boot has that as a built in task"
375,1500619763.998306,Ofelia,"I see now. The core of my problem is just a ""watch + notify."" Right, there's a boot task. Boot can do this already for me."
376,1500627134.239666,Marcella,"hi everyone,
i want ask, how create multiple connection database  or host in sqlkorma ?"
376,1500627459.359179,Kalyn,How well would a clojure dev environment work on a Raspberry Pi?
375,1500640042.322366,Margaret,"The arm jvm is not so great last I checked, and startup times go into the multiple minutes if using nrepl and lein"
377,1500640093.339998,Margaret,But it can run things once it gets going.
378,1500653236.455067,Carmelina,"I have two REPL clients connected to the same nrepl and I want them to share a stdout/stderr, is this possible without unix hackery?"
375,1500654293.030646,Margaret,"nrepl is a network library, it doesn’t share stdio between processes; you’d need some other infrastructure entirely; you could set something up for multicast output to clients, but it would require new middleware on both the client and server sides; hm.. maybe only server side"
375,1500655072.446355,Carmelina,Thanks! <@Margaret> I guess nirvana is not for this world. I'll just do the unix hackery
379,1500656128.00329,Merrie,"can anyone explain the difference between `event` and `trigger` in FSMs? In particular in context of UML state charts specification.
Is it just a java-esque OOP overhead, or is there key semantic difference?"
375,1500656401.1526,Margaret,"“trigger” is more general, “event” assumes a specific interpretation of how the state machine interacts with an unknown outside world; by unknown I mean “something not specified by the machine itself”; you can of course describe all things as events, but that’s a more specific term, and some semantics prefer to draw a distinction between eg. an event and a start of a timer"
379,1500656502.211198,Merrie,"can you give an example, where having an event and a trigger would not be ""redundant""?"
375,1500656511.216561,Margaret,"since that can be triggered internally by another part of the machine; maybe I did that already as you were typing? if a change in one part of the machine activates another part of the same machine, that’s a trigger, but not an event because it came from inside the machine itself; so let’s say a parser: if your language rules say “you are now in a closure” that’s a trigger but not an event, if you read a semicolon and that means you end the closure, that is an event that is also a trigger"
375,1500656616.275115,Merrie,"I have a feeling, that having both events and triggers (which are followed with guards (predicates)) - is somewhat excessive, at least in the clojure/edn/library context"
375,1500656648.292461,Margaret,"they are different levels of abstraction - an event is a special kind of trigger and most users of fsms differentiate them; definitely implement in terms of triggers first, if you do it right you can build events on top if you need them?; but calling a trigger that is totally internal to the state of the machine an event seems weird (unless you also reify the trigger as some output and re-consume it I guess? I’ve done that for coordination)"
375,1500656792.369762,Merrie,"I get that there are less/more specific events. what I cannot pin point, is why some would be triggers, not events (or vise versa); so basically: internal=trigger, external=event? (interna/external to machine, not particular state); or even: event/type is a trigger, but event is an entire ""object""? sort of"
375,1500657263.614418,Margaret,"no, event is not the general thing, a trigger is the general thing; all things that cause transitions are triggers, period; if you only want one abstraction, it’s a trigger; an event is a special kind of trigger"
375,1500657368.668436,Merrie,thank you for the input
375,1500657482.727459,Margaret,"<@Merrie> it could be that what you really want is event sourcing. That works very nicely with clojure / immutable data.; while a state machine is kind of designed for c or assembly, it’s all about when to do what mutation; if so, yeah, everything should be an event, you have a log of events to consume, and you project various views from the events via a projection (aka fold, aka `clojure.core/reductions`).; I’m currently building a system around that, and it’s very nice (especially the fact that when I hit a bug I can just dump an excerpt of the log, and replaying that log builds my regression test)"
375,1500658075.040004,Merrie,"<@Margaret> I am trying to reconcile my understanding of the components of: rule based systems, FSMs, and event sourcing, to ""solve"" single page apps state management for myself. I tried basic event sourcing, but when you have: few audio/video html tags with their own states, some i/o, a bunch of buttons depending on the above, and custom performance-sensitive progress bar – it kind of is not enough, and coordinating all of this is not much easier, than just a bunch of atoms with a page of `add-watch`es connecting them. So i went looking for a better way, or just to improve my understanding of the building blocks."
375,1500658127.067762,Margaret,<@Merrie> OK - I suggest checking out petri nets btw because they are async and have a formal provable semantics
375,1500658157.083949,Merrie,"those are on my reading list, yes"
375,1500658166.088784,Margaret,"<@Merrie> also the very high level response to that problem is “when event sourcing leads to local state changes, reify the state change by sending it out as a new event and then consuming it”; that way you still have the events as the canonical source of all truth; when you have local state changes that will guide behavior that are not visible in the events, you’ve undermined the event sourcing system because you now have an irreproducible state; it’s actually not event sourced any more"
375,1500658314.168767,Merrie,"I sort of did that. But having few ""a pure state {} depending on side-effectful io/video/audio and vice versa"" loops messes things up. So I went for specs to get some vocabulary for ""internal/external/pure/io events"", etc.; the challenge is: from event sourcing pov: there are like 100 states, but from ui components' pov: 10, and I am looking for a way to manage those 2 ""projections""; (basically states vs. <https://en.wikipedia.org/wiki/UML_state_machine#Extended_states>)"
375,1500658522.279398,Margaret,"my solution was to base things on a petri net - which have two kinds of things, places and transitions, a transition consumes tokens from 1 or more places and puts tokens into 0 or more places. All canonical state is the content of places (keys in a hash-map, obviously) and transitions are described by predicates on the contents under those keys and an update that removes tokens from N places and places tokens in N places; but yes, I have dealt with that problem you describe in my reagent app"
375,1500658581.310214,Merrie,"what do tokens represent? ""should I run this predicate?""?"
375,1500658589.314139,Margaret,"tokens are immutable data; the predicate says “given these tokens that currently exist, do I fire?”; and firing consumes some tokens and maybe produces some in other places; it’s like actors without the data hiding; instead of mailboxes they have some places they watch (and anyone else can watch), and instead of sending messages they remove data from one place and maybe put new immutable data in places"
375,1500658770.408226,Merrie,so the places are basically like queues?
375,1500658776.411475,Margaret,they aren’t ordered
375,1500658806.426662,Merrie,"like an (atom {}), which you take values from or put into?"
375,1500658837.443152,Margaret,"and you might say “I only fire if I can consume 3 from :a plus one from :b” - eg. that is what assigning work to a worker ends up looking like - you have a token for a worker and a token for the job, you consume both and create a new token representing a pending result"
375,1500658846.448024,Merrie,so 10 places (nodes) = 10 atoms?
375,1500658857.453599,Margaret,"no, you don’t even need an atom; I put it all in one hash map, but you could eg. represent the whole thing with `reductions` which would mean each state is another item in the lazy-seq that reductions outputs; (free history!); or reduce on an atom; or whatever"
375,1500658964.509483,Wilhemina,thats how i designed my deterministic game simulation
375,1500658988.522354,Margaret,<@Wilhemina> hehe my event / petri based library is called “ludic” and the primary metaphor is playing chess by mail; but really it’s doing a bunch of data transitions based on a petri net model from an event source :smile:; (ludic is a super intellectual word describing playfulness)
375,1500659040.54977,Merrie,"so you have a list of ""workers"", and just (while true) apply them on the same {}? and each of those modify it, if ""there is enough of particular tokens"""
375,1500659063.561847,Margaret,"<@Merrie> one thing it does is manage workers and tasks, but that’s just because I’m running a computation cluster; if you are in the browser, you don’t need workers - make places / tokens that model your domain; eg. a place could be a dom node and the tokens represent the data driving it… (maybe?); or maybe better would be a place being a UI state, tokens describing it, and transitions deciding where it should go next"
380,1500659196.633722,Lucio,"Hi! I have a set containing vectors, e.g. `#{[1 2 3]}`, and I want to get the first element of the first member of the set. Is there a more idiomatic way to do this than `(first (first set))` ?"
375,1500659202.636755,Merrie,I'll read your lib's readme first. Did not quite get the analogy yet : )
375,1500659216.644123,Margaret,"<@Lucio> sets don’t have “first” anything, they are unordered; if you want an implementation-derived item that will change when you change contents in odd ways, sure, you can call `ffirst`"
375,1500659254.6645,Lucio,"<@Margaret> right; in my case I don’t care about which element of the set gets picked; hopefully it should be a singleton set, or empty set"
375,1500659255.665372,Margaret,but don’t count on any particular item coming out
375,1500659268.672068,Daniell,There's a `ffirst` function.
375,1500659296.6867,Lucio,ffirst is exactly what I was looking for; thank you!
375,1500659380.732239,Margaret,<@Merrie> I almost regret mentioning my lib - it’s still super young and I don’t think the examples are good yet and it’s still changing fast; just FYI; I only brought it up because of the game thing
375,1500659513.805838,Merrie,<@Margaret> I just need lots of input and analogies to straighten my thoughts at this point :)
375,1500659650.881311,Margaret,"<@Merrie> on that account, this book is very well written, has beautiful illustrations and typography <https://www.amazon.com/gp/product/3642332773/ref=oh_aui_detailpage_o04_s00?ie=UTF8&amp;psc=1>; (it’s a book about petri nets, since the url doesn’t reveal that); definitely the most beautiful CS book I own"
375,1500659729.925501,Merrie,no kindle edition :harold:
375,1500659739.931303,Willow,just a reminder that the first element of a set is not a well defined concept. it may be consistent but this would only be due to implementation details
375,1500659782.95529,Merrie,thank you. everything was really helpful
375,1500659841.988026,Lucio,"<@Willow> thanks! I’m aware of that however, and in my case it doesn’t matter. The set should always be either empty or a singleton"
375,1500659844.989551,Margaret,np - and keep in mind you might not need the petri net model - you might just want eg. CSP instead (since core.async is right there) - but do think about how well the foo you connect your events to is something that works nicely in the clojure ecosystem; events -&gt; datalog works great too
375,1500659865.001483,Willow,sounds good. just wanted to remind just incase
375,1500659902.021694,Lucio,thanks :slightly_smiling_face: it could have introduced a nasty bug if I relied on the first element being stable..
375,1500659980.065367,Merrie,"about that :kappa:; the bigger picture I keep in mind, is some kind of format, which can help describe system in concise way, so you could see it all at once, to some level of details; like: <http://www.thelogbook.com/phosphor/2008/frisky.gif>; channels are cool, but when all the plumbing is spread across entire project - it becomes challenging to see the ""project mini map"". And anything I encountered so far – are either one way graph wiz pngs, or completely new visual-first language."
375,1500660393.294484,Margaret,it was pretty straightforward to make a function that consumed my rules and based on the places they consume from and produce to (fields on the rule record) generate a `.dot` file for graphviz showing a petri net.; not the precise petri net my code implements (since my code can easily break that abstraction…) but at least a diagram that is helpful
375,1500660475.338005,Merrie,"yeah, I saw the .dot support"
375,1500660608.408875,Lucia,you also might find Milner' Pi Calc useful <https://www.amazon.com/Communicating-Mobile-Systems-Pi-Calculus/dp/0521658691>
375,1500660624.417265,Margaret,<@Lucia> oh nice thanks for reminding me of that
375,1500660723.468538,Lucia,"np, thanks for the petri book ref, always wanted to find sth like that!"
381,1500664559.438072,Debby,"is there a parallel transduce? say, something like `(pmap send-messages!)`"
382,1500665577.901156,Lucio,Is <https://github.com/stuartsierra/component> “state of the art” to structure a system in Clojure? Or does anyone have better advice?
382,1500665650.934255,Darci,"I prefer <https://github.com/tolitius/mount> by far. Simpler, less opinionated, less viral."
382,1500665694.953818,Rebeca,mount is just terrible though
382,1500665710.961437,Darci,could be. I rather don't like component.
382,1500665751.979592,Malka,<@Lucio> check out integrant: <https://github.com/weavejester/integrant>
382,1500665752.980272,Lucio,":smile: well, let me turn my question around then: what would be your preferred way to structure a system to as to make dependency injection / mocking easy?"
382,1500665763.984925,Rebeca,component
382,1500665767.986589,Lucio,I am new to clojure and about to build my first app
382,1500665767.986877,Darci,mount :slightly_smiling_face:; lol
382,1500665784.994302,Ramonita,Integrant :wink:
382,1500665784.994398,Rebeca,"mount is a formalized system of global state, component gets rid of global state"
382,1500665789.99664,Lucio,I guess I’ll try all three then
382,1500665790.997225,Ramonita,But I might be a touch biased
382,1500665790.99732,Lucio,":smile:; oh, integrant is your project <@Ramonita>"
382,1500665808.005168,Merrie,<@Rebeca> why is mount terrible?
382,1500665814.008253,Ramonita,"Component is the most used. Integrant is a little new, but YMMV."
382,1500665817.009353,Darci,"yeah, I guess that's the best thing to do: try all :slightly_smiling_face:"
382,1500665821.011407,Lucio,<@Ramonita> what does integrant do better than mount and component?
382,1500665829.015174,Rebeca,"mount is based on global state in global atoms; I've done that, it sucked; component turns your system in to another first class value you can pass around, have multiple copies of, etc"
382,1500665876.036963,Darci,"<@Rebeca> we've all done all kinds of stuff, I never liked component. No need to argue with : I like it - I don't."
382,1500665882.039557,Lucio,I fear I’ve asked a more contentious question than “should I use VIM or Emacs?”
382,1500665883.040107,Ramonita,"<@Lucio> Compared to Mount, Integrant doesn’t have global state. Compared to Component, Integrant can have dependencies between things that aren’t maps/records.; I feel like Vim and Emacs users can be collectively smug toward users of lesser editors :wink:"
382,1500665928.060663,Darci,"we know <@Rebeca> doesn't like mount : <https://gist.github.com/pandeiro/9a1c8fd431e1b4c78c99>; That discussion actually drew my attention to mount, and I like it since. Thanks to <@Rebeca> :slightly_smiling_face:"
382,1500665990.088257,Rebeca,"huh, I  didn't know there was acopy of that floating around"
382,1500665994.089867,Merrie,"```
seems bad, like sticking (def state (atom {})) in every namespace would be
```
isn't this the way I am supposed to do things? :kappa:"
382,1500666004.094487,Rebeca,god no; singleton global state is bad and sprinkling clojure on it doesn't make it good
382,1500666057.118594,Darci,"still, thanks for pointing me to mount :wink:"
382,1500666066.12272,Merrie,"actually, I'd love to see good example of not doing global atoms, asking for a friend™; I guess good component example would suffice as well"
382,1500666191.179905,Rebeca,all the main component projects I have worked on have been closed source apps
382,1500666206.186683,Lucio,"Oh, I didn’t realise you’re the maintainer of Ring and Compojure!"
382,1500666213.190088,Martina,"Here is the problem with global state: you don’t know beforehand how you will want to use your code later. So, inevitably the system grows to the point where your previous “application” is subsumed in some larger structure, and you have to refactor all the global state out of it. Which is a much bigger pain later."
382,1500666239.2017,Ramonita,Indeed. Feel free to hit me up with any questions when/if you happen to have any.
382,1500666245.204502,Darci,Read the discussion... it's enlightening
382,1500666249.206082,Rebeca,"<https://github.com/hiredman/songs-of-future-past/blob/master/src/com/manigfeald/sofp.clj> is an example of something using component, I don't know that it is good"
382,1500666275.218102,Merrie,thank you
382,1500666276.218382,Rebeca,"it doesn't have any tests, which is where the lack of global state would really shine"
383,1500666338.246837,Lucio,"<@Ramonita> thanks, will do! Watching your talk on Integrant now"
382,1500666353.253674,Martina,"I only say this because I went through this before. Component solves a problem I was having, and has been great ever since.; I feel like you can go through this yourself, maybe that is the only way to see it"
382,1500666457.30111,Lucia,"hmaurer: in that case, build it yourself.  once you've got that experience under your belt you'll be able to evaluate mount, component, etc.  walk before you run. "
382,1500666481.312707,Rebeca,"I would say it is a classic easy/simple split, component is way simpler (<https://gist.github.com/hiredman/075b45eaeb01e4b526ce6f8854685487> implements all the functionality of component in 30 lines, but lacks refinement), but mount is going to be easier because using globals is always easier for a few months"
382,1500666503.322687,Lucio,<@Lucia> good point. that has been my general philosophy so far
382,1500666533.33673,Martina,I think of it as an “easier now”/“easier later” divide; Global state is easy now. You don’t have to learn anything and it doesn’t take work to set up
382,1500666583.360155,Darci,"Going the 'simpler' and 'easier' way, are we?"
382,1500666633.383683,Lucia,"hmaurer: fwiw all that stuff is interesting and useful, i suppose, but i've not needed to use any of them.  mastering clojure is already a tall order, those things are for ninjas (imho).  good luck!"
382,1500666643.388281,Darci,"Right, it may be easier, and if it solves the problem, why make it more difficult? - What is the problem you want to solve? This may be the first question to <@Lucio>"
384,1500666661.395936,Martina,But there will come a day when you are screwed
382,1500666672.400982,Darci,"Having a viral framework, I never liked that. Component is more a framework - I will be screwed as well"
382,1500666676.403058,Lucio,<@Lucia> thanks! any tip on mastering clojure itself?
382,1500666685.407131,Martina,"<@Darci> Agreed. <@Lucio> If you are trying to learn Clojure, just use a global atom"
382,1500666690.409553,Darci,"Have used enough frameworks, they always hit you in the face as well... and hard :slightly_smiling_face:"
382,1500666730.427295,Lucio,I don’t really want to use a global state atom. While I am new to clojure I’ve been interested in functional programming for quite a while; if there are ways to avoid global state I rather do so; But I’ll try out mount either way
382,1500666738.430986,Martina,"<@Darci> We disagree in general, it is okay"
382,1500666740.431925,Lucio,I might learn some valuable lessons
382,1500666752.437632,Martina,<@Lucio> That is good context. In that case I think you will appreciate component
382,1500666756.439414,Merrie,"fwiw, there is a yurt for mount <https://github.com/tolitius/yurt>
```Multiple brand new local Yurts with components can be created and passed down to the application / REPL to be used simultaneously in the same Clojure runtime for fun and profit.```"
382,1500666757.439792,Darci,Exactly - check what works out for you.
382,1500666760.441415,Rebeca,"integrant seems ok, I haven't looked at in depth, but it looks like it uses multimethods for dispatch, which I've done with component before, but is annoying if you want to create an anonymous sort of mock of something in a test"
382,1500666797.457481,Martina,"<@Lucio> Once you understand it, it is not as bad as people make it out to be"
382,1500666798.457984,Lucio,A global state atom also sounds a bit messy for mocking
382,1500666801.459706,Martina,It is a conceptual hurdle; not a technical one
382,1500666811.464216,Lucio,"I mean, you could set the global state atom before runing your tests with the mock dependency; but it sounds a bit dirty"
382,1500666818.467292,Rebeca,<@Lucio> the beating heart of mount <https://github.com/tolitius/mount/blob/master/src/mount/core.cljc#L12-L16>
382,1500666844.479333,Darci,"<@Martina> right... one prefers frameworks, the other doesn't. Fine with me :slightly_smiling_face:.; Global state atom can be bad, of course. That's why mount manages it, so you don't have to."
382,1500666895.50202,Merrie,:opieop:
382,1500666899.503875,Martina,"I would call component more of a pattern. It is not doing much for you, most of it is explicit"
382,1500666924.515444,Darci,"Anyway, we'll never agree on that part - that discussion was pretty clear about how it's not that different from component (passing in state everywhere)"
382,1500666934.519659,Martina,"It is a pattern of state access, treating state as a value"
382,1500666956.529803,Darci,<@Martina> right... it does not do much... I like that :slightly_smiling_face:
382,1500666976.53924,Martina,"Basically, it is the functional way to do things: you have to pass everything in"
382,1500667008.554518,Darci,"yes, that's a dogmatic reason. I prefer pragmatism in many cases."
382,1500667030.56457,Lucia,"write code, heh.  to me the key is compositionality.  it was not obvious to me just what that means when i was starting.  i guess i would recommend focussing on the small stuff first - sequuences, laziness, core.async, etc.  explore the api - what does juxt do?  how to use protocols? etc."
382,1500667046.572247,Lucio,Is there a good blog/book/resource somewhere on clojure ways of doing things? (i am already familiar with “programming clojure” and “the joy of clojure”)
382,1500667084.590513,Wilhemina,I've heard good things of <http://www.braveclojure.com/>
382,1500667094.595166,Lucia,"better: forget the app for now, just spend a lot of time in the repl experimenting.  "
382,1500667102.598781,Vannessa,"heh, I went to Mount after a couple years of Component straitjacket. In a bigger team I’d use Component though :slightly_smiling_face:"
382,1500667105.600214,Darci,clojure does have state management constructs because you don't pass everything in. There's a reason why clojure isn't dogmatic on FP.
382,1500667148.620036,Ramonita,"<https://leanpub.com/elementsofclojure> isn’t finished but has some interesting ideas. It’s not a general purpose programming book, though. I think the first chapter on naming is free."
382,1500667152.622265,Daniell,"As someone who initially went down a Mount-like path when building a system and has since switched to Component, I'll ""vote"" for <@Rebeca>'s position here that global state is a *terrible* idea."
382,1500667177.633613,Darci,"It is a terrible idea in general, right. The dogmatic reason. I can understand it.; But having a viral framework has hit me many times, including component."
382,1500667220.654987,Daniell,We're still feeling the pain of the global state approach as we piecemeal migrate away from it (by using Component instead but having its `start`/`stop` functions keep the legacy global state in sync until we can replace it).
382,1500667242.665944,Darci,"That's why I prefer mount - pragmatism, and as long as you manage state, it's ok."
382,1500667252.670479,Wilhemina,single global atom is the rallying cry for frontend projects lately
382,1500667263.675602,Darci,:slightly_smiling_face:
382,1500667275.681365,Lucia,"<@Lucio> as you can tell from this thread, there is always More Than One Way to Do It.  Master the basics first, then you'll see just how true that is!"
382,1500667288.6879,Darci,lol true!
382,1500667293.690324,Daniell,"Component is not a ""viral framework"". Functions need to be based stuff as arguments, not reach out to global state for it."
382,1500667308.697466,Lucio,"Haha, I am glad it sparked a discussion though. It would have been quite boring if someone linked me a lib and 5 people thumbed up"
382,1500667311.699039,Darci,"Once you start using component, it's hard not to use it everywhere in your code base."
382,1500667317.701448,Rebeca,<@Wilhemina>
382,1500667333.709287,Darci,"So well, I call that viral (inside the code base)."
382,1500667339.711824,Rebeca,<@Wilhemina> I wouldn't be surprised if that is the primary split front end / back end on mount / component
382,1500667359.721134,Darci,You do it 'the component way' or not. There's nothing in between... using component.
382,1500667359.721252,Martina,"I think it is more about providing each part of your system the minimal amount of information it needs to do its job. That way you can decompose and rearrange it later. Which at some point will become very important.; global state creates interdependence, which is weakness"
382,1500667385.733061,Guillermo,"Hate to make an argument by authority, but it's really not insignificant that some of the most veteran clojure developers (<@Rebeca> / <@Daniell> ) favor component.
Personally I think mount teaches new clojure users bad habits."
382,1500667393.736577,Darci,"Same with mount, honestly. Check that discussion I posted above, it's really all not that different."
382,1500667399.739613,Guillermo,s/mount/global state patterns/
382,1500667409.744017,Daniell,"<@Darci> any given function just needs to be passed what it _needs_ -- not the whole system -- and that's just functional cleanliness. You initialize all your resources at application startup, put them in a map, pass the relevant bits down the call chain. Component just formalizes that and manages dependencies for you."
382,1500667419.748565,Lucio,can you do that with component? don’t you pass the whole context around usually? or do you intentionally strip some keys from the context?
382,1500667437.756975,Darci,"Same with mount, really, if you like so."
382,1500667452.763281,Vannessa,<@Guillermo> - even though I prefer Mount - I agree :slightly_smiling_face: Mount should only be allowed once you spent a year with Component
382,1500667468.770521,Darci,<@Vannessa> :slightly_smiling_face:
382,1500667491.780673,Martina,You only give each component access to the components it asks for (basically you declare a dependency). Your component only ever sees the state that it asks for
382,1500667530.797931,Daniell,Perhaps the pain level with Mount doesn't show up until you have a large enough system? Just like global state only causes you pain after a certain point?
382,1500667541.802794,Guillermo,The `mount` readme describing `component` is disingenuous <https://github.com/tolitius/mount/blob/master/doc/differences-from-component.md#differences-from-component>
382,1500667554.808805,Martina,"which makes it really nice, because your systems are modular by default"
382,1500667593.82544,Vannessa,<@Daniell> it’s probably true. In my case I’ve avoided building large applications (modules). I just have many of them.
382,1500667617.836505,Daniell,"We have about 60,000 lines of Clojure right now..."
382,1500667631.842516,Vannessa,"I have half that, but I’m the only dev"
382,1500667649.850671,Darci,LOC - so?
382,1500667658.854526,Martina,<@Vannessa> I kind of fear your codebase ; )
382,1500667679.863672,Vannessa,you should :slightly_smiling_face:
382,1500667693.869663,Martina,"Sweet, your glyphs and wards are working"
382,1500667696.871299,Darci,"anyway, as said before, one prefers dogmatic, other prefer pragmatism. One prefers frameworks, other prefer libs/patterns. One likes pink, the other blue. Whatever :slightly_smiling_face:"
382,1500667737.888776,Martina,"If you want to do things functionally, component is what you want"
382,1500667781.90828,Darci,"(some ran away from component, others ran away from mount, so maybe we all should try integrant and decide it's not a silver bullet either :slightly_smiling_face: )"
382,1500667801.91701,Lucio,can you elaborate on the potential issues with multimethods please?
382,1500667812.922242,Darci,lol - because someone has an opinion? Nice.
382,1500668006.008145,Daniell,"Like I say, hard lessons learned building a system the ""easy"" way with Mount-like managed state, instead of the ""simple"" way with Component-like managed dependencies."
382,1500668059.030909,Lucia,zzzzz. clojurians having another vigorous debate/ disagreement _without calling each other names_.  wtf is wrong with you people?!  :wink: 
382,1500668201.091578,Rebeca,"<@Lucia> I dunno, can't we just hate each other's software without hating each other?; (hating your own software is of course also acceptable)"
382,1500668246.110556,Lucia,"hate the code, not the coder!"
385,1500668251.112754,Lucio,<@Rebeca>  ^
382,1500668303.017078,Lucia,"anyway that was a lame attempt at irony - the clojure community is extraordinarily irenic. (look, i made a pun! whee!)"
382,1500668315.021847,Rebeca,"generally multi methods are also global, created with defmulti (technically you could create an anonymous one, but I have never actually seen anyone do that, and it would kind of defeat the purpose)"
382,1500668346.035004,Lucio,<@Ramonita> quick question on Integrant (I’m half way through the talk): how would I proceed to mock the implementation of one of the services?
382,1500668348.035746,Rebeca,"so if you want to create a mock, you have to use defmethod which effects the global multimethod"
385,1500668352.037413,Lucio,I am not sure how to do it with multimethods
382,1500668373.046021,Rebeca,"if you use protocols you can generally reify the protocol inline in the test, and outside of the test there is no effect"
382,1500668374.046707,Lucio,"ah, so the latest defmethod will be used, overriding a previous definition?; that’s a bit nasty"
382,1500668394.054978,Merrie,"_""hate a la carte"" joke_"
382,1500668399.057265,Martina,<@Lucia> Online peace is a noble goal
382,1500668426.068824,Ramonita,"For that, I tend to use protocols. In Duct (which builds on Integrant), I call them “boundary protocols”, as they define the I/O boundary of the system."
382,1500668429.070096,Lucio,"ah nevermind, got an answer by <@Rebeca>  :slightly_smiling_face:; oh, I’ll check Duct"
382,1500668445.077177,Rebeca,"uh, yes, but that is not what I meant"
382,1500668446.07745,Ramonita,"For example: <https://github.com/duct-framework/database.sql/blob/master/src/duct/database/sql.clj>; Instead of just returning the database spec, I wrap it in a record.; This allows me to write a protocol against it, and I can mock out the protocol for tests using a tool like Shrubbery."
382,1500668517.107706,Rebeca,"each multi method has a dispatch table for behaviors, so say you want stick in a :my-special-mock, well that goes in the table associated with the multimethod, less likely to cause harm than actually replacing the dispatch, but still kind of a drag"
382,1500668520.109083,Ramonita,It’s also useful for having a “local” service that fakes out cloud services or external APIs etc.
382,1500668556.124179,Lucio,Yes that’s exactly the sort of application I’m thinking. Two more projects to look at on my list :stuck_out_tongue:
385,1500668563.127712,Ramonita,Duct builds on top of the ideas of Integrant. It’s the vocabulary to Integrant’s grammar. <https://github.com/duct-framework/duct>
382,1500668567.129558,Rebeca,"(following the thread with <@Ramonita>) it looks like he uses protocols for some stuff, so maybe that is less of a problem"
382,1500668621.152479,Lucio,<@Ramonita> the last web framework I looked into was Pedestal. Do you have any opinions on it?
382,1500668636.158611,Rebeca,"at my last job we used component but had a team member who hated defrecords, so we more or less retro-fitted component to use multimethods instead (which is pretty easy to do) which is where my experience with the pain of mocking that kind of thing comes from"
382,1500668747.206033,Ramonita,"I haven’t use Pedestal in anger. Some ideas it has are good, but it feels more complex than what I need, and it’s web-focused."
385,1500668763.212989,Ramonita,Duct/Integrant are more generic
386,1500669398.487239,Lucia,did i just kill a discussion?  ouch.
386,1500669511.535852,Corine,"Interesting discussion. At my work we use mount (mount.lite actually), but I always liked the IoC-pattern in OO, which I miss doing mount. It is nice that you do not have to pass state as parameters everywhere, and if you want to mock a state you can substitute state for a mock implementation. BUT I miss having a composition root responsible for composing modules, and seeing that you have to refactor because a module takes too many constructor parameters."
385,1500669551.55346,Dona,"<@Lucio> when you looking at mount, besides the docs, these little example apps may help you to see how it could be used: <https://github.com/tolitius/stater>"
385,1500669566.560073,Lucio,thanks!
382,1500669852.681607,Lucio,"<@Ramonita> sorry, watching the rest of your talk and reading a bit of Duct’s doc I realise this was a silly question. Duct seems more like an approach to structure an application around Integrant"
386,1500669876.691904,Corine,"I find initializing state in one file like below (where a timbre appender is added) quite nice. I don’t know what the equivalent would be for a Component application. Logging is a cross-cutting concern, so perhaps not really something you inject.

```
(ns blabla.logging
  ""Logging setup for blabla.""
  (:require [blabla.config :refer [config]]
            [clojurewerkz.elastisch.native :as es]
            [mount.lite :refer [defstate]]
            [taoensso.timbre :as log]
            [blabla.logging.elastic :as log-es]))


(log/handle-uncaught-jvm-exceptions!)

(defstate log-level
  :start (let [current-level (:level log/*config*)]
           (log/set-level! (:log-level config))
           current-level))

(defstate blacklist
  :start (when-not (:development config)
           (log/swap-config! update :ns-blacklist conj ""io.pedestal.http.impl.*""))
  :stop (log/swap-config! update :ns-blacklist #(vec (remove #{""io.pedestal.http.impl.*""} %))))

(defstate elastic-client
  :start (let [{:keys [elastic-native-pair elastic-cluster-name]} config]
           (when elastic-native-pair
             (es/connect [elastic-native-pair] {""cluster.name"" elastic-cluster-name})))
  :stop (when elastic-client
          (.close elastic-client)))

(defstate elastic-appender
  :start (when elastic-client
           (let [options {:base-doc {:app ""blabla""
                                     :k8s {:namespace (:kubernetes-namespace config)}}
                          :mapping  log-es/mapping}]
             (log-es/add-elastic-appender! elastic-client ""hd-logging"" options)))
  :stop (log-es/remove-elastic-appender!))
```"
385,1500669937.71831,Lucio,"Duct is a backbone, and all the web/else related logic is handled by other librairies, e.g. Compojure"
382,1500669948.723163,Ramonita,"Right. It provides a template, a bunch of integrant-compatible libraries, and “modules” which are essentially pure functions that transform the Integrant configuration.; Modules provide a way of automating gluing together libraries"
382,1500670050.767502,Lucio,<@Ramonita> do you have an example of how a module would work?
382,1500670088.784079,Ramonita,"An example, or an explanation?"
382,1500670119.797879,Lucio,"explanation, or an explanatory example :slightly_smiling_face:"
382,1500670152.812148,Ramonita,"Okay, let me find something quick…; Actually, I wrote a blog post about this, which might be more useful: <https://www.booleanknot.com/blog/2017/05/09/advancing-duct.html>"
382,1500670398.917621,Lucio,"<@Ramonita> ah that’s perfect, thank you!"
382,1500670407.921734,Ramonita,"One module is `:duct.module/web`. That sets up a handler and middleware, and looks through the configuration for a web server. If it finds one, it connects the handler to the existing web server. If none exist, then it creates a new one.; There’s also: <https://www.booleanknot.com/blog/2017/05/29/building-web-services-with-duct.html>; The explanation I find myself often using for modules are web sessions that are stored in a SQL database."
382,1500670465.945856,Lucio,how does it “find the web server” in the config? based on the name of popular web servers?; or a special key?
382,1500670495.958053,Ramonita,"Keyword inheritance. The `:duct.server.http/jetty` key is derived from `:duct.server/http`.; So to find all the web servers in a Duct config, you just run `(ig/find-derived config :duct.server/http)`; The idea is to use `derive` a little like a dictionary definition or a thesaurus. It allows us to describe what a keyword is, to give it some meaning."
382,1500670595.000844,Lucio,keyword inheritance is just based on the name + namespace of the keywords? e.g. a keyword X inherits from a keyword Y if X’s namespace is Y’s namespace plus its name?
382,1500670622.01212,Ramonita,"No, it’s its own thing. Any namespaced keyword can `derive` from any other.; Namespaced keywords have multiple inheritance in Clojure."
382,1500670686.039102,Lucio,"ah, I wasn’t familiar with Clojure’s `clojure.core/derive` function. I’ll look into it before bothering you further; Thanks!"
382,1500670706.047682,Ramonita,"It’s not often used, but I feel like it has some important niches; <https://clojure.org/reference/multimethods>"
382,1500670829.100963,Lucio,"mmh, so `derive` is effectful from what I gather; Where does it hold the relationship data between keywords? A global registry? I can’t see it setting metadata on the keywords themselves"
382,1500670918.139294,Ramonita,"A global registry. Derive *can* be used functionally if you supply a hierarchy, but mostly it’s used globally.; To my mind it’s like vars, or specs."
382,1500670942.14905,Lucio,"Oh, I think I get what you meant by a “grammar” then. You use keywords + derive to build a sort of ontology?"
382,1500670949.152086,Ramonita,"Exactly :slightly_smiling_face:; Jetty, for instance, is a HTTP server that supports synchronous and asynchronous handlers. So we could write:
```
(derive :duct.server.http/jetty :duct.server/http)
(derive :duct.server.http/jetty :duct.server.http/async)
(derive :duct.server.http/jetty :duct.server.http/sync)
```"
382,1500671039.189742,Lucio,that’s brilliant
382,1500671058.197229,Ramonita,"If Integrant is the “grammar”, Duct is attempting to build a “vocabulary”."
382,1500671084.208065,Lucio,So duct is an ontology for configuration + tools that understand and work with this ontology
382,1500671113.219237,Ramonita,"Right. That, plus a way of transforming configurations via a preprocessing “prep” stage.; Basically query+transformation"
382,1500671158.237501,Lucio,I’ll check out Duct’s code if it’s not too complex; That’s super exciting
382,1500671172.243156,Ramonita,"Start with duct/core; <https://github.com/duct-framework/core/blob/master/src/duct/core.clj>; Essentially Duct tries to solve the problem of wiring up libraries. Even something seemingly trivial, like storing sessions in a SQL database, requires a lot of wiring.; You need a database migration to create the SQL table to store the sessions; You need a DB connection; Middleware; Session storage protocol; And a worker process to clean up old sessions; Very hard to do with a normal library, but a module could ask questions like “Where do I register a new periodic cleanup job?” “Where do I add new middleware?” “Where can I add a database migration?”"
382,1500671415.336311,Lucio,"I guess it’s a form of convention over configuration; But in the sense that with Duct you establish a language to talk about your configuration, deriving Duct concepts; then modules can use this language to understand your configuration and act on it"
382,1500671525.378363,Ramonita,"Right. It borrows a lot from tools like Rails, but whereas Rails used the filesystem as the basis for its convention, Duct uses an immutable data structure."
382,1500671526.378916,Lucio,"Instead of following some predefined key structure for your configuration, you just need to follow an ontology/grammar"
382,1500671544.385976,Ramonita,"Exactly :slightly_smiling_face:; It’s still early days, but that’s ultimately where Duct is going."
382,1500671593.404269,Lucio,"Are there any other projects that you know of which take this approach? Obviously ontologies are quite talked about in the context of the semantic web / knowledge bases / etc, but I think this is the first time I’ve seen it applied to a dev tool"
382,1500671738.458767,Ramonita,"Arachne is another of Duct’s inspirations; It takes a similar approach, but I don’t think it emphasises the semantic ontology angle; And rather than a data structure, it uses a bunch of scripting functions to create an in-memory datomic database, which is then translated into a Component system.; Duct IMO is a little simpler."
382,1500672003.554783,Lucio,<@Ramonita> thanks for taking the time to explain this out! I’ll read up on Duct/Integrant. The theory sounds great; let’s see if it holds up in practice :stuck_out_tongue:
382,1500672025.562889,Ramonita,"No problem - let me know what you think; The two blog posts I linked, especially the later API-focused one, should give you a good idea of how to start."
382,1500672176.615854,Gus,"If you want to evaluate mount/component/integrant, I’d recommend starting by just reading them; they’re all in the 300-500 LoC range"
382,1500672222.63222,Lucio,<@Ramonita> I think I am going to have some fun with `clojure.core/derive` itself too. Such a neat little function
382,1500672277.652131,Ramonita,I wouldn’t say it’s a function that should commonly be used; it’s got niche functionality. But I also think it’s underused. Not many people seem to have heard of it.
382,1500672311.664235,Gus,"I mean there are things you can only learn by using them in a large project for a long time, or talking to someone who has, but I think reading them is a reasonable starting point"
387,1500674394.337998,Lucio,Yep that’s what I intend to do now that I’ve seen they’re pretty concise. Thanks for the advice!
388,1500676557.910988,Aldo,"if I'm understanding your example correctly, component also wires everything together in one file like you prefer; generally you have a 'system' or whatever ns with a big map that looks like 
```
(defn example-system [config-options]
  (let [{:keys [host port]} config-options]
    (component/system-map
      :db (new-database host port)
      :scheduler (new-scheduler)
      :app (component/using
             (example-component config-options)
             {:database  :db
              :scheduler :scheduler}))))
```"
388,1500677883.212982,Bethann,"Aaand don’t forget the new-new kid on the block: `deferst`:
<https://github.com/employeerepublic/deferst>"
389,1500677926.223193,Corine,Yes that is what I am missing from Mount :slightly_smiling_face:
388,1500677937.225707,Corine,Your `example-system` is a Composition Root; <http://blog.ploeh.dk/2011/07/28/CompositionRoot/>
389,1500678670.380191,Lucio,"<@Ramonita> Out of curiosity, why did you make the choice of using multimethods for Integrant?"
388,1500678783.402106,Lucio,"It seems to me (as a clojure beginner) that it introduces a form of global that makes stubbing a bit harder; e.g. wouldn’t it be nicer to pass a second argument to `ig/init`: a map from keys to implementations?; I am sure you had a good reason for using multimethods and not the approach I’m suggesting, but I would like to understand it; <@Ramonita> is it related to hot-reloading?"
390,1500680097.644169,Willow,"do clojure files have to have a namespace?; and if so, should tooling not assume that there will be a namespace form at the top?"
390,1500680231.667488,Rebeca,they don't; and you can put other things before the namespace; (the ns form)
390,1500680259.672345,Willow,ok; never really know where to go to find the hard requirements on these things so thanks for the info
390,1500680282.676291,Rebeca,"it is super common to have the ns form be the first thing, so some tooling does assume it"
390,1500680297.678815,Willow,ok. i was not positive if it was convention or spec
390,1500680316.682031,Rebeca,"so some tooling requires it, but clojure does not"
390,1500680341.686028,Willow,"well, if possible, i'd like to conform to clojure requirements and not some subset; there were some namespace cache changes in CIDER that seems to affect files without a ns form so wanted to see what the requirements were. thanks a bunch"
391,1500694078.017472,Delois,"@puredanger Are your deps slides available anywhere, until the talk is online?; I mean <@Sonny> ^^"
390,1500700710.44299,Tameika,"hi all, good morning"
392,1500700727.443981,Tameika,how do I check wether a process is alive?; i mean i launched a subprocess; whether with sh or conch; and i'd like to know whether it's finished or not
390,1500702773.552084,Sonny,"I'll put some stuff out early next week - slides, code, and some more info"
392,1500704171.629806,Bobbie,"<@Tameika> `sh` is a blocking call:
```
(sh ""ls"")
(prn ""finished"")
```"
390,1500704811.663556,Sonny,want to have a little more context than just dumping the slides. haven’t had a chance to do all that stuff due to the conf and today’s travel home.
392,1500704975.672046,Tameika,"i did it like:; (defmacro try-noooo  ""Returns the result of evaluating e, or :noooo if it throws an exception.""  [e]  `(try ~e (catch java.lang.Exception _# :noooo)))(defn is-proc-running[p] (if (= (try-noooo (.exitValue  p ) )   :noooo) true false)); sorry about the formatting, havent figured this out yet on slack; the .exit-Value call throws an exception if the process is still running; that's the trick"
392,1500707211.794654,Bobbie,"<@Tameika> 
If you use the built-in future to handle async, you can do this:
```
(def process-future
  (future (sh ""./my-script.sh"")))

(when-not (future-done? process-future)
  (prn ""still running....""))
```"
393,1500707752.823329,Ramonita,"hmaurer: A lot of the time stubbing isn’t necessary; only for keys that connect to an external I/O source. Also, polymorphism is more convenient than a lookup table, and it encourages using the same key for the same behaviour.; It’s important for Duct/Integrant’s design around the idea of a vocabulary that keywords have the same meaning.; Also, it’s more useful to stub the I/O source you’re passing around than the multimethod. e.g. you might pass your database to another function as an argument. You need to be able to stub that directly.; Hence records and protocols."
392,1500711160.017668,Tameika,"<@Bobbie> that would do the trick, but i also need a timeout"
392,1500711732.049168,Bobbie,"<@Tameika> 
```
(let [result (deref (future (sh ""./my-script.sh"")) 100 :timeout)]
  (if (= result :timeout)
    (prn ""time limit exceeded."")
    (prn ""process exited with: "" result)))
```; <https://clojuredocs.org/clojure.core/deref>"
393,1500718036.416284,Lucio,"<@Ramonita> I see; I think I am misunderstanding something. Let’s put it into context. In some cases I might want to use a different config during testing, which is very easy to do with Integrant (just load a different edn or merge some keys in the loaded config before calling `ig/init`). However, in other cases I might want to stub the implementation. For example, I might be using Redis as a kv store, but during testing I might want to stub it for my own in-memory version."
394,1500718083.418819,Lucio,"In that case, I wouldn’t have a `:redis` key in my configuration, but likely a `:cache` key, or `:kv-store` key, which obeys a kv-store protocol; In my default, production implementation, the multimethod would return a Redis connector wrapped inside a record obeying the kv-store protocol; Which I think is what you’re describing as “boundaries” in Duct; However I am still unclear as to how I would swap that implementation for my own in-memory version during testing; I suspect this is due to my lack of knowledge on Clojure itself, rather than Integrant/Duct…"
394,1500718295.430354,Tameika,you're the master!; that's far more elegant than my solution
394,1500718428.438313,Delois,"Sure, no problem - thanks!"
394,1500719198.480752,Noella,"I’d love to hear more about this as well, I’m going to try out Integrant in a project in the coming weeks and I’ve been wondering the same thing"
393,1500719425.49373,Ramonita,So there are two ways to do this.
394,1500719449.495203,Ramonita,"First, if you’re testing a single key, then you can use `init-key` directly and pass the stubbed/mocked connections.; For example, say you have a key `:foo.handler/user` that takes a database option. You could test it with:
```
(ig/init-key :foo.handler/user {:db (-&gt;StubbedDatabase)})
```; Because the database isn’t accessed directly, but via protocol methods, we can create a stubbed or mocked version with the same interface. Shrubbery is a test tool that streamlines this process.; If you’re testing the configuration in a wider context, then you can take advantage of keyword inheritance.; For example, say you had a configuration like:
```
{:duct.database.sql/hikaricp
 {:jdbc-url ...}
 :foo.handler/user
 {:db #ig/ref :duct.database.sql/hikaricp}}
```; One feature of Integrant is that you can reference *derived* keys, so you could write the above as:; ```
{:duct.database.sql/hikaricp
 {:jdbc-url ...}
 :foo.handler/user
 {:db #ig/ref :duct.database/sql}}
```"
394,1500719766.513519,Lucio,"<@Ramonita> oh, so in that case you wouldn’t swap any implementation, you would simply instruct the system to use a different implementation based on the config (different derived key)"
394,1500719785.514704,Ramonita,"So if you want to stub out the key directly, then change the database key to a fake one that derives from the same base:
```
(derive :duct.database.sql/fake :duct.database/sql)
```"
394,1500719837.517671,Lucio,"Thank you, I’ll try both of those approaches :slightly_smiling_face: I had a follow up question but you answered it. It was going to be: “in your talk you mention how you can instantiate two systems with different configurations, but how can I instantiate two systems with different implementations?”"
394,1500719840.517841,Ramonita,"Right: you could update the configuration to replace the real database with a fake one:
```
{:duct.database.sql/fake
 {:jdbc-url ...}
 :foo.handler/user
 {:db #ig/ref :duct.database/sql}}
```"
394,1500719856.518852,Lucio,From what I gather the answer to this would be “you only have one implementation per keyword; you just use a different config”
394,1500719891.520944,Ramonita,"Right. Just take the base config and alter it with `assoc`. Or use `duct.core/merge-configs` to merge in new options.; It effectively amounts to the same thing.; You *could* also use `with-redefs` to redefine the `init-key` multimethod, but since that’s not thread-safe I’d advise avoiding that route."
394,1500719986.526086,Lucio,"Thanks for the explanation! So the gist is that I was finding it annoying to swap implementation due to multimethods, but that’s intentional because under your design you *should not* swap implementations"
394,1500720054.529936,Ramonita,"Right. I mean, in theory it might be good for testing, but in practice I think it makes more sense to substitute keys in the configuration, rather than make the config-&gt;implementation bridge dynamic in some fashion; It also makes it explicit where you’re stubbing/mocking."
394,1500720205.538435,Lucio,<@Ramonita> thanks for taking the time to explain this out. Once I understand Integrant/Duct better I’ll try to give back by writing some doc :slightly_smiling_face:
394,1500720278.542252,Ramonita,"Thanks! But if you like, just some feedback once you’ve gotten to use it a little would be  useful. The more use-cases I know about, the more useful I can make the library."
394,1500720383.548143,Lucio,Certainly
395,1500720696.566364,Lucio,Hi! What is the preferred way to do input payload validation for a json api in Clojure? If possible a solution that offers both input validation and machine-readable errors to be consumed by the client. Hopefully I won’t start a 40min heated debate like yesterday :smile:
394,1500720910.578801,Noella,"Just adding stuff from this conversation to the readme / wiki would be helpful, because as far as I could see the questions are not addressed on Github at the moment"
395,1500720932.580096,Noella,sort of “Best practices” for stubbing / mocking with Integrant
395,1500720950.581141,Lucio,<@Noella> yep that would be great
395,1500721010.584394,Merrie,"I'd read one, though :opieop: "
396,1500722299.664302,Ramonita,"Point taken, I’ll put together something for the Duct docs."
395,1500722381.668683,Lucio,<@Ramonita> are you using Duct in production?
396,1500722594.680801,Ramonita,"The Integrant version? Not yet, or at least it's not *running* in production. I am working on an app that will be running in production in a couple of months, though."
396,1500724147.775731,Lucio,"<@Ramonita> Another question… What would be the preferred way to reference some environment variables in the config? It seems to be like an EDN tag would be neat, e.g. `#ig/env ""DATABASE_PASSWORD""`. Do you have an existing option? I guess I could merge in the relevant config from env vars"
396,1500724234.781202,Ramonita,"An edn tag would be neat, and in Duct it’s called `#duct/env`.; If you put that in your main `config.edn`, then you can always override them in `dev.edn` or `local.edn`."
396,1500724296.785018,Lucio,Oh I hadn’t even realised Duct had this functionality; I am focussing on Integrant’s doc atm. Brilliant
396,1500724318.786275,Ramonita,"Certain modules also have defaults, e.g. `:duct.module/sql` uses `JDBC_DATABASE_URL` and `DATABASE_URL` automatically, and `:duct.module/web` uses `PORT` for the port number.; <@Lucio> There are a few solutions. Compojure-API can use Schema or Spec. My own Ataraxy has spec validation in the latest version. There are also various validation and coercion libraries, but I think the most common approaches are Schema or Spec.; Spec isn’t designed around coercion so much, so I’m not sure how well it could handle that."
396,1500725947.893516,Lucio,"<@Ramonita> on the topic of loading env vars, maybe it would be neat if one was allowed to extended integrant with custom readers?; oh hang on; I just looked at Integrant’s code and it’s already the case"
396,1500725977.89534,Ramonita,Take a look at read-config; Yep :slightly_smiling_face:
396,1500725985.895781,Lucio,<https://github.com/weavejester/integrant/blob/master/src/integrant/core.cljc#L85>
396,1500726028.898605,Ramonita,"Though in duct someone pointed out that the readers don't persist though includes, so that needs to be fixed."
396,1500726084.902185,Lucio,<@Ramonita> what do you mean by that?
396,1500726176.908265,Ramonita,"Duct adds a :duct.core/include key that allows a config to pull in other configs from the classpath in the ""prep"" stage; But prep doesn't know about the custom readers.; I'm also considering better ways of performing an include."
396,1500726587.93316,Alla,<@Lucio> wrote a post about the coercion &amp; error messages some time ago: <http://www.metosin.fi/blog/clojure-spec-with-ring-and-swagger/>.
396,1500726986.95821,Lucio,"thanks!; <@Ramonita> another question… Is there a way to “inherit” from a config? For example, let’s say I have a “database” config, and I want to create two services whose configs are slight twist over the general “database” config; a bit like your `:adapter/jetty` example on the Integrant readme; except that you replicate the config (port and handle) under both keys, whereas I would like to share a config block and override some bits; if that makes any sense; (theoretical question anyway, I don’t have a specific usecase)"
396,1500727371.983407,Ramonita,"Not currently, unless you modify the config with either a module or directly after it’s loaded."
396,1500727396.985082,Lucio,So I would need a module that knows about those keys and performs a merge?
397,1500728821.084388,Lesia,"I'm using integrant-repl and reading config from `resources` folder in my preparer function (`(read-config (io/resource ""config.edn""))`) and yet it won't pick up new values for mongodb host when I change them, forcing me to stop and start the REPL. Does this ring a bell to anyone? Any common gotchas?"
396,1500729232.114396,Lucio,"<@Ramonita> ^; Quick question: how can I pass a static function around? E.g. if I try to pass `System/getenv` around I get `Unable to find static field: getenv in class java.lang.System`; (but `(System/getenv ""foobar"")` works); I could pass `#(System/getenv %)` around, but I assume there is a simpler way"
396,1500731042.245466,Margaret,"that's a static method, methods unlike functions are not first class objects supported by the vm; you can't pass something as an argument that can't be put on the stack; that's why you need to create a function, which is an object (with a static method that gets called if you apply it); so tl;dr there isn't a simpler way, that's the way you do it"
396,1500731276.26239,Rosia,<@Lucio> you could check `memfn` as well <https://clojuredocs.org/clojure.core/memfn>
396,1500731341.267377,Margaret,"<@Rosia> that doesn't work with static methods; and it's not any more succinct or efficient than creating a lambda in most cases; (that's what it actually does, it creates a function)"
396,1500731452.276009,Rosia,"oh right, my bad"
396,1500731454.276173,Lucio,<@Margaret> ah I see; I thought there might be something like that going on
398,1500733410.432597,Arlette,"hi all, i am trying to understand how `reduce` works in the following example:
```
user=&gt; (reduce str (repeat 3 ""str""))
""strstrstr""
```
i don't understand why this returns what it does. can someone break down what `reduce` is doing here?"
398,1500733646.451295,Willow,<@Arlette> head to <#C053AK3F9|beginners> and I'll walk you through it
398,1500733672.453266,Arlette,<@Willow> ok thanks!
399,1500737547.788434,Ramonita,"I'd need to see more of your setup. If you're performing a reset, your prep function will be hit; Yes, though depending on your use case, it may or may not be a good idea"
399,1500737832.813198,Lucio,<@Ramonita> yet another question on Integrant… Why is `ig/suspend!` necessary? Couldn’t you do all the logic in `ig/resume`? (naming it `ig/swap` or similar). It seems to only be used when hot-swapping for dev; There are two steps: suspending the system then resuming it with a different config; To do essentially one thing: hot-swap some parts of the running system; (at least that’s the only use of suspend!/resume I have seen yet)
399,1500738196.845408,Ramonita,Consider the case of a web server. Suspend can tell the server to buffer connections until resume is called. After suspend we reload namespaces which can take several seconds.; Suspend and resume are only used for dev
399,1500738247.849558,Lucio,"ah right, so you wouldn’t be able to hot-swap in one go because reloading namespaces while requests are being processed would lead to issues I assume; Ring will buffer requests by default if the handler is a promise?; well, the ring jetty adapter"
399,1500738593.879401,Ramonita,"Yes, because a promise blocks"
399,1500738636.883158,Lucio,"Ah, so if the passed handler is a promise it will try to deref, which will block. ok.; thanks!"
399,1500738850.901568,Ramonita,Right; Suspend and resume are useful for keeping connections open and avoiding restart time during development.; Web sockets for example
400,1500740326.033713,Maxwell,"How are you guys printing the guts of Java objects on the REPL? I'd love to be able to convert any java object to a graph of maps I can easily inspect.
(similar to what the debugger in IntelliJ allows you to do)"
400,1500740388.038977,Kareen,`bean`
400,1500740610.058887,Maxwell,"wouldn't work on non-beans; I tried to make sense of `clojure.reflect` but before I spent my time on that - shall we say - sparsely documented lib, I was wondering if someone had a neat `java-to-map` fn"
400,1500741005.094443,Aldo,I think clojure.reflect/reflect basically does that iirc
400,1500741131.106382,Margaret,"if I recall, bean used to be more general and didn't look for JavaBean specific stuff... let me see if I can find it; ```+user=&gt; (bean (java.util.Date.))
{:day 6, :date 22, :time 1500741217657, :month 6, :seconds 37, :year 117, :class java.util.Date, :timezoneOffset 420, :hours 9, :minutes 33}
```; maybe it's that Date is a bean and I never realized it was?"
400,1500741252.117274,Aldo,"yeah bean looks quite good
```
(bean (HTableDescriptor. (TableName/valueOf ""foo"")))
=&gt;
{:familiesKeys #{},
 :columnFamilies #object[""[Lorg.apache.hadoop.hbase.HColumnDescriptor;""
                         0x124eda1b
                         ""[Lorg.apache.hadoop.hbase.HColumnDescriptor;@124eda1b""],
 :regionReplication 1,
 :memStoreFlushSize -1,
 :name #object[""[B"" 0x19dca84c ""[B@19dca84c""],
 :tableName #object[org.apache.hadoop.hbase.TableName 0x6328ce6a ""foo""],
 :metaRegion false,
 :rootRegion false,
 :compactionEnabled true,
 :maxFileSi... snip
```"
400,1500741278.119846,Margaret,and you could start with bean's source code if you want something that isn't so JavaBean centric
401,1500748337.722062,Georgann,"I don't understand this line in the docs about clojure.spec

""Thus a bare (s/keys) is valid and will check all attributes of a map without checking which keys are required or optional.""

What is it checking if there are no specs to check?

```
(s/def ::foo (s/keys))
(s/valid? ::foo {:yolo 42})
=&gt;true
```; Ah I hadn't read enough. Namespace qualified keys will be checked against their specs"
402,1500750047.860543,Sidney,"Are there any good debuggers that work at the bytecode level? I have cider, but I have an infinite loop somewhere, so I need ‘pause execution’"
402,1500750108.866,Margaret,"cider and cursive have this - to some degree, you need to turn off some clojure features for it to work well; usually I opt for adding (swap! debug-atom conj {:context ::foo :data foo}) in the middle of some function and then use the resulting atom in the repl to figure out what's going on (which does require iterating sometimes to figure out which data you should even be tracking of course)"
402,1500750330.884058,Lucio,"<@Margaret> is there an equivalent of Ruby’s “pry” in clojure? e.g. a way to open  a repl at any point in a program, with access to local bindings?"
402,1500750330.884131,Sidney,I thought cider’s debugger worked by instrumenting and evaling source?
402,1500750427.892261,Margaret,"<@Sidney> I didn't check recently but at one point they were actually using jdx bindings to get into the byte code level - when I saw people claim ""cider can debug like cursive now"" I assumed that meant that feature was working; cursive definitely does byte code level debugging; <@Lucio> that's hard with a compiled language; I don't think that exists, definitely not in a general way"
402,1500750472.896025,Sidney,<@Margaret> that doesn’t look to be in the latest release: <https://cider.readthedocs.io/en/latest/debugging/>
402,1500750521.900043,Margaret,"<@Sidney> oh, clearly I was misinformed and/or misunderstood what I was being told; thanks for the clarification"
402,1500750542.901826,Sidney,"<@Lucio> cider can do that by recompiling functions. Macros get access to all local variables in scope when compiling; i.e. `(let [x 1] (my-dbg (inc x))`, if my-dbg is a defmacro, there’s an extra `&amp;env` variable that contains `{x 1}`"
402,1500750618.908204,Lucio,"Well, I guess I should start using emacs then"
402,1500750646.910438,Margaret,"I find it easier to just use a macro that puts the locals in a hash map, then access it <https://gist.github.com/noisesmith/3490f2d3ed98e294e033b002bc2de178>"
402,1500750649.910658,Sidney,"a bytecode debugger can see the locals in scope, but IIRC the compiler throws away the variable names in the bytecode, so you just get `foo_1`, etc.; and there’s locals clearing"
402,1500750671.912394,Margaret,<@Sidney> right that's the clojure feature I was t alking about - you can disable it
402,1500750678.913039,Tobie,Has anyone used visualvm to profile clojure code?; I cant get it to work
402,1500750688.913856,Margaret,yes - it works but yourkit is much better
402,1500750689.913968,Sidney,try the sampler rather than the profiler; profiler rarely works well for me
402,1500750713.915913,Kareen,"it doesn't; the compiler, I mean"
402,1500750726.917044,Margaret,"but both are somewhat difficult because so much of profiling assumes that the class you are looking at is important, and most of the classes are going to be eg. clojure.lang.PeristentVector"
402,1500750731.917502,Kareen,the local names are right there in the bytecode
402,1500750743.918363,Tobie,hmm
402,1500750749.918777,Sidney,"sure, but at least the sampler comes back with *a* result :slightly_smiling_face:"
402,1500750757.91941,Margaret,it's definitely doable though - I've had a lot of help from profiling
402,1500750758.919477,Sidney,profiler usually takes forever to instrument and then doesn’t work
402,1500750763.919875,Tobie,"well, I've been following the guide written here: <https://torsten.io/stdout/how-to-profile-clojure-code/>"
402,1500750771.920379,Margaret,"<@Sidney> oh, I haven't had that issue; it needs more time to start up for sure though"
402,1500750799.922717,Tobie,but it says Failed to Create JMX connection to target application
402,1500750815.924025,Margaret,then you need to add the args to java to allow jmx connect
402,1500750855.927217,Lucio,is there any good way to debug clojure without using a particular editor? (aka no cursive and no cider)
402,1500750883.929332,Margaret,that's where swapping data into an atom excels; or you could use jdb - if you are familiar enough with clojure internals it can work; but it's confusing
402,1500750923.932512,Lucio,<@Margaret> funnily enough swapping data into an atom is the solution I came up with this morning
402,1500750933.933194,Margaret,"there's an old tool for setting up a ""debug repl"" that kind of worked but it was funky"
402,1500750960.935249,Sidney,<@Tobie> are you specifically trying to get remote profiling working? Local clojure process should just work
402,1500751037.941515,Margaret,"<@Lucio> as a level up from swapping into an atom, I also dump the relevant part so I can use it in a unit test when I figure out what is going on - I made a small lib for this <https://github.com/noisesmith/poirot>"
402,1500751069.943914,Lucio,"<@Margaret> oh yes, you sent that one to me already but hadn’t yet looked into it"
402,1500751146.950775,Margaret,"<@Tobie> oh - weird - I haven't experienced that issue, not sure what that's about"
402,1500751218.957099,Tobie,:disappointed: Ive had this working on a remote process before... something about running it locally is not working
402,1500751966.018293,Sidney,"ok, got `jdb` working acceptably well"
402,1500752130.03121,Tobie,is there any special setup in the project.clj to use YourKit? It seems a lot of feature are missing when i connect to my running repl
402,1500752297.043476,Margaret,you might need to add jvm args to allow the kind of connection it wants; those would be the same args a java program would need; I've had a lot of luck with using the yourkit agent; <@Sidney> I just realized this would be relevant - if you send a signal you can make the jvm print all its stack traces (or you can use jstack from another terminal to get all stack traces by pid) and if you have a loop that isn't exiting a few stack traces should show where that's happening pretty quickly
402,1500753950.172126,Sidney,"yeah, I did basically the same thing using jdb"
402,1500753954.172358,Margaret,I forget the signal name but on *nix terminals its bound to `C-\`
402,1500753962.173023,Sidney,using `threads` and `where`
402,1500753966.173405,Margaret,cool
402,1500754456.211305,Lucio,"Can someone please remind me of the name of the clojure function which does the following: `(f g :a :b :c) =&gt; [(g :a) (g :b) (g :c)]` ?; ah I am stupid, I could just map"
402,1500754485.213422,Sidney,looks almost like `juxt`
402,1500754495.214109,Lucio,but `juxt` is what I was looking for; thanks!; my example was just wrong; thanks <@Sidney>
402,1500754900.243938,Tobie,seems to be working much better than visualVM; its hard to make sense of though; in the sense that it is hard to find which of my functions is taking the longest time amid all the clojure / java functions
402,1500754958.248346,Margaret,"yeah - it takes a while to figure out, I have a long term plan to do a talk on this topic"
402,1500755015.252567,Tobie,sounds good; my code takes 7 days to run ^^
403,1500757849.459724,Lucia,haha! didn't i tell you? :)
403,1500758438.502335,Lucio,"<@Lucia> you did! that’s how I vaguely remembered there was a function for this, but I have the brain of a goldfish today so I couldn’t think of the name"
404,1500763932.858628,Jodie,"Is there a form of resolved keywords which looks into `refer`'d vars? 

```
(ns foo
  (:require [clojure.string :refer [blank?]]))

(println ::blank?)
;; (desired) =&gt; clojure.string/blank?
;; (actual)  =&gt; foo/blank?
```"
403,1500764015.864,Lesia,<@Lucio> there's also `sayid`: <https://github.com/bpiel/sayid>
404,1500764048.866041,Kareen,keywords have no relationship with vars <@Jodie>
404,1500764550.899433,Lesia,<@Jodie> is it something you need for spec?
405,1500765683.973158,Delois,"<@Sidney> Cursive has a bytecode debugger, and you can definitely see the locals (as well as other normally invisible locals created by e.g. destructuring). It also does its best to help control locals clearing.; You’re right AFAIK that CIDER’s debugger is source transformation."
404,1500766177.003265,Jodie,"I figured it would be useful for that, yes"
406,1500771114.29774,Maxwell,"Going back to my question from this morning to introspect a Java object, here's a fn I've written to expose the fields of an object via reflection (clojure.reflect really didn't help).
I've crammed it all into a single fn and it looks quite ugly. Any suggestions on how to improve the code style. I'm still a clnewb?

```
(defn java-&gt;map
  ""Turns fields of a Java object into a map, up to 'level' deep""
  ([obj] (java-&gt;map obj 1))
  ([obj level]
   (when (some? obj)
     (let [c (class obj)]
       (cond
         ;;;(.isPrimitive c) obj never works because clojure implicitly wraps primitives
         (contains?
           #{java.lang.Long java.lang.Character java.lang.Byte
             java.lang.Double java.lang.Float java.lang.Short java.lang.Integer} c) obj
         (= 0 level) (.toString obj)
         (instance? java.lang.String obj) obj
         (.isArray c) (concat
                        (-&gt;&gt; obj
                             (take 5)
                             (map (fn [e] (java-&gt;map e (dec level)))))
                        (when (&gt; (count obj) 5) [:more (count obj)]))
         :else
         (assoc (into {} (-&gt;&gt; (concat (.getDeclaredFields c)
                                      (.getFields c))
                              (filter #(= (bit-and (.getModifiers %) java.lang.reflect.Modifier/STATIC) 0)) ;;; ignore static fields
                              (map
                                #(do (.setAccessible % true)
                                     [(keyword (.getName %))
                                      (java-&gt;map (.get % obj) (dec level))]))))
           :-type c  ;;; add the type as well
           ))))))
```

Examples:
```
(java-&gt;map (java.util.Date.) 4)
=&gt; {:fastTime 1500771066642, :cdate nil, :-type java.util.Date}

(java-&gt;map (java.text.AttributedString. ""bubu"") 2)
=&gt;
{:text ""bubu"",
 :runArraySize 0,
 :runCount 0,
 :runStarts nil,
 :runAttributes nil,
 :runAttributeValues nil,
 :-type java.text.AttributedString}
```"
407,1500777067.639695,Jerold,"I'm having trouble adding metadata inside a macro. It's a bit weird (as usual) since it overrides `defn` in order to capture the ast after compilation, but works otherwise: ```(defmacro defn [name &amp; decls] `(def ^{:ast ~decls} ~name (fn ~decls)))```"
407,1500777167.644839,Margaret,"defmacro never sees the reader macro, it's applied before it sees the form; you need to use with-meta or vary-meta to add metadata to the symbol you emit"
407,1500777215.64744,Jerold,"I did try that, but perhaps didn't do it correctly; (and good call because I definitely don't want this done at runtime)"
407,1500777240.648812,Margaret,`^{:foo :bar} baz ` translates to `(with-meta baz {:foo :bar})`
407,1500777249.649317,Jerold,"right; lemme give it another go and post the results if it doesn't work; ok, so yeah so for some reason the actual `fn` part doesn't compile when i write it like that: ```(defmacro defn [name &amp; decls] `(def ~(with-meta ~name {:ast ~decls}) (fn ~decls)))```"
407,1500777812.677992,Margaret,"nested ~ isn't valid like that; it needs to be one of those positions or the other, not both"
407,1500777884.681621,Jerold,"oh. i tried unquote splicing it, but then got an error on the macro"
407,1500777899.682317,Margaret,splicing isn't valid there either
407,1500777912.683108,Jerold,is it enough to just unquote the expression? that works; but same error when calling the macro
407,1500778025.688655,Margaret,the next problem is that decls isn't going to be a valid data literal; so it needs to be escaped or quoted in some manner
407,1500778081.691492,Jerold,hmm. it worked fine without the metadata
407,1500778109.69298,Margaret,"right but the decls are a data literal in the metadata - so they need to be a valid one; ```+user=&gt; (defmacro defn [name &amp; decls] `(def ~(with-meta name {:ast (cons 'quote decls)}) (fn ~decls)))
#'user/defn
+user=&gt; (defn baz [])
#'user/baz
+user=&gt; (meta #'baz)
{:ast [], :line 19, :column 1, :file ""NO_SOURCE_PATH"", :name baz, :ns #object[clojure.lang.Namespace 0x373ebf74 ""user""]}
user=&gt; 
```"
407,1500778117.693366,Jerold,oh that one; i confused the error message
407,1500778220.69912,Margaret,"wait I think cons ins the wrong way to do that... checking; yeah, my bad ```+user=&gt; (defn baz ([]) ([_]))
CompilerException clojure.lang.ExceptionInfo: Wrong number of args (2) passed to quote {:form (quote ([]) ([_]))}, compiling:(NO_SOURCE_PATH:21:1) 
```; this fixes an issue with multi arities in the original too ```+user=&gt; (defmacro defn [name &amp; decls] `(def ~(with-meta name {:ast (cons 'quote (list decls))}) (fn ~@decls)))
#'user/defn
+user=&gt; (defn baz ([]) ([_]))
#'user/baz
+user=&gt; (meta #'baz)
{:ast (([]) ([_])), :line 25, :column 1, :file ""NO_SOURCE_PATH"", :name baz, :ns #object[clojure.lang.Namespace 0x373ebf74 ""user""]}
```; there's probably a better way to rewrite`(cons 'quote (list decls))` - that's super ugly"
407,1500778423.708939,Jerold,it works if i just do `(list 'quote decls)`
407,1500778432.709309,Margaret,"oh, right, much nicer"
407,1500778471.711241,Jerold,"wow, thanks for explaining that to me as always; definitely would not have picked up on that on my own"
407,1500778505.712902,Margaret,"yeah, there's an art to this stuff, and seeing simple examples makes a difference in learning it"
407,1500778551.715221,Jerold,"tbh i never cared much about macros before the project i'm using this for; it's funny because in scheme i'm pretty sure i'd do some fancy transformation like closure conversion, but that's not possible since clojure is JIT compiled at the function level. but otoh, i don't think i could do it this way with scheme-style macros; now i get to play around with techniques for parsing the asts. i'll check out the muir library, but suspect i'll end up having to hack away at it myself"
408,1500792861.41371,Lizette,"is there a ""built-in"" absolute value function? I couldn't find it on <https://clojure.org/api/cheatsheet> . I came up with ```(if (neg? x) (- x) x)```"
408,1500792953.417607,Martina,`Math/abs`
408,1500793127.425525,Lizette,lol of course; (I'm not a java programmer)
408,1500793271.433533,Martina,"Non-obvious legacy weirdness. `abs` would be nicer; along with `sin`, `cos`, `sqrt`, `pow`, `exp` etc etc"
408,1500793434.441508,Lizette,"indeed; i was definitely expecting `abs`; that would be nice because it could work on longs, floats, rationals, and bignums"
409,1500797279.631457,Felipe,<https://medium.com/technology-nineleaps/clojure-tutorial-ii-packaging-6868849c94cb>
410,1500802910.917006,Lesia,How would you use it?
409,1500808383.208715,Lucio,"oh thanks, that looks interesting"
408,1500818617.848175,Elanor,"spangler: the functional way to do things is to have a clear separation between IO and business logic; you should never be passing resources into your business logic code, and if you're not doing that then this whole discussion is moot; if you are, then you're not doing proper FP in the first place; ghadi: I'm a pretty experienced Clojure developer myself last I checked, and I'm firmly in favor of mount; personally, I think that most component based code isn't proper FP because resources are often accessed within business logic"
411,1500825148.348685,Margaret,<@Lizette> <@Martina>  the rationale of just using java.lang.Math is most people using those things extensively are doing performance critical stuff where the overhead of a clojure wrapper that dispatched on and preserved types would be a problem
412,1500825441.372024,Lucio,"Does anybody have a good online resource / talk / book to recommend to learning clojure’s internals?; Implementation details, how it interacts with the JVM, etc"
412,1500825497.37669,Noella,<@Lucio> I recommend reading through <https://github.com/clojure/clojure/blob/master/src/clj/clojure/core.clj> from start to finish
412,1500825520.378916,Margaret,this talk is decent <https://www.youtube.com/watch?v=6DaBmz_6y0s>
412,1500825537.380731,Lucio,What will this teach me? Doesn’t it just contain the std lib?
412,1500825566.383554,Margaret,"it's everything implementing the language, except the special forms and the parser and the bytecode emitter"
412,1500825578.385024,Noella,It’s an entry point to learn about the internals; see where it calls into java / compiler stuff and dive in from there; here’s another good one about namespaces: <https://www.youtube.com/watch?v=8NUI07y1SlQ>
412,1500825609.388546,Lucio,"<@Noella> ok perfect then, thanks! 7000LOC isn’t so bad actually; Out of curiosity, where is Clojure’s STM implemented? (for refs, etc)"
412,1500825667.395397,Noella,<https://github.com/clojure/clojure/blob/master/src/clj/clojure/core.clj#L2259-L2293>; which calls into <https://github.com/clojure/clojure/blob/master/src/jvm/clojure/lang/Ref.java>
412,1500825890.415993,Lucio,"<@Noella> thank you!; I have a function (`refresh`) which returns either `:ok` or an exception (without throwing it). I am calling `refresh` in a `do` block. If `refresh` returns `:ok`, I would like to continue the execution, but if `refresh` returns an exception I would like to return that exception; I could do this with a `(let [result (refresh)] (if (= result :ok) ...` but  am wondering if there is a more idiomatic way; What the `refresh` function actually does is I think irrelevant to answer my question, but in case anyone is wondering, it’s the one from <https://github.com/clojure/tools.namespace>"
413,1500837039.318971,Alishia,"hey guys, I’m building a bot application as a service (websocket based , slack bots ) using clojure. I’m struggling on how to manage the sockets for multiple users.
using the repl/exploratory code I’m able to connect, receive message and post message to slack, no problem at all, but I’m stuck on how to make it able to multiple users.

that is my function to connect on slack websocket ( will return the ws socket )
```
(slack/ws-connect token
            :on-message dispatch
            :on-error #(.getMessage %1))
```; how can manage multiple sockets on my app ( creating a global map and assoc the sockets there ? )"
413,1500837128.326203,Margaret,"a global map with a unique ID per websocket (and the id also attached to client account, if you have any such concept) is the normal way; that's what eg. sente has under the hood"
413,1500837178.330222,Alishia,"thanks , will do that"
413,1500837213.333364,Margaret,"if you have minimal state to track, you can also just have handler functions that take a request and a websocket object, and call them from the listener you attach to the socket; but if things get stateful at all the map is good"
413,1500837455.353598,Lizette,"that makes sense. one thing it might be useful to have a clojure-defined `abs`, `sin`, etc for is cross-target support. yeah they might be slower but at least the code would work without modification; by cross-target I mean clj, cljs, cljn (is that the .net suffix)?"
413,1500837547.361341,Alishia,"&gt; you can also just have handler functions that take a request and a websocket object, and call them from the listener you attach to the socket
can you pseudo-code that ? didn’t get"
413,1500838710.456961,Margaret,`(defn do-something-for-socket [connection args] (let [result (frob args)] (send-to-connection connection result))`; assuming you get something from the request that you can send data to by some method or function (that's usually how this is set up); Math/foo works for clj and cljs already - not sure what the .net scenario is (since js already wanted to be like java it implemented the math functions with the same api)
413,1500839693.532946,Alishia,"connection is the ws socket, right ?
how the client of `do-something-for-socket` will grab the ws socket ?"
414,1500846691.075069,Danyel,"<@Lucio> if your app is backed by Datomic, I strongly recommend you use an architecture which reifies the execution context, such as Component or Integrant, which will enable you to implement a 'fork' operation on it. <http://vvvvalvalval.github.io/posts/2016-01-03-architecture-datomic-branching-reality.html>"
414,1500846802.083453,Lucio,"<@Danyel> I’ve been toying with Integrant since yesterday, and I was considering Component too :slightly_smiling_face:; “forking” the execution context seems highly non-trivial though"
413,1500847809.162033,Maxwell,I'm trying to create an uberjar for yada and are getting interesting error messages like: 'namespace 'cheshire.factory' not found'; I can compile the code fine; anything obvious I'm missing? (this is with leiningen); only happens when using `{:aot :all}` though
415,1500848955.247053,Berry,"in clojure/jdbc, are all sql statements compiled down to STRINGS, sent to SQL, then reparsed ?; I'm wondering if there is a way to send an AST or something, instead of directly sending the strings"
413,1500849230.27005,Lucio,"<@Maxwell> total newbie here, but is your cheshire dependency in “dependencies”, or under dev dependencies?"
413,1500849315.276662,Maxwell,"it is brought in by yada indirectly, but also when adding it explicitly it barfs when trying to create the uberjar; (and it is in dependencies)"
413,1500849371.281056,Lucio,"I am operating blind here, but lookign at Yada’s project.clj it is under the “test” profile dependencies; <https://github.com/juxt/yada/blob/master/project.clj#L52>; Those dependencies won’t be pulled when running uberjar"
413,1500849412.284177,Maxwell,"yes, looked at that too, but the dependency tree brings it in via `yada/json`"
413,1500849426.285379,Lucio,ah
413,1500849454.287765,Maxwell,"the weird thing is, that error is triggered when aot compiling `cheshire.core`; `Exception in thread ""main"" java.lang.Exception: namespace 'cheshire.factory' not found, compiling:(cheshire/core.clj:1:1)`; even weirder: the JAR file for cheshire in the requested version does have a `factory.clj`"
413,1500849525.292943,Lucio,so I assume you ran `lein deps :tree` and checked that cheshire was there?; and you checked that the right version was the first one in the output?
413,1500849558.295511,Maxwell,"yup, it's there"
413,1500849567.296274,Lucio,(not overriden by another version without factory.clj)
413,1500849577.297061,Maxwell,only happens when doing `{:uberjar with {:aot :all}}`
413,1500849598.298621,Lucio,weird. I don’t know how aot works so I am afraid I can’t help you further :disappointed:
413,1500849643.302311,Maxwell,"yeah, I'm feeling pretty clueless myself. But running `lein deps :tree` has interesting warnings. Looking at those now. Thank you!"
413,1500849697.306307,Lucio,<@Maxwell> make sure that the right version of cheshire appears first in the tree; from what I have been told lein will pick the first version it finds in the list
413,1500849710.307391,Maxwell,there's only one
413,1500849713.307641,Lucio,"ok…; @mention me if you find a solution please, I am curious :slightly_smiling_face:"
413,1500849845.317576,Maxwell,"I will, thanks again"
413,1500850069.335472,Lucio,<@Maxwell> can you Gist me the output of `lein deps :tree` ?
413,1500850088.337004,Maxwell,"<@Lucio> I was able to get it working. I had to exclude cheshire manually and then re-add; I have no idea why that fixed things; i.e. 
```
[cheshire ""5.6.3""]
[yada ""1.2.6"" :exclusions [ring-swagger cheshire]]
```"
413,1500850109.338742,Lucio,odd. Maybe some dependency cache going on; no idea how those things work in clojure/java; oh well
413,1500850131.3404,Maxwell,uberjar seems a bit brittle; but it looks like I can soon deploy something to Heroku and so my Sunday is complete
413,1500850156.342414,Lucio,:100:
413,1500850244.349664,Maxwell,thanks for your help
413,1500850313.355168,Lucio,You’re welcome! Enjoy the rest of your evening
413,1500851607.46454,Daniell,"<@Maxwell> AOT is the root of a lot of problems and is best avoided, if possible. As for dependency conflicts, that's pretty common the JVM world so I'm not surprised you had to add `:exclusions` -- Cheshire is a popular library and lots of other libraries depend on it so you can get any one of a whole bunch of different versions pulled in if you're not careful."
413,1500851633.466725,Maxwell,weird thing here: only yada really asked for it
416,1500855075.782606,Lucio,"Hey, what is the go-to Ring logger? <https://github.com/nberger/ring-logger> ?"
417,1500868526.602834,Krysta,"noob question: ((fn [a b] [a b]) 1 2) eval to [1 2], (#(vector %1 %2) 1 2) eval to [1 2] too, why (#([%1 %2]) 1 2) got clojure.lang.ArityException: Wrong number of args (0) passed to: PersistentVector; and what does (#(-&gt; [%1 %2]) 1 2) mean?"
417,1500868678.624549,Margaret,just like #(+ %1 %2) expands to (fn [x y] (+ x y)) #([%1 %2]) expands to (fn [x y] ([x y])) - #() keeps the outer parens; `-&gt;` is a macro also known as thread-first and it's being abused here to be able to use a vector literal where it would otherwise not work
417,1500868720.630583,Krysta,I got it~ so (#(do [%1 %2]) 1 2) works too
417,1500868740.633443,Margaret,yes - do is better than -&gt; here (in this context do and -&gt; are the same)
417,1500868766.637284,Krysta,"so the [%1 %2] was evaled in place and used as the initial value of -&gt;, but there is no further functions, so it got returned"
417,1500868770.637943,Margaret,"with more forms,-&gt; would be writing each form into the one after it; <@Krysta> exactly"
417,1500868820.645855,Krysta,"hmmm~ I thought about this, but was not very sure~ I thought it was kinda an abuse too~; thanks~ <@Margaret>~!"
418,1500876228.749368,Celestine,Is there any sane way of handling repeated date conversions between java.sql.date and java.util.Date or should I give up and use timestamps instead (if that would be better)?  Every sql update query rotates the date back a full day because of the time zone getting chopped off and re-added.
418,1500877207.932756,Daniell,"<@Celestine> The only sane solution is to have all your servers set to UTC and your database set to UTC, and work entirely in UTC date/times -- and only convert to/from local date/times on the fringe."
418,1500877236.93853,Celestine,I was afraid it would be something like that.
418,1500877246.94041,Daniell,Our data center is East Coast and we have _everything_ set to UTC across the board.
418,1500877292.949649,Celestine,Thanks
418,1500877436.977188,Daniell,What database are you using?
418,1500877632.016448,Celestine,"Postgres.  Wanted to use datomic, but my organization's purchasing rules wouldn't allow it without too many headaches."
418,1500877680.026385,Daniell,I don't know about Postgres but with MySQL you have to explicitly set the DB to UTC separately from the O/S. Just FYI.
418,1500877711.033055,Celestine,"Thanks, I'm digging into the docs now to figure it out."
419,1500880033.574121,Berry,I'm not a big fan of how the javadoc UI works for browing java functions.; Is there a clojure library for parsing javadocs into clojure data (so I can build my own search system) ?
419,1500880367.661943,Weston,"dont think so, that'd be a useful library tho :slightly_smiling_face:"
420,1500887674.124797,Merrie,"greetings,
[finite state machines] can anyone describe the difference between ""composite state"" and ""(sub) machine""?
UML spec says those are basically the same thing, however, there are 2 names, which is suspicious:
```A submachine State implies a macro-like insertion of the specification of the corresponding submachine StateMachine. It is, therefore, semantically equivalent to a composite State. The Regions of the submachine StateMachine are the Regions of the composite State.```"
421,1500891783.611633,Lakia,"I'm trying to ""live at the REPL"" more. One common debugging issue is how to quickly evaluate forms within functions or let bindings, where the symbols are not defined. ProtoREPL has a whole feature around this, and it looks like Cider does too.... (We use Cursive as we've come from a Java shop and deal with lots of Java code still.) Is this something people use a lot? Is there a repl independent approach to this?"
421,1500892609.875263,Delois,"<@Lakia> You should be able to do this in Cursive - if there’s something missing (or if you have a link to some doc about ProtoREPL’s approach to this) I’d be very interested to see it.; You can select any form and that will be sent, or there’s the “Send form before caret” action. Cursive doesn’t do anything clever with missing symbols though, is that what you’re referring to?"
421,1500892776.926639,Lakia,Sorry I meant to quote this discussion <https://github.com/clojure-emacs/cider/issues/1809>
421,1500892948.979135,Delois,"<@Lakia> So that’s sort of what I had in mind. If you send a form for evaluation, I can check if any of its bindings are not defined in that form. I had envisioned a popup dialog when you evaluate the form which would allow you to enter a value for each one. Does that sound like what you had in mind?"
421,1500892980.988918,Lakia,That sounds nice :slightly_smiling_face:
421,1500893002.995586,Delois,Definitely. Could you file an issue for that and I’ll see what I can do?
421,1500893274.07862,Lakia,"I think this is related to tracing though. In protorepl (sorry to mention the competition!) you stick a (save) form in your code and it can remember values flowing through code as a test runs say, and then you can def these values so you can evaluate forms and debug as you go."
421,1500893445.129751,Delois,"No problem at all, ProtoREPL is awesome, it’s by far my second favourite Clojure environment :slightly_smiling_face:; Ok, I see - I think that should be possible. One issue with that is that IntelliJ’s ability to paint things over the editor isn’t as slick as Atom’s yet.; But that’s just a UI issue that can be worked around."
422,1500894129.339902,Cary,"Hi, how to do optimistic locking in `java.jdbc`, write a sql that update by id and version field?"
421,1500894309.394645,Lakia,"<@Delois> I think tools like this would really help the team debug efficiently. Experienced Java developers used to debuggers balk at the debugging approaches we resort to - still generally sprinkling printlns in the code. We know evaluating forms in the REPL is the way, but it feels like it's hard work to be efficient. Not sure if Sayid's approach to tracing, where every function call's arguments is saved is too ""omniscient"" or could be drawn upon? <https://github.com/jasongilman/proto-repl-sayid>"
421,1500894353.407569,Delois,"Sure, I think Sayid is great too - there are lots of different ways to skin the cat.; Cursive does offer a traditional Java-style debugger, FWIW; It works very well, with some caveats."
421,1500894687.503439,Lakia,Yes - perhaps I should stop being so purist and get better at using it!
421,1500894729.515356,Delois,"It’s essential to my work, definitely. Fortunately we don’t have to choose, we can have both!"
423,1500896241.957891,Jong,"hey, I have a function `f` that calls `g`, and `g` calls `f`, how to order `defn's` so the compiler knows about all definitions?"
423,1500896298.974871,Edwina,Declare; `declare` I mean
423,1500896324.983087,Jong,"<@Edwina> that's it, thanks"
423,1500896433.015338,Kristin,"Hello. I'm trying to set up a project for both client and server development, using compojure and http-kit. Since I already had a project going, I decided to modify my own `project.clj` to match the the one I would get using `lein new compojure ..`, but I'm getting some errors from ring regarding jetty. Here is my `project.clj`: <https://gist.github.com/dea054c015658d4ed3295b40b12c8fd5>

Here are the errors: <https://gist.github.com/f3f62cb6633979ebbfb849a8b6b20861>; This is upon running `lein ring server`; I also just noticed that `lein deps :tree` seems to output a good deal of warnings regarding my dependencies. I'm honestly not sure what the best way to fix that would be, so I'll post that as well: <https://gist.github.com/87f04f1805c2cc20e1dee2a9defe0462>; Hmm. This seems to have something to do with datomic. I added exclusions like this: `[com.datomic/clj-client ""0.8.606"" :exclusions [org.eclipse.jetty/jetty-http]]` and eventually got it to run. Now the `lein ring` server starts but attempting to connect to it just results in a connection reset"
424,1500898382.638688,Lucio,"Why does `(if-let [x y] ...)` expands to
```
(let*
 [temp__4655__auto__ y]
 (if temp__4655__auto__ (clojure.core/let [x temp__4655__auto__] ...) nil))
```
and not to
```
(let [x y]
  (if x ...))
```
?"
424,1500899327.975497,Fe,so that `x` doesn't have to be re-evaluated multiple times; Different question: Is this an ok way to access both the first arg and all args? `(fn [&amp; [head :as all]])`
424,1500899488.034728,Lucio,how would x be re-evaluated multiple times in that scenario?; <@Fe> ^
424,1500901173.722944,Fe,"```user=&gt; (macroexpand-1 '(if-let [x (do (prn :foo) true)] [x x] (prn :no)))
(clojure.core/let [temp__6751__auto__ (do (prn :foo) true)] (if temp__6751__auto__ (clojure.core/let [x temp__6751__auto__] [x x]) (prn :no)))```; i.e. in cases where `x` is used in the body of the if-let"
424,1500903285.797023,Lucio,"<@Fe> it still wouldn’t get evaluated multiple times with
```
(let [x (do (prn :foo) true)] (if x [x x]))
```; ?"
424,1500904209.315227,Fe,isn't that pretty much what the actual implementation does?
424,1500904357.404142,Kareen,<@Lucio> that binds `x` in the else branch; `if-let` doesn't; that's what the extra local binding is for
424,1500904380.417813,Lucio,"<@Kareen> oh, I see. that makes sense; thanks!"
425,1500907283.244153,Lucio,"I am getting a StackOverflow error when trying to use log4j with Leiningen, could someone please take a look at the stacktrace? <https://gist.github.com/hmaurer/40c1bc6d08550222f65e06a6366f0eb9>; fixed it by removing a few dependencies… still strange though, I would like to understand why simply adding dependencies to project.clj could cause a stackoverflow error when launching the repl"
426,1500907925.662452,Alejandra,"Hi everyone, I've been doing some experiments on visualizing clojure.spec fails and ended up wrapping them in a library"
425,1500907928.664542,Alejandra,<https://github.com/jpmonettas/inspectable>; maybe it's useful to someone else
426,1500910853.596818,Kristin,"Given that I have figwheel set up to use a ring handler via `:ring-handler`, and that handler is also set to auto reload via `ring.middlware.reload/reload`, is there some way I can make it reload *everything*? Basically restart the whole deal. I'm working with a library called `sente` which is for websocket communications, and it doesn't look like the code that initializes everything related to that is being re-run, so it's kind of painful to iterate."
426,1500911089.748466,Alejandra,what I do is put all the code that has a lifecycle into <https://github.com/stuartsierra/component> so I have a way to restart the entire thing
426,1500911222.834254,Kristin,"<@Alejandra> Hmm, alright. I'll see if I can whip something up that works. Thanks :slightly_smiling_face:"
426,1500911274.867948,Alejandra,"don't know if you are currently using something like components or mount; but I've done that with sente; you create something like a web-server component, and in the start/stop of that component you start/stop http-kit server, sente channels etc"
426,1500911404.953033,Kristin,"Nah, not using anything like that. I'm pretty new to all of this, so still trying to figure out best practices and what people are doing etc.

Okay, I see. Is it possible to get that to play well with figwheel using `:ring-handler`?"
426,1500911538.042658,Alejandra,"I mean, if you move all the stuff that deals with state into components, and then create a system(a bunch of components) you end up with a restart fn you can use wherever you want; I never fired it from that reload middleware but can't see any issues with that"
426,1500911616.093384,Kristin,I see. I guess I just don't quite grok how all these things work together. But I'm sure I can come up with something from what you've told me. Thanks!
427,1500920075.121262,Jasmin,does anyone have a pro-tip/link to an example of using core.async with ring? or some other http server? like how does one wait for input on a channel and flush said result to a response?
427,1500920197.192755,Margaret,"aleph actually has an async request handler infrastructure - and it uses manifold that is designed to integrate easily with core.async; if you use eg. jetty your async code will run but there will still be a blocking thread per request until you respond; the real question I guess is why you are using async, then you can use that answer to guide how you integrate that with a ring server; for the go-loop as you show it, you end up with a single block of code that can only deal with one request at a time - there’s valid reasons to do this sometimes but it’s a pretty severe bottleneck"
427,1500920359.287478,Jasmin,awesome - I will look into aleph. I was thinking of using core.async as a general abstraction on input/output; something like that
427,1500920412.31809,Margaret,"when I say “one request at a time in the block” I mean globally, only one of your requests can be in that block - so if you have five concurrent clients, it takes 5x as long to complete; which usually isn’t the kind of behavior you want in a web server at all"
427,1500920444.337186,Jasmin,yeah :confused:; trying to figure out how to use the results of `(&gt;! out)` in that example
427,1500920491.365419,Margaret,"with manifold, you can set up a function that gets called with an input channel and an output channel, and it is instantiated as many times as you get requests, which is a more reasonable pattern of behavior"
427,1500920547.398668,Lucio,"Is there a way to quickly run tests when a file changes? Manually running `lein test` takes about 10s to boot for me, and using <https://github.com/weavejester/lein-auto> take the same time; I assume the delay is coming from the jvm boot time, but I don’t know how to avoid it"
427,1500920592.424797,Margaret,"<@Lucio> fyi lein test just uses clojure.test, and you can require that and run `(clojure.test/run-all-tests)` in your repl (after requiring your test namespaces of course)"
428,1500920608.433871,Aldo,"<@Lucio> I'd recommend running tests from a persistent repl, and using something like clojure.tools.namespace to ensure code is reloaded and up to date"
427,1500920621.441858,Margaret,you could hook up the run-all-tests to run as part of your system refresh if you have such defined
427,1500920640.452761,Lucio,"<@Margaret> ah, good point. Thanks!; thanks! hadn’t thought of that"
427,1500920711.49439,Aldo,"fwiw, I always have something like this in user.clj
```
(defn run-unit-tests []
  (repl/refresh)
  (test/run-all-tests #""^project-ns.*$""))
```"
427,1500920712.495255,Lucio,are there any “good practice” I should be aware of regarding testing clojure? (either tools/libs or approaches). Or should I just get started with clojure.test?
427,1500920728.50471,Aldo,I also use Cursive to run single test files a lot
427,1500920784.537447,Lucio,"Also, is it advisable to place pre/post conditions on every “core”  functions of an app? Including spec checks on arguments.; <@Aldo> I am trying to avoid Cursive for now to get a first-hand experience on clojure, and not have too much hidden behind IDE magic; but I’ll definitely try it out at some point"
427,1500920861.583496,Aldo,"that's fair, and to do what cursive does without cursive it's basically just (do (repl/refresh) (test/run-test ...)); repl in this case is clojure.tools.namespace.repl and test is clojure.test"
427,1500921067.704141,Lucio,"<@Aldo> yep, right now I have a function “reload” which calls clojure.tools.namespace.repl/refresh, as well as restarts my system; I guess I can just run the tests there"
427,1500921365.878115,Margaret,"one thing to keep in mind is that testing functional code is easier than what you are probably used to; good functional design in general separates the mutable / side effecting source and sink of your data from the immutable guts; if you do that right, you can unit test the immutable guts easily, and separately verify that the mutable input and output logic works; where the input and output would likely be integration tests, or even better they can be verified by the tests on the separate code implementing the i/o"
427,1500921478.943565,Jasmin,aleph + manifold seems to be the ticket. many thanks for pointing me in that direction :slightly_smiling_face:
427,1500921519.967058,Margaret,"<@Lucio> what that looks like in the big picture is a bunch of immutable code that does no io or side effects, and a top level “driver” that connects that to data - which can easily be subbed out by a lambda or direct function argument in your test"
427,1500921609.017957,Lucio,"<@Margaret> Ok, I’ll try to follow that idea. I have done some FP before so it’s not completely unfamiliar. The app I am currently working on is very much CRUD, so I don’t think there will be that much distinction to make betwen i/o code and pure functions (almost everything does i/o); Last but not least, is Midje worth looking into?"
427,1500921635.032941,Margaret,"I don’t like midje at all; some people like it, especially if they are used to that kind of dsl for testing"
427,1500921690.064703,Aldo,I like midje. but it wasn't widely embraced and the lead developer is done with clojure. I would not start a new project with it
427,1500921691.065298,Lucio,"so according to you, clojure.test is all I need to get going?"
427,1500921714.078182,Margaret,"yeah - but there are some nice additions to it, like difftest"
427,1500921734.089027,Lucio,where is he gone to?
427,1500921744.095284,Margaret,expectations is decent too
427,1500921749.098012,Sandy,Elixir
427,1500921780.116009,Lucio,"Alright, thanks! Also, what’s your stand on using pre/post conditions on functions. Is that something that should be done?"
427,1500921802.128758,Sandy,"I'd stick with spec for that sort of thing, it's pretty much pre/post v 2.0"
427,1500921834.146736,Margaret,"I found problems where they were being missed at dev time and caught things at run time, and they throw AssertionError which our try/catch blocks weren’t catching which led to annoying hard to debug failures; (especially inside futures and go blocks)"
427,1500921894.181703,Sandy,"on the subject of testing though, what I like in a testing lib is utter simplicity. A testing framework really only needs to be about 100 lines of Clojure code. Clojure.test is about 500 but that's mostly cruft that could be stripped out (by breaking backwards compatibility)."
427,1500921947.212582,Margaret,"yeah, I find if something is hard to test with clojure.test that’s a sign my code is too “fancy” for its own good and the easier to test code is better"
427,1500921999.242466,Sandy,"Also, if you find code that re-defs vars for testing/mocking that's a bit of a code-smell, imo. It's not always avoidable, but the cases when you need `with-redefs` or the like should be really rare."
427,1500922153.3313,Lucio,"<@Sandy> good point, when I read about with-redefs it did seem to be like a “better avoid if possible” construct"
427,1500922200.358901,Sandy,<@Lucio> what editor are you using?
427,1500922205.361692,Lucio,"regarding the short test lib I just wanted to make sure. Some other languages tend to have rather large “testing frameworks”, and while clojure.test seemed enough it felt a bit like cheating; <@Sandy> Atom at the moment"
427,1500922218.369865,Sandy,Some like Cursive (and I think Cider as well) have keybindings for running tests via a IDE command
427,1500922224.373531,Lucio,Intentionally avoiding deep editor integrations (Cursive and Cider) for now
427,1500922263.396207,Sandy,"fair enough, so yeah, you can send across run-all-tests or write some sort of editor macro that dumps that into a repl for you; Something like that could be coded with emacs+inferior lisp with about 10 lines of code, so I assume Atom would be close to the same.; I also bind CTRL+` to ""send the sexpr under the cursor to the repl"". That's also a big time saver."
427,1500922354.449447,Tori,I’ve been using Midje lately but have found some bad issues. One being dependency errors get swallowed and are a pain to fix.
427,1500922563.571272,Sandy,"For better or worse, Midje is a DSL, your tests aren't written in Clojure they're written in a Midje testing language. And yes, that can be the source of a lot of confusing errors."
429,1500922829.726537,Tori,What do you use?
427,1500922974.809552,Aldo,simplicity is great but it kind of sucks that midje had better tooling baked in 2 years ago than exists for clojure.test at all today
429,1500923012.830326,Sandy,what sort of tooling?
427,1500923030.840101,Aldo,"the midje repl tools, autotest for one"
427,1500923054.853613,Sandy,As mentioned things like auto-runners are a bit pointless in Clojure because there shouldn't be a reason to restart the repl
429,1500923068.861203,Aldo,eh?
427,1500923072.862945,Sandy,it's more of a design difference than a lack of tooling.
427,1500923075.865087,Aldo,the midje autotest ran at the repl
427,1500923118.889138,Sandy,"interesting, I never had it running that way, but honestly I'd be a bit nervous of something auto-running my code whenever I change it."
427,1500923127.894352,Aldo,"midje: at repl (midje.repl/autotest)
clojure.test: ? need some leiningen plugin thing which is bound to break with other lein plugins"
427,1500923140.901225,Sandy,"Woudln't want to accidentally type `(sh/sh ""rm -rf foo"")` then accidentally delete 3 characters from that string ^^"
427,1500923201.93426,Aldo,"... I mean. test autorunners have been around since junit and I've literally never heard of someone managing that (not saying it's not possible, but sheesh)"
427,1500923249.959632,Sandy,"So to make it a bit more concrete, my workflow is this: 
* Edit some code
* Send it to the repl with either ""send form"" or ""reload current namespace in repl""
* Test the code I just sent by hand, normally with a few bits of code I keep in a `(comments ...)` block
* Once it appears to work, I switch to the test namespace and re-run all the tests, or maybe just the tests I care about (keybindings for that); But with a REPL you end up doing a lot lest test-driven development. It's not ""write test"", ""write code"". It's more like ""write spec"", ""write code"", ""play in repl"", ""fix code"", ""write a test if it needs to exist""."
427,1500923326.000669,Aldo,"that is also my workflow, but having worked with good autorunners before I can say from experience a good autorunner is still an improvement to that workflow"
427,1500923363.020492,Sandy,But how much time does that save? Like 3 sec every 10 min?
427,1500923427.053963,Aldo,"I mean, that would add up to quite a lot over a year programming; honestly if it worked well it would probably add up to more though. my test suite takes longer than a 3s difference between the full suite and the ""tests affected"" set for most things"
427,1500923578.135444,Sandy,"That's kindof my point though, when I'm trying to fix a specific bug, I run all the tests, then pick one failing one, and make that work. Whenever I make a code change I rerun only that single test."
427,1500923656.177334,Aldo,which is what an autorunner does for you. I'm not sure I understand the objection to having the computer do it instead of doing it yourself
427,1500923667.18325,Sandy,"Because the computer won't do it right; And if there's one thing that utterly kills my productivity, it's making a change and then seeing that a test didn't pass due to stale code."
427,1500923751.228364,Aldo,"when I used these things back in ruby days, the vast majority of the time it did. when it didn't there was nothing stopping me manually intervening"
427,1500923759.232568,Hiram,There are more people maintaining Midje after Marick (we are big users of it where I work at).
427,1500923770.238434,Sandy,"Stuff like Java imports of deftypes, global state, multimethod dispatch functions, etc. All those things break most autorunners (even Midje in some cases)"
427,1500923790.249609,Aldo,"those things break everything. tools.namespace, the repl, etc etc"
427,1500923801.254959,Sandy,"not the repl though; the repl only does what I tell it to, so whenever I change a form I reload it. or the entire namespace."
427,1500923906.310667,Aldo,"that's not going to help you with any state referring to the old protocol. this is a well documented annoyance. whatever, fine, it all works perfectly for you. I'm just saying I've done the clojure workflow both with a good autotester and without and it was better with one; (for me)"
427,1500923930.323189,Hiram,"While I can't speak for the future, in the short term it should be up-to-date."
427,1500924805.786361,Shavonda,"lazy question: <@Daniell> is there any notion of ""business time"" in clj-time?"
430,1500924848.808643,Shavonda,in my past ruby life I used this: <https://github.com/bokmann/business_time>
431,1500926844.89391,Sandy,"<@Tori> clojure.test. And I wish it was simpler :slightly_smiling_face:; All a testing lib really needs is deftest (that generates a tagged function), some sort of smart assert, and a `run-all-tests`"
431,1500926986.971523,Daniell,<@Tori> I'll put in Expectations which is more BDD in style than `clojure.test`'s assertion-based format -- and now supports all the `clojure.test` tooling.; There's an <#C2L9MU2RY|expectations> channel if you have any questions.
431,1500927813.414969,Jodie,How is this? <https://github.com/aruberto/business-time/blob/master/README.md>
431,1500928394.733098,Jaye,"&lt;deleted&gt;; Ah, sorry, I guess I’ll delete that and post it to <#C1B1BB2Q3|clojure-spec>"
431,1500928975.041051,Daniell,"Using that with <https://github.com/dm3/clojure.java-time> ought to get you what you need, fairly cleanly.; FYI, at World Singles, we're slowly migrating away from clj-time to clojure.java-time (or just using Java Time directly)."
431,1500929241.184465,Jodie,That's interesting. We've been making a similar move too.
431,1500929391.263297,Noella,"I have a Clojure design problem which I’d love some feedback on. I have a `SeriesStore` record and corresponding `SeriesStore` protocol. There are different stores for different accounts etc, so I need some way to create these stores. I’m considering two options:
1. Have a regular fn that is a closure around all dependencies of the store, and then pass that fn around
2. Create another record which contains all the dependencies, e.g `SeriesStoreFactory`, and then pass an instance of that record around.
i.e regular fn closure vs. record, which is preferable and why?"
431,1500929442.290962,Daniell,"See this <https://github.com/clj-time/clj-time/issues/196#issuecomment-294067755> -- and read the whole thread for background. It is a discussion around moving `clj-time` to JSR-310 and the pros and cons... and why, ultimately, I came out against the switch of implementation and why I would encourage folks to use `clojure.java-time` _instead_ of `clj-time` if they want to switch from Joda Time to Java Time."
431,1500929693.426761,Sandy,"Records almost always win <@Noella> for the simple reason that functions are opaque. Once you close over something with a function there's no way to introspect the closure to see what you closed over.; Sometimes you need that for debugging, other times just to do `keys` or to otherwise get the state out inside some function."
432,1500929873.524616,Amado,"hello everyone while using `clojure.test` its possible to share data between tests?

something like

```
(def data (atom :none))
(deftest t1 ... (reset! data 10))
(deftest t2 ... (do-stuff 10))
```"
431,1500929907.542257,Amado,(do-stuff data) *****
431,1500929956.568894,Lucio,"If I wish to set up some data that should be accessible to all tests (either set up once before all tests or set up and tear down before and after each test), how can I do it with clojure.test? with-fixtures doesn’t appear to let me pass data down to the test. I could use a global atom but that seems nasty"
432,1500929969.576226,Lucio,"<@Amado> oh wow, haha, I hadn’t read your message before posting"
431,1500929974.57867,Lucio,looks like we have the exact same question
431,1500930012.599692,Noella,"<@Sandy> sounds reasonable. but sometimes you want it opaque though? my main concern with records is that I want to keep it as functional as possible, and I worry that my code will start to look like OO if there are too many records all over the place. what’s your experience on striking the right balance between records and fns?"
431,1500930089.642895,Aldo,<@Noella> records are still immutable. they're still functional
431,1500930115.657331,Bonny,"<@Noella> in clojure Ive never been like, I wish I had less information at my disposal"
431,1500930123.661849,Sandy,"Right, you got to separate out ""is a protocol"" from ""looks like OOP"""
431,1500930144.67294,Aldo,"polymorphism is orthogonal from ""functional"" imo"
431,1500930146.674064,Bonny,also I would recommend checking out stuart sierra's component or weavejesters integrant
431,1500930169.685692,Sandy,"OOP = information hiding, local mutation, and inheritence; records and protocols don't do any of that."
431,1500930221.712459,Noella,"true, true. and I actually have polymorphism in this case, so I’ll go with records. thanks for the input!; <@Bonny> I’ve tried the whole gamut of state management libs in clojure, I’m currently experimenting with <https://github.com/vspinu/commix> which I think is fantastic so far!"
431,1500930271.738269,Bonny,":slightly_smiling_face: there are alot, I havent even heard of this option"
431,1500930285.745268,Noella,It’s less than a week old :smile:
431,1500930292.749104,Bonny,sounds ready for production to me
431,1500930323.764258,Noella,"I wouldn’t, but hey, I won’t judge you :wink:"
431,1500930347.776067,Sandy,Better than most node libraries! #burn
431,1500930355.780453,Bonny,&gt; Commix was built as a response to a range of limitations in Integrant which in turn was designed to overcome limitations in Component.; turns out dependencies are hard?
431,1500930391.798047,Lucio,"I’ve been using integrant for a couple of days, it has been great so far"
431,1500930411.807963,Bonny,I liked it as well when I compared it with component
431,1500930438.821493,Noella,"I tried using Integrant but I immediately found myself working around it instead of with it, then I stumbled over commix here: <https://github.com/weavejester/integrant/issues/21>; I recognized some of the problems I encountered in the “differences from Integrant” section; anyways, more options on the table, more innovation = win for everyone"
431,1500930700.94627,Lucio,Does anyone have a recommendation for me on how to share some stuff between tests? e.g. a database connection
432,1500931202.181585,Amado,"well if is something static i think you can just

```
(def db-spec (..))

(deftest test
   (jdbc/query db-spec ..))
```

i really would like to know how i can share data that is produced by one test in another test"
431,1500931228.193856,Lucio,<@Amado> why would you want to do that?
431,1500931476.308992,Amado,"im trying to do some sort of all-or-nothing integration api integration test

imagine that i do a request to create an user, and it returns me an id
afterwards in another test id like to user this id to create a bank account for this user (or something like that)"
432,1500931562.349497,Lucio,"<@Amado> ah, I was planning on doing the same thing. It seems to me this should be done within one test block? I don’t think there are much guarantees as to in which order tests will run; and you would rely on order there"
431,1500931643.385879,Amado,"im trying to avoid a giant let with tons of implicit tests, but i seems that i got no other option"
431,1500931725.423252,Lucio,"<@Amado> I am a newb, but what do you think would be the issue? You can nest `testing` calls to create context"
432,1500931738.429119,Aldo,dynamic vars and a fixture would be another option but probably not a very good one
432,1500931742.430689,Lucio,"and from what I just inferred from the source of `testing`, it returns its last expression"
431,1500931749.434029,Lucio,so you could use that to pass values around
432,1500931751.435055,Lucio,not sure though…; like
432,1500931839.474864,Amado,the last line of deftest is returned?
432,1500931881.493714,Lucio,"```
(defn- create-user-account []
  (testing ""Create a user account""
    (let [user-account (app/create-user-account)]
      (is (= ....))
      user-account)))

(defn- create-bank-account [user-account]
  (testing ""Create bank account""))

(deftest scenario-1
  (let [user-account (create-user-account)
        bank-account (create-bank-account user-account)]))
```; I don’t know if you can use `testing` outside a deftest though; if you can’t, just move it to within the deftest; I haven’t tried it though, and completely new to clojure.test, so don’t take my word on it; do you have a better option? dynamic vars is all I can think of"
432,1500932085.582584,Amado,i wanst aware of the `testing`  function / macro; will check it out thanks :smile:
432,1500932143.607766,Lucio,"<@Amado> I just tried to use `testing` inside a `defn-` function called from a `deftest` and it worked, but the doc says `May be nested,
but must occur inside a test function (deftest).`, so I am not sure how to take it"
432,1500932160.614759,Aldo,unless there's a serious desire to split the tests across multiple files I would go the huge let block over the dynamic vars
432,1500932162.615431,Lucio,maybe it means it will work so long as it’s called within the callstack of a `deftest` function; or maybe I am doing something very wrong :smile:; <@Aldo> huge let blocks can’t be shared across tests though; no?
432,1500932381.70841,Aldo,"if they can't I wasn't aware of it; well they can't be shared across deftests I guess, but they can be shared across assertions"
432,1500932424.726429,Lucio,<@Aldo> would you mind showing me a quick example?; oh right; is it common to have a lot of `testing` blocks under a single `deftest`?
432,1500932447.735962,Aldo,"I guess I'm generally a bit ambivalent about the difference between ""tests"" and ""assertions"". I don't really care about the granularity; I don't know about common, but I would prefer it over fixtures populating dynamic vars"
432,1500932531.770245,Lucio,"+1. I agree, the granularity is a bit confusing; thanks!"
432,1500933085.997742,Daniell,"<@Lucio> I just did a `macroexpand` of `(testing ""foo"" body)` and it looks like it relies on dynamic calls for context so I _think_ you're OK -- but it's definitely a bit unorthodox."
431,1500933112.008769,Daniell,"```(macroexpand '(clojure.test/testing ""foo"" (something)))``` =&gt; ```(let* 
 [] 
 (clojure.core/push-thread-bindings 
  (clojure.core/hash-map 
   (var clojure.test/*testing-contexts*) 
   (clojure.core/conj clojure.test/*testing-contexts* ""foo""))) 
 (try (something) (finally (clojure.core/pop-thread-bindings)))) ```"
432,1500933386.120587,Lucio,<@Daniell> so deftest sets a dynamic var which is available anywhere within the callstack during its execution?; thanks for checking it!; do you have a better suggestion to do what I was trying to do? (split a test in this way); is it “not ok” for some reason to split a test in multiple functions that way?; it seems that it improves composability
432,1500933984.358478,Daniell,"I haven't seen it done that way before -- so it looks unfamiliar -- but if `clojure.test` manages all of its testing context dynamically, I guess it's fine. I guess I would have a specific test for each creation function that asserted whatever behavior I expected (and cleaned up after itself), and then in the main test I'd just call the creation functions without worrying about `testing` or `is`...; In other words, I'd only have ""one"" test for those common things, rather than repeating the tests every time they are called."
432,1500934096.398236,Lucio,"Ah, I see."
433,1500935157.758247,Jodie,How should a regex look for the `:aot` option in leiningen?
432,1500935239.784985,Jodie,The way I used it seems to have no effect
433,1500935519.876554,Rebeca,"are you sure you want to aot compile?; if you don't have :gen-class in a ns form, compile is a nop, and if you don't have gen-class I doubt you really want to aot compile"
433,1500935665.922522,Jodie,"<@Rebeca> I'm sure. I'm trying to minimize startup time in resulting jar.; I noticed that most ns don't necessarily get aot'd, when I stripped out clj files jar started to fail"
434,1500937342.436391,Deloras,"does anyone know of a library for doing set-like operations (`intersect`, `union`) on possibly infinite sets?; f.e. `(set/union inf/all #{1}) =&gt; inf/all` or `(set/intersect inf/all #{1}) =&gt; #{1}`; I'm crawling through a clojars search but figured I'd ask"
435,1500938379.731967,Rebeca,I suspect what you want is a symbolic logic library
434,1500938752.83267,Deloras,"how so?; I didn't find anything in my quick searching, but rolling my own shouldn't be too hard; just gotta figure out what infinity looks like"
434,1500938900.872666,Rebeca,"oh, just because that is a more logic based representation of a set vs. a datastructure"
434,1500938918.877766,Deloras,"ah; for my use case, 95% of the time it'll fall back to regular set ops; can you recommend a good primer on the topic of symbolic logic programming?; the core.logic readme mentions _The Reasoned Schemer_"
434,1500939876.12946,Rebeca,"core.logic isn't really that, the little prover (which shares an author) would be more like it"
434,1500940047.172617,Deloras,thanks; I actually have enough time to read this before I have to tackle this problem for real
436,1500968103.88987,Danyel,"<@Lucio> re: tests, you may want to watch this: <http://2017.clojurewest.org/full-stack-teleport-testing/>; youtube video: <https://www.youtube.com/watch?v=qijWBPYkRAQ>"
437,1500977512.38566,Harrison,does anyone have any idea how to encode the `::selection` selector in `garden` ?; ah.. need to define a pseudoselector.
434,1500981289.598899,Lucio,I have seen it. Mind-blowingly awesome. It’s on my todo-list to implement something similar :slightly_smiling_face:
437,1500985964.182765,Gerda,cljr for Clojure CLR
434,1500991212.888056,Lucio,Is it a common/recommended practice to add tests as metadata directly on functions?
438,1500991689.197684,Merrie,"I can't `apply` macro, can I?; I essentially want to 
```
(let [specs [:a :b]]
  (apply clojure.spec.alpha/cat (interleave specs specs)))
```
what my options are?"
438,1500991978.381872,Jodie,write a macro to do it :disappointed:
438,1500991993.390981,Weston,or eval
438,1500991994.391671,Corine,Nope. See <https://stackoverflow.com/a/9273469>
438,1500991999.394821,Weston,pick your poison :slightly_smiling_face:
438,1500992054.430436,Merrie,"oh, wait, there is a ~@"
438,1500992067.438997,Weston,"```
(let [specs [:a :b]]  (eval `(clojure.spec.alpha/cat ~@(interleave specs specs))))
```"
438,1500992068.439521,Merrie,"forgot about it; exactly, thanks; wait, why eval?; ah, it's not wrapped in macro."
438,1500992150.493383,Weston,"yep, I prefer eval personally for that stuff. a macro def will stay here in all its uselessness after you used it to generate your spec; depends if you need to do that a lot or not"
438,1500992213.534166,Merrie,"I wanted a macro initially, because I have too many `s/cat`s where I basically reuse spec names as dispatch keys; figured I'd try to just re-use spec names instead of coming up with throw-away names time and time again.; <@Corine> thanks, I just forgot about ~@ splicing. it's all good now; while we are on macro subject: how do grown ups validate macro's input (e.g. with spec)?"
439,1500995916.010151,Jodie,I use spec lately. asserts are great too though.
438,1500995962.041907,Sonny,<@Merrie> s/conform
439,1500996001.068616,Sonny,"will give you the destructured version. if it’s ::s/invalid, then s/explain."
438,1501001631.786602,Merrie,"is there a way to get fn's arity? like
```
(arity filter)
;; =&gt; [1 2]
```
actually I am not even sure why I am asking this :dafuq:"
438,1501001824.905102,Sonny,no
438,1501002627.396032,Nilda,"<@Merrie> In cljs, you can do `(.-length (.-constructor (.-prototype render)))`"
439,1501002652.410195,Nilda,"Where `render` would be the function, for example"
439,1501002726.453077,Efrain,If function was defined with defn - `(:arglists (meta #'filter))`
438,1501002784.4867,Nilda,Or why not `(-&gt; render .-prototype .-constructor .-length)`. We’re not barbarians after all.
438,1501002801.496127,Berry,"anyone else find code written via reduce to be ""obfuscated"" ?"
438,1501002826.510434,Nilda,<@Berry> Example?
438,1501002829.512205,Berry,"for some reason, when writing code involving reduce, it's always:
1. how can I write this imperatively ?
2. then I reformulate it as reduce; <@Nilda>: no concrete example, just that most of the time, I want to do:
```
(let [state (atom ...)]
  (doseq ...))
```; then I end up ""inverting"" the doseq / modification to the @state atom in order to get my reduce code"
438,1501003050.640829,Nilda,"<@Berry> There’s nothing inherently wrong with that, in my opinion. For me, it’s a quite common pattern that I pull out the transducers once I start noticing boilerplate and repeating patterns in the code."
438,1501003110.675969,Berry,"<@Nilda>: have you used Haskell? the haskell solution to this would be the 'state' monad, then an external sequence_"
438,1501003163.705808,Nilda,"<@Berry> Unfortunately I haven’t used it beyond the tutorial on the home page (which is quite nice); `map` does seem to be easier to visualize than `reduce` though. I think `map` corresponds more to everyday patterns of life. You can imagine walking along a row of potted plants and watering each for example, getting a row of watered plants.; But what would be the `reduce` version of that? Repot them in one large pot, one plant at a time?; But also, the order in which they were repotted would somehow matter. I don’t know, it’s not _as_ straightforward."
438,1501003486.899453,Lizette,<@Berry> in Haskell how would you solve the problem?
439,1501003499.90709,Lizette,`foldr` over a sequence?
438,1501003527.924462,Lizette,(I'm just curious)
438,1501003536.92967,Berry,"<@Lizette> : I would write the code ""imperatively"" with putState / getState, then  put it on a do block + use sequence_ if there's a list"
438,1501003574.952448,Aldo,I find it easier to go `write using loop/recur` -&gt; `refactor to reduce`
438,1501003590.96269,Berry,"the point is that the code goes something like:
```
s &lt;- getState
... do some processing ...
putState s'
```

but then the reduce somehow causes me to ""invert"" the state manipulation"
438,1501003602.969635,Aldo,"generally, than doseq. because that way you just delete a bunch of code and change some keywords. refactoring doseq and atom updates is annoying"
438,1501003637.990815,Berry,"<@Aldo> : loop/recur is definitely closer to reduce than doseq/atom; nevertheless, it seems that in an otherwise clean language, there's this mismatch between ""mental thought"" and ""how code has to be written""; or maybe I just haven't mastered reduce idioms"
438,1501003742.054915,Aldo,mmmmmm my assumption is that that mismatch is just a result of spending so much time in imperative languages. I definitely find myself having to go through that interim step a lot less than I did 4 years ago when I moved ruby-&gt;clojure. could be wrong though
438,1501003801.091107,Berry,haskell is not exactly '; imperative' -- some would say it's even more 'functional' :slightly_smiling_face:
438,1501003829.109496,Nilda,<@Berry> Is there no notion of `reduce` in Haskell though?
438,1501003839.115125,Margaret,that’s foldl
438,1501003843.117779,Aldo,"there is, and it would be considered *way* more idiomatic than using the state monad"
438,1501003846.119631,Berry,"haskell definitely has foldl / foldr, but it also has state monads + sequence_"
438,1501003870.133923,Margaret,"and it’s provable that everything you can do via state manipulation you can do in a left fold / reduce, it’s just a different code pattern to do it"
438,1501003879.139619,Berry,"I would say, any time you're bashing state, state monad is more idiomatic than folds; and with reduce, the initial value is basically your 'local state'"
438,1501003893.147737,Aldo,"the state monad is a ""purely functional statically typed"" math trick around writing an imperative looking thing and still keeping it pure"
438,1501003987.20487,Berry,"yeah, I guess 99% of the problems I have with clojure is: it doesn't have haskell's type system :slightly_smiling_face:"
438,1501004007.216877,Aldo,"funny, that's my favourite thing about clojure :laughing:"
438,1501004083.263261,Margaret,"<@Berry> frege is haskell for the jvm, and it would even be usable except it is too hard to use interfaces or extend java types (because it really does implement haskell’s type system - which is better but also alien to the platform)"
438,1501004124.287652,Berry,I tried using frege once; I found neither the documentation nor the community helpful.
438,1501004129.290899,Margaret,"I would have totally used it for some things in my codebase but not being able to define or implement interfaces (not to mention concrete inheritence, which clojure taught me how to do without), it was a no go"
438,1501004132.292625,Carry,Is there a way that others are using tools like `eastwood` with files that contain namespaced keywords?
438,1501004151.304062,Margaret,<@Berry> I think their assumption is “just do it the way you would in haskell”
438,1501004153.305305,Aldo,"thing is clojure just has no need for a state monad, because if imperative code is what's appropriate there *are* mutable options"
438,1501004157.307979,Nilda,"Well, cognitively, our problem solving is very pattern based. A problem occurs-&gt;go fetch the nearest solution from memory that approximately fits problem-&gt;apply to problem. Certain mismatch is bound to happen when encountering a somewhat different paradigm.; Personally, I find macros to be some of the most intractable marshlands of the language. The parser in my head doesn’t predict the output of a macro well at all."
438,1501005432.100265,Daniell,"<@Margaret> I really liked the promise of Frege and spent quite a bit of time working with it -- I wrote a Leiningen plugin for it and put out some mixed Clojure / Frege code examples. But, ultimately, I just found it too frustrating to use and kept going back to Clojure... which kinda fits in with the love/hate relationship I've had with Haskell ever since it appeared (I always hoped Haskell would rule the world but it seemed like the team behind it tried very hard to make sure that didn't happen!)."
438,1501005479.130169,Margaret,yeah I think I might have first heard of frege from you - and if I could have just defined / implemented interfaces I could have used it for my project…
438,1501005515.154132,Daniell,"I just watched Prof Turner's talk about ""Some History of Functional Programming Languages"" from the Poland FP conference this year. Great to hear how everything came together (he was going to be my external examiner for my PhD thesis back in '86... if I'd actually completed it!).; We used Miranda at my university and I was familiar with ML and SASL and a bunch of the other FP languages that all merged into Haskell. I created my own (SURE), just like all the other FP researchers in England at the time! :slightly_smiling_face:"
438,1501005610.215916,Lucio,Whereabout did you study?
438,1501005651.242898,Margaret,I remember checking out CLEAN shortly after I got into software (by reading “tech yourself C++ in 21 days”); in retrospect I’m amazed I got turned to such an interesting direction so early on
438,1501005685.264726,Daniell,<https://www.youtube.com/watch?v=QVwm9jlBTik&amp;__s=csfyzpydsvfikkqz5bvw> (for those who missed the link in Eric's <http://PurelyFunctional.tv|PurelyFunctional.tv> newsletter); University of Surrey (Guildford).; SURE was Surrey University Recursive Evaluator :slightly_smiling_face:
438,1501005745.30414,Lucio,"ooh, makes sense!; Hi! I have the following in a Datalog query:
```
'[:find ... :where [(wef-backend.app.identity/past-expiry? ?expiry)]]]
```; Due to how Datomic/Datalog works I must fully qualify the past-expiry? function, even though it is available in the namespace where I wrote this query; is there some clever trick that would let me omit the full qualifier?; I tried syntax quoting on the query but that doesn’t work, as it fully qualifies the `?expiry, etc` variables too; Essentially I would like to fully qualify some symbols in that quoted expression; but not others"
438,1501007075.144405,Charlene,"I don't recall any problems with namespaced keywords, but I seem to remember I had problems with namespaced maps. As these were limited to my test classes, I added these namespaces to the ignore list I think. Also, I think there were some fixes on the master branch that remain unreleased. A bit vague I realise, but if you're still stuck tomorrow (unlikely) then I'll check when I'm back in front of a computer..."
438,1501007468.387949,Margaret,"<@Lucio> you can use ` for this, and selectively use ~ for the symbols you want to namespace qualify"
438,1501007497.406632,Lucio,<@Margaret> how so? I tried variations on your suggestion but didn’t manage to get it to work
438,1501007576.456571,Margaret,"```peregrine.circle=&gt; `[:find ... :where [identity ~'?foo]]
[:find ... :where [clojure.core/identity ?foo]]```; I just picked a random thing with identity in the name, but I hope it translates"
438,1501007662.510743,Lucio,ah
438,1501007666.513223,Margaret,I guess I should have explicitly mentioned the `~'` idiom to prevent namespacing
438,1501007676.519558,Lucio,is there a way to do the opposite? selectively pick the symbols I want to namespace qualify
438,1501007683.52407,Margaret,that’s harder
438,1501007686.525473,Lucio,instead of the ones I do not want to namespace qualify; mmh ok; nevermind then; thanks :slightly_smiling_face:
438,1501007737.556918,Margaret,"this is close, but no cigar ```peregrine.circle=&gt; '[:find ... :where [`identity ?foo]]
[:find ... :where [(quote clojure.core/identity) ?foo]]```"
438,1501007751.565085,Lucio,"yep, not quite :confused:; why wouldn’t this work:
```
'[:find ... :where [~`identity ?foo]]
```
?"
438,1501007794.591687,Margaret,~ doesn’t make sense outside `
438,1501007812.602991,Lucio,"why does it make sense here:
```
`[:find ... :where [identity ~'?foo]]
```
?"
438,1501007830.614296,Margaret,it’s inside the ` at the beginning of the vector
438,1501007831.615245,Merrie,thanks
438,1501007875.642722,Lucio,"right, but why does swapping out the use of syntax quoting vs normal quoting makes it different in use?; (I’m not familiar enough with quoting yet)"
438,1501007888.650934,Margaret,because ~ is only valid in syntax quote
438,1501007893.653895,Lucio,oh
438,1501007915.667554,Margaret,it’s a special operation that is only defined in that context
438,1501007975.704077,Lucio,using it outside throws ```java.lang.IllegalStateException: Attempting to call unbound fn: #'clojure.core/unquote```; does this only get bound within a syntax quote?; or is that a different error?
438,1501007994.715018,Margaret,"right, it exapands to unquote, that is undefined outside `; this is all stuff implemented in the java code of the reader; it isn’t built on the normal machinery, it’s the basis for it"
438,1501008042.744637,Lucio,is unquote a special form?
438,1501008059.754696,Margaret,"syntax-quote ` is special, and it handles unquote"
438,1501008078.766382,Lucio,"so unquote will get evaluate somehow within a syntax quote; but outside of it it has no meaning; and even inside, it’s not a function; it’s just a symbol that ` interprets; correct?"
438,1501008097.777804,Margaret,"right, it’s a parser machinery basically; we’re at the point in this convo where I’d probably have to read more code to answer more questions though"
438,1501008143.805487,Lucio,Luckily for you I don’t have more questions at the moment :smile:
438,1501008154.812122,Margaret,like whether there’s an actual unquote method somewhere in Compiler.java or if it’s entirely a figment of syntax-quote
438,1501008193.835072,Lucio,"For now I think I am contempt with the answer that clojure.core/unquote is not a function, but something that has a special interpretation within a syntax quote"
438,1501008224.853974,Margaret,"there’s this, but I am not totally sure what it means - UNQUOTE used to be defined as a special symbol but now it is commented out <https://github.com/clojure/clojure/blob/master/src/jvm/clojure/lang/Compiler.java#L70>"
438,1501008339.925193,Carry,"Ah, to be more specific, I am using `lein eastwood '{:add-linters [:unused-namespaces] :namespaces [:source-paths] :exclude-linters [:unlimited-use]}'` as my command, and I get an error for a namespaced spec (so you might be right that a namespaced keyword would not create problems, sorry!)."
438,1501008341.926138,Kareen,unquote never makes it to the compiler
438,1501008364.940432,Carry,"```== Eastwood 0.2.4 Clojure 1.9.0-alpha17 JVM 1.8.0_121
Exception in thread ""main"" clojure.lang.ExceptionInfo: Invalid token: ::spec-ns/spec-name {:type :reader-exception}```"
438,1501008366.941307,Kareen,it's handled by the reader earlier than that
438,1501008441.986367,Carry,"```(ns acme.spec-ns
  (:require [clojure.spec.alpha :as s]))

(s/def ::spec-name string?)
```"
438,1501008459.997116,Lucio,<@Kareen> could you point at where exactly it is handled?
438,1501008480.009847,Kareen,<https://github.com/clojure/clojure/blob/master/src/jvm/clojure/lang/LispReader.java#L986-L990>; <https://github.com/clojure/clojure/blob/master/src/jvm/clojure/lang/LispReader.java#L1040-L1044>; from within the implementation of syntax quote; the tl;dr is that when the compiler sees `~foo` it expands into `(clojure.core/unquote foo)`
438,1501008563.060026,Lucio,"<@Kareen> ah, so if it’s an unquote form it simply gets rid of the “unquote” and “quote” bits at reading time?"
438,1501008578.069261,Kareen,"then syntax-quote walks its expression and expands all the unquoted forms; you can see how that gets transformed by quoting a syntax-quoted expression; ```user=&gt; '`(~a)
(clojure.core/seq (clojure.core/concat (clojure.core/list a)))
```"
438,1501008638.10565,Lucio,so the reader would transform `(clojure.core/unquote 'foo)` into `foo`?
438,1501008646.110164,Kareen,it's more complex than that
438,1501008647.111243,Lucio,oh
438,1501008649.111985,Kareen,because of splicing
438,1501008668.123826,Lucio,if there was no splicing then it would be this simple?
438,1501008676.128774,Kareen,"more or less, yes; but because of splicing, it has to wrap every subform that is unquoted in a list &amp; concat them all; so splicing becomes just like unquote w/o the wrapping list; ```user=&gt; '`(~@a)
(clojure.core/seq (clojure.core/concat a))
user=&gt; 
```; because the list is already in `a` (so to speak); the impl is quite more complex because it has to deal with maps/vectors/sets other than just lists; but that's the basic idea"
438,1501008791.191837,Lucio,thanks! that clarifies things
438,1501009046.350282,Renata,has anyone written about how to organize specs when they don’t perfectly map to namespaces etc?
438,1501009066.362109,Carry,"When I use `(:require [acme.spec-ns :as spec-ns]) ... (clojure.spec.alpha/validate ::spec-ns/spec-name) ...)`, this is the context I have using a namespaced spec in"
438,1501009117.393013,Margaret,I’d be interested to see a well reasoned pitch justifying the practice
440,1501009128.399462,Margaret,your data domain doesn’t match your namespace organization?
440,1501009204.446169,Elvin,organizational/insitutional inertia?; because that's why _my_ namespaces don't match my data domain.
438,1501009267.486089,Elvin,"Professional software dev is hard, man.  Companies are hard."
438,1501009378.553747,Rebeca,it seems like people are really tied to namespaces on keywords matching the namespaces code is organized in to; there is no reason for that
440,1501009431.584951,Rebeca,code should change and reorganize way more often than your data formats; The only time I ever use a code namespace name on a keyword is when I am sure it is temporary and will change
440,1501009485.61647,Renata,well lets say I have some type of domain object. Most functions operating on that are in some namespace that might contain multiple spec’d domain objects. To define specs for these objects I’d have to do something like `(s/def ::my-object-name string?)`; does that make sense?
440,1501009507.628951,Rebeca,"no; never use `::` and instead of tying to the namespace the code is currently in, use a namespace like :my-org.project/whatever"
438,1501009640.705839,Renata,"ok yeah, that seems like a sensible argument"
440,1501009642.70683,Darci,"right... I'm also more and more inclined to _not_ use `::`, but using data domain logic."
440,1501009714.747118,Rebeca,"your specs are like a database schema, imagine if in tables you named columns after the code that is currently accessing it, terrible"
440,1501010409.129775,Lucio,"Yeah, I am not sure why they use `::` everywhere in spec’s doc"
440,1501010733.307782,Rebeca,it makes for shorter docs
440,1501010902.401803,Alexandria,"<@Rebeca> another option is to have namespaces dedicated to your specs, I've being doing that and I quite like it, you can have a namespace like `your-org.specs` and inside of that you create the namespaces with your data definitions, by doing that the `::` gets very convenient, also you ensure very long namespaces so you have a more strong uniqueness sense"
440,1501011123.523646,Darci,"Yeah, but putting all specs in there isn't much fun either...; I've been splitting the specs and where to put them and how to name them depending on the purpose."
441,1501012215.129509,Berry,"here's something easy to do with state monad but non-obvious to me how to do with reduce: I have a expression tree. I want to compile it to Three-Address-Code, i.e. a list of statements where each statement is (set! a (op b c))."
441,1501012747.429681,Danyel,"I'm writing a blog post on REPLs, can anyone recommend a short video demonstrating the Clojure REPL?"
442,1501013593.90379,Lucio,"Out of curiosity, what exactly will be the focus of your blog post?"
442,1501013896.07377,Sonny,<https://vimeo.com/223309989>
440,1501013966.1129,Amado,is anyone aware of an *async* ring (compojure) middleware to log requests and responses?
442,1501013966.112963,Evan,<https://www.youtube.com/watch?v=2AvoH6XNAWY>
443,1501014254.275951,Rebeca,<@Berry> clojure's reduce isn't really for folding over trees. it only folds over  seqs. so you'll need to write your own fold over a tree or flatten the tree first
442,1501014489.410658,Rebeca,<https://gist.github.com/hiredman/2b2707d74ad2ff0b2f941b965f7dd97f#file-ref-clj-L3-L13> is an example of a custom reduce implementation over a tree using cps
443,1501014623.486874,Rebeca,"I don't know what  your expression tree is like, but if you can transform it in to something like anf generating three address code will be much easier"
444,1501014674.515718,Ludivina,"Hi all, I´m just starting with clojure, currently I am reading ""The joy of clojure"", and while trying to implement an example from the book, I am getting the following error on REPL:
```

user=&gt; (def frame (java.awt.Frame.))

CompilerException java.lang.reflect.InvocationTargetException, compiling:(form-init6212165196188451204.clj:1:1) 

user=&gt; frame
#object[clojure.lang.Var$Unbound 0x4aabdabc ""Unbound: #'user/frame""]
```
I was wondering if someone could point me in the right direction?"
442,1501014853.617373,Rebeca,*e will show you the whole stacktrace
442,1501014871.627369,Margaret,"also, the most likely cause of that error for that code is using a headless JVM; which won’t include awt; <@Ludivina> what does `(resolve 'java.awt.Frame)` say?"
442,1501015066.736149,Rebeca,(<http://matt.might.net/articles/a-normalization/> is a good write up on anf)
444,1501015407.922673,Ludivina,"hey <@Margaret>  I think you got it right, I´m in another environment right now. But I recall a message mentioning something about ""Headless"", if that is the case, do you know how can I solve it?"
442,1501015442.942398,Margaret,"by installing a jvm that’s meant for doing desktop /gui stuff; but that shouldn’t be urgent for learning clojure (though playing with windows and widgets can be nifty); typically on eg. a debian system, you can pick different jvms and decide which is default, and the one they pick for you if you aren’t too bothered to customize doesn’t come with the desktop and graphics stuff just to keep default installs smaller; but the process of getting the right jvm installed for the features you want will vary based on your OS"
442,1501015842.163158,Ludivina,"<@Margaret> I thing I´ve got it, I´ll try to fix it later and I´ll let you know, but anyway I will follow your advice and wont let it get to much in the way of my progress, thank you very much!"
442,1501016784.679326,Aldo,how would you do it with the state monad? I think the trickyness here is more traversing trees than building up state
445,1501017495.028094,Aldo,"I would probably just use an atom and postwalk, fwiw; oh... or tree-seq. which I found out about just now"
446,1501023478.345649,Robena,"I'm trying to wrap my head around `core.async/pipeline-async`, and it seems to be running more parallel tasks than I'm requesting: <https://gist.github.com/lynaghk/01aaa39bedcd2d37032dba3b68d9f94f>; Is the ""parallelism n"" in the docstring more of a suggestion than a hard limit? Even when setting n=1, I'm getting three async tasks running at the same time."
446,1501023741.428381,Rebeca,"<https://dev.clojure.org/jira/browse/ASYNC-163>; actuallly; pipeline-async is really weird, the other two pipeline variants are much easier to work with and much more likely to end up something that works like you expect"
446,1501023903.477555,Robena,"<@Rebeca> Thanks for the link! I have to run this in cljs, so pipeline-async is my only option."
446,1501023904.477933,Aldo,I believe pipeline-async is meant for working with callback-based libs
446,1501024004.506832,Robena,"Off-by-two isn't going to be a dealbreaker for me, I just wanted to make sure my understanding was sound.; Looks like the async.clj and async.cljs implementations are the same, so presumably cljs would have the same issue."
447,1501024954.772822,Billye,anyone know why running `lein run` might overwrite my `.lein-env` file?
446,1501025106.815058,Rebeca,<https://github.com/weavejester/environ/blob/master/lein-environ/src/lein_environ/plugin.clj>; it looks like .lein-env is a generated cache that environ owns and you shouldn't be modifying
447,1501025993.048569,Adelaida,"I was (with much rejoicing) teaching a couple of colleagues Clojure today, and one of them asked a question that stumped me. Why is there no `delete` function for vectors? As in, to drop an element at an index out of the vector and move the succeeding elements backwards by an index to fill the hole?"
447,1501026041.061293,Aldo,"because that's a very expensive operation, so you should stop and think rather than just seeing an 'easy' core op that does it"
447,1501026111.079195,Adelaida,"OK, fair enough. I wondered if that was why but wasn't sure."
446,1501026802.258169,Ramonita,"<@Rebeca> is correct, <@Billye>. The `.lein-env` file is for internal use, and shouldn’t be modified manually. It also mentions that at the top of the README."
447,1501029121.818419,Cary,"I'm trying to use environ, but using it at compile time(our build machine have all env vars), if I wrote `(def ^:const x (env :x))` it works, x will be compile to a constant. but `(def ^:const x (Integer/parseInt (env :x)))`will not work."
447,1501029232.842649,Berry,"imho, the trick part is assigning a unique var to every node of the tree; with a state monad, you just keep an int counter, and increment it as you traverse the nodes of the tree"
447,1501029688.940855,Shira,<@Cary> are you doing AOT compiling? Or is this ClojureScript?
447,1501029749.953908,Berry,<@Aldo> : why should delete be more expensive than assoc? can't we just 'mark it with a tombstone' ?
447,1501029880.982078,Cary,<@Shira> I'm doing AOT compile in Clojure. 
447,1501030288.0677,Daniell,"<@Berry> A look at the source for `assoc` on vectors should convince you that `delete` would be more expensive -- `assoc` doesn't change any of the indices for the vector so only the segment containing the ""changed"" item needs to be updated. `delete` would cascade a change of indices across the segments of the vector. _As I understand how vectors are implemented in Clojure -- happy to be corrected._; <@Cary> Aside from all the myriad problems associated with AOT and why you should avoid it... _ahem_ ...could you be a bit more specific about ""will not work""? What exactly is the error/behavior you get?"
447,1501030658.14623,Berry,"<@Daniell> : I failed to consider indexing. Does vector maintain the invariant ""the only non-full 32-item block is the last block"" ?"
447,1501030724.160512,Cary,"if I use `(def ^:const x (env :x))` and :x in env is ""hello"", it will be compile to `(def ^:const x ""hello"")` i think, because our build machine have environment variables, and production machine dont, this is the way we want. if I use `(def ^:const x (Integer/parseInt (env :x)))`, x will not be compiled to a literal constant. so at runtime, this `(Integer/parseInt (env :x))` will run again.
"
447,1501031745.384064,Aldo,"I'm not sure about the internal implementation, but vectors guarantee constant time index lookup.  seems hard to have both that guarantee and a fast  delete-at-index op"
447,1501031984.433669,Rebeca,"no; ^:const has a very small very specific use, that is not it, it only happens to ""work"" for (env :x) but that could change at anytime"
447,1501032814.610135,Berry,"vectors guarantee a (log_32 num-elements) time lookup, it's stored as a btree with branching factor of 32; <http://hypirion.com/musings/understanding-persistent-vector-pt-1>; I think it's possible to store ""how many elements does this subtree have"" , which also allows fast lookup"
448,1501033515.756263,Cary,"what's the explain for this, what's the difference between these two?"
447,1501033715.798622,Daniell,"(I'm a bit surprised `(def ^:const x (env :x))` works, to be honest)"
447,1501033953.847637,Kareen,"^:const causes the value of def to be inlined at the invocation site, it doesn't care about how the value is produced"
448,1501033985.854087,Kareen,"`(env :x)` is fine if that returns an value that can be used as a constant; const doesn't mean that the literal expression passed to `def` will be inlined, `(def ^:const x (do (println ""foo"") 2))` the println will only ever be runned once"
448,1501034572.978991,Cary,and x will be 2?
448,1501034580.980528,Kareen,yes
448,1501034617.988132,Cary,and x will be 2? 
449,1501044044.708601,Berry,"I know how to write macros. Is it easy to write reader macros?; I'm trying to implement a special macro (:: a t-sig) where it always evals to a, regarxless of where the :: is located at; so I can write something like 
```
(defn [ (::a int) (:: b int)] .... )
```; and it should become
```
(defn [a b] ...)
```"
449,1501044448.777145,Daniell,"<@Berry> Not sure I'm understanding you but Clojure does not support ""reader macros""..."
449,1501045098.889076,Berry,"<@Daniell> : I also thoguht it might be impossible, but then I read: <https://stackoverflow.com/questions/20677055/define-my-own-reader-macro-in-clojure>"
449,1501048144.421021,Daniell,"Tagged literals begin with `#` -- like `#inst` and `#uuid` -- but that's not ""reader macros"".; Tagged literals have `#`, a namespace-qualified symbol, and a regular Clojure expression. The regular Clojure expression is read, then passed to the function associated with that symbol.; <@Berry> We use tagged literals in our configuration library at work so we can define values in ""special"" ways."
449,1501051329.082807,Berry,<@Daniell> : (I know nothing about tagged literals / reader macros) -- so what you're saying is that (1) what tagged literals get is after macro expansion and (2) it's basically a function call with a single argument ?
450,1501052858.473654,Randee,"How come `tools.deps.alpha` is using a map (which is merged with the default deps)? Doesn't that mean I can't specify the order of the deps? Which, IMO is crucial on the JVM."
451,1501054525.972576,Nilda,Just tried out Compojure API (2.0). <https://github.com/metosin/compojure-api>; I had no idea it was this easy to set up an API. Is this normal?
452,1501056843.762607,Fe,Paranormal; <@Randee>. Do you mean the order of maven coordinates in project.clj? I wasn't aware that ordered mattered there
452,1501057204.893219,Weston,"it matters anywhere (boot, lein etc) I think, it's a maven property"
452,1501057225.901415,Randee,"<@Fe> No I mean the new `tools.deps.alpha` project that just got released. In maven all of the order matters, which makes projects predictable. Though there is a bug report for leiningen too: <https://github.com/technomancy/leiningen/issues/2283>"
452,1501057235.905351,Weston,"but yes, I think <@Randee> is right about that"
452,1501057292.92637,Randee,"It's going to seeminly work for projects that have &lt;=8 dependencies and then all in a sudden the depedencies will be semi random and even change if you just change the version number.; So IMO, deps shouldn't be specified by a map."
452,1501057387.960146,Weston,it's prolly worth raising the issue with <@Sonny> &amp; co
452,1501057463.99046,Randee,Yeah I'll wait until they wake up in the states.
452,1501057632.053842,Fe,"<@Randee>, I was aware of tools.deps but didn't know order influenced the maven algorithm; Maybe just order apathetically?; Whoops alphabetically; A wonderful typo though"
452,1501057780.110027,Weston,"sorting wouldn't help; &gt; Dependency mediation - this determines what version of a dependency will be used when multiple versions of an artifact are encountered. Currently, Maven 2.0 only supports using the ""nearest definition"" which means that it will use the version of the closest dependency to your project in the tree of dependencies. You can always guarantee a version by declaring it explicitly in your project's POM. Note that if two dependency versions are at the same depth in the dependency tree, until Maven 2.0.8 it was not defined which one would win, but since Maven 2.0.9 it's the order in the declaration that counts: the first declaration wins.

<https://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html>"
452,1501057842.13476,Fe,At least it would make it predictable
452,1501057865.143633,Weston,but it prevents you to have control over it
452,1501057959.18007,Fe,But yeah deviating from maven here doesn't seem like a good idea
452,1501057964.181919,Weston,"I imagine deps could support a vector of ""tuples"" and map transparently, use the former if you care, the other if not (but since maps make ordering unpredictable I am not sure that even make sense to support them at all)"
452,1501058187.267299,Randee,Yeah I wish the new `t.d.alpha` was leaning heavily on maven and would just provide a hiccup wrapper around their XML config. That'd be neat.
452,1501058266.297531,Fe,to be fair I've never been in a situation where I had to re-order maven coordinates in clojure to fix dependencies. Have you?; Can't you accomplish the same thing through exclusions?
452,1501058390.345694,Weston,"imho it doesn't really matter, if the aim is to have a simple tool that kind of maps 1-1 with maven without too much indirection, that ordering issue could be considered a flaw; but no, never had to mess with ordering myself I think"
452,1501058473.37827,Randee,"It's seldom and only matters if you have the same files in two jars. Which you shouldn't have. But then, it's not clear how often this problems has been the issue with user reported problems who never figured it out what the issue was."
452,1501058482.38202,Gerda,<@Fe> we have had to do this many times when using xml
452,1501058528.399862,Weston,"deps conflicts is quite common, ex between guava versions in transitive deps it happens to me all the time"
452,1501058537.403484,Randee,"IMO predictability is crucial, so deps should neither be put into a set (as leiningen does currently) nor into a map."
453,1501058978.57528,Marcella,"hi everyone,…i want ask, sqlkorma how set date and datetime mysql format timezone GMT ?"
452,1501059489.778584,Fe,"<@Randee>, wait why is it a set? do you mean internally?"
454,1501059684.860152,Shira,"<@Randee> my (limited) understanding is that you're meant to resolve all dependency conflicts completely, so it would actually be ok to store them as a map"
452,1501059878.938363,Fe,"<@Shira> how would that work given that there are transitive dependencies, java dependnecies, etc.?; do you mean a complete spec in the style of yarn.lock?"
452,1501059921.955519,Shira,I thought the idea was that you completely resolved all of the transitive dependencies explicitly
452,1501059944.964231,Weston,"more like, being explicit about exclusions to solve these kind of issues, but still; (which is the best way to fix these in general anyway); <@Shira> ahh? didn't understand it that way."
452,1501060011.991045,Shira,yeah I think you're closer <@Weston>; but I thought idea is that there is no conflicts; sort of like lein pedantic
452,1501060087.019583,Weston,"I see, that would make sense, and actually an improvement over raw maven definitions (arguably, since way more verbose)"
452,1501060257.084579,Randee,"<@Shira> My issue isn't only about transitive deps, but about the non-predictable ORDER of the jar's on the classpath. (See my leiningen ticket)"
452,1501060465.165524,Shira,"hmm, yeah; Does the order matter for you because you have several JARs which provide the same namespaces/classes?"
452,1501060498.178386,Fe,"alex mentioned the classpath order in the talk here in berlin; iirc, he said that the order is useful for some things (like overriding packages a la carte) but is not a great fit for other things, like making sure the right dependencies are picked up; so it sounded to me like tools.deps is intended to take classpath order out of the equation somehow"
455,1501061321.501141,Min,"hey, anyone here who can help out with a boot-clj related question?"
455,1501061505.572624,Darci,"well... probably someone, just ask, but maybe in the <#C053K90BR|boot> channel..."
456,1501064398.649394,Krystina,"what could be an easy way to some a random choice given some probabilities
I just need a function that given something like this:
`{:a 1/2 :b 1/4 :c 1/4}`; returns me a random element from [:a ':b :c] respecting the probabilities for each of them"
456,1501064449.666435,Berry,"put the cnhoices in arbitrary order; sample randomly from [0, 1]; index into the cumulative probability"
456,1501064492.680821,Krystina,"yeah I thought about that, so I guess there is no easier way?"
456,1501064526.692055,Evan,wouldnt repeating each choice depending on the probability and then using `rand-nth` do the trick?
456,1501064542.697059,Krystina,that would work in a simple case like this one; but in the general case I would need to find the LCD of all the fractions; and generate a massive vector with all the repeated stuff
456,1501064574.707024,Evan,"right, i see"
456,1501064577.708132,Berry,"suppose an item has probability .3957 , do you repeat it 3957 times? :slightly_smiling_face:"
456,1501064679.741012,Evan,fair point
456,1501065345.954477,Krystina,"Something like this gives me the ranges I can then check
```
user&gt; (def probs {0 1/2 1 1/4 2 1/4})
#'user/probs
user&gt; (into {} (map-indexed
                (fn [idx [el prob]]
                  [el
                   [(apply + (take idx (vals probs)))
                   (apply + (take (inc idx) (vals probs)))]])
                probs))
{0 [0 1/2], 1 [1/2 3/4], 2 [3/4 1N]}
```; quite sure it can be improved a lot though"
456,1501065497.002208,Ok,<https://stackoverflow.com/questions/14464011/idiomatic-clojure-for-picking-between-random-weighted-choices>
456,1501065558.021259,Krystina,nice thanks
457,1501068215.845714,Lucio,"I am pondering about how I would implement a simple compiler and/or interpreter in Clojure. In particular, I am wondering what would be the best way to model the abstract syntax tree.

The first (and most obvious) option would need to represent AST nodes as maps, tagged with their type/label (e.g. :type key). I would then define the various functions that operate on the AST as multimethods using the node’s types as dispatch keys.

Another option would be to represent each type of node as a record, and to then have them all implement a protocol (e.g. IExpr) which would contain have implementations for all the functions operation on AST nodes. This comes wth the added benefits that AST nodes could implement existing protocols too.

Which of these options would be most idiomatic in Clojure? Or do you have another one to suggest?"
457,1501068267.861445,Otha,Take a look at Instaparse
457,1501068354.887371,Weston,clj-antlr isn't bad either
457,1501068393.899668,Lucio,"Which parts in particular? I am not looking to write a parser, just to understand what the best way to model an AST in clojure would be"
457,1501068419.907912,Otha,"multimethods are nice, I think; I made a notice about instaparse because if you use it — you don't have to think about AST representation yourself"
457,1501068514.937498,Kareen,<@Lucio> take a look at tools.analyzer; <https://github.com/clojure/tools.analyzer>  <https://github.com/clojure/tools.analyzer.jvm>
457,1501068739.005678,Lucio,"thanks! so from that I gather that raw maps with a :type field seems to be the way to go?; ok thanks, I’ll take a look; Another, completely unrelated question… Does anyone have advice/examples on how to structure application business logic? This is a fairly general question (not specific to Clojure), but there might be Clojure-specific idioms coming into play. Roughly speaking I am wondering if I should take a CQRS-y road and try to have a clear distinction between functions that modify the app’s state and functions that read that state. The application I am currently working on is a fairly simple, CRUD-y Clojure+Datomic web app, but I would like to use it as a learning ground for good practices; A link to an open-source application that you consider well-structured would be helpful, or advice / link to blog posts / resources"
457,1501071423.882792,Marx,<@Lucio> have you seen the docs for re-frame? He talks extensively about CQRS-y architecture (even though it’s cljs not clj) <https://github.com/Day8/re-frame>
458,1501071489.907426,Marx,"There’s a pretty detailed readme doc right up front, but don’t be fooled, the real meat is in the docs/ folder"
457,1501071496.910467,Lucio,"<@Marx> ah, let me check it now, thanks! By the way, something I should have specified: I am looking for a way to structure my code while keeping it fairly straightforward. E.g. no crazy async at the moment; ideally I would like to keep everything synchronous; Oh wow, indeed"
459,1501072990.506377,Kareen,it's the most common way at least
460,1501076278.198151,Hermelinda,When I do some calculation with pmap and want to use another pmap on the result. How I can I wait until the first pmap is done?
460,1501077095.688892,Earlie,Does anyone know of a clean way to assoc in a field only if the field isn't null; otherwise return the map unmodified?
461,1501077184.744272,Willow,<@Earlie> merge
461,1501077195.750654,Earlie,:facepalm:
461,1501077200.754465,Willow,:+1:
461,1501077213.762409,Earlie,"Thanks, <@Willow>"
461,1501077301.818403,Darci,merge will overwrite existing keys in the original map... this may (or may not) be the expected behaviour.
461,1501077329.836087,Willow,change the order
461,1501077353.851065,Earlie,I'm aware. That is what I want. It's just an optional field that should be tacked on only if it's not nil. (An authorization http header)
461,1501077357.854018,Willow,"`(merge {:field ""value if not present""} my-map)`; yeah exactly"
461,1501077380.868851,Darci,right :slightly_smiling_face:
461,1501077411.889424,Earlie,I don't suppose there's a merge that would do `(merge {:a 1} {:b nil})` and return `{:a 1}`?
461,1501077473.929972,Willow,that sounds orthogonal to merge. you want to prune your map after the merge?; if it's just top level keys you could `(into {} (map (fn [[k v]] (when v [k v])) my-map)` would probably work; there's probably an even better sort with filter; `(into {} (filter (fn [[k v]] v) my-map)`
461,1501077700.080647,Paula,"To clarify your intention is to load the entirety of output of the first pmap into memory, then consume it once its realised?"
461,1501077737.10467,Willow,and if you have possibility of false change the body of the `fn` to (some v)
461,1501077785.136391,Earlie,"All great ideas.
I've gone with `(merge xs (when a {:a a}))`."
461,1501077810.152739,Willow,that will clobber your original value i thought; you need your original map second
461,1501077828.165083,Randee,<@Earlie> In that case you could do: `(cond-&gt; xs a (assoc :a a))`
461,1501077860.186729,Earlie,"Sorry, I'm mixing names. `xs` doesn't have a `:a` yet. There's no possibility of clobbering."
461,1501077867.191298,Willow,:+1:
461,1501078003.27966,Earlie,<@Randee> I quite like that one. :thumbsup:
461,1501078089.334394,Paula,"If that's the case simply wrap the first pmap in a `doall`

```
(pmap #(println ""b"" %)
  (doall (pmap (fn [x] (println ""a"" x) x)
(range 1000))))
```"
462,1501078373.519878,Earlie,Is there a better way to do `(symbol *ns* 'symbol)`?
461,1501078580.655803,Earlie,"Huh, nevermind. Apparently I can do syntax quoting for the dispatch value of a multimethod. Not sure why I thought I couldn't earlier."
461,1501080613.046703,Darci,"<@Earlie> Not sure if it would help, but <https://github.com/nathanmarz/specter> has some really 'navigators' to do all kinds of transformations on data structures. (Maybe not worth the effort for easy navigation, although I think it may be if you have at least 2 steps to navigate, including predicates :slightly_smiling_face: )"
461,1501080821.193392,Earlie,"<@Darci> Huh, that's cool. Definitely overkill for this though. :slightly_smiling_face:"
461,1501080850.212905,Owen,"<@Earlie> for associng a value if not null, with specter it's `(setval [:a some?] my-value amap)`"
461,1501080874.229909,Lucio,<@Darci> are those basically lenses?
461,1501080877.232347,Owen,"for associng only if field exists, it would be `(setval (must :a) my-val amap)`; will be way more performant than merge as well"
461,1501080953.285747,Darci,I didn't use specter much yet - only found about it about a month ago - but it's definitely cool. Also for small cases.
463,1501084489.724457,Sonny,"This is discussed in my talk, but if order matters, then your system is already broken. That is, you should never have two different versions of the same class on your classpath - if you do, then something bad has already happened."
463,1501084859.979081,Aldo,"you're right, log32n. so if you allowed delete you'd have to rebalance the tree right? honestly I haven't thought about data structure algorithmic performance since uni, but I just kind of trust that this probably isn't feasible. I'm sure the fact that the data structures are persistent makes it even more complicated"
463,1501085005.077892,Berry,"disclaimer: I haven't read the actual source code

so now we both agree that a persistent vector is a tree with depth log32n

this means that assoc is NOT O(1), but O(log_32 n)

the reason being, when we update a node, we have to update ""all anvestors"" until we get to the root; since vectors are persistent =&gt; assoc has to create a new node =&gt; but then it has to create a new block for every anvestor from the thing we want to update until we get up to the root; so then the question is: can we do delete! in O(log_32 n) time, whilemaking it easy to index -- and I don't know, but I'm leaning towards yes"
464,1501085882.636156,Nevada,"Style question: say I have three items `(def a [""a""]) (def b [[""b"" ""c""] [""d"" ""e""]]) (def c ""f"")`, and I want to put them into a list like so:
```
`[~a ~@b ~c]
```
but without using syntax-quote/unquote/splicing-unquote...how would you do it as concisely as possible (without losing generality)?; (i.e. the desired result is `[[""a""] [""b"" ""c""] [""d"" ""e""] ""f""]`)"
464,1501086043.736094,Willow,so you just want to append them?
464,1501086056.7442,Margaret,the middle one is unpacked; one option is `(concat [a] b [c])` - I admit that looks weird
464,1501086107.775309,Nevada,"<@Margaret> actually, that's not nearly as bad as what I was doing; Does suck a bit that you have to pack the elements you don't want unpacked just to...well...yeah"
464,1501086650.119121,Margaret,"<@Nevada> depending on your actual problem, you could use something like `(def prepacked [x] (if (and (coll? x) (vector? (first x)))) x [x])` `(mapcat prepacked [a b c])`"
464,1501086719.162343,Nevada,"hah...yeah, that probably won't work because some of these are multiple levels nested, and only some of the levels need to be unpacked; my personal preference is to ""say what you mean"" with syntax-quote, but understandably the team is worried about maintainability..."
465,1501092708.768446,Fausto,"Hey there. How to update a key in a map to hold a empty vector?; ```=&gt; (def Person {:person-id ""person-1"" :category ""customer"" :purchase [""p1""] :dates [""d1""]})
#'user/Person
=&gt; (update :purchase Person [])
IllegalArgumentException Key must be integer  clojure.lang.APersistentVector.invoke (APersistentVector.java:292)```"
465,1501092848.851607,Rebeca,"look at the docs for update; (you seem to have picked random arguments in a random order); (and you want assoc not update, but go ahead and read the docs for both assoc and update); by docs I meant the docstring you access using `doc` in the repl, but you may also want to start here <https://clojure.org/reference/data_structures#Maps>"
466,1501093020.95369,Lucio,Hi! I am getting a cryptic error which I do not understand. Here’s the piece of code: <https://gist.github.com/hmaurer/8e786bfd507798393c8be45ffb3a1b46>. The error is in the comments. Could someone take a look please?
465,1501093101.000816,Lucio,"The error is `Can't let qualified name`, but I don’t get why the gensym’ed variable gets qualified by the syntax quote"
465,1501093235.079449,Fausto,dumbo! i was using the wrong function here. Thanks <@Rebeca>
465,1501093241.082897,Rebeca,I would double check to  make sure  the code that is being run actually matches the code you are reading (restart your jvms) and then I would suspect this is actually coming from some other macro
465,1501093271.100252,Lucio,I restarted lein’s repl. Is that enough?
465,1501093323.132218,Rebeca,yes; I would put a println at the start of the macro to print out ctx-binding because  I suspect it is already being passed in a fully qualified symbol; your docstring is also in the wrong place
465,1501093453.211141,Lucio,"ah, thanks for pointing that out"
465,1501093500.239745,Rebeca,it is a super common thing to do
465,1501093507.244051,Lucio,"ctx-binding seems fine. The println prints `ctx`; which matches how I am using the macro, e.g.
```
(deftest test-authentication
  (with-scratch-ctx ctx
      ...
```; Still throwing ` :cause ""Can't let qualified name: wef-backend.test-util/conn# ""` though"
465,1501093567.281113,Rebeca,is d/db a macro?
465,1501093608.307408,Lucio,"no; but I get the same error even if I deleted the whole ~ctx-binding line; I never got that error with uri# or datomic# by the way, it only occured when I added conn#; It’s probably something silly"
465,1501093749.3983,Rebeca,do you have a var named conn# in that namespace?
465,1501093769.410877,Randee,<@Lucio> What does macroexpand give you?
465,1501093798.429236,Lucio,"<@Rebeca> no, I checked. Let me check again just to make sure..; `java.lang.RuntimeException: No such var: wef-backend.test-util/conn#`"
465,1501093844.458835,Rebeca,"you could fix it immediately by replacing most of the macro with a function that returns the context, and have the macro expand in to invoking that and then deleting it; but that wouldn't tell you what is wrong"
465,1501093978.544318,Lucio,"<@Randee>
```
(let*
 [uri__16604__auto__
  (clojure.core/str ""datomic:mem://hello-test-"" (java.util.UUID/randomUUID))
  datomic__16605__auto__
  (integrant.core/init-key :wef-backend/datomic {:uri uri__16604__auto__})
  wef-backend.test-util/conn#
  (:conn datomic__16605__auto__)
  ctx
  {:auth nil :conn conn__16606__auto__ :db (datomic.api/db conn__16606__auto__)}]
 (try (+ 1 2) (finally (datomic.api/delete-database uri__16604__auto__))))
```; when running
```
(macroexpand '(wef-backend.test-util/with-scratch-ctx ctx (+ 1 2)))
```"
465,1501094026.573891,Randee,What happens when you rename it to `some-other-conn#`?
465,1501094041.582552,Lucio,"tried that, didn’t work. Trying again now just to make sure"
465,1501094045.58513,Rebeca,"is that a real pound sign, or some unicode nonsense?"
465,1501094065.59731,Randee,Well the second usage of `conn#` expands properly. (in the map)
465,1501094145.647558,Rebeca,"yeah, which makes me  suspect the first has some weird shenanigans"
465,1501094165.659353,Lucio,"Wait, I think I found the issue; `some-other-conn# (:conn datomic#)]`; the “space” between # and ( has charcode 160; instead of 32"
465,1501094206.684156,Randee,oh lol. :slightly_smiling_face:
465,1501094210.686438,Rebeca,hah!; unicode malarky
465,1501094229.697323,Willow,did you copy past some of this from a github page?
465,1501094241.704827,Lucio,"nope, I wrote it myself; no idea what happened there; well, I copied an earlier version of that code, which worked; then added that line myself"
465,1501094269.721668,Willow,from where?
465,1501094274.724587,Lucio,it might have picked up a character from somewhere; github
465,1501094275.725396,Willow,oh; weird
465,1501094337.763046,Lucio,I just checked and none of the characters from the snippet I copy/pasted had character 160; oh well; sorry for the trouble
465,1501094423.815244,Rebeca,there is actually an open jira issue that has had some recent activity about changing how clojure handles unicode whitespaces
465,1501094429.81898,Willow,`char code 160 would be &amp;nbsp;`
465,1501094465.840366,Ignacio,"the fun thing about this is, thats 160 is not even considered whitespace by java"
465,1501094475.846151,Rebeca,"oh, I guess the issue it got declined"
465,1501094475.846531,Lucio,"Probably what happened is that OS X and/or Atom (the editor I am using) has some shortcut or some way to enter this type of whitespace, and it fat-fingered on the shortcut"
465,1501094482.850403,Willow,"```
employee-resizer.core&gt; (char 160)
\ 
employee-resizer.core&gt; \ 
\space
```"
465,1501094525.877048,Rebeca,<https://dev.clojure.org/jira/browse/CLJ-2207>
465,1501094535.883075,Lucio,it had been a while since I debugged a unicode issue; almost forgot how fun it is; :kappa:
465,1501094654.954582,Willow,apparently atom will enter a non-breaking space with alt-space; probably pretty easy to inadvertently hit
465,1501094678.969312,Lucio,"yep, I most definitely inadvertently hit that; If Clojure’s reader threw an error saying “unknown character at position X” it would have been easy/easier to debug, but it considered it as part of the symbol"
465,1501094749.012091,Rebeca,that actually may be just be a bug in the reader
465,1501094775.027447,Lucio,"Now I know how to confuse the hell out of people though; ```
wef-backend.core=&gt; (def     42)
#'wef-backend.core/
wef-backend.core=&gt;
42
wef-backend.core=&gt;
```; this works; this too:; ```
wef-backend.core=&gt; (def hello world this is a long variable 99)
#'wef-backend.core/hello world this is a long variable
wef-backend.core=&gt;
```; eh"
467,1501095851.680563,Earlie,"What is a fast way to do this without the repeated nested pointer?
```
(-&gt; state
    (assoc-in [:a :b :b/field0] """")
    (assoc-in [:a :b :b/field1] """")
    (assoc-in [:a :b :b/field2] """"))
```"
467,1501095929.726672,Afton,"```
;; maybe?
(assoc-in [:a :b] {:b/field1 """" :b/field1 """" :b/field2 """"})
```"
467,1501095944.73548,Aldo,fast as in performance?
467,1501095965.747836,Earlie,"Fast as in, using standard library. I don't want to add any external libs or anything.; Performance isn't a concern.; Sorry, I shouldn't be using that work. :stuck_out_tongue:"
467,1501095989.761892,Aldo,"(merge state {:b/field1 """" :b/field1 """" :b/field2 """"}); err; sorry, (update-in state [:a b] merge {:b/field1 """" :b/field1 """" :b/field2 """"}); forgot a few words"
467,1501096032.785912,Willow,"```
(let [nav [:a :b]]
  (-&gt; {:a {:b {}}}
      (assoc-in (conj nav :b/field0) """")
      (assoc-in (conj nav :b/field1) """")))
{:a {:b {:b/field0 """", :b/field1 """"}}}
```; the navigator is just a vector, so create it with the shared navigation parts; if i'm understanding correctly"
467,1501096091.819955,Earlie,"<@Willow> That's what I thought I was going to need to do.
<@Aldo> I'm not sure why I didn't think of update-in... That should work nicely.; Not the question is update-in with assoc or merge. Is there any performance difference?"
467,1501096174.866794,Aldo,I suspect they'd be identical
467,1501096198.87987,Earlie,"I figured they would be. Anyways, thanks all!"
467,1501096207.885177,Aldo,merge is implemented in terms of `conj` so yes I'd say identical <https://github.com/clojure/clojure/blob/clojure-1.9.0-alpha14/src/clj/clojure/core.clj#L3022>
467,1501096258.914305,Lucio,"When I use lein, where will the clojure stdlib be located on my file system?; .clj files that is"
467,1501096283.928643,Willow,"```
(let [nav [:a :b]]
  (reduce (fn [m [k v]] (assoc-in m (conj nav k) v))
          {:a {:b {}}}
          [[:b/field0 """"]
           [:b/field1 """"]
           [:b/field2 """"]]))
{:a {:b {:b/field0 """", :b/field1 """", :b/field2 """"}}}
```"
467,1501096399.993853,Marx,<@Lucio> You mean the jar files?
467,1501096415.003088,Lucio,"ah right, so the std lib will be within jar files. Nevermind then"
467,1501096437.015496,Aldo,"jar files are just zip files and you can unzip them and the .clj files will be inside, if that matters to you"
467,1501096440.016997,Rebeca,"<@Lucio> lein runs 2 jvms, lein's jvm and your project's jvm, the clojure runtime that lein uses is  part of the lein jar and lives in ~/.lein, the clojure runtime for your project is Just Another Jar(tm)"
467,1501096527.065521,Marx,lots of interesting jar files in `~/.m2/repository` too
468,1501097420.559101,Debby,what’s a good way to xor two sets?
468,1501097931.836735,Aldo,(set/union (set/difference s1 s2) (set/difference s2 s1))
469,1501098635.215861,Margaret,"a silly way to do it ```=&gt; (into #{} (comp cat (take 2)) (clojure.data/diff #{1 2 3} #{2 3 4}))
#{1 4}```"
470,1501101041.560562,Francisca,is it possible to use clojure.java.shell to invoke a shell command like `tr &lt; infile.txt -d '\000' &gt; outfile.txt` ?; <https://github.com/clojure/clojure/blob/master/src/clj/clojure/java/shell.clj>
470,1501101759.954694,Guillermo,<https://twitter.com/clojure_conj/status/889899202767147008>; ^ How cool is that?
470,1501101804.979151,Willow,yeah got the email earlier. super super cool
470,1501102683.464037,Margaret,"<@Francisca> in order to use things like `&lt;` you need to invoke /bin/sh; clojure.java.shell/sh, despite the name, is a raw system command that doesn’t use sh; of course that’s not portable, and then you’ve created code that only works on a *nix system or reasonable facsimile"
470,1501103059.671529,Francisca,"yeah, <@Margaret> there is a thorny translation that `tr` handles well at the command line that I'd like to shell out within a clojure program ( that does a whole laundry list of things).  Haven't yet found the right syntax for calling `tr` via clojure.java.shell/sh though"
470,1501103111.699008,Margaret,"<@Francisca> you send a normal shell command to sh `(clojure.java.shell/sh ""/bin/sh"" ""-c"" ""tr &lt; infile.txt -d '\000' &gt; outfile.txt"")`"
470,1501103198.744372,Francisca,"wow, thank-you.  That works. I tried a lot of other combinations but without the ""/bin/sh"" ""-c"""
470,1501103219.754612,Margaret,"right, sh -c says “find and run the sh executable, tell it to run this”"
470,1501103249.769303,Francisca,that class of example should probably be added to the other examples (<https://github.com/clojure/clojure/blob/master/src/clj/clojure/java/shell.clj#L130-L142>); thanks again
470,1501103343.816825,Margaret,"np, glad I could help, I wonder if it would be worth submitting a patch to JIRA for adding another println to that comment block"
470,1501103475.883542,Francisca,agreed - I think that would help others.  Not sure how easy that is to do...
470,1501103650.967877,Margaret,<@Francisca> there is an example of using sh -c as an arg to sh on the clojuredocs page <https://clojuredocs.org/clojure.java.shell/sh>
470,1501103802.042053,Francisca,"true enough, perhaps a few words there describing why it is useful/needed would work too"
471,1501105571.864798,Ludivina,"<@Margaret> thanks for your help yesterday, you were correct !!!!"
472,1501120567.942365,Billye,"I know this is a clojure channel but maybe someone will know the answer. I'm trying to ssh into a server, run a shell script, and the disconnect from the server and have the script continue to run"
473,1501121130.063019,Vena,ssh + nohup?
474,1501125174.851621,Berry,<#C03RZGPG3|off-topic> :slightly_smiling_face:
474,1501126121.020902,Kyung,tmux or screen
474,1501135503.674368,Danyel,"<@Lucio> 'what makes a good REPL?' - what value do REPLs bring, what features make for good REPL, what programming language features enable them"
473,1501135613.695991,Danyel,<@Sonny> a bit too long :) I need a 2-minutes thing
475,1501154013.7056,Hermelinda,"Thanks,  that helped me"
476,1501156115.328552,Lucio,"Hello! I am reading clojure.core’s source cdoe and the beginning confuses me. Could someone explain this out?
```
;during bootstrap we don't have destructuring let, loop or fn, will redefine later
(def
  ^{:macro true
    :added ""1.0""}
  let (fn* let [&amp;form &amp;env &amp; decl] (cons 'let* decl)))
```; there are a number of those declarations; <https://github.com/clojure/clojure/blob/master/src/clj/clojure/core.clj#L31>"
476,1501157400.749885,Evan,`fn*` is a compiler internal thing: <https://github.com/clojure/clojure/blob/master/src/jvm/clojure/lang/Compiler.java#L47>
476,1501157591.817654,Lucio,"<@Evan> what is the difference with `fn`? Also, why is `let` defined as a macro? I thought it was a special form"
476,1501157669.845066,Evan,"`fn` is defined in clojure, and just calls out to `fn*`: <https://github.com/clojure/clojure/blob/master/src/clj/clojure/core.clj#L42>; likewise, `let` is a macro that calls out to the special form `let*`"
476,1501157777.882952,Lucio,"<@Evan> ah, I see. So special forms are always followed by a `*`, but for easy of use there is a non-starred version; Follow up question: what is the use of adding a name to an anonymous function?; e.g. `(fn foo [x] ...)`; ah nevermind, got it, stack traces :slightly_smiling_face:"
476,1501157836.904759,Evan,yeah :slightly_smiling_face:
476,1501157872.917556,Lucio,Is there a std lib function to pick a number of keys out of a map? e.g. `Map -&gt; [Key] -&gt; Map`
476,1501157882.921259,Evan,"and the non-starred version is more than just convenience, it also lets you do e.g. `(doc let)`"
476,1501157911.93211,Kareen,`select-keys`
476,1501157934.939986,Lucio,"<@Evan> when I do `(doc let)` it says `let` is a special form, but in reality it’s a macro which expands to a special form. I assume there is some magic going on here; where is it?; <@Kareen> thanks! I really miss a Hoogle-like tool for Clojure :disappointed: <https://www.haskell.org/hoogle/>"
476,1501158072.990317,Evan,<https://github.com/clojure/clojure/blob/master/src/clj/clojure/core.clj#L4439>
476,1501158263.05983,Lucio,<@Evan> why is it defined first here <https://github.com/clojure/clojure/blob/master/src/clj/clojure/core.clj#L32> then  here <https://github.com/clojure/clojure/blob/master/src/clj/clojure/core.clj#L4439> ?
476,1501158335.085614,Sharri,<@Nilda> can it be that you are not on the latest version? it is fixed in v0.22.4 <https://github.com/atom/language-clojure/commit/70e83b27444da31d6367a0aa447a216836eafc05>
476,1501158343.088633,Evan,"well if you look here <https://github.com/clojure/clojure/blob/master/src/clj/clojure/core.clj#L193> it uses `let`, but `defmacro` hasn't been defined yet; think the first `let` is a barebones version; yeah, so the first let only has the functionality needed to bootstrap the rest of clojure, and then later on it gets the rest of its functionality via `defmacro`"
476,1501158598.184192,Lucio,interesting; thanks for explaining this out <@Evan>  :slightly_smiling_face:
476,1501158676.214533,Evan,no problem! any time
477,1501162926.250588,Darci,"I'm trying to use transducers... The original code:
```
(-&gt;&gt; m 
     (map :my-key)
     (map #(clojure.edn/read-string %)) )
```; translating to transducers:
```
(let [xf (comp (map :my-key)
                (map #(clojure.edn/read-string %))))]
  (transduce xf concat m)
```
This gives a stackoverflow error...; oh wait... it's not the same.; concat gives that stackoverflowerror..."
477,1501163406.527703,Randee,<@Darci> `(into [] xf m)`
477,1501163458.558937,Darci,"right, thx."
477,1501163513.591375,Vikki,also: <https://stuartsierra.com/2015/04/26/clojure-donts-concat>
477,1501163556.616974,Darci,funny... I read that last week. stupid me :stuck_out_tongue:
478,1501164871.474234,Vikki,:slightly_smiling_face:
477,1501165244.723047,Darci,"well, actually it's `(flatten (into [] xf m)` I was after."
477,1501165470.875296,Wendolyn,<@Darci> or second `map` should be `mapcat` :slightly_smiling_face:
477,1501165541.923464,Darci,nice.
479,1501168693.062722,Merrie,"is there something builtin or better for this?
```
(defn least-common-ancestor [path1 path2]
  (let [i (min (count path1) (count path2))]
    (reduce
      (fn [p idx]
        (let [v1 (nth path1 idx)
              v2 (nth path2 idx)]
          (if (= v1 v2)
            (conj p v1)
            (reduced p))))
      [], (range i))))

(least-common-ancestor
  [:a :b :c]
  [:a :b :d])
=&gt; [:a :b]
```"
479,1501169144.36923,Randee,<@Merrie> `(take-while some? (map (fn [a b] (when (= a b) a)) [0 1 2] [0 1 3]))`
479,1501169286.464141,Basil,"This one has much better runtime performance, mostly stemming from the omission of `nth`"
479,1501169383.530258,Merrie,:bellissimo:
479,1501169394.537727,Randee,Well you could avoid one `nth` call here if you use `reduce-kv` and you can guarantee it's a vec
479,1501169443.571494,Merrie,"not worth it. on the other hand, count being &gt; 10 is highly unlikely (in my case)."
479,1501169471.590789,Randee,Yeah then the `map` version will be quicker. Reduce is often slower for smallish input; And if you want to avoid the intermediate sequence: `(sequence (comp (map #(when (= %1 %2) %1) ) (take-while some?))   [0 1 2] [0 1 3])`
479,1501170379.195802,Merrie,"<@Randee> on such small inputs it is not worth it:
```
(time  (dotimes [n 1000]    (take-while some? (map (fn [a b] (when (= a b) a)) [0 1 2] [0 1 3]))))
""Elapsed time: 1.166446 msecs""
(time  (dotimes [n 1000]    (sequence (comp (map #(when (= %1 %2) %1) ) (take-while some?))   [0 1 2] [0 1 3])))
""Elapsed time: 7.258858 msecs""
```"
479,1501170450.244041,Randee,<@Merrie> Don't forget a `doall` :slightly_smiling_face:
479,1501170503.27943,Merrie,"```(time  (dotimes [n 1000]    (doall (take-while
""Elapsed time: 3.356031 msecs""```; :opieop:; omg what am I doing right now?"
480,1501175350.233423,Margaret,"if you want to measure calculation time (or run for side effects) and don’t need the result, use dorun instead of doall; also, sequence is not typically more efficient than regular lazy ops in most cases iirc; I’d start with the general concept of event sourcing, which is more general and more usable than CQRS"
480,1501178454.087833,Lucio,"<@Margaret> right, sorry, I think my question was misphrased. Right now I am more concerned about how to structure my code at the application level (how to organise functions and manage side effects)"
480,1501178469.097005,Margaret,event sourcing is a strategy for this
480,1501178474.09966,Lucio,"Datomic already gives me some level of event sourcing, which is enough for my needs; ah; how so <@Margaret> ?"
480,1501178492.111158,Margaret,"the concept is that events are immutable and describe the actual domain data; then, your db describes state, and is created via a reduce across the events (literally or conceptually)"
480,1501178516.126548,Lucio,"<@Margaret>  i mean, I am familiar with what event sourcing is, but I don’t see how it would help with this"
480,1501178532.136294,Margaret,"because now your state is just a query across your events; it’s an optimization; so you have “all events”, from that you derive a postgress db, or a datomic db, or even a mongo db - via looping over the events, maybe with reduce; that’s your state of the world"
480,1501178604.181724,Lucio,"Right, but Datomic already gives a fairly event-sourced model (except that transactions dont’ represent domain actions, but they can be reified with a key that does represent a domain action)"
480,1501178608.183914,Margaret,"now, if your events are set up properly (strictly ordered, immutable) - all instances of your app have access to the same time series of immutable states"
480,1501178639.203261,Lucio,Datomic’s transaction log can be considered as the event log
480,1501178640.204026,Margaret,"queries are reads of the current state, “modifications” are insertions into the stream of events (you must loop back up to that level); right, right; so you are on the right track if using datomic, you don’t need CQRS for this"
480,1501178689.233868,Lucio,"My concern is more: how do I nicely separate my “business logic” (functions that perform transactions, authorisation and reify transactions with additional infos) from my API; in the application code; sorry if this wasn’t clear"
480,1501178725.255726,Margaret,I use protocols to describe my domain / API level abstractions
480,1501178725.255892,Lucio,"what should the interface for those functions be to make them easy to think about and deal with, etc"
480,1501178749.270237,Margaret,"then for my implementation, I use functional code over vanilla data structures implementing those protocols; the protocols are used as a signal to a reader of the code / user of the library that these names describe domain level concepts, they are the big picture organization of the code"
480,1501178792.296064,Lucio,do you have an example of this structure?
480,1501178813.308462,Margaret,I’ll have to see if I have a good open source implementation of it…
480,1501178817.310756,Lucio,"so protocols are your “public API”, and all other functions are implementation details"
480,1501178838.322881,Margaret,"right - and the protocol methods are expected to take and return hash maps, vectors, keywords, numbers; so we don’t pile on mountains of OO, we use modeling tools on the boundaries as a line in the sand, so to speak - to declare organizational intention"
480,1501178872.342278,Lucio,"how do you pass context around (db, conn and auth)? and how do you perform authorisation / reified transactions, if you do so?"
480,1501178900.358826,Margaret,"I use component, so that each subsystem gets the parts of the app that it needs passed in on initialization"
480,1501178973.400587,Lucio,Could you give me a example of a protocol definition you use in one of your apps?
480,1501179010.421978,Margaret,absolutely - found it!; protocol definition <https://github.com/noisesmith/ludic/blob/master/src/clj/org/noisesmith/ludic/protocol.clj>; implementation <https://github.com/noisesmith/ludic/blob/master/src/clj/org/noisesmith/ludic.clj>
480,1501179101.475511,Lucio,"and brilliant, thanks!"
480,1501179117.484985,Margaret,"oh man - that project is in a slightly weird state, there’s two GameBoard protocols that should have different names, and some protocols that need to be moved to the proto namespace"
480,1501179123.488743,Lucio,"if those functions were hitting a database, would your record hold its ref?"
480,1501179125.490081,Margaret,"sorry ! it’s still in heavy development; the record would expect the ref, yes"
480,1501179177.520732,Lucio,"Mmh; And if I want to reify *every* transaction with, say, the access token of the current user, how would you do this? Would you provide your own “transact” function, wrapping Datomic’s?; Sorry for the messy questions"
480,1501179290.586725,Margaret,that’s a usage of reify that doesn’t match what I thought the word meant; do you mean parameterize? I thought reify meant “make an abstract thing into a concrete one”
480,1501179359.626668,Lucio,I thought that’s a usage I read in the doc; I might be mis-using the term; <http://blog.datomic.com/2015/12/reified-transactions.html>; I should have said “add an attribute to the reified transaction”
480,1501179392.646352,Margaret,"ahh! now I get it, thanks; so yeah, I would make an object that represents that reifications including the user id; this is getting deeper into datomic than my working knowledge of it - I’ve taken a workshop but not gotten far with it in real usage"
480,1501179686.820533,Lucio,"<@Margaret> haha ok, no worries. In general though, would you consider it “good code” if I wrapped all access to Datomic inside a protocol (e.g. IDatomicReaderWriter or something) so as to control how every transaction is made, and add some data to the transactions as I see fit?"
480,1501179760.864976,Margaret,I’d first see if this is an abstraction datomic itself allows; unless your goal is to be able to swap in another database (which probably means forgoing a bunch of the features that make datomic worth it?); I wouldn’t bother abstracting things that pragmatically wouldn’t be worth replacing ever
480,1501179831.90751,Lucio,I wouldn’t want to swap out Datomic. The only thing I would want is “intercept” calls to `datomic/transact` to add some data to the transactions; e.g. add the “current user id” as an attribute on the transaction
480,1501179870.931785,Margaret,"I’d say make your own function over transact that adds the data, probably parameterized with a hash map so you can generalize and introspect"
480,1501179871.932054,Lucio,so that I don’t have to do this manually everywhere I call `datomic/transact` in my application; ok; thanks!
480,1501179951.981871,Margaret,"one thing to avoid is opaque wrappers (whether partial or an Object with hidden state - which btw is what a partial or closure is) - use a record implementing datomic’s own protocol if possible, but parameterized by keys you can introspect on the record and access in context"
480,1501180027.02791,Lucio,"<@Margaret> is there a repl command to get the list of all protocols implemented by an object?; well, the record of which an object is an instance"
480,1501180050.041732,Margaret,supers
480,1501180064.050407,Lucio,ah right because protocols are just interfaces
480,1501180066.051158,Margaret,"oh, supers needs the class, but that’s easy enough; ```=&gt; (supers (class {}))
#{clojure.lang.IKVReduce clojure.lang.IFn clojure.lang.IMapIterable java.io.Serializable java.lang.Object clojure.lang.IObj clojure.lang.IMeta java.lang.Runnable clojure.lang.MapEquivalence clojure.lang.IHashEq clojure.lang.ILookup clojure.lang.IPersistentMap clojure.lang.Counted clojure.lang.IEditableCollection clojure.lang.Associative java.lang.Iterable clojure.lang.IPersistentCollection clojure.lang.AFn java.util.Map java.util.concurrent.Callable clojure.lang.Seqable clojure.lang.APersistentMap}```"
480,1501180086.063477,Lucio,"```
wef-backend.core=&gt; (supers (type (get-conn)))
#{#&lt;Class@35fc6dc4 java.lang.Object&gt;
  #&lt;Class@e7b265e clojure.lang.IType&gt;
  #&lt;Class@6b337969 datomic.Connection&gt;}
```"
480,1501180113.07995,Margaret,cool - so you can make a defrecord that implements Connection - the others come free with defrecord
480,1501180124.086621,Lucio,is Connection a protocol there?
480,1501180140.097001,Margaret,"this is the point where I end up reading source code usually, heh; I bet it’s documented … somewhere"
480,1501180165.112717,Lucio,"I’ll look into it. Thanks :slightly_smiling_face:; <https://gist.github.com/robert-stuttaford/39d43c011e498542bcf8>; I’ll ask <@Delana> , I am sure he has insights on this"
480,1501180392.253656,Margaret,"cool - thanks for asking about this, I learned a couple of things in trying to find your answer"
480,1501180421.271726,Lucio,"<@Margaret> Glad to hear that! I was afraid I wasted a bit too much of your time; <https://blog.clubhouse.io/auditing-with-reified-transactions-in-datomic-f1ea30610285>; In this article they wrap d/transact, as you were suggesting"
480,1501180590.375379,Margaret,"well - they do it slightly differently than I suggested, because the user-id org-id and tx-data are totally hidden once you call defn; err, I mean once you call transact-wrapper; the return value of that function doesn’t expose any of those things as data"
480,1501180616.390805,Lucio,"<@Margaret> do you think that’s an issue? it seems to simplify the life of the caller, especially if he doesn’t care about those; cluttering every function that calls transact with auth data that it doesn’t care about sounds problematic"
480,1501180670.422248,Margaret,"<@Lucio> until you are trying to debug code using the wrapper (in my experience) - it’s not always neccessary to use the alternative of using a record to store the data instead of a closure, but what this gains is quick access to what the thing actually encompases; you don’t clutter - the record itself is something you can call if you implement IFn - or you just expect people to use a protocol method with it as the first arg (also fairly reasonable but less fancy)"
480,1501180755.472783,Lucio,"<@Margaret> sorry, I think I am missing something. Can you give me a code example of what you mean?"
480,1501180766.479218,Margaret,hmm
480,1501180777.485454,Lucio,Just a quick snippet here on Slack
480,1501180832.518233,Margaret,"OK - I was just looking at this right now, sorry about the distracting details, but the big picture structure should be illustrative of what I am saying ```(defrecord Transmitter [transmit from user-data creator to journey routing]
  IFn
  (call [this] (.invoke this [nil this]))
  (run [this] (.invoke this [nil this]))
  (applyTo [this coll] (.invoke this (first coll)))
  (invoke [this [routing-override message]]
    (let [updated (into this message)
          routing (or routing-override routing (first journey))]
      (.invoke this routing updated)))
  (invoke [_ routing-override message]
    (let [{:keys [transmit generic]} message
          message (dissoc message :transmit :generic :routing :from :to)
          {:keys [journey routing message]}
          (if generic
            {:journey [routing-override]
             :routing :generic/reply
             :message (assoc message :generic-raw [routing-override message])}
            {:journey (rest journey)
             :routing routing-override
             :message message})
          {:keys [request-id birth-time]} user-data
          final-message (assoc message :journey journey :mediary to)]
      (when-let [schema-error (check-schema from routing final-message)]
        (log/error ::Transmitter
                   ""for routing""
                   (pr-str routing)
                   (pr-str {:journey journey})
                   (pr-str schema-error)))
      (log/trace ::simple-kafka-transmit routing ""to"" request-id ""from""
                 birth-time ""-"" (pull-transmit-info message))
      (transmit from routing final-message))))```; the transmitter has all this incidental data - who is sending? who is the target? what data did the initiator of the request expect to get back with any responses? what is the path the overall task should take through the system?"
480,1501180897.556778,Lucio,"But that’s basically the approach I was suggesting with a “DatomicWriter” protocol, no?"
480,1501180897.556813,Margaret,v1 wrapped this in calls to partial
480,1501180902.559447,Lucio,that “wraps’ transact
480,1501180921.571162,Margaret,the difference is that this returns an object that acts like a function; maybe I misunderstaood what `@(d/transact ...)` is in the transact-wrapper function
480,1501180966.598359,Lucio,"right, but so instead of doing something like
```
(transact transmitter conn tx-data)
```
you would do
```
(transmitter conn tx-data)
```"
480,1501180985.609691,Margaret,right
480,1501180991.613215,Lucio,"<@Margaret> (d/transact returns a promise I think, and @ dereferences it"
480,1501181009.623978,Margaret,and if you look at transmitter it shows you all the data it has inside; it acts like a hash-map; that’s the key thing to me
480,1501181016.627818,Lucio,<http://docs.datomic.com/clojure/#datomic.api/transact>
480,1501181038.640858,Margaret,OK
480,1501181052.649508,Lucio,Ok I see
480,1501181060.654436,Delana,what was the question :slightly_smiling_face:
480,1501181078.664956,Lucio,"<@Delana> Hi! 76 messages to read :smile:; just kidding, let me clarify the question:"
480,1501181088.670821,Delana,lol
480,1501181128.693846,Lucio,I want to add some attributes to every transaction in my sytem (e.g. for audit purposes; things like the current user ID) and I am wondering how I should do it
480,1501181152.708169,Margaret,your question suddenly sounds very focused and pragmatic
480,1501181153.708817,Lucio,e.g. should I wrap all access to Datomic behind a protocol that proxies most calls but does some stuff to transact’s tx-data before proxying; should I have an explicit function wrapping d/transact; etc; <@Margaret>  sorry :smile:; I guess that’s what talking about something for 80 messages does; it clarifies things
480,1501181190.730654,Delana,we use an explicit function wrapping d/transact and d/transact-async
480,1501181241.760835,Lucio,<@Delana> do you pass the auth context to all your “business functions” and then pass it explicitly to your function wrapping d/transact every time you call it?
480,1501181285.786783,Delana,"no; we use middleware and `binding` with a dynamic var; and if the var has a value, we annotate"
480,1501181304.798412,Lucio,I was told using dynamic vars will send me straight to hell
480,1501181322.809137,Delana,we have repl helpers that do the binding so that we also use it when manually altering the db at the repl
480,1501181336.817528,Lucio,do you somehow ensure that no intern misadvertantly uses d/transact instead of your wrapper?
480,1501181387.847976,Delana,"no. but in 5 years, it’s not been a problem. we had ONE case where someone retracted more than they should have. it was easy to fix; i do live i fear of an accidental d/delete-database though"
480,1501181409.861176,Lucio,"Ok, thanks a lot. One other thing: how do you handle security? Specifically, do you use d/filter?"
480,1501181426.871608,Delana,we can’t use d/filter ; we have too much sharing going on
480,1501181430.873949,Lucio,"yeah, it’s a bit odd there is no way to prevent /delete-database tbh; I guess with backups every 24 hours it eases the fear"
480,1501181446.883631,Delana,d/filter is nice if you have very strict boxes. we don’t.; hah. try continuously
480,1501181455.888839,Lucio,"although I wonder what would happen if the db got deleted, re-created, then a backup was run; would it get rid of the incremental backup?; how do you do access control them? do you have a nice approach?"
480,1501181515.924837,Delana,"we replicate our backups to off-AWS places, so we have some protection against that; access control what, the backups, or the repl access?"
480,1501181562.952897,Lucio,data access control; e.g. which users can see what; enforcing it
480,1501181589.968578,Delana,"oh, that’s basically normal queries in middleware"
480,1501181732.054943,Lucio,<@Delana> middleware as in you filter the query after executing it?
480,1501181769.076804,Delana,"no, simpler than that - we explicitly use the viewing user in queries"
480,1501181831.114909,Lucio,oh right.; what about the entity API?
480,1501181983.207442,Delana,"very often we use datalog to find valid entities, map d/entity, and go from there; sometimes we d/entity on a lookup ref, query to validate access, and continue"
480,1501182116.290092,Lucio,"right, what I mean is that d/entity will let you traverse the data tree without access control; but I assume so long as you control what is traversed, it’s fine; I am using GraphQL on my app and d/entity could cause issues if I tried to use it directly; and let the graphql query resolvers hit it directly; as it could potentially go any level deep in the data tree, reaching data that should not be accessible to the current user; if that makes any sense"
480,1501182238.36015,Delana,"oh right, yes. we totally control the query. we don’t allow arbitrary query from clientside; in that case, d/filter is a far safer approach"
480,1501182288.389024,Lucio,"<@Delana> ok, thanks. Sorry, my questions are not very clear today"
480,1501182301.396212,Delana,it’s ok :slightly_smiling_face: hth
481,1501186664.760622,Tammie,"So this is fun: when using postwalk, map entries are just vectors (so map-entry? returns false), so there is no way to distinguish a map entry from a map value that is a vector… Anyone else run into this?; I suppose a map key could also be a vector, which adds a 3rd case of ambiguity"
481,1501186733.797778,Daniell,<@Tammie> It's a known issue in JIRA...
481,1501186763.81392,Tammie,"<@Daniell> say no more, and thank you"
481,1501186769.817087,Daniell,<https://dev.clojure.org/jira/browse/CLJ-2031>; (go vote for it!)
481,1501187018.950037,Tammie,"ah, prewalk works for my use case; (and I voted)"
482,1501187754.35162,Margaret,"if I am implementing something that is meant to be used in place of a function, is it enough to implement IFn or should I implement AFn too?"
482,1501187811.381775,Rebeca,"it sort of depends on how you are implementing it, AFn is an abstract class so dealing with it from clojure is kind of a pain, but from java that is where I would start"
481,1501187830.391846,Margaret,"OK - this is clojure code, so I hope I’m safe ignoring AFn"
481,1501187837.395275,Rebeca,"AFn provides defaults for a lot of things like the applyTo machinery and such; I often will implement IFn and just particular invoke arity that I expect to be used; but such an object will not always behave like a function; I think apply won't work, and you will get some weird brokeness with more than 20 args, and maybe fn? will return false"
481,1501187926.443798,Margaret,yeah - this is a macro implementing generally something you recommended earlier (making a record that can be called like a function but unlike a lexical closure you can also look at the data in its keys) - trying to make it a convenient to use replacement for code that uses partials extensively; I just verified I implemented things properly to make apply work for over 20 args; but returning false for fn? is acceptable
481,1501188029.498167,Rebeca,"I think you can fix that too, if I recall fn? checks some marker interface"
481,1501188048.508517,Margaret,"instance? clojure.lang.Fn; easy enough to extend that, it has no methods; sweet!"
481,1501188080.525295,Rebeca,yep
481,1501188147.56129,Margaret,"thanks - I think this will be a handy little one macro lib, just need a snappy marketable name"
481,1501188954.987523,Sandy,"<@Margaret> big note: you probably want ifn? if you want to check if something is a function. fn? does something different (and is normally wrong, imo)."
481,1501189215.126684,Margaret,"<@Sandy> so if I am making something that is a drop in replacement for a function returned from partial, would it be a bad idea to make fn? return true from someone else’s check?; I guess that’s a style issue"
481,1501189352.199304,Sandy,"nah, just code against IFn, and then `ifn?` will return true, which is what most people should be using"
481,1501189419.233604,Margaret,:thumbsup:
483,1501189469.258974,Jutta,will be possible with spec :wink:
481,1501189484.267204,Margaret,"<@Sandy> on thing though, in my code, checking ifn? would lead to surprising results here ```=&gt; (ifn? :hi)
true```; that could be a sign of doing other things wrong I guess…"
481,1501189519.28478,Guillermo,"that doesn't surprise me, a keyword is a function"
481,1501189526.288513,Sandy,(What <@Guillermo> said)
481,1501189582.316318,Guillermo,"I suppose the `fn?` stole the good name early, but had the wrong semantics"
481,1501189618.333562,Sandy,"yeah fn? really means ""something that was created with `(fn ...)`"""
481,1501189661.354588,Rebeca,fn? was added when trampoline was added; continue-trampolining?
481,1501189679.363433,Margaret,"yeah, I guess the answer of `(defmulti foo first)` `(fn? foo)` can be a guide there"
481,1501189711.378916,Guillermo,"-----------------------------------------------
Sooooooooo who here has played with `tools.deps.alpha` and what do they think?
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
481,1501189743.394856,Willow,i looked at the version compare and it seems like it will return `1.1` &gt; `1.9`; but i don't know how to crank it up since it's based on the pom file rather than a project file
481,1501189777.411596,Rebeca,10541c0254973ce045305499d4b5622073ede622 (is the trampoline commit fyi)
481,1501189782.414415,Willow,"i'm not a java guy; it also specifies its own deps in the new edn format. does that make it ""self-hosted""?"
481,1501189848.446886,Guillermo,<@Willow> if you have `mvn` installed you can crank it up using the commands in the README.  Use of mvn/pom is a one-time thing at setup.  (It will probably be handled by the package manager when this stuff filters over there)
481,1501189866.455668,Willow,"thanks. i'll get that going tonight; yeah i wanted to play with it and do a PR for 
```
;; TODO - choose better
(defn- choose-coord
  [coord1 coord2]
  (if coord1
    (if coord2
      (let [v1 (:version coord1)
            v2 (:version coord2)]
        (if (pos? (compare (str v1) (str v2)))
          coord1
          coord2))
      coord1)
    coord2))

```"
481,1501189921.482153,Guillermo,"once you have it installed, you can use it in a project folder (using `$PWD/deps.edn`) or globally (using `$HOME/.clojure/deps.edn`); The version comparison seems intentionally naive, no need to poke fun at that yet :smiley:"
481,1501189977.509211,Willow,oh i know. i wasn't doing it in the notion of sniping
481,1501189977.509248,Guillermo,If you specify versions explicitly you won't invoke that code
481,1501189993.516655,Willow,but let alex and others figure out the hard stuff and I could help out with the easy solved stuff
481,1501190004.521961,Lucio,"I would like to write a function (if possible with the stdlib) to check if a map “matches” a pattern. More specifically, I would like to describe a map in terms of another map with the same structure, whose values can either be ints/bools/strings or regexs. If the value are ints/bools/strings they they should be compared for equality with the target map, and if they are regexs they should match"
481,1501190014.526604,Willow,"i meant ""take this off their plate"" not like ""i can't believe they coded this"""
481,1501190035.536536,Lucio,"e.g.
```
{:first-name ""john""
 :last-name #"".*""}
```
should match 
```
{:first-name ""john""
 :last-name ""doe""}
```; it should work for deeply nested maps"
481,1501190056.546301,Guillermo,i know :smiley:  I wonder what lein and boot do
481,1501190058.547593,Willow,spec?
481,1501190064.550593,Lucio,(I would use it to write tests checking the expected output of an API)
481,1501190071.553942,Rebeca,there are a few  options; (for the map thing)
481,1501190085.560479,Lucio,mmh yes specs would work but it seems a bit overkill for what I need
481,1501190101.567771,Rebeca,"you could just take two maps, the first being the shape and the second being the data and recurse through them"
481,1501190126.579423,Lucio,<@Rebeca> that’s precisely what I’m wondering how to do. Is there an easy way to express this recursion procss with stdlib functions?
481,1501190128.580486,Rebeca,you can take the description map and turn it to into a sequence of paths and predicates and reduce over that with the data
481,1501190148.589743,Lucio,"or to turn it into a sequence of paths; ah, found an example. <http://blog.jayfields.com/2010/09/clojure-flatten-keys.html>"
481,1501190362.691491,Rebeca,"```

(defn f [m1 m2]
  (letfn [(g [p m]
            (if (map? m)
              (for [[k v] m
                    i (g (conj p k) v)]
                i)
              [[p m]]))]
    (reduce
     (fn [x [path predicate]]
       (and x (predicate (get-in m2 path))))
     true
     (g [] m1))))
```; dictated but not read, etc; that assumes the description map is a map of keys to predicates, so you will have to change it to do your regex and = compares instead"
481,1501190431.723985,Lucio,"great. It’s sane to convert it to a map of predicates anyway; thank you!; I was thinking of writing my tests in a descriptive form as EDN, using tags for different types of predicates; (e.g. regex); with your approach it should extend nicely to other predicates"
481,1501190741.868017,Guillermo,<https://maven.apache.org/resolver/apidocs/org/eclipse/aether/util/version/GenericVersionScheme.html>; that might be useful from the same library that tools.deps already uses
484,1501197646.261386,Clementine,Is there a protocol I can implement to get peek/pop/conj to work on a queue like datastructure I'm building?
484,1501197729.282944,Rebeca,conj maps to the cons method of IPersistentCollection java interface; peek and pop map to the IPersistentStack java interface (with the same method names)
484,1501197789.298974,Clementine,Thank you
484,1501208990.690079,Loretta,"<@Clementine> and though you’re building your own, clojure has a `PersistentQueue`, if that helps you in some way, and peek/pop/conj work on it"
485,1501212418.284529,Billye,"Anyone know a good way to do synchronous REDIS pub/sub? Basically publish a message, and wait for the message response before moving forward evaluating?"
485,1501214295.589357,Loretta,"<@Billye>  in a pub/sub model, you publish a message, but you don’t receive any response. Maybe you mean that you’d like to wait until the publish has completed before continuing. I’m not a redis expert by any means ,but I don’t think it’s possible to do this in redis (Kafka, by contrast, allows you to both pass in a callback function and also returns a Future that you can use to determine completion of the publish).  Consider whether you actually need to know when the publish is complete, as one of the main benefits of a pubsub architecture is that the publisher really knows very little about who will consume its messages"
485,1501214432.61305,Billye,"<@Loretta> Yep I've used the classic pubsub structure, but what I'm describing is a special use case. No worries though I think I figured it out."
486,1501220580.591867,Lavinia,"So I'm making a clojure desktop app that relies heavily on plugins. I'm thinking about using pomegrante to load them on the classpath (from a specific directory). Is that a reasonable idea, or is it likely to break?"
487,1501227705.181888,Zena,"In datascript, is there a way to only return results based on how many entries in a ref they have? E.g. only return results X that have 2 Y stored in X.refY"
488,1501227996.267819,Orlando,"you mean, from queries?; I can’t think of a simple way to do that; you can
```
(d/q '[:find ?x (count ?y)
       :where [?x :ref ?y]]
     db)
```
and then filter the results yourself"
488,1501228490.416864,Zena,"Ah. So, no `count`in `:where`."
488,1501234544.519351,Orlando,no :)
489,1501238545.82085,Berry,"normally, macro expansion is outside in, however, is it possible to write a macro foo which says:

(foo ...)
==&gt;

do all macro expansion of ..., then pass it to some other function for post processing ?; <https://clojuredocs.org/clojure.walk/macroexpand-all> &lt;-- is this bug for real ?; seems to suggest that macroexpand-all is broken since 'pure data' is being expanded"
489,1501239073.97208,Kareen,macroexpand-all is not lexical scope aware
490,1501242667.977003,Lucio,<@Ramonita> would you recommend using <https://github.com/weavejester/cljfmt> ?
490,1501242711.989992,Ramonita,<@Lucio> I find it useful :slightly_smiling_face:
490,1501242713.990332,Lucio,(aka does it have any known significant issues); does it auto-wrap lines above a certain length?
490,1501242769.006358,Ramonita,"<@Lucio> It could have more features; I haven’t had time to work on it recently, but aside from that, not that I’m aware of… It might not support reader conditionals; I can’t recall.; <@Lucio> No, cljfmt is pretty conservative.; There’s another one, zprint, that just removes all formatting and reapplies it.; Whereas cljfmt just tries to fix formatting that’s wrong."
490,1501243236.141672,Lucio,"<@Ramonita> Thanks, I’ll take a look at zprint too then!"
491,1501247200.57441,Lavinia,"I'm looking to create a plugin system for my application that will allow me to distribute it as an uberjar and then load the plugins from the classpath, ideally as jar-files without the source but I'm willing to fudge on that. Does using pomegrante (<https://github.com/cemerick/pomegranate>) for dependency management seem reasonable? I get the impression that having the same libraries with different versions will usually wreak havoc."
492,1501248807.339038,Kami,"My friend asked me to give him one resource link for him to start learning Clojure. I proudly gave him this <https://clojure.org/guides/getting_started>. 

Shout out to everyone who involves in making it this great! Thank you!"
492,1501250259.123157,Berry,"```

(require '[clojure.walk :as walk]) 
(println (walk/macroexpand-all '(quote (let [a 1] a)))) 
; (quote (let* [a 1] a))
 
```
is above viewed as a bug or a feature ?; (and if a feature, what is the reasoning)"
492,1501250371.188757,Kareen,"I'd say it's neither a bug nor a feature, it's a limitation of `macroexpand-all`, it has no awareness of lexical scoping or evaluation rules (and doesn't claim to); if you want to macroexpand all with lexical scoping &amp; evaluation awareness, use either tools.analyzer.jvm or riddley"
492,1501250706.386085,Berry,"one of the things that makes it easy to write new DSLs in racket is the ability to write

```
#lang foobar
```

at the top of a file, then define a foobar reader/expander, and viola you can write foobar code in *.rkt files.

Does Clojure have any feature like this (perhaps as a library) ?"
492,1501250714.390821,Kareen,no; clojure's reader and macroexpander are not extensible in the way that racket's are
492,1501251154.641491,Berry,"<@Kareen> : to the best of your knowledge is there anyway to get racket's ""dsl building"" features in clojure ?"
492,1501251188.661209,Kareen,use racket :) 
492,1501251202.669627,Berry,"if it had decent jvm / js support, I would :slightly_smiling_face:"
492,1501251226.683437,Kareen,clojure's philosophy is not really compatible with the language extensibility features of racket 
492,1501251227.683691,Berry,"the tco/continuations I don't really need, but the dsl building capabilities are something else"
492,1501251315.734072,Raymond,TCO would be really nice to have
492,1501251396.781996,Kareen,"would it? how many times do you actually use recursion (and more specifically, non-tail recursion) in clojure?"
493,1501251682.95015,Raymond,0 times cause there is no TCO :stuck_out_tongue:
492,1501251714.9688,Raymond,we have partial TCO at least with recur
492,1501251758.994789,Kareen,"yes, my point is, if you can express your programs using reduce/map and loop recur if necessary, how would TCO be really nice to have"
492,1501251763.997567,Raymond,lazy sequences somewhat alleviates the need for TCO but some algorithms are nicely expressed using mutual recursion
492,1501252681.550086,Millicent,i like that loop/recur enforces tail position for the recur call actually
494,1501253823.247238,Sandy,And as Guido pointed out more than once about Python. TCO has a nasty habit of removing bits of your call stask you may have wanted during debugging.
494,1501254425.622852,Loretta,<@Raymond> trampoline for that :wink:
494,1501254493.662996,Raymond,<@Sandy> that's feature of TCO :slightly_smiling_face: - if you really need that add an accumulator
494,1501254548.696561,Sandy,"You think you have confusing stack traces now? Just wait until you see ""foo called bar"", and you look at the source and foo never calls bar.; That's a good way to waste a few hours in debugging."
494,1501254850.878391,Loretta,"given that you really don’t want to use stack-consuming recursion in general, so you’ll be calling from tail position most of the time anyway, you replace `foo` with `recur` in your call, and it’s quite literally the same, except you’re being explicit that this is TCO’d … implicit would be fine, but in most cases you quite literally gain nothing, IME anyway <@Raymond>; `(defn foo [x] (if (g x) ""done"" (foo (f x))))`
versus
`(defn foo [x] (if (g x) ""done"" (recur (f x))))`"
494,1501254929.92619,Sandy,"and with recur you get compiler checked tco, so you know when you messed up."
494,1501255262.125466,Raymond,"<@Loretta> yes, recur was mentioned, was referring more about tail calls to other functions rather than self calls"
494,1501255366.18741,Loretta,"yeah, using `trampoline` has its drawbacks but happy there’s the option"
494,1501255860.488547,Raymond,"<@Sandy> I'm not saying its a must have just that it would be nice to have the option of full TCO, Clojure being a lisp and all.; Does the JVM even has plans to ever implement TCO?"
494,1501256790.046553,Aldo,I really doubt it'll ever happen
495,1501258365.969903,Lavinia,"What's the best way to add a directory to the classpath after a clojure program has started up? I found pomegrante (<https://github.com/cemerick/pomegranate>), but from the readme: ""add-classpath and add-dependencies should be considered escape hatches to be used when necessary, rather than a regular part of your development workflow,"" which makes it seem like it would be unsuitable for a production program."
495,1501258604.101434,Rebeca,"the classpath is just something the system classloader uses to load things, you don't really want to alter the classpath, you want to create yourself a classloader and use it to load code; but if you are not experienced enough with the jvm to know how the classpath and classloaders work, I would suggest you find an alternative means to your ends. getting classloaders to both do what you want and behave correctly is non-trivial, and you will immediately be plunged in to the deep end"
495,1501259000.315103,Berry,Are there any good guides for writing compilers inside of clojure (inside of writing compilers from clojure to some other target language.)
495,1501259078.357961,Daniell,There won't be anything Clojure-specific -- but the principles of compiler writer are the same regardless of language.; The main issue you'll have is that most compiler-writing material is going to be illustrated with non-functional languages.
495,1501259134.388043,Rebeca,the clojurescript compiler and the go macro implementation in core.async are pretty decent examples (I don't know of any prose write ups)
495,1501259229.438751,Aldo,instaparse may be of interest <https://github.com/Engelberg/instaparse>
495,1501259276.464505,Daniell,"<@Berry> Here's a book about writing a compiler in a functional language <http://www.cs.princeton.edu/~appel/modern/ml/> (Standard ML, but the same functional principles will apply)."
495,1501259349.503042,Berry,is there a nice way to translate union types from SML to clojure ?
495,1501259375.517181,Margaret,"Object is a supertype of all union types on the jvm, no?"
495,1501259474.571631,Daniell,<@Berry> Use tagged maps and multimethods?
496,1501260040.867236,Lavinia,I'm definetely not experienced with the classpath and classloaders. Is there an alternate way to make a sane plugin system? Clojure doesn't really have any libraries dedicated to that it seems
497,1501261973.894014,Sophie,"Transducers question:  When combining functions with `(comp)`, the functions end up being applied in right-to-left order.  When combining transducers with `(comp)`, the transducers end up being applied in left-to-right order.  Is that intentional?; I’m just trying to gain an intuition here, if there is one to be had"
497,1501262043.930349,Billye,Anyone know the lighttable plugin for moving parens via keyboard shortcuts?
497,1501262349.090372,Aldo,<@Sophie> it's not so much intentional as just a consequence of how transducers work
497,1501262363.098267,Sophie,"okay, this is what I’m looking for; please explain; if you would be so kind"
497,1501262422.130036,Aldo,I think this thread should explain it for you <https://groups.google.com/forum/#!topic/clojure/OeXZOJYydAs>
497,1501262510.177623,Sophie,"very helpful, thank you <@Aldo> !"
497,1501262567.206934,Aldo,"no worries, I remember finding that consequence  pretty interesting myself"
498,1501263468.690427,Julius,Anybody have tips or know of a write up or library for implementing fine grained role based permissions in a ring/compojure web app? I mean something like check that this particular user has a role with permissions to delete/modify this particular record.
498,1501264543.270028,Ava,<@Julius> friend can help with that: <https://github.com/cemerick/friend>
498,1501264806.415047,Julius,"Thanks <@Ava> I want something like the authorize macro but more focused and easier to use (with docs) to recommend to another developer.; Also, that doesn’t depend on friend specific attributes (like *identity* being bound, hierarchical keywords, etc.)"
498,1501265133.598343,Amado,"is it possible to update 2 keys at once inside a map using clojure’s `update` function? something like
```
(update {:a 20 :b 10} :a inc :b dec)
```"
498,1501265166.615518,Ava,"all you really need to do is have some ring middleware that populates a session key containing a user-id in the ring request. then your controllers can take that user-id and build whatever authz (role-based, fine-grained permissions based on models, etc) that you want; there are a bunch of helpers for doing things like working with encrypted+signed session cookies"
499,1501265324.699077,Aldo,"<@Amado> not with update afaict, reduce works though (reduce #(update %1 %2 inc) [:a :b])"
498,1501266597.380842,Lucio,"<@Amado> what about this?
```
(merge-with #(%2 %1) {:a 20 :b 10} {:a inc :b dec})
```"
499,1501266659.414431,Aldo,^that's pretty bloody cool
499,1501266951.573539,Margaret,or `(-&gt; m (update :a inc) (update :b dec))`; which I think tends to be the version that is easy to read and refactor
500,1501269396.822746,Opal,"So how do you provide high availability? Right now in prod we just have on JVM instance that handles our web traffic, datomic peer, and background jobs. It’s handling the load fine but we don’t want it to be a single point of failure. Also it’s been nice to reason about things by just having one process.

I figured we could take two approaches. The Datomic transactor approach, have a backup instance that just sits idle and takes over if the main instance dies. The other is to have a pool of instances that can operate independently, possible separate web workers from background job workers. Sort of like the way Rails does it."
500,1501269413.830759,Guillermo,"^ that GenericVersionScheme already proved useful; you can't override the broken spec.alpha reference from 0.1.94 to 0.1.123 right now, because the comparator is busted"
500,1501269461.853277,Sandy,<@Opal> most systems I've worked on use a load balancer and more than one web server. If one server goes down the loadbalancer stops sending requests to it
500,1501269551.894888,Opal,<@Sandy> do you see anything inherently flawed about the Datomic transactor approach for web servers? Just because we built our whole architecture assuming one instance.
500,1501269563.900621,Sandy,It's really hard to implement; you have to make sure you somehow don't have both instances running at the same time.
500,1501269604.919549,Lucio,Hi! I would like to metaprogrammingly define a bunch of tests (based on descriptions in an EDN file). Roughly speaking I want to loop over the content of an EDN file and define `deftest` blocks on the fly
500,1501269637.934417,Opal,sounds like a job for a macro
500,1501269639.935219,Sandy,"continuing here to allow others to use main chat; So the other problem is that a single server is rather limiting. A app that is unhappy with multiple instances needs to be redesigned, imo.; Single writer is fine, but limiting reads to a single box is a scaling issue long-term."
500,1501269717.972404,Opal,"I see, Stuart Halloway made it sound simple in on of his videos. But I’m probably overlooking a lot of stuff.; Anyway thanks for the response. And by the way those core asnyc videos you did a while back were fantastic!"
500,1501269754.989643,Sandy,"Look at the implementation of deftest. You may not even need a macro. Most of the clojure.test interface is data driven, so it's possible to run a single function that does a ton of work, and reports results with custom report logic.; Well, remember that the Datomic transactor doesn't handle reads, only writes."
500,1501269782.002576,Lucio,"<@Sandy> ah, so I could just have a single deftest with a bunch of assertions?"
500,1501269800.011377,Opal,"Ah, yeah that’s true!"
500,1501269811.016312,Sandy,"And those writes are serialized. So you can do stuff like: finish your current transaction, then reject the remaining writes, then shutdown"
500,1501269817.01967,Lucio,e.g. a single “rest api” test block that runs tests on all endpoints?
500,1501269830.025528,Sandy,"Also Datomic only fails over once. It won't fail back to the original transactor automatically, as that could cause flip-flop issues.; Sure, I do that sort of thing all the time; also, although `testing` says it wants a string, it will take an expression as well: <https://github.com/clojure/clojure/blob/master/src/clj/clojure/test.clj#L596>; So you can do:

`(testing (str ""running-endpoint-"" url)
   ....)`"
500,1501269975.095257,Opal,How does serialized writes change anything? Not sure I understand that point.
500,1501270028.119697,Sandy,"You only ever have a single thread writing to storage, and that simplifies things a bit. Transactions during a shutdown can be in 3 phases: pending, writing, written.; And there will only ever be one that's being written. Pending transactions can be discarded, and then you have to figure out something to do with written.; But in general it sounds like your app is a bit more complicated than ""a process that reads from a queue, indexes data, and writes it to disk"".; So what are you doing that makes the server hard to duplicate?"
500,1501270187.193806,Opal,Yeah it’s a SaaS for marketers. Well we have every client connect to the webserver via websockets. Then we use the TxReportQueue to push novelty to the each client over the websocket.
500,1501270205.202687,Lucio,"<@Sandy> brilliant, ty"
500,1501270213.206327,Sandy,so what about that can't be done with multiple boxes?
500,1501270248.223066,Opal,"We also have situations where we make an HTTP request for several blobs of data, the HTTP response is empty, but we load those blobs asynchronously over the websocket."
500,1501270254.226097,Sandy,"Sounds perfect, incoming data is pushed to Datomic, the TxReportQueue pushes to all the connected peers.; as opposed to sending the request over the websocket?"
500,1501270305.249727,Opal,"yeah, I suppose we could send the request over websockets instead.; the only reason we send it over http is for legacy reasons"
500,1501270362.276001,Sandy,"so your current pattern would have problems with a loadbalancer out-of-the-box, but most load balancers also support things like routing all requests from a single client to the same server"
500,1501270452.317238,Opal,"hmm yeah that might work, then the websocket and the http requests would be guaranteed to be connected to the same instance"
500,1501270474.327535,Sandy,"another approach I've used, which might work with smaller numbers of clients, is that you maintain a message queue for each connected websocket. When a user connects to the system they start receiving messages from their queue. That way if the websocket connection breaks, they can reconnect via a different server, and pick up where they left off by reading from the same queue, but on a different server.; then your HTTP requests can also go into a message queue with a ""response queue"" name as part of the request.; That's a rather complex model that works quite well, but has more moving bits."
500,1501270544.359637,Opal,and what would you use for the message queue bit?
500,1501270564.368443,Sandy,"I've used RabbitMQ for this, but Id probably use Kafka these days since it's immutable"
501,1501270571.371886,Renata,"```
;; breaks with EOF while reading
(some-&gt;&gt; (identity [:#something])
         (filter identity))
;; works
(some-&gt;&gt; (identity [:#something]) (filter identity))
```
whhyyyy? :smile:"
500,1501270588.37984,Sandy,"so when a client reconnects they can say ""I last read from message #4434"" and then they can start getting data from that point on."
500,1501270611.390099,Opal,"i see; yeah the load balancer approach might be most appropriate for us; This has been really helpful, thank you."
500,1501270896.521098,Margaret,I’d blame that on :#anything being invalid
501,1501270900.522909,Tuyet,is there a predicate equivalent to `(or (fn? %) (and (var? %) (fn? (var-get %)))` ?
501,1501270982.559947,Margaret,no
501,1501271049.590081,Lucio,Is there a project (more specifically a web application) which lets you search the std lib by giving one (or many) input-output samples?
500,1501271066.59788,Margaret,<@Lucio> there’s findfn which is a lib
500,1501271072.600613,Lucio,"e.g. give it `#(* 2 %), [1 2 3] [2 4 6]` and it would tell you it’s map; by trying it out on very clojure.core function"
500,1501271082.604918,Margaret,<https://github.com/Raynes/findfn>
500,1501271088.607208,Guillermo,look at <https://crossclj.info>
501,1501271098.611645,Guillermo,not exactly what you're asking
500,1501271116.619976,Lucio,"<@Guillermo> ha, still cool!"
500,1501271124.623861,Guillermo,good for finding examples out in the wild.
500,1501271143.632231,Lucio,exactly what I was look for; thanks! I thought about building a web app for this but if it already exists…
500,1501271208.6625,Margaret,"findfn gives really surprising results sometimes (eg. the long list of clojure.core functions that are effectively identity if called on one arg); but history shows I’m easily amused, so there’s that"
502,1501274813.269516,Guillermo,is there a vim repl plugin that works *without* nREPL?; similar to emacs/inf-clojure
502,1501275080.383577,Margaret,the newer vim can do socket comms - so it *should* exist even if it doesn’t; <@Guillermo> using this to connect to clojure socket server would be a fun weekend hack I bet <http://vimhelp.appspot.com/channel.txt.html>
502,1501275223.443374,Cecile,<http://blog.cognitect.com/blog/2017/4/17/clojure-for-neovim-for-clojure>; and <https://github.com/jebberjeb/clojure-socketrepl.nvim>
502,1501275271.463783,Margaret,"oh, nice"
502,1501275322.486109,Guillermo,"interesting, thanks!"
503,1501319732.852646,Lucio,Hi! Is there a “test reporter” for plumatic schema (or another schema lib?)?; usecase: I want to validate API responses in tests against a schema and have a nice test report if things fail
503,1501342915.421012,Margaret,"<@Lucio> what I do is call s/check on the schema and the object, and fail if the result isn't nil with the output of check in the failure"
503,1501342953.42415,Lucio,<@Margaret> how should I configure clojure.test to have a nice output for “expected” and “actual” on the report?
503,1501342955.424367,Margaret,<@Lucio> test/is lets you put anything you want in the second arg's string; <@Lucio> umm that's kind of what clojure.test does when you run the tests; are you talking about doing this outside unit tests?
503,1501342986.427185,Lucio,"it only seems to work fell for some predicates; no, running the tests; for example, if the predicate is any arbitrary function it won’t report much; I wrote a dumb, poor “schema” toy lib; and getting a report such as:
```
expected: (v (get flat-target k))
  actual: false
```; (v is a predicate function); I’ll try with the approach you suggest; (that’s running it with `test/is`)"
503,1501343117.438347,Margaret,"```Clojure 1.9.0-alpha15
+user=&gt; (require '[clojure.test :as t] '[schema.core :as s])
nil
+user=&gt; (t/is (nil? (s/check [Number] [""a""])) ""expected a number"")

FAIL in () (NO_SOURCE_FILE:2)
expected a number
expected: (nil? (s/check [Number] [""a""]))
  actual: (not (nil? [(not (instance? java.lang.Number ""a""))]))
false
```"
503,1501343125.439116,Lucio,"Maybe I could call do-report manually instance; mmh; hang on; seems to work, ok, nevermind"
503,1501343367.459645,Margaret,"if you test a predicate, all you get in the error is that the predicate didn't return the true/false you expected"
504,1501344833.587805,Margaret,"```+user=&gt; (defmacro handle [obj prop fun]
  `(.setValue ~(symbol (str (name obj) ""/"" (name prop))) (fi javafx.event.ActionEvent ~(symbol ""event"") ~fun)))
#'user/handle
+user=&gt; (macroexpand '(handle a :onAction (fn [x] nil)))
(. a/onAction setValue (user/fi javafx.event.ActionEvent event (fn [x] nil)))
``` I don't know if it's cider, but something's misbehaving"
504,1501344835.587906,Zena,"...ah, it didn't compile and didn't say anythign"
504,1501344871.591094,Margaret,oh - right-  macroexpand silently outputs a form that doesn't start with a known macro; even if the thing in it isn't defined
504,1501344893.592829,Zena,"Back to the drawing board, I guess. Apparently I'm still too dumb to do macros."
504,1501344936.596855,Margaret,"Cider magic introduces ambiguities and special cases about what's been evaluated and what hasn't, it's an easy mistake; and macroexpand doesn't care if the things inside it are known, it just expands known macros and leaves the rest alone"
504,1501345047.606197,Zena,"Ok so it expands with `C-x e` in the editor, but not in the REPL, which is set to be the same ns. Huh.; Heh ^^ But I wouldn't want to miss it. It's weird, but it's great.; ...like Emacs, I guess :stuck_out_tongue:"
504,1501345269.625677,Laurice,"`C-x e` by default is for calling a keyboard macro inside Emacs, and I think the default binding for expanding a clojure macro is `C-c RET` which works for me from the REPL as well; `C-c RET` for `cider-macroexpand-1` and `C-c M-m` for `cider-macroexpand-all`"
504,1501345395.636616,Zena,Ah. So `clojure.core/macroexpand` isn't expected to work in the CIDER REPL?
504,1501345440.64049,Laurice,"oh right you are typing it in the REPL, let me try that"
504,1501345478.643678,Zena,exactly
504,1501345512.646403,Laurice,I get the same result as <@Margaret> when typing it in the REPL
504,1501345626.656184,Zena,"It simply returns the input for me on the REPL, but works fine when evaluating with C-x e in the editor; But `C-c RET` is a more-than-worthy REPLacement anyway"
504,1501345728.665111,Laurice,what is `C-x e` bound to for you?
504,1501345790.670633,Zena,"The default, that is evaluating the expression at the cursor"
504,1501345947.685251,Laurice,perhaps you mean `C-x C-e`?
504,1501345974.687601,Zena,"Ah, yes, right."
504,1501346042.693912,Laurice,"it works for me the same way regardless of whether I type it or evaluate the form in a code buffer or in the REPL; I'm not on the latest version however, so perhaps something changed, anyways this should probably belong to <#C0617A8PQ|cider>"
504,1501346110.70015,Willow,"```
fizzbuzz.core&gt; (macroexpand-1 '(handle a :onAction (fn [x] nil)))
(.setValue a/onAction (fizzbuzz.core/fi javafx.event.ActionEvent event (fn [x] nil)))
```; am i missing something from the discussion on macroexpansion with CIDER?"
504,1501346261.714117,Zena,"<@Willow> no, you don't miss anything.
`clojurefx.controllergen&gt; (macroexpand-1 '(handle a :onAction (fn [x] nil)))
(handle a :onAction (fn [x] nil)`"
504,1501346289.716584,Willow,ah. weird
504,1501346309.718373,Zena,Maybe I gotta restart cider. Maybe I've messed something  up.
504,1501346390.725276,Willow,what does `(meta #'handle)` return?
504,1501346505.73534,Zena,"Already restarted the REPL now... I guess what one'd expect now.
`{:arglists ([obj prop fun]), :line 37, :column 1, :file ""/home/zilti/projects/clojurefx/src/clojurefx/clojurefx.clj"", :name handle, :ns #namespace[clojurefx.clojurefx], :macro true}` but it works now"
504,1501346519.736434,Willow,huh. weird
504,1501366879.322884,Lucio,"Would it make sense to use a record with no fields purely to implement a protocol?; e.g. use the record as a way to get an object implementing some functions (the protocol) so you know it follows a certain interface; without needing the record to hold any data; It’s a bit of an odd question, I am not sure it’s sensible"
504,1501367130.33831,Margaret,"sounds like a job for deftype or reify; deftype if you need a named class, reify if you don't"
504,1501367272.346179,Lucio,"I found a better solution to my problem (not involving this scheme) but my question still stands. To give you some context, I have a bunch of entities that have different access patterns. I was thinking of having an `Entity` protocol with some functions such as `get`, `put`, etc (`EntityRepository` might be a better name actually). Then have a record per entity type implementing that protocol, e.g. `(defrecord UserRepository [] EntityRepository (get...`"
504,1501367343.350412,Margaret,the syntax to use reify or deftype there is nearly identical
504,1501367352.350973,Lucio,it wasn’t really meant as a way to allow to polymorphically pass any EntityRepository; but more as a way to ensure that UserRepository implements the right methods
504,1501367379.35266,Margaret,"and it will behave the same (except the whole ""acts like a hash map"" part)"
504,1501367385.353026,Lucio,"(to have a consistent API for accessing entities across the app, even if at the call point I always know what kind of entity I am accessing)"
504,1501367407.354413,Margaret,I still don't see why any of  these things imply a defrecord instead of deftype or reify
504,1501367421.355374,Lucio,"I don’t either, I’ve no idea what deftype does :smile: looking now; I was just trying to give you a bit more context, just in case; yeah you are right, deftype is a better idea in this case"
504,1501367513.360904,Margaret,"<@Lucio> the chart here is useful <https://cemerick.com/2011/07/05/flowchart-for-choosing-the-right-clojure-type-definition-form/>; it recommends reify for your case, unless you need a named type for some reason not mentioned yet"
504,1501367535.362291,Lucio,"defrecord is just sugar on top of deftype right?; ok; ah, thanks, helpful flow chart!"
504,1501367569.364185,Margaret,it's like deftype but it automatically acts like a hash map (which is a feature you don't need)
504,1501367597.365783,Lucio,Could I implement that behaviour myself on top of deftype?; by implementing some protocols?; or it’s some compiler wizardry?
504,1501367634.367854,Margaret,"deftype implements protocols, so yes you can do it by implementing the right ones"
504,1501367634.367878,Lucio,"(just curious, not planning on re-inventing defrecord); ok; thank you :slightly_smiling_face:"
504,1501367930.385361,Tameika,"what is a safe way to suppress ALL output from a called function? I tried both wrapping it up  with ""with-out-str"" and redirecting output with bindings like ""(binding [*out* ""chuj"" *err* ""chuj2""] "", but my called function still outputs tons of shit"
505,1501368349.41083,Torie,<@Tameika> the code could be using `System/out` directly
505,1501368420.415043,Tameika,"(binding [*out* ""chuj"" *err* ""chuj2"" System/out ""chuj3""] ??"
505,1501368444.416548,Torie,"`System/out` is a Java thing, imagine calling into native java code which does some printing"
504,1501368451.416974,Lucio,<@Tameika> edgy kids would run it in a Docker container for complete isolation :kappa:
504,1501368699.43087,Torie,"<@Lucio> I don’t understand how Docker could be related to the problem, or I don’t understand the problem :slightly_smiling_face:"
505,1501368785.436132,Torie,"he calls a function, which can potentially call some non-clojure code, which can potentially print something, redirecting clojure’s print facilities does not help redirecting all possible output; even clojure code could do directly `(.write System/out ""something"")` bypassing Clojure’s `*out*`"
504,1501368832.438784,Lucio,"I was trolling, sorry"
504,1501368955.445875,Torie,"if this is what is happening, <@Tameika> would have to capture the output on lower-level in Java land, something like this: <https://stackoverflow.com/a/8708357/84283>"
505,1501369120.455286,Tameika,"I could run the function in a separate process and use OS stuff to redirect it's output, this is(besides inefficient and ugly) not so good since my function is changing some global variables"
505,1501369268.465326,Torie,"<@Tameika> the question is *who* is printing and via *what* mechanism, is it just clojure code? on the same thread? do you have control over it? I assume it is more complicated and you don’t know exactly."
505,1501369303.46778,Tameika,"my function runs in a seperate thread, so i think <@Torie> 's solution should not be good, since all of system.out is suppressed this way. Thread1 starts thread2 with the function that i want to silence; the lowlevel java solution, as far as i understand it, suppress all of system.out; so also that of thread1"
505,1501369358.471629,Torie,"well, you might simply be doing bindings on a wrong thread; `binding` is local to current thread"
505,1501369393.473896,Tameika,"<@Torie> i am calling a third library function, that's printing the mess, havent looked deep inside it to know how it prints all the mess; clj-http.client is the evil doer"
505,1501369516.481582,Margaret,it should just be a logger; if you configure it's logger you can fix it
505,1501369533.482588,Tameika,"since it's http stuff i rather expect it to run on a couple of threads; <@Margaret> , yes i could do it, but since i have function mappings and i plan to expand the code, I would prefer to have a generic method to suppress output; i can fix clj-http.client logging today but I will have the same problem when i add some other stuff tommorrow"
505,1501369656.490106,Margaret,"no, not fix the logging, configure it - that's the proper way to fix logging behavior, is to provide config; there are only so many logging libs out there; (too many, but not arbitrarily many); anything in the clj ecosystem should be configurable via slf4j"
505,1501369743.495185,Tameika,and the logging libraries are able to redirect output ?; in a generic way?
505,1501369749.495642,Margaret,"that's what they are for, yes"
505,1501369971.508695,Zena,taoensso.timbre is also able to configure slf4j in a very simple way
505,1501370022.511879,Margaret,"yeah, I use timbre's slf4j extension to control java logging things in my app; it's annoying, then you get it configured and pretty much never have to touch it again"
505,1501370064.514655,Tameika,none of themlooks simple i need stuff like (shut-up (myfunction..
505,1501370101.516725,Margaret,you set the log level to a less verbose level for the specific package doing the printing
505,1501370117.517761,Tameika,log-capture!
505,1501370119.517887,Margaret,then you just call stuff and if it is from that package the verbosity is lower
505,1501370226.524306,Tameika,"i don't like these solutions, people on the web are complaining that the loggers themself spit output; you see, i don't need a logger,  want to silence a function"
505,1501370264.526667,Margaret,the function is using a logger; the way to make a logger shut up is to configure it properly
505,1501370278.527533,Tameika,so putting a logging library into the project is bloating my software
505,1501370287.528094,Margaret,"OK, have fun; the logging library - the big one - is already pulled in by clj-http; you can fix this with a small text file that tells the logger how to behave - or some other crazy hack if you really prefer that; the timbre solution is better if you are using timbre / need timbre's features, but the logger that clj-http is already pulling can be controlled with a small props file or xml document"
505,1501370479.539406,Torie,"a friendly alternative: I’m not friends with xml, I tend to use this: <https://github.com/malcolmsparks/clj-logging-config>"
505,1501371251.583911,Tameika,"<@Margaret> clj-http uses this logging library, ok i can configure it, i use many different functions calls, maybe one of em uses another logging library which overrides this stuff?! That's why i'd prefer a ""hack"", a function which simply silences ALL output of a called function"
505,1501372533.657287,Margaret,"there's too many ways to output for that to work; one of those ways is via a logging library; they run their own thread for logging, often; so you can't intervene except on the level of that lib and it's thread"
505,1501372575.659729,Tameika,"i also don;t see in the source of  which logging library where is used, neither do i understand how to do this, i put a log4j.properties file into the root of the project, thats supposed to turn logging off; that's why i'd prefer a hack to silence it completeley, simply to much shit is there to configure which both takes my time and makes the projhect more complex"
505,1501372766.670942,Margaret,"I've already given my opinion on all this, my experience with the jvm tells me that a general supression of output is more complex and difficult to implement than the configs to control the logging that your libraries pull in. But it's your project, do it how you like. The ecosystem is not going to make this easy for you."
505,1501372924.682163,Tameika,<@Margaret> so is there a simple way of turning logging off? so that i wont waste hours of reading and understanding docs
505,1501373133.694813,Torie,"<@Tameika> from what you wrote, you likely don’t want simple, you want *easy* :wink:"
506,1501373149.695691,Torie,<https://github.com/matthiasn/talk-transcripts/blob/master/Hickey_Rich/SimpleMadeEasy.md>
505,1501373157.696124,Tameika,i want copy-paste; i see no point on wasting to much time for stuff that i don;t need
505,1501373193.69817,Torie,"wrap your tool in a bash script and redirect/filter the output outside the process; (and we are back to docker, if you want to do it the fancy way ;)"
505,1501373246.701066,Tameika,<@Torie>  the problem is that my function is changing some global variables; it wont be able to do this in a seperate process
505,1501373340.706095,Torie,"I don’t see a problem, wrap your whole thing and redirect/filter the output on OS/shell/system level (outside your process)"
505,1501373388.708751,Tameika,"it's not a point of easy/simple, clj-http is logging crap to stdout, i see no point on configuring it's logging facility since next time some other lib will use a different logging facility; <@Torie> mother_thread gives good output(my output), but calls thread2 which gives unwanted output; thread2 alters global variables; i can't wrap the whole stuff up since i loose output from mother_thread"
505,1501373646.723179,Torie,"well, there is probably no easy way to do that, as I posted an hour ago, you could “hack” it via `System/setOut`, but then you would have to the filtering on your own, because that would capture all java (and clojure) outputs from all threads; I’m pretty sure this is doable, you would need to filter the stream and reject unwanted lines with some regex; for inspiration, you can look here, recently I wrote something similar:
<https://github.com/cljs-oss/canary/blob/master/runner/src/canary/runner/output.clj#L16>; the printer would inspect individual lines and decide to print them out or not; stream would be something you would construct in java land and set into `System/setOut` (theory)"
505,1501374378.765883,Tameika,"i even tried to suppress sysem.out, which also did not work. I think the logging libraries redirect it again,; <https://stackoverflow.com/questions/37773329/capturing-system-out-in-clojure>"
505,1501374508.773373,Torie,"well, I’m not a java guy, but I can imagine there might be even lower-level layer, which logging library could be using - something like logging into files which happens to be stdout by some lower-level means; I mean writing into something like `/dev/stdout` unix-y way, effectively bypassing even `System/out`"
505,1501375442.825996,Tameika,i leave this crappy output where it is; and put my wanted output somewhere else; and hide stdout alltogether; i am deifentekly to stupid to configure clj-http's logging; topic closed; thanks all; may the force be with you!; easy&amp;simple is always the preferred way :wink:
507,1501402368.173296,Kalyn,"judging from past releases, any idea when 1.9 will be out? right now it is alpha something.."
508,1501406440.378386,Berry,"how bad is it to mix code that camelCase and dash-case in the same project ?; I'm designing some database field column names, and camelCase somehow seems more appropriate than the dash-case"
509,1501418063.018923,Jodie,Is there a new api for <http://clojuredocs.org|clojuredocs.org>? The current one seems to be timing out. I'm guessing it is gone.
508,1501418543.048271,Cecelia,<@Berry> you can convert database column names to dash-case if you want.; `(jdbc/query *db* sql {:identifiers to-kebab-case})`
508,1501421495.246062,Donella,<@Berry> go nuts <https://github.com/qerub/camel-snake-kebab>
510,1501421967.278737,Judy,"i'm using transit with sente, and i noticed there are `+`s and `-`s in the beginning of the encoded messages, such as `+[[""~:chsk/ws-ping""]]`. why are they there? it is not appear to be valid json.; i'm a transit newbie so forgive me if i'm missing something obvious; ah, i think this is intentional behavior by sente, based on my reading of the source code"
510,1501428144.735759,Ashley,"<@Judy> I believe you’re right. Looks like the `+` just indicates that the payload contains a callback, and this appears to be above the level of the particular “packer” (read: encoding). <https://github.com/ptaoussanis/sente/blob/e3d417334214df3b9f9b0514c8ddd8c71b6d49b0/src/taoensso/sente.cljc#L217-L231>"
511,1501442933.934168,Douglass,"anybody using transit? is there an easy way to customize the precision of floats for the writer? i.e. if I just want to save some on length, round up all floats to 2 decimals only?"
512,1501448742.400492,Earlie,"What's a quick way of doing checking on a value with an arbitrary function to return a default value. Like the following without the let:
```
(let [val (expression arg)]
  (if (function val) default val))
```; Basically, if a function returns true, then return nil, otherwise return the original value. So, kinda nil checking."
511,1501449066.427114,Ashley,"<@Douglass> I think it can’t be too trivial because there are a few SNAFUs around infinity and NaN, but I think this will get you on the right track: <https://gist.github.com/camdez/108968382449b7c3a957daecb1aa500a>"
513,1501449382.452163,Evan,write a macro?
513,1501449473.458855,Earlie,"I suppose that's probably the solution. I just thought there might be something in core that'd do this.
The real problem is parsing a float then NaN checking it."
513,1501449583.46675,Evan,"yeah, i'm not aware of anything in core for this, but someone else might be; actually; does <https://clojuredocs.org/clojure.core/some-&gt;> work?; or cond-&gt;"
513,1501449870.488872,Ashley,"Neither of those is quite right. `cond-&gt;` doesn’t pass `val` to `function`, and `some-&gt;` just bails if the value becomes nil."
513,1501449914.492273,Earlie,"Yeah, I'd looked at those, but not quite right."
513,1501449969.496265,Ashley,You don’t really need to jump straight to a macro unless you’re worried about default getting evaluated ahead of time.
513,1501450009.499001,Earlie,I've settled on consecutive entries in a let with the same name.
513,1501450169.510522,Ashley,"Cool. But it could be as simple as:

```
(defn default-if [x pred default]
  (if (pred x) default x))
```

It even reads fairly well in a threading macro:

```
(-&gt; (+ 2 1)
    (default-if even? ""even"")
    (default-if neg? ""negative""))
```; ¯\_(ツ)_/¯"
513,1501450230.515439,Earlie,That'd be pretty good. I tend to like to rely on core as must as possible without small helper function like that. Maybe that's just a bad philosophy on my part though.
513,1501450346.524101,Ashley,"<@Earlie> I’d say I _usually_ do the same, but I think this can be understood at a glance, which means to me that it’s not going to affect readability negatively by requiring the reader to be familiar with what you’ve introduced."
513,1501450478.534137,Earlie,"That's true, and it's arguably more readable than the alternative anyways. Thanks!"
513,1501450527.537572,Ashley,"Ah, small issue with what I posted above though…if the first `default-if` returns a `""even""` then it calls `neg?` on that and fails.; So you’ll need a macro if you actually want to stack them like that.

Anyway, have a good one. :slightly_smiling_face:"
513,1501450617.544679,Earlie,"Thanks, you too. :slightly_smiling_face:"
513,1501451066.578967,Ashley,"Oh, and if you want to do something truly godawful, here’s a way to do it with core:

```
(condp #(%1 %2) (+ 2 2)
  even? ""even""
  neg? ""negative""
  identity :&gt;&gt; identity)
```

:upside_down_face:"
514,1501452574.695729,Jen,"holy canoli… my java/clojure interop knowledge has some gaping holes. how does one invoke a java api that uses anon inner classes? for example, selenium:
```
new ExpectedCondition&lt;Boolean&gt;() {
            public Boolean apply(WebDriver d) {
                return d.getTitle().toLowerCase().startsWith(""cheese!"");
            }
        }
```
1)  do you need to provide a return type for a class? provide some sort of complier hint? `ExpectedCondition&lt;Type&gt;`
2) I know from the clojure guide (and java spec) you can reference anon inner classes as Class$InnerClass, but that’ doesn’t really apply here. how does one construct an anon inner class and provide method implementations?
perhaps I just don’t know enough of the right verbs/nouns in java-land to properly ask dr. google, but I wasn’t able to find much; In that above example the expectedcondition derives `apply` from `goog.common.base.Function`… i guess i’m not sure if that means i need to extend an existing base class (proxy) or not (reify)?"
513,1501452848.717164,Douglass,"perfect, thanks <@Ashley>!"
514,1501456517.007282,Margaret,"<@Jen> &lt;Foo&gt; is a fiction, only the java compiler needs it, it doesn't exist in a true sense in the byte code.; to make an anonymous class, use reify or proxy; *instance of an anonymous class; docs say it's an interface, which means you can use reify, you only need proxy to extend concrete classes; <https://google.github.io/guava/releases/20.0/api/docs/com/google/common/base/Function.html>"
515,1501460064.341228,Douglass,"<@Ashley> - one more, do you know to handle rounding the numbers in transit-cljs? I don't seem to be able to supply a custom handler for ""Number"""
515,1501464277.850125,Ashley,<@Douglass> I’m not certain but I believe `Number` is a superclass of a variety of types. I think you’ll have to identify what the underlying class is and add a `WriteHandler` for that.
515,1501467237.285442,Douglass,"<@Ashley> just answering my own question - all numbers are just Numbers in js. have to specify {js/Number (NumberHandler.)}} to override and must use (tag [_ v] ""i""), if you specify empty tag, it'll go to an infinite loop"
515,1501467288.293199,Ashley,"<@Douglass> Oh, I didn’t notice you’d said “cljs”. But I’m glad to hear you got it worked out!"
516,1501496796.384634,Ellyn,is there some way to use Spring with Clojure
516,1501497515.61671,Lavinia,"<@Ellyn> A quick google search found <https://github.com/henrik42/spring-break> and <https://stevendick.github.io/blog/2013/08/13/write-a-spring-mvc-controller-in-clojure/>. An easy wrapper doesn't seem to exist, but I'm not an expert.; I'm making a program that allows plugins to be added to it. I'm thinking of creating a launcher that runs the program with the plugins included in the classpath, does this seem reasonable? It seems like the absolute best way to do this would be to write a custom class loader, but I'm not sure I have the experience to write one well (as suggested by <@Rebeca>)"
517,1501497737.68553,Mariann,hello everyone. I am looking around for a way to implement this: <https://medium.com/react-native-training/deep-linking-your-react-native-app-d87c39a1ad5e> in clojure with re-natal… has anyone tried this?
517,1501503352.423072,Merrie,<@Mariann> try <#C0E1SN0NM|cljsrn>
517,1501503982.647753,Mariann,10x
518,1501505510.24482,Evelin,"Does anyone know of a wavefront or collada file loader for clojure? I basically want to load a geometry definition file as a clojure data structure. I might have to make my own library for that, but it doesn't hurt to ask."
518,1501507349.11544,Carletta,"<@Evelin> I've used assimp with C++, but readme mentions there being Java bindings also: <https://github.com/assimp/assimp>"
518,1501512354.135519,Lana,"No experience with assimp Java bindings. However, assimp seems to have the best support for loading different 3D models. If you want Open Source library that is.  At least that used to be the case about year ago."
518,1501515193.029672,Guillermo,"anyone have a good method to use `tools.deps` to include the current working directory besides running it once then appending:
```
echo -n "":${PWD}/src"" &gt;&gt; .cpcache/default/default.cp
```"
519,1501517154.305872,Altagracia,Can I write this more concisely? `(let [x (group-by some-pred some-coll)    matches (x true)  non-matches (x false)] ...)`
519,1501517522.529737,Willow,first thought is to use map destructuring where you name the key and the var name it should destructure to
519,1501517525.531876,Kareen,`(let [{matches true non-matches false} (group-by ..)] ..)`
519,1501517566.557322,Altagracia,"Ah, I had the map destructuring backwards. Thanks!"
519,1501518033.8403,Basil,"I rarely see this destructuring syntax in the projects I work on. We always use `{:keys [key-a, key-b]}` (which I personally find much more readable)"
519,1501518053.851677,Kareen,it is more readable but it's not equivalent in power
519,1501518069.861006,Altagracia,That wouldn't work with boolean keys `true` and `false` I think.
519,1501518112.886243,Basil,"yeah, it likely wouldn't. I'm just mentioning this for the generic case. Imo this line above is already too hard to grasp when skimming through code."
519,1501518139.902638,Aldo,"yeah it wouldn't, :keys syntax only works with keyword keys. {binding key} lets you use any type of key"
519,1501518169.919636,Basil,"Note that there's also :syms and :strs. Still wouldn't work in this case, though"
519,1501518186.929443,Aldo,"I agree that it would be a bit crazy to use {binding key} over {:keys} if you have a map with keywords, it's just less readable. but sometimes (at boundaries) you don't"
519,1501518210.94292,Kareen,"it's not that crazy if you want to rename keys; `{foo-name :name}` to avoid shadowing `name`, for example"
519,1501518229.954865,Aldo,I've literally never seen :syms or :strs used in the wild and I would have to look it up :slightly_smiling_face: probably still better
519,1501519604.756368,Earlie,"Is there a better way to do `(filter identity coll)`? I'm needing to do it to interpose `"" ""` between args before `(apply str ...)`."
520,1501519649.783047,Earlie,"Current:
```
(defn class [&amp; classes]
  (apply str (interpose "" "" (filter identity classes))))
```"
519,1501519858.907362,Aldo,imo (remove nil? classes) is more readable
519,1501519904.934532,Earlie,"Yeah, I'd thought about that. I don't see any reason false would be passed into this, but I'd like to support it if it is."
519,1501519949.961462,Aldo,then (filter some? classes) is slightly more readable than identity; oh wait that doesn'tsupport false either; ignore me
519,1501519979.979231,Earlie,That's alright :slightly_smiling_face:
519,1501519994.987788,Evan,`(filter boolean classes)`?
519,1501520046.018696,Earlie,That's good :thumbsup: <@Evan>
519,1501520149.080341,Aldo,"ruby has a function, `compact` that does this. but honestly that name is really a bit opaque"
519,1501520418.242185,Margaret,filter identity is the normal way to do this
519,1501520546.321764,Silas,Question: Is there a way I can have a polymorphic dispatch where the dispatch function is itself open for extension? Some kind of open cond like construct?
521,1501520572.337138,Ferdinand,multimethods?
519,1501520577.340025,Ferdinand,oh no
519,1501520580.341671,Margaret,<@Silas> there’s no rule that says ~a dog can’t play basketball~ your multimethod dispatch can’t be a multimethod
519,1501520585.344648,Ferdinand,:disappear:; oh snap!; nice one <@Margaret>
519,1501520647.381743,Daniell,<@Aldo> `(some? false)` =&gt; `true` so you could `(filter some? classes)` right?
519,1501520681.402108,Silas,"Hum, can it, I'll try it out."
519,1501520694.409955,Daniell,"Or am I misunderstanding what <@Earlie> is trying to do?; (what does ""support false"" mean?)"
519,1501520745.439502,Adelaida,<@Earlie> - If `coll` is returned by `map` you might be able to use `keep` instead of `map`. Can't quite remember how `keep` handles false vs. nils though so that'd be worth confirming.
519,1501520776.457557,Margaret,"```=&gt; (keep identity [false nil 1])
(false 1)```"
519,1501520785.462874,Aldo,<@Daniell> I took it to mean they wanted to filter out both nil and false (which (filter identity ...) does)
519,1501520790.465584,Earlie,"<@Daniell> Support false meaning it would filter false and nil out. Just like identity does.
So `some?` should work."
519,1501520803.47306,Margaret,"no, some? passes false through; just use identity if that’s the semantics you want"
519,1501520856.503426,Daniell,"Right, use `some?` if you only want to filter `nil` but keep `false`.; ""support false"" sounded like you wanted to allow it through and `identity` wasn't doing that for you..."
519,1501520886.520804,Earlie,"I hadn't heard of `keep` before, but as <@Margaret> pointed out, it doesn't handle false as intended.
`(filter identity coll)` works perfectly fine. :thumbsup:"
519,1501520889.52271,Daniell,Words. What do words mean? :slightly_smiling_face:
519,1501520913.536451,Earlie,<@Daniell> Not what I indend them to mean normally. :wink:
519,1501520933.547876,Margaret,`(defmulti DWIM identity)`
519,1501521125.659671,Rosia,is there a convenient way to disable implicit binding conveyance ?
522,1501521373.803007,Margaret,"<@Rosia> In jvm clojure the simplest thing is to start a thread via interop instead of using one of clojure’s utility functions for creating threads `(.start (Thread. (fn [] (println ""hello""))))`"
519,1501521408.823243,Margaret,"any zero arg clojure function is a valid argument to the thread constructor, and will be the thing the thread does when started; this method of running a function only sees global bindings, and won’t convey any local dynamic bindings"
519,1501521531.894404,Rosia,ok so I guess it is somehow against the language to try to use dynamic vars as thread locals ?
519,1501521590.928786,Margaret,"well - they are thread local, they just get conveyed to other threads if you use things like future or send-off"
522,1501521595.931693,Margaret,or core.async stuff
519,1501521639.957924,Margaret,I thought what you were asking for was how to avoid the inheritance of those thread local bindings; (or to create a new context without them at least)
522,1501521852.083921,Rosia,what I'm trying to achieve is a mechanism for detecting if a function call has been made out of a synchronous context
519,1501521871.095285,Margaret,"what is a “synchronous context” - synchronous with what?; that is, I can easily start code inside core.async go that is synchronous within itself but async with the caller - and it’s easy to end up with an app where almost everything is “async” if you go far enough up the call stack, but in practice nearly all of the logic is sync"
519,1501522208.295304,Rosia,"it's hard to find a minimal example, but basically I create event queues, I have functions that must be ""bound"" to a single event queue, so I need a way to test if I'm currently running this queue, if so it's ok to run synchronously, else you have to post an event; a threadlocal is a good way to achieve this, but if I use dynamic vars, the event queue context will be conveyed"
519,1501522376.397459,Margaret,"sounds like instead of avoiding binding conveyance, you could just rely on it, and set a dynamic var `*in-queue*` to true and get the right behavior?; oh, so children of the queue shouldn’t inherit that context, only the queue worker itself should have it?"
519,1501522489.464833,Rosia,"yes, if I use `future` while I'm the queue, I don't want the thread running the future to believe that it's still in the queue"
519,1501522491.465717,Margaret,"you could create a global set at the ns level with the queue Thread instances in it, and check if `(Thread/currentThread)` returns something in that set; that’s cheap and the logic is simple"
519,1501522541.495227,Ramonita,Does anyone have an invite to Screenhero they could throw my way?
519,1501522559.50611,Rosia,"it's similar to using a threadlocal, isn't it ?"
519,1501522571.51243,Guillermo,slack has now integrated screensharing into slack directly; in the `/call` stuff ...
519,1501522597.527706,Margaret,"(pardon, misread)"
519,1501522610.535008,Ramonita,"Huh, I’ll try it out.; Thanks"
519,1501522635.549009,Margaret,"kind of - but the emphasis is different - instead of setting a threadLocal in each thread, you add each thread to a container that keeps track of them; one is global, explicit, and visible, the other is hidden and implicit"
519,1501522676.572976,Ramonita,"Hm, looks like it’s paid teams only. Not useful in this case."
519,1501522923.715669,Rosia,"<@Margaret> ok I will think about that - thanks anyway, but I'm still a bit confused about the dynamic var philosophy"
519,1501522968.741853,Margaret,it’s meant for things that would be visible to this thread and all the ones it creates; eg. think about how `with-out-str` works - it overrides the destination for printing for the caller and all child threads
519,1501523211.88844,Rosia,"the implicit aspect looks a bit dangerous to me, and the only benefit I see is to save a few characters when you write your functions"
519,1501523294.939458,Silas,"Question: How would I extend a protocol to all array types? I seem to only be able to do it for a specific array, like say ""[Ljava.lang.Object"". But I want ""[L?"""
519,1501523476.048486,Rebeca,there is no such thing
519,1501523573.107629,Silas,":disappointed: Its strange that ""[Ljava.lang.Object"" doesn't even work for subtypes of Object. It only works if I have actual array of Objects"
519,1501523637.146901,Rebeca,"that is how array types work on the jvm; array types don't have that kind of type relation; if A is an array of X and B is an array of Y, and Y is a subtype of X, B is not a subtype of A"
519,1501523856.279348,Silas,"I'm not convinced, since instanceof can tell the relation"
519,1501523948.335246,Kareen,"<@Rebeca> java array are covariant, it's generics that aren't"
523,1501523974.351653,Rebeca,Oh
519,1501524075.415064,Aldo,"yeah I might be missing something but I get no compile error
```
11326-storage:tmp bfabry$ cat &gt; Foo.java
public class Foo {
  public Object[] fooey;
  public Foo() {
    fooey = new String[10];
  }
}
11326-storage:tmp bfabry$ javac Foo.java
11326-storage:tmp bfabry$
```"
519,1501524385.600825,Silas,"=&gt; IllegalArgumentException No implementation of method: :t of protocol: #'special.eagerize-test/Table found for class: [Ljava.lang.String;; My solution was to extend java.lang.Object, and do: (when (instance? (Class/forName ""[Ljava.lang.Object;"") &lt;implementation-for-arrays&gt;); (when (instance? (Class/forName ""[Ljava.lang.Object;"") this) &lt;implementation-for-arrays&gt;); Question: What is in clojurescript the type I need to extend to cover all types? Equivalent to java.lang.Object say?; Ok, clojurescript has default for that, awesome. I actually wished Clojure had that too.; I opened an issue into it: <https://dev.clojure.org/jira/browse/CLJ-2215>"
524,1501534852.492606,Amado,"hello everyone, how im supposed to create a spec where all keys are optional but at least one of the specified keys should be present?

```
(s/def ::my-spec (s/and (help-plz??)(s/keys :opt-un [::a ::b])))
(s/valid? ::my-spec {} =&gt; false
(s/valid? ::my-spec {:a 1}) =&gt; true
(s/valid? ::my-spec {:b 1}) =&gt; true
(s/valid? ::my-spec {:a 1 :b 1}) =&gt; true
(s/valid? ::my-spec {:A1 :B 1}) =&gt; true
```"
524,1501535306.73063,Aldo,<@Amado> (some-fn :a :b) not good enough?
524,1501535403.778482,Amado,some-fn is actually a function? i presumed i was supposed to fill in the gaps &gt;.&lt; feel so dumb right now
524,1501535451.802015,Aldo,"oh I'm sorry yeah I could see how you'd read it that way. but no, some-fn is a higher order function that takes a list of predicate functions and returns a single predicate function that is the logical or of all of them"
524,1501535520.835611,Amado,makes sense now!
524,1501535564.856982,Aldo,you could also do `#(some % [:a :b])`; ^ relies on maps acting as functions
524,1501535604.875507,Weston,You can use :req-un [(or ::foo ::bar)]
524,1501535623.884809,Aldo,I totally forgot about that syntax
524,1501535664.904734,Weston,It's one thing I love in spec
525,1501537470.729876,Alayna,"Say, is there a form of `(cond)` that will bind the result value of the predicate expressions? Like
```
(cond
  (my-pred x)
  (do-something (my-pred x)))
```
Where `(my-pred x)` returns either `nil` or a value I want to use?; ...but I'd like something like:
```
(cond-let
  ([res (my-pred x)]
   (do-something res)))
```"
525,1501537571.77358,Willow,<https://github.com/clojure-emacs/cljs-tooling/blob/master/src/cljs_tooling/util/misc.clj#L7>; it's a `cond-let` macro
525,1501537643.804195,Alayna,"Thanks <@Willow>, I'll check that out. Nothing built-in I'm missing then, I take it?"
525,1501537731.840674,Willow,not as far as i know
525,1501537774.859114,Alayna,"Cool, thanks. Looks like that macro exists verbatim in a lot of libraries... <https://crossclj.info/clojure/cond-let.html>"
525,1501537829.882678,Willow,the exact same? I guess its just one of those clojure archetypes
526,1501538403.125648,Bibi,"I am curious as to where people are storing simple jdbc queries? I have a set of ~8 or so queries, all plain queries without any parameters. Do you use a ""config"" type file?"
527,1501541986.336378,Georgann,"Stick 'em in the resources directory of your project then you can retrieve them by slurping the return value of `(<http://clojure.java.io/resource|clojure.java.io/resource> ""foo.sql"")`"
526,1501542099.372337,Bibi,"<@Georgann> - yes, certainly in the resources directory. I was just wondering if there was a preferred file format but a .sql file makes the intent of the file very apparent, which is good.; Thanks!"
528,1501549879.263545,Evelin,"hey I was thinking about a way to minimize the memory requirements of a nested clojure data structure where some substructures are identical, and I came up with this: ```(partial clojure.walk/postwalk (memoize identity))``` but I haven't really given it much thought. How would you do something like this?"
528,1501549956.280046,Margaret,"<@Evelin> if you just use the same object as an arg to assoc, it won't be duplicated; depending on how the data was created, of course"
528,1501549993.28756,Evelin,my use case involves taking an .edn file from disk that is probably too self similar and large to fit in memory
528,1501550005.290071,Margaret,"oh, yeah, fun; it would be interesting to try the postwalk identity and then compare the object pointers via jdb maybe(?)"
528,1501550092.307974,Evelin,yeah i haven't tested it i was just wondering if anyone else had ideas
529,1501554517.219495,Krysta,"what's ""fn*""? I cannot find the document of it~"
529,1501554546.225035,Margaret,"it's an implementation detail of fn; fn is implemented as a macro, and uses the destructuring functions that clojure.core defines for macros"
529,1501554568.22932,Krysta,so means: I don't have to care about it?
529,1501554570.229709,Margaret,"fn* is implemented in java code; right, remembering that it's an fn that can't destructure is probably enough"
529,1501554695.254978,Krysta,could you please give an example? of the difference?
529,1501554747.264794,Margaret,"```+user=&gt; ((fn [[a]] a) [1])
1
+user=&gt; ((fn* [[a]] a) [1])
CompilerException java.lang.IllegalArgumentException: fn params must be Symbols, compiling:(NO_SOURCE_PATH:2:2)```; [a] as a parameter is a destructure that says ""bind the first element of this sequencable input to the name a""; fn* doesn't understand that syntax"
529,1501554906.296805,Krysta,"so the difference is only about the destructuring of the parameters? fn supports it, while fn* doesn't?"
529,1501554924.300357,Margaret,"that's the main one, I forget if it's the only one"
529,1501554950.305326,Krysta,"hmm~ in lazy-seq macro:; boot.user=&gt; (source lazy-seq)
(defmacro lazy-seq
  ""Takes a body of expressions that returns an ISeq or nil, and yields
  a Seqable object that will invoke the body only the first time seq
  is called, and will cache the result and return it on all subsequent
  seq calls. See also - realized?""
  {:added ""1.0""}
  [&amp; body]
  (list 'new 'clojure.lang.LazySeq (list* '^{:once true} fn* [] body))); ```boot.user=&gt; (source lazy-seq)
(defmacro lazy-seq
  ""Takes a body of expressions that returns an ISeq or nil, and yields
  a Seqable object that will invoke the body only the first time seq
  is called, and will cache the result and return it on all subsequent
  seq calls. See also - realized?""
  {:added ""1.0""}
  [&amp; body]
  (list 'new 'clojure.lang.LazySeq (list* '^{:once true} fn* [] body)))```; why is fn* preferred here~? is it some performance concern, as fn* is the basic one?"
529,1501554990.313112,Margaret,"right, destructuring is defined in terms of lazy-seq; so lazy-seq can't use fn, which destructures; source of fn shows you how it builds the form for fn*  - it does many things, some of which are lazy seq generating"
529,1501555114.337102,Krysta,"I will try to read the source of fn~ I probably digged too deep of the dark magics, as I just started learning Clojure~"
529,1501555134.340944,Margaret,"another difference, discovered by reading the source of fn, is that fn* can't do preconditions - or at least not reasonably ```+user=&gt; ((fn [a] {:pre [(number? a)]} a) :a)
AssertionError Assert failed: (number? a)  user/eval36/fn--37 (NO_SOURCE_FILE:7)
+user=&gt; ((fn* [a] {:pre [(number? a)]} a) :a)
:a
```"
529,1501555135.341207,Krysta,"thanks for the explanation, I probably need some more time to digest it~"
529,1501555173.348451,Margaret,"yeah- all you need to remember is fn is fancier, does some things fn* can't, but code that exists before fn is defined (code that fn uses for example...) has to use fn*"
529,1501555358.383947,Krysta,got it~ thx~!
530,1501562104.572118,Nilda,"So I’m parsing XML. That’s enough for wanting to shoot myself in the face, but on top of it I need to check that it conforms to a certain shape, because the source(s) can be unreliable.; I’m using `clojure.xml/parse` for this.; Now, spec seems like the right tool for conforming. However, I’ve also heard tales of spec being able to destructure as well.; Where can I read about how the destructuring works, specifically? If I can avoid hand-disassembling the stain upon humanity that is the output of `parse`, I’d be delighted."
531,1501564256.929753,Wendolyn,<@Ramonita> invite sent
530,1501564520.973609,Nilda,I just discovered zippers
531,1501564766.014927,Pattie,Anyone used clojure transducers for unfolds (anamorphisms)? All talk I’ve seen is on folds (reducers / catamorphisms).
532,1501567231.457127,Lavinia,"So I'm working on getting a plugin system working in clojure. Based on the loading system on <@Elanor>' (<https://yogthos.net/posts/2015-01-15-A-Plugin-System-in-Clojure.html>). I can get the file on the classpath, but when I try and run the function defined by the .edn file packaged with the plugin, it gives me the error: `Could not locate 'oss_world_example/core__init.class or 'oss_world_example/core.clj on classpath.`; I checked in the jar and `oss_world_example/core__init.class` is definetely there (you can download the example jar I'm using here: <https://filebin.ca/3VLfGd71KesW/project.jar>). What gives? How is it finding the .edn file but not the classes?"
532,1501568385.700244,Aldo,<@Lavinia> what does the code in those files look like?
532,1501568528.730325,Lavinia,<@Aldo> `oss-world-example.core` looks like this:
532,1501568629.752625,Lesia,<@Lavinia> You might have an extra quote character somewhere?
532,1501568672.762168,Aldo,"fwiw, I can load that ns from that jar fine
```
11326-storage:look bfabry$ java -cp ~/.m2/repository/org/clojure/clojure/1.8.0/clojure-1.8.0.jar:project.jar clojure.main
Clojure 1.8.0
user=&gt; (<http://clojure.java.io/resource|clojure.java.io/resource> ""oss_world_example/core__init.class"")
#object[java.net.URL 0x2ca26d77 ""jar:file:/private/tmp/look/project.jar!/oss_world_example/core__init.class""]
user=&gt; (require '[oss-world-example.core])
nil
user=&gt; oss-world-example.core/entry
#object[oss_world_example.core$entry 0x24c22fe ""oss_world_example.core$entry@24c22fe""]
user=&gt;
```; ```
user=&gt; (oss-world-example.core/entry)
Entered the example plugin.
nil
```"
532,1501568720.77294,Lesia,Perhaps in the edn file.
532,1501568722.773428,Aldo,"so my bet is you don't actually have the jar on the cp; the edn file is using underscores for the namespace, which is incorrect; I'd have to see your loader code to know whether you compensate for that; but, while that's a problem, it's not a problem that should yield the error you got. the error you got very specifically says the file does not exist in the cp; (it could be finding the edn file because it's accessible by some other cp entry like .)"
532,1501569094.859447,Lesia,"I think the names in `could not locate` error message should not start with a quote, so check for single quote in the edn file such as:
```
{:description ""Markdown parser""
 :init 'cryogen-markdown.core/init}
```"
532,1501569111.86348,Aldo,"^ that's it; I missed the quote; you don't need to quote inside an edn file; ```
(edn/read-string ""{:foo bar}"")
=&gt; {:foo bar}
(class (first (vals *1)))
=&gt; clojure.lang.Symbol
```; and in fact it's not part of edn I don't think (' etc are part of the clojure reader); yeah 
```
(edn/read-string ""{:foo 'bar}"")
=&gt; {:foo 'bar}
```"
532,1501569447.941111,Lesia,"It's surprising in my opinion actually. Maybe it's a bug in the lib, not wrapping with `(name symbol)` where it should.; Nope, I'm wrong"
532,1501569609.979719,Aldo,it's surprising but I dunno about bug... the language reader and the data format reader can't be exactly the same
533,1501571016.340862,Lavinia,That's probably it. I'll check when I get back to my computer. ; Yep removing the quote fixed it. Thanks for your help!
534,1501584038.02165,Lavinia,"So I have some code in my -main function `(extend-classpath (filter #(.contains (.getName %) "".jar"") (file-seq plugin-dir)))`. If I run this directly in the repl, it changes my classpath as I want it to. If I run the -main function in the repl, it doesn't work. What causes this difference (boot repl if it matters)?"
532,1501594384.989061,Ramonita,"Oh, thanks! But I’m afraid I already have an invite. Thank you anyway."
533,1501595098.400066,Bridgette,"<@Lavinia> regarding `extend-class` in repl vs -main, I’m wondering if it could be related to boot using pods to isolate classpath (<https://github.com/boot-clj/boot/wiki/Boot-for-Leiningen-Users#repl-dependencies>). Just getting started with boot myself. Would appreciate an authoritative answer too."
535,1501595548.682368,Augusta,There seems to be an issue with 1.9.0-alpha17 in let blocks with auto-gensymed variables in macros. Is that a known issue?
535,1501595785.832964,Malka,<@Augusta> could you elaborate?
535,1501595825.859188,Augusta,"<@Malka> I'm trying to find the example that exploded yesterday :slightly_smiling_face:; <@Malka> looking again with fresh eyes, I found the bug. I had this:; that fails with something completely unreadable:; trying it in 1.8 I am getting this instead:"
535,1501596220.120871,Malka,that error message seems crystal clear to me /s
535,1501596221.121319,Augusta,"so if I do the right thing and use `msg#` instead of `msg` it works; So yeah. Not a bug, just a mistake on my part, coupled with an awful error message :confused:"
535,1501596649.40016,Merrie,"what is the general approach to ""expanding iteration""?
```
(path-to-paths
  [:a]
  {:a #{:b :c}
   :b #{:d :e}})
  
;=&gt; [[:a :c]
;    [:a :b :d]
;    [:a :b :e]]```
Is this a `loop/recur` client? Or are there any alternatives?
If this is a `loop/recur` – is there any intuition for how to know how many things I need to keep track of in `loop` bindings? I seem to spend much more time on these than it should take me."
535,1501597151.728613,Augusta,<@Malka> i just added this: <https://github.com/bhb/expound/blob/master/README.md>; and got this:; that's pretty neat...
535,1501597204.76476,Malka,that's indeed pretty cool!
535,1501602665.512401,Merrie,<@Augusta> <https://clojurians.slack.com/archives/C1B1BB2Q3/p1501600794016449>
535,1501603050.779068,Augusta,Thanks <@Merrie>
536,1501603639.187018,Erwin,"is there any recommended way of fixing ``` java.lang.ClassNotFoundException: clojure.tools.logging.impl.LoggerFactory```? This is happening on a fresh project created with `lean new luminus &lt;app name&gt;` (running `[org.clojure/clojure ""1.8.0""][org.clojure/tools.logging ""0.4.0""]` )"
536,1501603723.24119,Lavinia,<@Vonda> you can consider asking in the <#C077KDE3A|luminus> channel. I'll see what I can find
536,1501603752.259508,Erwin,"ok, will do!"
536,1501605276.202554,Daniele,"<@Erwin> I seem to remember a similar issue in one of my projects, and the solution was to AOT compile the logging implementation by adding this to my lein `project.clj`:
```
  :aot [clojure.tools.logging.impl]
```"
537,1501606984.249696,Tressa,If somebody is ever interested in using ULID:s I ported library for Clojure <https://github.com/theikkila/clj-ulid>
537,1501607271.425252,Earlie,How can I check if something is not equal to one of a few things.; Like `(not (= % 1) (= % 2))`
537,1501607335.463326,Aldo,(not (#{a few things} thing))
537,1501607405.503305,Earlie,"Ah, sets, I knew there would be a simple thing I wasn't thinking of.; Thanks <@Aldo>"
537,1501607416.509725,Aldo,np
537,1501607494.555745,Margaret,you can use contains? with the set if you need to check for nil / false; (along with other non-nill non-false values)
537,1501607577.603977,Earlie,:thumbsup:
538,1504779648.000004,Melania,"hi all, I have just joined the group, I am seeking some help in creating a project of app marketplace, which basically allow to add remote extensions to our current app; can anyone suggest me good guideline/ software architecture pattern for that"
539,1504783416.000043,Lester,"what’s the best way to try things out in clojure? I’ve been using lein and cider for years now but sometimes I just want to quickly play with something in a single clj file/buffer, without setting up a project."
539,1504783876.000264,Terra,"<@Lester> I have a separate project <https://github.com/jumarko/clojure-repl-experiments> for such things.; You can leave it open with REPL running most of the time and whenever you have something to try, you can quickly test it. You also have the convenience of Cider+Emacs and you can save your experiments (just in case you want to revisit them in the future).; I was inspired by Stuart Halloway's talk on Repl Driven Development: <https://vimeo.com/223309989#t=33m47s>"
540,1504785489.00021,Evan,<https://stackoverflow.com/questions/7656523/how-can-i-run-a-clj-clojure-file-i-created>
539,1504787829.000001,Lester,thanks! <@Terra> I’ve had similar scratch projects in the past but I usually forget about them and create new every time I want something so I thought that maybe there’s a more lightweight solution out there :wink:
539,1504787988.000093,Terra,other than that I just have a bash alias `clojure_repl` aliased to `rlwrap java -jar /Users/jumar/.m2/repository/org/clojure/clojure/1.8.0/clojure-1.8.0.jar`. But I almost never use it (mostly only if I try to make sure that leiningen is not interfering with the functionality I'm trying to test)
539,1504788119.000132,Lester,:+1:
541,1504789992.000025,Mitsue,Hey guys. I would like to us migratus as a plugin with lein and postgres. I was going through the documentation provided and found the initial setup but I would like to use one DB config somewhere in settings and just pull it to project.clj.  I am new to clj and I am not sure if its even possible. thx
542,1504792083.000659,Daniell,"Boot lets you start a REPL with any dependencies you want, outside a project. Maybe that's worth looking at? (I'm a big fan of Boot, having switched from Leiningen at the end of last year!)."
539,1504793336.000659,Jami,"<@Lester> you can use lein-try for testing a single lib, or use ~/.lein/profiles.clj with lein with-profile [PROFILE] repl"
539,1504793615.000032,Lester,"Thanks <@Daniell>, can it be used with cider so that I get to edit my code in emacs and run it bit by bit instead of typing directly into the repl?; thanks <@Jami>, I need to check it out :slightly_smiling_face:"
539,1504793770.000335,Daniell,Yes. 
539,1504793889.000333,Lester,"will check it out, thanks!"
543,1504796101.000464,Fe,"```(cond
  (re-matches #""^/product/(.*)$"" url)
  (let [product (second (re-matches #""^/product/(.*)$"" url))] ;; regex repeated
    (do-something-with-product product))
  (re-matches #""^/category/(.*)$"" url)
  (let [product (second (re-matches #""^/category/(.*)$"" url))] ;; regex repeated
    (do-something-with-category category))
  ;; more of the same
  )```; This is repetitive and error prone. What's the best option if I don't want to repeat the regex for each branch here? I know I can use a nested `if-let`, but that doesn't scale and isn't readable.; cc: <@Natacha>"
543,1504796378.000518,Guillermo,"<@Fe> one simple option: instead of doing the dispatch and handling in the same block, just do dispatch:
```
(cond
  (re-matches #""^/product/(.*)$"" url)
  :product
 ...
```"
543,1504796386.000354,Merrie,<https://clojuredocs.org/clojure.core/re-pattern>
543,1504796402.000933,Guillermo,...then use the val to dispatch through a multimethod
543,1504796441.000155,Fe,<@Guillermo>  but that doesn't give me access to the match groups
543,1504796463.000778,Guillermo,"precisely.; do that in the individual multimethods; if you are seeking clarity and not being error-prone, consider separating the branching from the handling.; if your regexes are similar, you could even dispatch a multimethod with it:
``` #""^/(product|category)...""```"
543,1504796582.000508,Fe,<@Guillermo> but I do need to match the regex twice If I understand correctly right?
543,1504796611.000439,Guillermo,another option is to write a macro that makes the nested `if-let` look less gross
543,1504796622.000711,Merrie,is wrapping all of it in a let with 2 re-matches bound too expensive for you?
543,1504796689.0002,Guillermo,"IMHO go for clarity first.  then if you need performance, set a budget.  only change code _iff_ you are over the budget.; i know you mean two per branch, but you're already matching regexes much more than twice; stuart sierra has a macro called `nested` somewhere, but I can't find it"
543,1504796873.000296,Fe,yeah something like a `cond-let` really seems called for
543,1504796915.000383,Guillermo,"you can certainly use that; i think you were hinting at wanting to use that in your original question, but I wanted to offer an alternative"
543,1504797043.000849,Merrie,"```
(condp re-matches ""/product/foo""
  #""^/category/(.*)$"" :&gt;&gt; #(-&gt;&gt; [:category (second %)])
  #""^/product/(.*)$""  :&gt;&gt; #(-&gt;&gt; [:product (second %)]))
;; =&gt; [:product ""foo""]
```"
543,1504797140.000549,Fe,"<@Merrie>, that's an option I hadn't considered,thanks!"
544,1504797646.000824,Garland,what is the best technique for consumer/producer pattern? I think about standard java concurrent collections and core.async. What pros and cons about these two? Are there other more good desicions?
544,1504797895.000371,Sandy,"java concurrent collections don't really do synchronization (unless you use queues). Java queues don't support callbacks or lightweight threads, and that's why core.async was created."
544,1504798000.000511,Garland,"I think about exactly queues,  ConcurrentLinkedQueue for instance"
545,1504799318.000716,Isaias,aspiring (not much good) Haskell-er here: I thought the heavy category-theoretic stuff like Monad is too rigid - a pros if you're after type safety and predictability but a cons in dynamic world. But sounds like you want explicit control over the pipeline so this *might* be legit
544,1504805101.000271,Margaret,"core.async simplifies many cases for more complex coordination between multiple queues (channels) operating in a coroutine / callback based setup that allows efficiently sharing a small pool of threads with a syntactic transformation that turns something that looks like normal procedural code to implicitly use callbacks (go blocks) plus a separate expandable thread pool for longer running / blocking tasks (async/thread); you could do the same work with two thread pools and a bunch of queues and a whole lot of callbacks, but the result would not look nearly as nice (and would be error prone)"
546,1504805829.000392,Syreeta,"I can't seem to get current namespace auto-resolved keyword map syntax to work in clojure-1.9.0-alpha19 to work, is it not present in this version? Something as simple as `#::{:foo :bar}` is getting me an unmatched delimiter error"
546,1504806074.00051,Rebeca,it will depend on your repl too
546,1504806143.000289,Syreeta,"Oh, I didn't think about that"
546,1504806241.000053,Rebeca,it definitely works in the clojure.main repl with clojure-1.9.0-alpha19
546,1504806309.00004,Syreeta,"I'm getting that too, thanks for the help!"
547,1504807392.000591,Guillermo,Anyone here have experience with JSON-LD?
546,1504813267.000409,See,"Question about My First Transducer: <https://gist.github.com/Kah0ona/789d2daf0cae1a9773f0a652272723b5>

I basically want to create a transducer that, if two consecutive maps in a collection have the same :type, that they be merged into one according to some merge-fn; but my reasoning for the actual merging is wrong I think, because i cannot use ‘pop’ and ‘conj’ to replace the last element in the ‘result’ var; (I reckon)"
546,1504813434.000304,Margaret,"<@See> wouldn’t `[prev {:type ::none}]` make sense? because you wouldn’t want to accidentally merge a map with no type key to the keyword none right?; alternatively, you could store the type of the last thing, and not the map itself"
546,1504813456.000495,See,"good point; but can this work at all? Specifically worried about the meat of the thing:

```
(-&gt; result
                 pop ;; &lt;-- !!! pop and conj are too specific functions that deal on collections. 
                     ;; What should I do to make this work?
                 (conj (merge-peak-with-first prior input)))
```; can I use pop and conj on ‘result’ at all?"
546,1504813513.000177,Margaret,your caller should be managing the input as a series of things; your transducer can’t be the one to manage that at all; because the input could be a channel instead of a collection
546,1504813533.000127,See,yes
546,1504813538.000448,Margaret,or simply a set (which can’t be popped)
546,1504813540.000331,See,"that is what is worrying me :slightly_smiling_face: I see that; but then, how would that be refactored"
546,1504813561.000228,Margaret,look at how `distinct` is defined
546,1504813561.000259,See,"is it transducable at all, this concept i’m trying to do?; aah thanks, ok."
546,1504813584.000443,Margaret,"a similar problem just a longer memory than you have, and a simpler substitution (output, no output)"
546,1504813588.000577,See,i was already looking into some core transducers to get some inspiration
546,1504813617.000161,Margaret,"yeah, distinct is probably the simplest one that has the individual moving pieces you need (sometimes not creating an output for a given input); plus carrying its own state"
546,1504813678.000068,See,"okay, i’ll look into that, seems logical.; thanks a bunch for the swift and adequate pointers :slightly_smiling_face:"
546,1504813766.000187,Margaret,adequacy is the standard I strive for :smile:
546,1504813771.00018,See,"hehe; when this transducer works, i’ll print it and make it a poster to hang in my bed room :wink:; as it is My First; I’ve used them before, never created one myself; them = the core ones"
548,1504818951.000326,Margaret,"I have a hunch there’s a way to avoid needing to check for ::none as a type everywhere, but if that’s unavoidable you could also make a small helper something like `(defn empty-state? [cp] (= ::none (:type @cp)))`; or maybe you always want to bind outside the function, but it might be clearer with that; in fact, if you defined it in the let block on line 4, you could make it a no-arg function"
548,1504819109.000473,See,yeah good improvements; i’ll tweak this thing once I finished my champagne in celebration of my first XF; that’ll be first thing tomorrow
549,1504820090.000357,Merrie,"```Volatiles are faster than atoms but give up atomicity guarantees so should only be used with thread isolation```
how would an example of ""thread isolation"" look like?"
548,1504820264.000297,Giovanna,<@See> You nerd-sniped me with that problem. Here's my take on it: <https://gist.github.com/madstap/a7d158ef0c3e7b5bbf5cd55c5de4c913>
548,1504820338.000345,Margaret,why change the volatile into an atom?
548,1504820430.000334,Giovanna,"I made my version from scratch, just an oversight. Should be volatile!, vswap! etc."
549,1504821148.000153,Evan,"i could be wrong, but doesn't that just mean that you shouldn't share volatiles between threads?"
549,1504821550.000406,Guillermo,"If you want to play on Hard Mode, write some generative tests on it; Last time I did that for a transducer, I found a nasty bug with reduced"
549,1504821905.000094,Sonny,Clojure 1.9.0-alpha20: <https://groups.google.com/forum/#!topic/clojure/IB2CaORBMnM>
550,1504824341.000042,Daniell,<@Sonny> Is the new `##` reader macro extensible in any way? Or is it just intended for built-in symbolic values?
551,1504841028.000185,Berry,"is there a builtin for

(defn avg [lst] (/ (apply + lst) (count lst))) ?"
551,1504841619.000127,Sonny,not in core
550,1504841816.000147,Sonny,not extensible
550,1504842514.000137,Daniell,"Thanks. I figured as much, but just wanted to check."
552,1504845497.000062,Giovanna,<@Berry> Don't forget to special-case the empty collection.
552,1504853111.000051,Jami,<@Berry> average is defined in incanter.stats (mean)
553,1504855129.000304,Mirna,"Hi guys. I am trying to run-all-tests of my lein project in a repl. I'd need to load/require all my test namespaces, so that I could run them with (run-all-tests #""mynamespace.*""). Is there a similar way to load/require all the test namespaces by a project-specific package regex? Thanks"
554,1504855901.000247,Rosia,"<@Evan> volatiles are all about multithreading. there is really no point of using a volatile if it isn't ever shared between threads.; <@Merrie> I wish *thread isolation* would be better explained in the documentation. The key point is that atoms are able to manage concurrent updates and volatiles are not. That means, if you make it possible for two threads to `vswap!` the same volatile at the same time, update consistency will eventually break. To prevent this, updater threads must be synchronized by another mean (e.g locks).; So this is my understanding of *thread isolation*. It can be always in the same thread, or it can be multiple threads using synchronization to prevent concurrent updates."
553,1504858698.000246,Jami,<@Mirna> you could create a namespace that requires all the namespaces you want to test; is there a reason why you don't use lein test from the command line ?
554,1504859016.000257,Rosia,"for example go blocks are thread isolated, so it's safe to `vswap!` the same volatile multiple times within a go block, even though updates might be run by different threads"
553,1504859199.000451,Mirna,"thanks <@Jami>, I am looking for fast feedback loops for test development with Eclipse, and lein test is incredibly slow (to run on each small change), thus want to have a repl running"
553,1504859353.000218,Jami,"in that case, you ca simply create a namespace that loads all the others you want to test"
554,1504859364.000001,Evan,"ah, interesting. but in the case of a transducer, that volatile is private, so how could it ever be shared?; also sharing between threads without any concurrency guarantees (unless you use another mechanism) is what i meant by 'shouldn't share'"
553,1504859487.000385,Mirna,"yes, will try that - hoping that listing all test namespaces there &amp; run-all-tests then results in the same outcome as running `lein test` in cmdline and on our build server"
553,1504859558.000322,Evan,"to my mind, volatiles are vars with atoms' API"
553,1504860581.000105,Rosia,"vars and volatiles differ significantly in usage and implementation. static vars are mutated via locks, dynamic vars use ThreadLocal, and both are generally used as top-level namespace items. volatiles are almost always used locally and have no means of update synchronization."
555,1504860601.000232,Joette,is there a way to have `assoc` stay with array maps even when they grow past size 10 without switching to a third party implementation? i.e. assoc switches to PersistentHashMap from PersistentArrayMap when the maps become large enough (&gt; 10) and I need the map to stay ordered
554,1504860643.00008,Evan,"ah, right. thanks for the info :slightly_smiling_face:; if you need to have an ordered map, can't you use `sorted-map`?"
554,1504860822.000437,Joette,I think sorted map is sorted according to a comparator or natural ordering; I need insertion order
555,1504860838.000509,Joette,unless I'm mistaken?
554,1504860976.00032,Evan,"no, i think you're right."
554,1504860976.000597,Joette,"seems to be the case, so I need the keys I add to the map to stay in the order I add them, which array map does and hash maps doesn't"
554,1504860995.000001,Evan,<https://github.com/amalloy/ordered> has insertion-ordered maps; if you're cool with a dep
554,1504861003.000164,Rosia,"the transducer case is interesting. as you said, state is private (one could say *encapsulated* but it's kind of blasphemous in clojure spheres), and the transducer itself doesn't implement any synchronization mechanism because it's up to the transducing context to ensure sequentiality (it *may* involve multiple threads, e.g for core.async channels)."
554,1504861023.000073,Joette,"yeah, was hoping not to.."
554,1504861050.000136,Evan,"i think the array-map to hash-map conversion is just how clojure works, no way around it"
554,1504861052.000395,Joette,"maybe I can always transform the map keys and values to sequences and call (apply array-map &lt;seq&gt;); i.e. take the original map, get keys and values, append a key and a value, call array-map to create a new map; ugly, but should probably work...was hoping there was something less messy than that"
554,1504861208.000011,Evan,sorry :stuck_out_tongue:
554,1504861254.000263,Joette,": ) it is what it is, thank you for your help and the pointer!"
554,1504861329.000128,Rosia,"however, the question of why stateful transducers use volatile instead of bare unsynchronized variables is still pending <https://dev.clojure.org/jira/browse/CLJ-2146>"
554,1504861449.000004,Evan,i see. very intriguing.
556,1504865004.000375,Jami,"<@Joette>  have you tried <https://github.com/amalloy/ordered> ?; his implementation is a bit more complex, and involves protocols"
554,1504866533.000209,Joette,I saw that but am trying to avoid extra dependencies...
554,1504867716.000236,Daine,"Since it’s pure clojure you could just paste the sources you need into your project, no extra dependencies that way"
557,1504869573.000097,Renata,Having some real weird problem in a large-ish project: I removed `expectations` code (everything works) and then I removed the dependency and suddenly my uberjar build fails with: `java.lang.ClassNotFoundException: cljs.tagged_literals.JSValue`; I removed all transitive dependencies from the `expectations` dependency via `:exclusions` — everything works — once I remove `expectations` itself things break; When I create a diff of the `lein deps :tree` output before and after removal of `expectations` it’s a one line difference (i.e. only expectations itself); here’s the full stacktrace: <https://gist.github.com/martinklepsch/a5c28fbfdc5b7ff65f8edd56a8dbe1f8>; Seems that if I add a Clojurescript dependency to my regular build (i.e. not just `:dev`) things work. Just wrecks my brain what `expectations` has to do with all of that :smile:
558,1504873510.000134,Tammie,"which is more idiomatic for filtering out nils, `(filter identity coll)` or `(filter (complement nil?) coll)`?; I realize the material difference if coll contains booleans; actually, maybe `(remove nil? coll)` is better"
558,1504873747.00007,Sonny,"yes, that ^^"
559,1504880154.000433,Merrie,"<@Rosia> thank you for the explanation. I had a question on what happens when stateful transduser is used in parallel, or how could it be used. But I had (and still have) a hard time framing the question :opieop:"
559,1504880335.000477,Rosia,what is your use case ?
559,1504880597.000045,Merrie,"that's the ""problem"" – I don't have one :). Was just trying to figure out why/when should I use volatiles, as those came up few messages above in a transducers context, and, as far as I read on the internet, – were actually introduced because of transducers"
559,1504880891.000319,Rosia,"that's right, stateful transducers imply use of mutable state so there was a need for a lightweight mutable container; however I find the decision to make it volatile quite confusing; because it has memory visibility and performance implications that are not very clear; about parallelism, I can't really imagine a situation where a stateful transducer could be parallelizable"
559,1504881272.000049,Merrie,"so things like `partition-by` are out of question, right?"
559,1504881319.000199,Rosia,yes; parallelism as in `fold` ?
559,1504881378.000314,Merrie,"if so, why not use `transient`? Is it because only basic collections can be transient, and anything a bit nested would be pain to use?"
559,1504881381.000222,Rosia,or as in core.async `pipeline` ?
559,1504881429.000128,Merrie,"I think `fold`, because I did not use `pipeline` yet, don't know what that actually looks like"
559,1504881511.000524,Rosia,"it's perfectly OK to use transients in stateful transducers, but you still need a mutable container; transient aren't identities like java mutable collections; `pipeline` and `fold` can't be used with stateful transducers, it has been made pretty clear in RH talks about transducers; there's this ticket, still <https://dev.clojure.org/jira/browse/CLJ-1553>"
559,1504881776.000187,Merrie,I need to watch it again then. Missing so much information when listening without actual question/use case
559,1504881861.000021,Renata,"This kind of makes me thing I would need to add my `src` dir manually, but it seems it’s implicit <https://github.com/clojure/brew-install/blob/master/docs/guide-clj.adoc#including-your-source-directory-into-the-classpath>"
559,1504882142.000274,Guillermo,I'm almost certain it's not implicit...  Are you seeing behavior otherwise?
559,1504882538.000166,Rosia,here especially <https://youtu.be/4KqUvG8HPYo?t=3650>
560,1504882740.000145,Alma,"Hi guys, we just had an interesting discovery when working with clojure: we can call functions like `clojure.string/replace` throughout our project without explicitly having to require the `clojure.string` namespace. I assumed the same would hold true for the entire core lib, so I called `clojure.set/intersection` without requiring `clojure.set`. This worked in the REPL, but when trying to build an uberjar I get a compilation exception: `java.lang.ClassNotFoundException: clojure.set, [...] Exception in thread ""main"" java.lang.ClassNotFoundException`. To get it working I had to require `clojure.set` at the top of my file. Is there a reason why this behaviour differs between different core libs and between REPL/uberjar?"
560,1504883111.000489,Guillermo,"if you refer to the namespace qualified symbol `clojure.string/includes?` and the namespace clojure.string has already been loaded (by something else), this is fine."
559,1504883166.000029,Guillermo,"you should still `:require` namespaces explicitly, and not assume that something else loaded them"
561,1504883232.000694,Elvin,"Hey fellas!  Does anyone happen to know what serialization format `nippy` uses?  (its the serializer that Carmine uses, which is the library for interacting with redis via clojure)"
559,1504883233.000186,Alma,"Aaah, ok. So every ns needs to be required explicitly, even when it's in the core lib? The reason I got so far without requiring `clojure.string` is probably because it is so common that in most cases one of my dependencies will probably already have required it without me knowing...; That's a good insight. Thanks!; Thank you <@Guillermo>"
559,1504883270.000465,Elvin,"we've got other services in Nodejs that have to read values in redis which were stored via clojure; so presumably we have to deserialize it into edn somehow, and then convert it to json"
559,1504883320.000747,Guillermo,it's most common to alias namespaces <@Alma> `... (:require [clojure.string :as string])` then call  `(string/replace...)`
559,1504883467.000333,Joette,"noob question, I have two functions which both return a reify implementing a number of protocols, there is a fair amount of code duplication between the implementations of the two reifys, how do you go about sharing code in this scenario? just move things to functions in the enclosing namespace? I realize this question might be too open, but if I at least understand the options, maybe I can make a better choice"
559,1504883677.000012,Alma,"Yeah, I know, but we have a convention of not aliasing clojure.string to make it more portable when copy-pasting code between files. I guess we better start doing so, because then my IDE (Cursive) will notify me of omitted requires."
559,1504884552.000136,Berry,"good point; actually, what is the correct behaviour of (avg ) ? should it be nil? 0? throw exception?"
562,1504885456.000599,Elvin,"in case anyone was wondering, its a nippy specific format.  its not language agnostic.   I need to find some way to change the serialization that carmine does."
563,1504886350.000118,Renata,try `clj -S` — I see `src` listed at the end <@Guillermo>
563,1504886399.000107,Sonny,"The default deps.edn includes it now; It's not implicit but you're getting it by the user level defaults; Yes, this. Right now some namespaces are loaded as a side effect of startup. But that may not always be the case (there are some pending patches that improve startup time by loading less for example)"
563,1504886559.000288,Weston,"Its own format. The code is fairly readable and the binary format quite simple. But it s full of custom stuff to support backward compat, compression, pojo serialization etc, I wouldn't advise trying to reverse it in another lang. ; I had to share a redis instance that had a good amount of netty specific stuff with an erlang server, l ended up converting all the redis data to something more portable. One alternative is to write a little service that acts as encoder/decoder in clj, it s a bit naive but if it s not a hot path in your app it could work; Lesson learned: better to avoid language specific storage formats :)"
563,1504887245.000196,Guillermo,"oh, neat."
564,1504888335.000205,Nicole,hi clojure. is there a trick to using gen-class?
564,1504888346.000015,Georgianne,"Is there a builtin way to go from a java.util.Enumeration to a seq? I have:

```
(defn enum-&gt;seq
  [^java.util.Enumeration enum]
  (lazy-seq
   (when (.hasMoreElements enum) (cons (.nextElement enum) (enum-&gt;seq enum)))))
```

which works fine, but less code is better"
564,1504888360.000125,Nicole,"i get ClassNotFoundException whenever i try and use a class i've defined elsewhere :disappointed:; (ns model.document
  (:gen-class
    :name model.document
    :implements java.io.Serializable
    :state ""state""
    :init ""init""
    :constructors {[String String String] []}
    :methods [[getContent [] String]
              [getTitle [] String]
              [getUrl [] String]]))

(defn -init [content title url]
  [[] (atom {:content content
             :title title
             :url url})])

(defn- get-field [this k]
  (@(.state this) k))

(defn getContent [this]
  (get-field this :content))

(defn getTitle [this]
  (get-field this :title))

(defn getUrl [this]
  (get-field this :url)); (ns classification-server.classifier
  (:require [model.document :refer :all]))

(new model.document ""my-content"" ""my-title"" ""my-url"")"
564,1504888888.000179,Rebeca,you can't name the class the same thing as the namespace; you also have to aot compile to use gen-class
564,1504889115.000075,Nicole,how do i do that in leinigin?
565,1504890502.00007,Guillermo,`enumeration-seq`
566,1504891206.000005,Margaret,"also, some namespaces might be loaded implicitly because of the internals of your tooling, but hey you have different tooling in dev vs. production so hello bug that only shows up when you deploy"
564,1504894896.000619,Elvin,"yeah, so I discovered.  You can get Carmine to store it raw though with a little work."
564,1504895570.000677,Margaret,"<@Nicole> you can provide an :aot key in project.clj, see `lein help sample` for a lot more info; excerpt: ```  ;; These namespaces will be AOT-compiled. Needed for gen-class and
  ;; other Java interop functionality. Put a regex here to compile all
  ;; namespaces whose names match. If you only need AOT for an uberjar
  ;; gen-class, put `:aot :all` in the :uberjar profile and see :target-path for
  ;; how to enable profile-based target isolation.
  :aot [org.example.sample]```"
565,1504897728.000315,Nicole,"thanks for the pointer, i'll give that a try"
567,1504905446.000152,Alyssa,"Logically, it should probably be nil. Or throw an exception. But definitely not 0, as that’s a totally valid mean value, e.g. `(avg [-2 -1 1 2])`"
568,1504914746.000096,Silas,run-all-tests doesn't work for you?; <https://clojuredocs.org/clojure.test/run-all-tests>
569,1504927901.000044,Debby,anyone have an easy way to convert a org.json.JSONObject to a map?
568,1504930029.000065,Debby,"my solution:
```(defn jsonobject-&gt;edn [jsobj]
  (cheshire.core/parse-string (.toString jsobj) false))```"
570,1504931680.00005,Daniell,"That's not really converting to EDN (which is a text format) -- it's converting to ""Clojure"" data structures, so maybe `json-object-&gt;clj`?; Or perhaps `read-json-object`?; (which is more in keeping with `clojure.edn/read-string` for example)"
569,1504932416.000078,Debby,"true! thanks for the feedback, I renamed it to your suggestion in my code"
569,1504932573.000025,Sanda,Names matter.; I've been going over a bit of older code for the company I work for and...; The same names are re-used for different levels of converting data.; It's confusing.
571,1504951046.000021,Renata,<@Sonny> not sure I understand what that means? not implicit but still a default in some way?
572,1504953713.000017,Lucio,And naming is hard… I tend to spend more time figuring out a name for a function than coding the function itself :smile:
571,1504960993.000029,Sonny,It's not implicit because it's not hard coded into the library or the algorithm. You're getting it due to the merge of user level deps.edn and project level deps.edn. And both of those are under your control.
571,1504963764.000064,Renata,<@Sonny> I never created any `deps.edn` file though? Is there some default thats used if there is no file?
571,1504963809.000001,Sonny,Yes - see <https://clojure.org/guides/clj>; Probably at ~/.clojure/deps.edn
573,1504964851.000104,Renata,"```
$ cat ~/.clojure/deps.edn
cat: /Users/martin/.clojure/deps.edn: No such file or directory
$ clj -S
/Users/martin/.m2/repository/org/clojure/clojure/1.8.0/clojure-1.8.0.jar:src
```
The guide doesn’t seem to mention any default values for when that file does not exist"
571,1504966664.000034,Sonny,"If it doesn't exist, one is created; So it always exists ; Do you have the XDG env vars set up? Might be in ~/.config/clojure if so"
571,1504966898.000039,Renata,"duh, ok, yeah, I have XDG_CONFIG_HOME set up :slightly_smiling_face:"
574,1504974177.000099,Evan,<@Lucio> hammock-driven development!
575,1504982713.000006,Silas,"Names matter, but you'll always get them wrong. So its good to practice reading things as if names are just random unique ids, instead of documentation."
571,1504984361.000091,Joette,"is it ok/idiomatic to use `:keys` destructuring in protocol method definitions as in:
```
(defprotocol IMyP
  (method [this &amp; {:keys [foo bar] :or {foo false bar true}}]))
```"
576,1504985919.000024,Sandy,Have you tried that?; <@Joette> I don't think that code does what you think.
577,1504990872.000049,Jovan,Is the result of an `eduction` different from calling `seq` on that eduction other than the fact that the applications will be performed every time reduce/iterator is called? I'm trying to figure out if it's safe to treat an eduction as a sequence or if it will bite me later somehow.; And what is the point of returning an eduction instead of a lazy seq? I don't really get it. :stuck_out_tongue:
578,1504994081.000066,Lucio,Should I be concerned when composing a large number of functions (potentially hundreds)? In a very much non-performance-critical setting
578,1504998334.000041,Daniell,"<@Lucio> If it isn't performance critical, why would you be concerned? And even if it was, try it and see whether it's fast enough.; What's the problem domain for which the solution seems to be massive composition?"
578,1504998443.000042,Lucio,"<@Daniell> call stack depth, etc? I am not familiar with those things on the JVM"
578,1504998469.00002,Margaret,"it's configurable, but you can compose functions without increasing the call stack"
578,1504998482.000031,Lucio,Basically I am generating a schema and found it nice to express as a composition of functions each doing a little bit of work
578,1504998482.000083,Margaret,(eg. `comp` or `trampoline`)
578,1504998499.000019,Lucio,I could use something like Pedestal for a flat interceptor chain though…; oh
578,1504998520.000036,Margaret,"that is yet another way to compose functions without making the call stack deeper, yeah"
578,1504998520.000042,Lucio,"good to know, thanks <@Margaret> !"
578,1504998535.000067,Edwin,"<@Lucio> If you `comp` thousands of functions, you will eventually reach the maximum allowed depth for a Java call stack.; You could, however, write an ""interpreter"" that processes a list of functions without increasing the call stack."
578,1504998625.000049,Margaret,"oh, right, comp does actually make the stack go deeper, right"
578,1504998675.000056,Edwin,Yep <https://github.com/clojure/clojure/blob/43540be97668ed453cad74e18f434c3e8bd5d638/src/clj/clojure/core.clj#L2554>
578,1504998890.000099,Lucio,<@Edwin> thanks! however I am not quite sure I understand why comp (given that code) makes the call stack deeper; would you mind to explain?; beyond the obvious one-level deeper by calling comp
578,1504998918.000068,Margaret,each call is wrapped in the ones before it in the arg list
578,1504998948.000012,Sanda,"It kind of has to to do what it does ( I mean you could do theoretically do that sort of thing on the heap, but it's hard to see why you'd need to.)"
578,1504998957.000032,Lucio,"oooh, because of reduce? So it does not make it deeper for the &lt;= 2 args case, but does make it deeper for &gt; 2?"
578,1504998961.000057,Sanda,Why are you composing thousands of functions?
578,1504998970.000021,Margaret,"but you could definitely write a ""trampolining comp"" version that didn't do that (trading worse performance for not getting stack overflows for huge arg lists); <@Lucio> even with two args, that's two stack frames"
578,1504999025.000049,Lucio,<@Margaret> ah right
578,1504999077.000039,Sanda,"I'm not saying there could never be a good reason to do that, but...; I have yet to run into this problem."
578,1504999103.00006,Lucio,"if there was an arity-3 case, like this:
```
([f g h] (fn [x] (f (g (h x)))))
```
then it would also only generate two stackframes, right <@Margaret> ?; but obviously you wouldn’t want to write this for every arity, thus the trampoline"
578,1504999149.000017,Margaret,"that would be 3 - one for f, g, h each"
578,1504999163.00003,Lucio,<@Sanda> yeah I am sure it’s not desirable; I am new to clojure and had to write a sequence of transformations on some map. I started using comp and kept going with it
578,1504999199.000023,Sanda,"OK, well what are you trying to do?"
578,1504999213.000025,Lucio,"But (h x) will be called and will return, the g will be called and return, then f will be called and return, right? that’s only one level at ach point"
578,1504999215.000104,Daniell,<@Sanda> Scroll up -- <@Lucio> already explained that...
578,1504999243.000059,Sanda,I'm inclined to suspect that  composition is not the tool you're looking for here.
578,1504999260.000032,Lucio,"TL;DR; I am aware `comp` probably isn’t the wisest approach, but by using it for this purpose it made me wonder how far I could go with it before blowing up the JVM :stuck_out_tongue:; <@Edwin>’s mention of writing an interpreter for a list of functions seems good (which, unless I am mistaken, is what Pedestal is doing with interceptors)"
578,1504999319.00008,Daniell,"<@Lucio> as hinted in one of the responses earlier, you could create a list/vector of the functions you want to compose and then `reduce` over that, calling each one on the accumulating value..."
578,1504999327.000012,Sanda,"<@Daniell> I've read what he wrote, but I'm still not clear about what he wants. I can be a bit slow, I'm afraid."
578,1504999337.000001,Margaret,"```(defn trampocomp [&amp; fns]                                                        
  (fn [x]                                                                       
    (reduce #(%2 %)                                                             
            x                                                                   
            fns))) ```"
578,1504999364.000022,Lucio,"<@Sanda> my bad, it was poorly explained!"
578,1504999365.000055,Daniell,As usual <@Margaret> is a faster typist than I am :slightly_smiling_face:
578,1504999370.000045,Margaret,haha; <@Daniell> I learned to type by being a MUD addict
578,1504999409.000071,Sanda,"<@Lucio> Not at all.. as I said, I can be a bit slow to understand what people want as an outcome"
578,1504999445.000012,Daniell,"My MUD days are so far behind me now that I've become a slower typist. That's my story, and I'm sticking to it! :slightly_smiling_face:"
578,1504999446.00003,Sanda,"OTOH, I can be very persistent about it"
578,1504999482.000021,Margaret,"when h is called, that's inside a call to g, which is inside a call to f"
578,1504999504.000077,Lucio,"I think I got the answer(s) I was looking for, but I’ll add a bit of context here in case you have further advice: I am generating a GraphQL schema from an application schema (database schema + some extra info). I am doing this as a sequence of transformations on a “schema” map. So I start with an empty map, then generate some object types, then generate some queries, etc; I wrote each transformation as a function that takes two config maps and extra options, and return a 1-arity function which takes a schema and returns a schema; and I am composing those; The reason I was expecting to reach high number of compositions (in the low hundreds) was because some of my transformation steps should be executed for each entity type; So I have code like this
```
(apply comp
         (map #(gen-for-node hodl-config config %)
              (keys (:nodes hodl-config)))))
```
(gen-for-node returns a `(fn [schema] ... transformed-schema)`); I’ll stop there to avoid spamming this channel with unecessary details; <@Margaret> how is it inside the call to g? the result of h is passed as an argument"
578,1504999836.000018,Sanda,"OK, I've never written a graphql api, so grain of salt, but..."
578,1504999840.000012,Lucio,<@Margaret> is argument evaluation lazy in clojure?
578,1504999858.000094,Margaret,"you can see by throwing an exception, one moment, generating an example in my repl"
578,1504999879.000018,Lucio,"the fact that it’s a GraphQL schema is irrelevant tbh, I just mentioned it to give context; the essence is, I think, building up a map as a sequence of (parametarized) transformations; ```
boot.user=&gt; (defn foo [x] (println ""-&gt; foo""))
#'boot.user/foo
boot.user=&gt; (foo (println ""abc""))
abc
-&gt; foo
nil
```; is that what you meant? here the argument seems to be evaluated before the call"
578,1505000046.000001,Sanda,"I've never felt the need to compose functions that deeply, nor have I seen anyone else need to."
578,1505000049.000038,Lucio,or are they evaluated “just as you get into the `foo` stackframe”?
578,1505000057.000046,Sanda,So I'm suspicious of the approach.; Would a set of mutually recursive functions that built a result (much like a parser) do for you?
578,1505000115.000088,Margaret,"you are right about (f (g (h x))) not needing to go three deep, my bad; but comp still makes things go deeper because of the way it handles varargs with self calls that generate new functions (I think? or was stuart wrong?)"
578,1505000167.000083,Lucio,<@Margaret> :tada: what code did you run to check that?
578,1505000184.000009,Sanda,"You might still have to trampoline, because stack frames, but...."
578,1505000190.000006,Margaret,"```+user=&gt; (let [f inc g inc h inc i inc j inc k inc l inc m /] (f (g (h (i (j (k (l (m 1 0)))))))))
ArithmeticException Divide by zero  clojure.lang.Numbers.divide (Numbers.java:158)
+user=&gt; (pst)
ArithmeticException Divide by zero
        clojure.lang.Numbers.divide (Numbers.java:158)
        clojure.core// (core.clj:1019)
        clojure.core// (core.clj:1012)
        user/eval21 (NO_SOURCE_FILE:9)
        user/eval21 (NO_SOURCE_FILE:9)
        clojure.lang.Compiler.eval (Compiler.java:6978)
        clojure.lang.Compiler.eval (Compiler.java:6941)
        clojure.core/eval (core.clj:3187)
        clojure.core/eval (core.clj:3183)
        clojure.main/repl/read-eval-print--9945/fn--9948 (main.clj:242)
        clojure.main/repl/read-eval-print--9945 (main.clj:242)
        clojure.main/repl/fn--9954 (main.clj:260)
nil
```"
578,1505000197.000043,Lucio,"<@Margaret> yes I think that’s right; `comp` uses `reduce` after 2 args so that will generate extra stackframes, right?"
578,1505000213.00004,Margaret,I think so - checking now
578,1505000236.000044,Lucio,"oh wait, actually it might not…"
578,1505000285.000005,Margaret,"```+user=&gt; (let [f inc g inc h inc i inc j inc k inc l inc m /] ((comp f g h i j k l m) 1 0))
ArithmeticException Divide by zero  clojure.lang.Numbers.divide (Numbers.java:158)
+user=&gt; (pst)
ArithmeticException Divide by zero
        clojure.lang.Numbers.divide (Numbers.java:158)
        clojure.core// (core.clj:1019)
        clojure.core// (core.clj:1012)
        clojure.core/comp/fn--6808 (core.clj:2543)
        user/eval30 (NO_SOURCE_FILE:13)
        user/eval30 (NO_SOURCE_FILE:13)
        clojure.lang.Compiler.eval (Compiler.java:6978)
        clojure.lang.Compiler.eval (Compiler.java:6941)
        clojure.core/eval (core.clj:3187)
        clojure.core/eval (core.clj:3183)
        clojure.main/repl/read-eval-print--9945/fn--9948 (main.clj:242)
        clojure.main/repl/read-eval-print--9945 (main.clj:242)
nil
```; now I'm back to my original thought that `comp` avoids creating more stack frames, but I would be surprised if <@Edwin> was wrong about this"
578,1505000333.000036,Lucio,"<@Margaret> 
```
boot.user=&gt; ((apply comp (map (fn [_] inc) (range 10000))) 1)
10001
boot.user=&gt; ((apply comp (map (fn [_] inc) (range 100000))) 1)

boot.user=&gt; java.lang.StackOverflowError:

```"
578,1505000461.000001,Margaret,"btw you can just use `(repeat 100000 inc)` for that, but yeah, that definitely does stack overflow"
579,1505032286.000042,Joette,"<@Sandy> Tried it yes, but as you say, it does not seem to do what I would expect. 

So assuming I want this kind off optional parameters, am I forced to just add a ton of arities to the protocol method declarations?"
579,1505033524.000031,Evan,"are there any sexp-aware repls? not looking to learn CIDER right now, but having to edit functions line-by-line is no fun; not `}`"
579,1505035047.000069,Beulah,<@Evan> Cursive with IntelliJ is the most popular
579,1505035131.000046,Evan,"<@Beulah> so there's no standalone one, i take it?"
579,1505035203.000093,Beulah,there are a few experimental browser-based ones but none as good as Cursive - I'd go with Cursive
579,1505043643.000052,Torie,"<@Evan> Dirac REPL[1] has parinfer enabled by default, that’s fine for small commands, but if you wanted to send there bigger sexps you are expected to drive it externally from your IDE via nREPL, e.g. with IntelliJ+Cursive[2]
[1] <https://github.com/binaryage/dirac>
[2] <https://github.com/binaryage/dirac/blob/master/docs/integration.md>"
580,1505048604.000041,Odessa,"When type a hinting let expression, which is preferred (and is there a difference?) `(let [x ^SomeType (.getValue obj)] ...)` vs. `(let [^SomeType x (.getValue obj)] ...)`"
579,1505052613.000013,Evan,i see. thanks!
580,1505057817.000078,Eliana,"<@Odessa> one is type hinting the return of `(.getValue obj)` the other the ""x"" local binding. I guess your intention is on the local binding, so the second is more appropriate. As of the practical effects in this case, they are the same."
580,1505058236.000048,Kareen,"eh, not exactly the same actually; prefer type hinting on the local; ```user=&gt; (let [^String x (do (identity """"))] (.length x))
0
user=&gt; (let [x ^String (do (identity """"))] (.length x))
Reflection warning, NO_SOURCE_PATH:7:37 - reference to field length can't be resolved.
0
```; if you type hint the init, and the expr is a macro/special form invocation that doesn't propagate form metadata, the type hint will be lost"
580,1505058653.000046,Eliana,thx <@Kareen> definitely good to know
580,1505059030.000037,Odessa,Thanks <@Kareen> and <@Eliana>
581,1505063589.000107,Berry,"I have the following problem
1. svg line, in hiccup, uses :x1 :x2 :y1 :y2
2. in a geom library I designed, I use :x0 :x1 :y0 :y1
my three choices are:

1. wrap svg hiccup, seems hacky
2. change my library to use x1 x2, y1 y2 -- I prefer 0-1
3. have abug prone translation every time Igo from ""my lib"" to ""svg line"""
581,1505063880.000092,Jodie,<@Berry> am I not wrong in saying that svg starts at 1 index?
582,1505076919.00008,Pearlene,"is there an existing library that wires the `java.time` classes up to edn readers/printers? e.g., `#local-date ""2017-09-10""`"
583,1505079452.000073,Lucio,What “kind of thing” is `d` when doing `(require '[datomic.api :as d])`?; It’s not a var from what I gather; what is it (in clojure’s internals)?; and how/when is it being handled?; <@Kareen> I hope you don’t mind me pinging you here; you might have insights on this :slightly_smiling_face:
583,1505079582.000102,Kareen,it's just an alias; there's no reification of aliases
583,1505079602.00014,Lucio,how is it handled by the compiler? out of curiosity
583,1505079603.000007,Kareen,it's just an entry in a map from alias symbol to aliased namespace; see `ns-aliases`
583,1505079621.000077,Lucio,"oh, so it just looks it up when executing an expression with an alias?"
583,1505079629.00002,Kareen,yes
583,1505079671.00002,Lucio,"and those aliases are only accessible when you are within the namespace?; as in, they are local to every namespace?"
583,1505079691.000042,Kareen,"depends on your definition of accessible; they are local to every namespace, yes; but you can look into the aliases defined in other namespaces through `ns-aliases`"
583,1505079733.000065,Lucio,I see; thank you!; (I was asking after a question in <#C053AK3F9|beginners>; someone was wondering why he couldn’t use aliases defined in `my-namespace` after executing `(use 'my-namespace)`)
584,1505085386.000097,Jamaal,"When I’m generating something from a spec, how can I keep the generated structure from having super long keywords, strings, etc…"
584,1505086644.000075,Edith,What’s the most efficient/fastest way to pass data from a Clojure back-end to a Node/Express server?; gRPC?
583,1505095025.000033,Margarett,"You can limit the size of something in a spec by using `s/and` i.e. `(s/and string? #(&lt;= (count %1) 8))`. But if you're just worried about generation, use `s/with-gen` instead, i.e. `(s/with-gen string? #(s.gen/such-that #(&lt;= (count %1) 8)) (s/gen string?)))`"
585,1505097220.000025,Jutta,"How to deliver a exception, like `datomic.api/transact`?"
585,1505102956.000039,Jamaal,"Hadn't thought of that for my strings.  I suppose I could do something similar for keywords, in a roundabout kind of way."
585,1505103347.000074,Margarett,"If you don't mind me asking, why do you want to have short strings/keywords?"
585,1505107669.000037,Jamaal,I often spec first and generate to see how things are turning out.  But it’s hard to read when keywords come up with 100+ characters.
586,1505111472.000234,Silas,"QUESTION: Is there a partition-by which has f taking the previous or all already created partitions as well as the next element?; For context, I'm trying to partition every time next element is smaller then previous element; Like this: ```(let [prev (atom nil)]
  (partition-by (fn [e]
                  (when (or (nil? @prev)
                            (&lt; e @prev))
                    (reset! prev e)
                    e)) '(9 8 6 3 5 6 7 10)))```
But where I don't need to use a mutable atom outside the scope of partition-by ?"
586,1505127672.000383,Pearlene,<@Silas> what do you expect for `(8 4 7 6 10)`?
587,1505127696.000402,Pearlene,(that code returns `((8) (4 7 6 10))`)
588,1505131782.000412,Lucio,you might want to read about “stateful transducers”; they use <https://clojuredocs.org/clojure.core/volatile%21>
589,1505153091.000386,Etsuko,"Is there a list of ""transducer producing functions"" somewhere, like `map`, `filter`, `keep`, `remove`...? Tried to google but I just get general posts on transducers."
589,1505153140.000557,Margaret,"you could also look at the two arg arity of partition-by and modify that so that f takes two args, and partition-by-++ takes an extra arg as well"
589,1505153206.000057,Evan,"`(find-doc ""transducer"")`"
589,1505153246.000648,Etsuko,"<@Evan> oh, cool!; Thanks, also <@Margaret>"
589,1505153285.000197,Evan,<@Margaret> sorry for the ninja :grin:
589,1505153311.000128,Margaret,actually I bet the best result would come from `transduc` which would match `transduce` `transducing` `transducer` etc.
589,1505153359.000297,Evan,good point
589,1505153469.000521,Margaret,"haha no need to apologize, I ninja all the time"
589,1505153531.000729,Sandy,"it doesn't exist at runtime; oh, nvm you got an answer from bronsa, gotta love Slack's scrolling (or lack of it)"
589,1505153608.000311,Evan,"I'm British, apologizing is one of our national sports; along with queuing and football"
589,1505153654.000356,Margaret,with a bit of effort you could have phrased that as an apology
589,1505153685.000083,Evan,_snaps fingers_; you're pretty good at thsi
590,1505155481.000144,Sonny,<@Etsuko> there is a list at <https://clojure.org/reference/transducers>
590,1505155638.000204,Etsuko,"<@Sonny> Oh, thanks, I missed that. I was scanning the page for a list, not a paragraph."
591,1505160467.000625,Lorette,"Hey folks, I've used the `#=` reader macro in the past to evaluate a form at read time (ex: `#=(* 24 60)`), but I can't find a reference to it in the official docs. Is that something that is missing documentation, or might support for it go away in the future?"
591,1505160659.00035,Kareen,I'd say using it is a very bad idea; it's not a general purpose read-eval like common lisp's; I consider it an implementation detail
591,1505160772.000527,Lorette,"OK, that makes sense. thank you.; I'm trying to add the result of a simple expression like `(str *ns* ""/"" ""some-fn"")` to metadata that will become a Java annotation, and `#=` worked for that use case. Do you know of an alternative that would work for that use case?"
591,1505161824.000427,Kareen,you could likely use a tagged literal to achieve that; a bit of a hack; but I'd rather do that than use `#=`
592,1505163332.000402,Keva,"for cljs, you’d encounter a similar bug in case your prod build uses advanced compilation and your dev build does not (which I think is a very normal setting - I encountered it with some template project.clj settings, at least); `cljs.pprint/pprint` was undefined in my prod build, but worked fine in my dev build; once I `:require`d it, no problem in either build"
593,1505169136.000206,Georgianne,"How do I proxy an interface method that has type m(A, B…)? ISTR the B… is syntactic sugar, but that clojure’s dot interop syntax knows how to deal with it. When I define a proxy with signature `[x ys]` or `[x &amp; ys]`, in either case I get   `No matching method found: m for class $myproxy`."
593,1505169280.000323,Aldo,"<@Georgianne> the ellipsis is just syntactic sugar for a primitive java array, so you want a method where the last argument is a primitive java array"
593,1505169389.000166,Georgianne,"<@Aldo> do you happen to know if Clojure’s dot syntax allows you to type it as one would in Java, that is, with an implicit array?; (ISTR calling it worked fine)"
593,1505169419.000113,Aldo,"what's ISTR? No, clojure's dot syntax requires you to pass a java primitive array as the last argument afaik"
593,1505169429.000076,Georgianne,"Sorry, I seem to remember/recall; OK, so I’m going to do something gnarly like `(type (into-array Logging$WriteOption []))` and then type annotate with that?"
593,1505169600.000048,Aldo,"```
boot.user=&gt; (import '(java.util Collections ArrayList))
java.util.ArrayList
boot.user=&gt; (Collections/addAll (ArrayList.) 1 2 3)

clojure.lang.Compiler$CompilerException: java.lang.IllegalArgumentException: No matching method: addAll, compiling:(/var/folders/42/zcfb2hds38l3shl7lqnjw2gh0000gp/T/boot.user7697464369495271650.clj:1:1)
     java.lang.IllegalArgumentException: No matching method: addAll
boot.user=&gt; (Collections/addAll (ArrayList.) (into-array [1 2 3]))
true
```; I suppose that's not actually dot syntax... but I'd be surprised if the rules were different; ```
boot.user=&gt; (. Collections addAll (ArrayList.) (into-array [1 2 3]))
true
boot.user=&gt; (. Collections addAll (ArrayList.) 1 2 3)

clojure.lang.Compiler$CompilerException: java.lang.IllegalArgumentException: No matching method: addAll, compiling:(/var/folders/42/zcfb2hds38l3shl7lqnjw2gh0000gp/T/boot.user7697464369495271650.clj:1:1)
     java.lang.IllegalArgumentException: No matching method: addAll
boot.user=&gt;
```"
593,1505169718.000268,Georgianne,"ah, there we go; thanks :slightly_smiling_face:; so, to proxy that"
593,1505169820.000115,Aldo,I honestly can't think of a proxyable java interface/class off the top of my head. my belief is it would just work but I don't know for sure; java/interface *with an ellipsis method sig.*
593,1505169942.000311,Georgianne,define “just work”? as in you’d expect the signature to just be `(m [x ys] …)`?
593,1505169954.000186,Aldo,where ys is a primitive java array yes; why can't I think of anything that uses ellipsis...
593,1505170112.000223,Georgianne,"ugh I think I figured out the problem; the exc is just because I’m calling it with the way I thought dot syntax worked, that is — allowing varargs; so the error is in fact 100% accurate because I’m passing 3 args and it only takes 2; I have some serialization code I can’t touch that checks if something is an iterable before it checks if it’s a map. This is annoying with clojure’s persistent maps, because they’re also iterable. Is there a convenient way to get “exactly this object, but pretend it doesn’t implement this interface”?; I guess the simplest way is to proxy Map; because I don’t _really_ want everything-besides-Iterable, I really just want Map, I think"
593,1505176563.000032,Silas,"That serialization code sounds like its bound to get you in big trouble soon enough; I don't think proxy would work, since it would just derive from PersistentMap, so the iterable interface would be inherited I believe; I'm guessing the serialization logic has a way to serialize Iterable, and your Persistent Map would be serialized as such. Is the issue you want to unserialize it back into a PersistentMap and not an Iterable?; If I was you, I'd convert the clojure map to a java map before serializing, and convert back after deserializing: ```(java.util.HashMap. {""a"" 1 ""b"" 2})```"
593,1505176851.000107,Margaret,"it checks out ```+user=&gt; (instance? Iterable (java.util.HashMap. {:a 0}))
false
```"
593,1505176995.000125,Georgianne,"<@Silas> That works too, but I think that constructor does more copying; <@Silas> You’re right about proxy — I was thinking of reify"
593,1505177106.000037,Silas,"Is that a problem? I'd be more worried about the brittleness of that serializer at handling Clojure objects, and corrupting your payloads, then a few ms of copying. Are you sure its not a case of premature optimization?"
593,1505177137.000261,Georgianne,"well, the code doesn’t exist yet so by some litmus tests I’m sure it is :slightly_smiling_face:; it’s certainly shorter"
593,1505177289.000153,Margaret,"this would counterindicate copying ```+user=&gt; (let [a (into-array [0])
              h (java.util.HashMap. {:a a})]
          (aset a 0 42)
          (get-in h [:a 0]))
42
```; of course you are creating one instance of HashMap$Entry for each k/v pair; but that's it"
593,1505177351.000116,Silas,"Well, the pointers are copied no?; I read ""copying"" as in, that requires looping over the key/values of the Map"
593,1505177374.000275,Margaret,"right, a HashMap$Entry is a pair of pointers; oh, OK"
593,1505177489.00008,Silas,"Anyways, I don't think there's a way to remove an interface from an existing class. And using a custom PersistentMap that is not Iterable sounds like a nightmare.I don't think you've got many more option. You could just let it serialize as an iterator too, and maybe reconstruct the Map from it when you deserialize it; Or change the serialization to be smarter"
593,1505183086.000023,Jutta,Bump :(
594,1505183469.000198,Margarett,Not sure what you mean by deliver?
593,1505183527.000115,Margarett,"If you mean throw, it's `(throw (ex-info ""An exception"" {:some :data}))` or substitute `(ex-info ...)` for any other exception."
593,1505183704.000201,Silas,"I've been doing some programming exercise like hacker-rank recently for fun, and I've noticed its quite challenging in Clojure to use index based algorithm. There's map-indexed and keep-indexed, but as far as I know, that's it, there's no other loop construct that is iteration aware. Anyone else felt this pain? Or tips how to get around it?; I also felt the pain of immutability. Its hard to get around it sometimes, without falling back to using an atom; In practice, when implementing software, those challenges never come up. But I find for algorithm and data structure type problems, Clojure made it extra challenging. Maybe I'm just not advanced enough in my FP kung fu yet though"
593,1505183906.000086,Margaret,"I think it's a fundamental difference in what's ""basic"" - in an imperative language you need to master all that modify-in-place stuff just to do idiomatic iteration on a collection, where we are more comfortable using things that do the mutation implicitly (and safely) and sticking to immutable apis on a higher level; it's like if they taught basic hunting and gathering in elementary school - it's tough, and most of us don't need to start with that"
593,1505183991.000004,Jutta,"Did you use datomic?
On datomic, you can `(d/transact conn :invalid)` and it will return a future.
This future will just throw if you try to deref it."
593,1505184275.000185,Giovanna,"I like the `indexed` fn from medley for when I want to know indices. Can be used with any ""looping"" construct."
593,1505184313.000073,Margarett,Ok. You could just implement `clojure.lang.IDeref` which is what `future` and `promise` etc implement.
593,1505184344.000086,Margaret,"<@Silas> also, the other index-aware iterator is dotimes (which only gives you indexes, not collection contents of course)"
593,1505184431.000011,Margarett,"```(reify
  IDeref
  (deref [_] (throw (ex-info ""bang!"" {}))))```"
593,1505184468.000115,Margaret,how about using `(pst)` to get the stack trace?; and why would it say your error was in :create-team! - the keyword? that's very odd
593,1505184521.000152,Ella,"yeah thats why im so stumped, ill try getting the stacktrace"
593,1505184631.000242,Silas,<@Giovanna> I'll check out indexed. I've been cheating with using (range (count coll)) for now.
593,1505184752.000113,Margaret,I use (map-indexed vector coll); then I have a new coll of [index element]
593,1505184800.000108,Silas,"<@Margaret> I guess the primitive is recursion. But when you need nested loops, and you start nesting recursion it gets hard to read and reason about I find. And any kind of marking, like if you need to check you've been in this branch before is tricky without mutating a tracking state."
593,1505184831.000079,Margaret,haha whadayaknow <https://github.com/weavejester/medley/blob/1.0.0/src/medley/core.cljc#L265> - that's what indexed does
593,1505184897.000174,Silas,"Haha, interesting. Not as nice as an index binding, but I guess that's a gpod trick too. I'll keep it in mind; I guess what starts to happen, is I find there's not enough functions in core lol, which is crazy, because core has so many. But I'm like, why isn't there a version of this that loops that way instead, why reduce doesnt have an indexed variant for example. In imperative, you don't ask yourself that, because you already accepted you'd do everything with a for/while loop and a few mutable vars.; But somehow, if I drop to loop/recur in Clj, I feel like I was defeated :p"
593,1505185370.000051,Margaret,`(transduce (map-indexed vector) (completing (fn [acc [index item]] ...) ...) {} coll)` works pretty nice though
593,1505185531.000049,Silas,"Hum,  that's a good one. What's completing?"
593,1505185596.000001,Margaret,"it simplifies writing the function arg to transduce, because transduce expects to be able to call your function with one arg to ""wrap up"" after the reduction is complete; eg. if you want to take a value out of the accumulator you put it in the one arg arity, or make a transient persistent; but completing just returns the accumulator (identity) which removes boilerplate for the common case"
593,1505185829.000093,Silas,"Ok, I see. I think I'll need to try it out. Like does that mean + implements the one arg arity here?"
593,1505185875.000087,Margaret,"yes, since it acts like identity it would just work"
593,1505185898.000116,Silas,"I see; Didn't know that, thought a reducing function would be have been enough"
593,1505185987.000022,Margaret,"```+user=&gt; (transduce (map inc) (fn [x y] (+ x y)) 0 [1 2 3])
ArityException Wrong number of args (1) passed to: user/eval19/fn--20  clojure.lang.AFn.throwArity (AFn.java:429)
+user=&gt; (transduce (map inc) + [1 2 3])
9
+user=&gt; (transduce (map inc) (fn ([x y] (+ x y)) ([x] ""done!"")) 0 [1 2 3])
""done!""

```"
593,1505186090.000053,Silas,"```(transduce (map identity) #(+ %1 %2) 0 [1 2 3])```
Wrong number of args 1 passed to fn.

```(transduce (map identity) (completing #(+ %1 %2)) 0 [1 2 3])```

Okay, interesting."
593,1505186114.000063,Margaret,"oh yeah, I should have shown that part too, but it looks like you get it now; completing also takes an optional second arg (default identity) for a separate function to call on the penultimate value from the transduce"
593,1505186306.00002,Silas,"Cool; Ya, so much more convenient then the overload arity syntax"
593,1505186616.000143,Ella,"<@Margaret> looks like the issue i with a null pointer; but i have no clue why when i do it in some places im getting the error, but others im not; something about functions im not understanding here"
593,1505186658.000081,Margaret,"why are you using resolve?; are you aware that resolve will simply return nil if the thing you look for isn't defined?; as technomancy likes to put it ""resolve is usually a sign that someone is up to shenanigans"" - it's valid but every place you do it is a place you are doing something odd and working around some limit in the language; if you really need resolve you can use a check to ensure the resolved value isn't nil before calling it"
593,1505186825.000212,Ella,"ill explain quickly what im doing. a user is uploading data from a webpage, and they choose what kind of data it is (aka what table it gets inserted into); so im using symbol/resolve to generate which function to use instead of using a case; so if they want to upload to ""team"", itll symbol/resolve (str ""db/create-"" table ""!"")"
593,1505186885.000087,Margaret,it's much safer to use a lookup map from name to function instead - it acts as a whitelist of which functions you are letting them look up
593,1505186912.000057,Ella,"ok, just thought i could be clever and save some code but sometimes trying to be overly clever bites you in the ass lol"
593,1505186934.000018,Margaret,"yeah, using resolve on user supplied data is giving them root access to your machine; which - OK you might intend to do that, but it's kind of extreme"
593,1505187630.000122,Silas,What's the advantage over a case of the create -table fns are hard coded?
595,1505188468.000022,Jutta,"I need to reify IDeref and IFn (and it works)
There is some way to do not need to reimplement IFn?"
593,1505189014.000188,Margarett,I don't seem to have that issue
595,1505189095.000136,Margarett,"```(let [v (reify
          IDeref
          (deref [_] (throw (ex-info ""bang!"" {}))))]
  @v)
user=&gt; ExceptionInfo bang!  clojure.core/ex-info (core.clj:4744)```"
596,1505198975.000009,Sunny,"Hi all, had a quick question: has Clojars removed support for signed releases?"
597,1505202380.000463,Earl,"Hi, I am using clj-http for API calls but i am getting very generic error message.  ExceptionInfo clj-http: status 415  clj-http.client/wrap-exceptions/fn--1863 (client.clj:196)
how can i see the full response from API?"
597,1505202978.000147,Terra,"<@Earl> check <https://github.com/dakrone/clj-http#debugging>
you can also try to turn on debug logging for apache httpclient: <https://hc.apache.org/httpcomponents-client-ga/logging.html>"
597,1505207050.000171,Earl,<@Terra> thanks a lot it worked. :+1:
598,1505209447.000134,Jutta,I'm reifying a promise. Then I have erros when I try to deliver 
598,1505209545.000217,Margarett,"I’m probably not going to be online for much longer, but if you send that code I’ll let you know if I can spot any issues with it."
599,1505211647.000155,Rosalie,"Hi,
I want to find out time each test ns takes. Is there a cleaner way to do this? Or I have to wrap time inside each ns fixture? 
Even a library that does this would do.
Thanks :slightly_smiling_face:"
600,1505214261.000045,Ellyn,"has anyone tried to add ""spring-boot run-script""-style script to an uberjar?"
601,1505216465.000411,Nikole,does anyone have a favourite lein plugin for hotreloading?; I've been trying lein-autoreload but it doesn't pick up new vars; I have to declare them first in the repl if they've never been declared before
601,1505216916.000399,Lucio,"<@Nikole> doesn’t really answer your question, but as a beginner I found it a pain to set up autoreloading with Lein. I moved to Boot recently and started using <https://github.com/danielsz/system>. The bult-in autoreloading is brilliant"
602,1505218048.000351,Keva,Was the move to boot mostly painless? Do you expect inconveniences later on?
601,1505218321.000378,Lucio,<@Keva> absolutely painless for me. I am a beginner but I found boot much more natural
602,1505218349.000435,Lucio,"I don’t expect inconveniences, I think the general opinion is that boot is more flexible than lein"
602,1505219451.000103,Keva,"Sweet :+1: really considering trying it out.; Just concerned that a lot of discussions and documentation uses lein per default, but maybe that's mostly a concern for budding developers "
602,1505219967.000085,Lucio,"<@Keva> I am not experienced enough to say if that would be an issue, but it seems to me that a lot of doc mentioning lein would use concepts that are easily translated to boot; e.g. dependencies to add, etc"
602,1505222706.000632,Keva,:thumbsup: :relieved: gotta give it a go! <@Lucio> 
602,1505223040.000058,Jodie,"<@Keva> totally a self-plug, but I recommend edge[1] for a complete boot setup. It's a little heavy as it includes the whole JUXT stack with examples &amp; training exercises.

[1]: <https://github.com/juxt/edge>"
602,1505223739.00007,Lucio,<@Jodie> oh thanks! didn’t know it; have you tried `danielsz/system`? how does edge differ?
602,1505224145.000395,Keva,"<@Jodie> does seem a little heavy, I think I’d like to port some of my small hobby projects with as few dependencies and build complexities as possible first, in order to learn iteratively; But I’ll be sure to remember it :slightly_smiling_face:"
602,1505224171.000164,Jodie,"system is tied to component far more I think. Edge isn't as deeply integrated/coupled to component. I have a branch with integrant for example.; <@Lucio> actually, system w/ boot-system is actually something edge could use."
603,1505230039.000076,Lieselotte,what's the easiest way to remove all those keys from a map where the value is nil?
603,1505230095.000836,Guillermo,`(into {} (filter val) m)`; N.B. that will filter false values; so you'd adjust to: `(filter (comp some? val))`
604,1505230535.000418,Nita,"Hi, I have a function which subscribes to a publication and sets up a listener loop. If I create the output channel within my function my events no longer work, however if I create the output channel outside of the function and pass it in as a parameter everything is fine. What am I misunderstanding here?"
603,1505230589.000041,Lieselotte,<@Guillermo> thx
603,1505230613.000252,Nita,"Here is the func:
(defn subl [publication topic output-ch handler-fn]
  (let [listener-ch (chan)
         ;listener-ch output-ch
        }"
604,1505230626.000464,Nita,"oops, how do you get the code blocks in here?"
603,1505230633.000435,Willow,"` ``` `; above and below, or use the `+` on the text input line for code syntax"
603,1505230657.000385,Nita,ah
603,1505230738.000644,Willow,"when you add it, in the top right there's a dropdown to select which language for syntax highlighting"
603,1505233388.000698,Margaret,"<@Nita> my suspicion is that there is something using the outside binding for output-ch and not the new one returned from subl. That said, it’s definitely better to define your core.async function to take chans as args rather than making channels itself (eg. that means your consumers can make decisions about buffering and transducing without having to add complexity to their consuming code)"
605,1505233602.00012,Nita,"I think I finally figured it out, my tests call unsubscribe during the teardown, which I was thought was happening with each testing block. When I moved the offending test to its own deftest then it started working. I assume that the problem was my previous tests were using the same pub and therefore there was some leftover pubsub plumbing that caused all the havoc; as far as taking chans as args yes I agree, the next phase is to make the chan optional so it can be supplied by the client with its own buffering when needed"
606,1505237422.000018,Silas,"I think it never had it; Use maven if you need this feature; <@Lieselotte> ```(filter (fn [[k v]] (not (nil? v))) {:a nil :b false :c 1})```
or
```(remove (fn [[k v]] (nil? v)) {:a nil :b false :c 1})```"
607,1505248137.000299,Xochitl,"Hi, I was wondering if one could do a `(require-macros ...` inside a `cljs/eval-str`?I am getting a error `self__.rdr.cljs$tools$reader$reader_types$Reader$read_char$arity$1 is not a function`"
608,1505250129.000216,Lieselotte,is there a good linter or code style checker for clojure?
608,1505251083.000254,Aldo,<@Lieselotte> there's eastwood and kibit
608,1505251366.000061,Jodie,<@Lieselotte> there's also joker
609,1505255136.000115,Edelmira,"```
user=&gt; (-&gt;&gt; (take 5 (repeatedly (constantly 1))) (map #(doto % (println ""&lt;-""))) first)
1 &lt;-
1
user=&gt; (-&gt;&gt; (take 5 (repeatedly (constantly 1))) (sequence (map #(doto % (println ""&lt;-"")))) first)
1 &lt;-
1 &lt;-
1 &lt;-
1 &lt;-
1 &lt;-
1
```; is it possible to apply a transducer to a lazy sequence and keep it unchunked?"
609,1505255215.000411,Margaret,"the cleanest thing is if you care about side effects, don’t do them inside code that is lazy, do them to data that you generate lazily; then chunking is a non-issue; (doseq [e (take 5 …)] (side-effect e))"
609,1505255247.000089,Edelmira,I only used a side effect here to demonstrate the chunk behavior. In reality I want to ensure I'm only processing one element at a time for memory reasons.
609,1505255382.00012,Margaret,"you can use reduce and build up a result instead, this avoids chunking as much as doseq is (and is just as non-lazy); laziness is an abstraction that doesn’t play nicely with situations where the speed of consuming the input is crucial (you could also look up unchunk, there’s a few versions of it floating around, but I sincerely think doseq and reduce are better ways to take care of the root problem)"
609,1505256044.000212,Edelmira,"It's not really about speed, but I want to write an API that returns a lazy sequence of things that is guaranteed to only be dedicating resources to one thing at a time, to avoid memory or thread leaks."
609,1505256206.000142,Margaret,"I know it’s not about speed - I meant “speed of consuming” in comparison to “speed of production”; it’s was a sloppy way to express it, sorry; if you want control of what is in memory, and for how long, lazy-seqs are tricky; but making the expensive thing (cpu wise, memory wise) or the critical thing (side effect wise) non lazy, the rest can remain lazy"
610,1505259026.0002,Sonny,You might want to look at an eduction with a transducer
611,1505260500.000304,Georgianne,"I’m trying to implement an interface (java.util.Map) with a record:

```
(defrecord JustAMap [m]
  java.util.Map
  (entrySet [this] #(.entrySet m)))
```

and getting the following error when evaling:

```
1. Caused by java.lang.ClassFormatError
   Duplicate interface name in class file
   compile__stub/unsiemly/stackdriver/JustAMap
```; Heh, I tried to figure this out for a solid hour and of course as soon as I ask I figure it out: the problem is that defrecord gives you a map interface for free, so that’s not what you want."
612,1505260957.000327,Aldo,yes... a record already implements java.util.Map
612,1505261038.000144,Sonny,"if you want to do something custom, that’s what `deftype` is for"
612,1505261073.000034,Aldo,also potemkin's def-map-type and def-derived-map may be of use to you if you're doing that <https://github.com/ztellman/potemkin>
612,1505261846.000192,Berry,"```
(doseq [i (range 100000)] (curse!))
```

I just spent an entire afternoon debugging the following problem (I was half convinced it was a jvm / hardware issue)

```
(defn foo [x] ...) // foo takes only a arg
(defn bar [ ... foo  ...] ... (foo 20)) // foo here shadows global foo
(bar ... foo=hash-map)

so now, I don't get an error because hash-maps can serve as functions

and for the life of me, I couldn't figure out why function foo wasn't being called
```

question: is there some linting tool / boot / clojure option that will loudly scream at me if a local binding shadows something else ?"
612,1505262075.00012,Aldo,but what about the times when shadowing is what you want? neither eastwood or cursive warn about shadowing. maybe check on kibit and joker i guess but I doubt they do either
612,1505262122.000068,Delois,"Warning on shadowing is definitely something I’ve considered, but it is what you want freqently.; (i.e. a local called `map` or `list` or something); It would have to be a fairly unobtrusive warning, but it’s bitten me from time to time too."
612,1505262345.000089,Aldo,"cursive *may* have caught this if you didn't use foo anywhere else, ie the (defn foo would be grayed out because not used anywhere"
612,1505262369.000107,Berry,"it's used elsewhere; what threw me off was the combination of: foo only took one argument, hashmaps can be treated as functions of 1 arg; so instead of getting a runtime error / exception at where (foo x) happens, I just silently get the wrong answer"
612,1505262435.000037,Raul,<@Berry> what do you use as an editor?
612,1505262448.000134,Berry,I use emacs / cider
612,1505262459.000011,Margaret,eastwood will warn about shadowing iirc
612,1505262471.000224,Raul,"doesn't *exactly* fix your issues, but I use <https://github.com/Fanael/rainbow-identifiers> to make it so these kind of things jump out at me more easily"
612,1505262558.00019,Aldo,"ah you're right it does; new as of 0.1.5 <https://github.com/jonase/eastwood#local-shadows-var>; limiting it to ""and is called as a function"" is smart, and would probably drop the number of false positives a lot"
612,1505262760.000267,Raul,"heh, what do you know ```(defn foo [x]
  x)

(defn bar []
  (let [foo {:cat ""cat""}]
    (foo :cat)))
```  <https://github.com/clojure-emacs/squiggly-clojure> does have eastwood reporting a warning at the `(foo :cat)` line; `local: foo invoked as function shadows var: #'yummly.metadata.ads/foo`"
612,1505263579.000101,Berry,<@Aldo> <@Raul>: thanks for the suggestions
613,1505290569.00006,Isabell,"Hi, i've got a plumatic.plumbing question: is there any namespace qualified keywords support for fnk and defnk?"
614,1505306972.000242,Lieselotte,"what's the standard way of organizing tests to various files? eg if I have a file component.clj, should I place by deftests into that? or create a separate component_test.clj? If yes, where should that file go to? into the same dir as the component.clj or to a parallel directory structure?"
614,1505307575.000086,Terra,"<@Lieselotte> most of the time I use separate file with ""_test"" suffix located in ""test"" directory under project root. ""test"" directory pretty much mirror the ""src"" dir."
614,1505307580.000248,Merri,"<@Lieselotte>: If you're using leiningen, running `lein new &lt;proj&gt;` will give you some hints about that"
614,1505307611.000305,Terra,that's good pint too - you should end up with hierarchy that I've just described.
614,1505307637.000107,Lieselotte,<@Terra> <@Merri> will look at it thx
615,1505319435.000373,Bibi,"Looking for some inspiration here. I've inherited a stack overflow that happened at least twice, but it's not a regular occurrence and it hasn't happened since before I arrived.; ```java.lang.StackOverflowError at clojure.lang.RT.seq(RT.java:507) at clojure.core$seq__4128.invoke(core.clj:137) at clojure.core$filter$fn__4580.invoke(core.clj:2679) at clojure.lang.LazySeq.sval(LazySeq.java:40) at clojure.lang.LazySeq.seq(LazySeq.java:49) at clojure.lang.RT.seq(RT.java:507) at clojure.core$seq__4128.invoke(core.clj:137) at clojure.core$filter$fn__4580.invoke(core.clj:2679) at clojure.lang.LazySeq.sval(LazySeq.java:40) at clojure.lang.LazySeq.seq(LazySeq.java:49) at clojure.lang.RT.seq(RT.java:507) at clojure.core$seq__4128.invoke(core.clj:137) at clojure.core$filter$fn__4580.invoke(core.clj:2679) at clojure.lang.LazySeq.sval(LazySeq.java:40) at clojure.lang.LazySeq.seq(LazySeq.java:49) at clojure.lang.RT.seq(RT.java:507) at clojure.core$seq__4128.invoke(core.clj:137) at clojure.core$filter$fn__4580.invoke(core.clj:2679) at clojure.lang.LazySeq.sval(LazySeq.java:40) at clojure.lang.LazySeq.seq(LazySeq.java:49) at clojure.lang.RT.seq(RT.java:507) at clojure.core$seq__4128.invoke(core.clj:137) at clojure.core$filter$fn__4580.invoke(core.clj:2679) at clojure.lang.LazySeq.sval(LazySeq.java:40) at clojure.lang.LazySeq.seq(LazySeq.java:49) at clojure.lang.RT.seq(RT.java:507) at clojure.core$seq__4128.invoke(core.clj:137) at clojure.core$filter$fn__4580.invoke(core.clj:2679) at clojure.lang.LazySeq.sval(LazySeq.java:40) at clojure.lang.LazySeq.seq(LazySeq.java:49) at clojure.lang.RT.seq(RT.java:507) at clojure.core$seq__4128.invoke(core.clj:137) at ```; It just repeats the same trace until it overflows.; I'm trying to interpret this, obviously lazy seqs and a filter(?) There are only a handful of places in the code using 'filter', and a few more using 'remove', but nothing yet that seems out of the ordinary and would cause this.; Unfortunately I cannot reproduce this, any hints at what I might also look at?"
615,1505319696.000363,Sandy,"remove works via filter, so that's one thing to keep in mind; if you look at the entire stack trace you should see the point where it enters the loop, and that's the best place to start"
615,1505319728.000331,Bibi,"Yeah, I figured and confirmed that in the 'remove' source, so I've been tracking that as well.; Yes to the entire trace, I fear it was lost and this is the start of what was saved :stuck_out_tongue:"
615,1505319809.00022,Rebeca,are you sure you aren't just applying filter to a seq a few million times?; ` (doall (nth (iterate (partial filter number?) s) 100000))` will result in a similar looking stacktrace; (where s is some seq)
615,1505319983.000566,Bibi,"<@Rebeca> that's certainly possible, I'll re-examine with this in mind. Unfortunately nothing jumped out before - looks like single applications of the filter to the collections in question.; Thanks for the help <@Sandy> and <@Rebeca>"
615,1505320089.000626,Rebeca,"concat doesn't show up in your stacktrace, but it is a common culprit in stack overflows when used repeatedly"
615,1505320208.000186,Guillermo,<@Bibi> do you have any non-clojure* stacktraces?; it's possible that some lazy sequence is not using the lazy-seq macro correctly...
615,1505320268.000645,Bibi,"I looked at concat as well, it's used in the code once or twice but I figured since it's not in the trace it's not the issue."
615,1505320288.000288,Rebeca,you don't have the whole trace
615,1505320292.000465,Bibi,"<@Guillermo>, unfortunately this sample is what I have (... and lots of it repeating).; Agreed, I'll have to wait to see if this happens again and make sure the whole trace is grabbed at the time.; I think once I have that the investigation will go smoother :slightly_smiling_face:"
615,1505320491.000472,Guillermo,`Throwable-&gt;map` in Clojure 1.8 is really useful
615,1505320619.000295,Bibi,"Not familiar with that, I'll look into it, thanks!"
616,1505322309.00076,Edelmira,"can anyone help me understand this behavior with lazy-seq (Clojure 1.8)?
```
user&gt; (def s (lazy-seq
               (println ""resolving seq"")
               (cons 1 (lazy-seq
                         (println ""resolving seq2"")
                         (cons 2
                               ((fn [x]
                                  (lazy-seq
                                    (println ""boom"" x)
                                    (/ 1 0))) 
                                :x))))))
#'user/s
user&gt; (first s)
resolving seq
1
user&gt; (second s)
resolving seq2
2
user&gt; (nth s 2)
boom :x
ArithmeticException Divide by zero  clojure.lang.Numbers.divide (Numbers.java:158)
user&gt; (nth s 2)
boom nil
ArithmeticException Divide by zero  clojure.lang.Numbers.divide (Numbers.java:158)
```; One of the later lazy seqs throws an error, but when I try to realize that seq again, the body somehow loses the values in its lexical closure"
616,1505322476.000075,Nita,More pubsub questions. Can a single input-channel handle having more than one publication with different topic-fn? My reading of the docs leads me to believe this is true. However as soon as I create a second pub on the input-ch (with different topic-fn) the notifications stop working on the first pub. Any thoughts?
616,1505322477.000232,Rebeca,^:once fns
616,1505322499.000539,Guillermo,"the ""thunk"" inside a lazy seq is marked with `^:once` metadata, making it a ""once-fn"" -- practically this means that the closed-over values disappear and are cleared after the only legit invocation of the function <@Edelmira>"
616,1505322531.000039,Edelmira,"oh. wow.; but then why is it trying to call the same function again if it errors, if it's designed to only be called once?"
616,1505322581.000049,Rebeca,"because of the error; lazy-seqs cache the result value, but don't cache the error"
616,1505322602.000094,Edelmira,why not
616,1505322609.00012,Sonny,there’s a ticket about this I think; but really the general policy is that we don’t make any guarantees about seqs that blow up; <https://dev.clojure.org/jira/browse/CLJ-1332>
616,1505322712.00021,Edelmira,I guess I'll make sure my seq doesn't blow up then
616,1505322804.00039,Sonny,"that’s not the particular ticket I was thinking of (although it’s the same thing), was thinking of: <https://dev.clojure.org/jira/browse/CLJ-2069>"
616,1505322888.000324,Guillermo,i wonder if there is a perf impact to that ^
616,1505322897.000172,Sonny,this is a good example of a ticket that I have a hard time predicting how Rich will react to it - could as easily be declined as accepted; based on things I’ve heard him say in the past
616,1505323082.000308,Edelmira,"The reason I encountered this is I had to turn a lazy seq into an iterator that was then passed to a Java class which I guess decided to call `.next` despite getting an error...?; Oh wait, it looks like the standard call pattern `.hasNext` followed by `.next` breaks down when there's an error in the underlying seq.
```
user&gt; (def i (.iterator ...)) ; same seq as above
#'user/i
user&gt; (.hasNext i) (.next i)
resolving seq
true
1
user&gt; (.hasNext i) (.next i)
resolving seq2
true
2
user&gt; (.hasNext i) (.next i)
boom :x
ArithmeticException Divide by zero  clojure.lang.Numbers.divide (Numbers.java:158)
boom nil
ArithmeticException Divide by zero  clojure.lang.Numbers.divide (Numbers.java:158)
```; Seems like this is a standard use case that shouldn't break?; I'll vote for the jira ticket :slightly_smiling_face:"
616,1505323344.000307,Sonny,some workarounds in your current situation - convert your lazy seq usage to an eduction with transducer (if that’s possible); or call (clojure.lang.SeqIterator. the-seq); which is kind of some now unused inside baseball
616,1505323459.000609,Edelmira,is `SeqIterator` a different impl than the standard `.iterator` call?
616,1505323483.000619,Sonny,"it is, although it’s hard for me to say if either of these will actually get past your issue without trying them"
616,1505323547.000223,Edelmira,"I'll try it out, thanks; Is the `^:once` metadata on the generated `fn` necessary to prevent some sort of memory leak? Or is it just for a perf improvement? I'm curious if I can get around this by manually calling `(clojure.lang.LazySeq. (fn [] ...))` instead of `(lazy-seq ...)`"
616,1505324924.000096,Guillermo,"IIRC, the thunk function will be set to null and collected after LazySeq has invoked it.  The `^:once` metadata allows the closed-over values to be collected after they are used and before the thunk function has even finished executing."
616,1505325025.000073,Edelmira,"I don't think the thunk function is set to null, since as you said, it doesn't cache errors, and I'm getting errors again when I call the seq multiple times; so it must have held onto the thunk"
616,1505325036.000064,Guillermo,it's not set to null if it throws
616,1505325042.000359,Edelmira,"oh, nvm"
616,1505325057.000609,Guillermo,<https://github.com/clojure/clojure/blob/43540be97668ed453cad74e18f434c3e8bd5d638/src/jvm/clojure/lang/LazySeq.java#L40-L41>
616,1505325098.000036,Edelmira,"I assume that if I don't keep any references to the head of the lazy seq itself, I shouldn't need to care about how LazySeq manages its pointers internally?"
616,1505325111.000134,Guillermo,right
616,1505325125.00017,Edelmira,":+1:; Thanks for the help, Ghadi and Alex; and @hiredman"
617,1505325378.000012,Edward,"hi, does anyone know if it is possible to cancel a promesa promise on the JVM or otherwise workaround the absence of `p/timeout` on the JVM?"
617,1505325615.000152,Raul,"<@Edward> I know that `timeout` doesn't exist in clj version, but doesn't `cancel` still exist? <https://github.com/funcool/promesa/blob/master/src/promesa/core.cljc#L225>"
616,1505325709.000121,Edward,"Ah, I think it does. Good catch"
617,1505325744.000187,Edward,"In which case, it is trivial to implement a `p/timeout` which makes one wonder why it isn't included. :slightly_smiling_face:"
616,1505325762.000626,Raul,<https://github.com/funcool/promesa/issues/51>
617,1505325769.000521,Raul,"```No, there are no alternative option, it is just not implemented. PR is welcome for that part :D
```"
617,1505325785.000103,Edward,I see. :slightly_smiling_face:
618,1505327185.000136,Bibi,"<@Rebeca>, but how to get the 'whole trace'. I'm using your example code that generates a similar trace but any trace I get:; ```Caused by: java.lang.StackOverflowError
	at clojure.core$seq__4357.invokeStatic(core.clj:137)
	at clojure.core$filter$fn__4812.invoke(core.clj:2700)
	at clojure.lang.LazySeq.sval(LazySeq.java:40)
```; This is from -main to a function that calls your example"
618,1505327232.000413,Rebeca,something thing is filtering your stacktraces  then
618,1505327249.000167,Bibi,"So I'm not seeing where this actually started. A thing I'd like if I hope to capture this if it happens again.; Maybe, CIDER?"
618,1505327260.000575,Rebeca,I'd look at <https://github.com/stuartsierra/stacktrace.raw>
618,1505327272.00055,Bibi,"Cool, thanks!"
618,1505327282.00067,Rebeca,"sure, maybe, I dunno, people keep writing libraries that do it for some stupid reason"
618,1505327293.000073,Bibi,:disappointed:; thanks for the suggestion
618,1505327378.000352,Rebeca,from cider you should be able to get the whole trace if you (.printStackTrace *e)
619,1505329577.000163,Rebeca,what client are you using?
619,1505329586.000456,Carlene,"just raw Java Interop; ```
(a/go
      (loop []
        (when-not @poison
          (let [records (.poll ^KafkaConsumer consumer (:poll-timeout opts))]
            (doseq [r records]
              (a/put! ch (deserialize-fn (.value ^ConsumerRecord r)))))
          (recur)))
...
```"
619,1505329653.000053,Rebeca,"actually, I'd say that heap graph doesn't actually show anything; periodic garbage collection and noise"
619,1505329665.000452,Sherrie,Do Ring sessions guarantee any kind of uniqueness?
619,1505329681.00045,Sandy,"(it shows a properly working GC, imo)"
619,1505329717.000261,Carlene,just wasn't sure if there was something I could do on my end to make the consumer not create so much garbage to collect :slightly_smiling_face:
619,1505329733.000046,Sandy,"I'd suggest moving this into a thread, since you're performing a blocking call on the KafkaConsumer"
619,1505329733.000145,Rebeca,I wouldn't worry about it
619,1505329761.000549,Sandy,But this is unrelated to your GC questions
619,1505329813.000349,Carlene,Would that just be a `(thread ..)` instead of `(go ..)`?
619,1505329845.00035,Sandy,"It does seem odd to me though that there appears to be about 400MB of garbage created every minute. Most likely due to something else in the system, but that's rather high for a mostly idle app.; yes, but also switch your put to a a/&gt;!! to properly handle backpressure; as it is now, if producers create data too fast, you're going to hit an exception on that put!"
619,1505329902.000307,Noe,"ha, garbage generation :slightly_smiling_face: something that's tricky to observe and get insights about; 400MB of garbage says little about whether it's 400 x 1MB or 40K x 100KB (out of hat values. workload specific)"
619,1505330049.000334,Carlene,"that makes sense, thanks! I'm reading off the channel as follows:
```
(a/go
    (loop []
      (when-let [req (a/&lt;! actions-in)]
        (let [{:keys [errors actions statements]} (dispatch req sessions)
              rid (:requestId req)]
          (if (seq errors)
            (a/put! actions-out {..})
            (do
              (when (seq actions)
                (a/put! actions-out {..}))
              (when (seq statements)
                (a/put! statements-out {..})))))
        (recur)))
...
```
Could that be improved as well?"
619,1505330062.000439,Sandy,"<@Carlene> classic use case for a memory profiler.; In Yourkit you can capture all allocations over a few minutes and then the profiler will tell you where the allocations came from.; well this is a bit different. In this case your read is using a/&lt;! so that's fine; be very, very careful with a/put! a good rule of thumb: Never use a/put! without also giving it a callback that handles the backpressure"
619,1505330215.000417,Noe,"fwiw, I don't spot any huge garbage generating Clojure construct in the code dadair pasted"
619,1505330229.000409,Sandy,"a/put! doesn't wait for a slot to be available in the channel, so it basically creates a unbounded queue, and there's stuff in core.async to throw exceptions when such behavior is detected .; Agreed, it's probably in some sort of logging library."
619,1505330294.000272,Noe,"and ehm - sorry for sidetracking - is the topic ""garbage generating Clojure constructs"" interesting to some ? I have dusty personal code in a drawer that was written with the aim of exploring this topic."
619,1505330305.000228,Carlene,"Trying to run VisualVM memory profiling but it causes the app to hang and eventually errors out saying it can't establish a profiling connection -- sampling works, just not profiling  (but I'll move this discussion to <#C053AK3F9|beginners>); awesome, thanks for the advice!"
619,1505330378.000192,Noe,"try yourkit first imo, VisualVM is 1) more trouble 2) less actionable results (or maybe its just harder for me)"
619,1505330395.000678,Sandy,"Sure, but it has to be done carefully. Stuff like allocation removal in the JVM makes this a tricky subject."
619,1505330435.000046,Noe,"Haha. I used `btrace` ! I have been way too shy to endure peer review, but looking back, what's the point of keeping it private; I have never managed to get complete certainties about some things. It makes the README a bit hard to write, since the results are very much open to interpretation"
619,1505330552.000199,Carlene,YourKit/JProfiler have a pricing model that precludes me from using them :disappointed:
619,1505330609.000351,Margaret,yourkit is free if you make a good usable open source clojure library - which might be within your reach
619,1505330636.000433,Noe,"there is a personal license available for yourkit that is not advertised on their website.  $99/year. that's hardly starving hacker rate, but it might be within your range compared to their pro-oriented rates; use the 30-day free trial period to meditate whether or not that price is worth it to you. it just might.; you may also soon realize your memory issues are not blocking you from doing whatever it is your doing. the free trial period will also cover that, for free :slightly_smiling_face: (_premature optimization yada, yada_)"
619,1505330857.000207,Carlene,"agreed, the memory issues aren't blocking. I'm just trying to reduce the bloat of our dev stack as 4 JVMs on a Macbook Pro + IntelliJ + etc can get a bit bloated"
619,1505330913.000094,Noe,"dadair : w.r.t. reducing dev bloat, you should not be worried about garbage generation; its mostly going to impact GC metrics (how often, how long) which are hardly noticeable unless you're doing 60Hz stuff; set smaller java max heap sizes, let the JVM explode whenever it grows outside of what you're comfy giving it; I wouldn't tune my stack to my development environment too hard - it's already enough work to tune it for production environments"
620,1505333077.000223,Joette,I have two maps where some of the map values are byte arrays.How would I go about comparing the maps for equality as `(= (byte-array [1]) (byte-array [1]))` returns false? i.e. is there something I could use in clojure or do I need to write something that walks the maps and runs Arrays/equals or equivalent manually?
620,1505333339.000449,Margaret,"<@Joette> one option would be replacing each `byte-array` with a `(vector-of :byte)`; which could be done with a map / into or a tree-walk, depending on the complexity of your data structure"
620,1505333457.000627,Joette,<@Margaret>…looks promising. Thanks for the pointer
621,1505336004.000547,Lois,"Hello all, is there an easy way to convert some key value of a map instead coping all key-values one by one? `[{:a 1234 :b ""some"" ...} {:a 1223 :b ""some"" ...}] to {[:a ""new_one"" :b ""some"" ...} [:a ""new_2"" :b ""some"" ...}]` in this case I´ll convert :a value to new :a value"
621,1505336216.000574,Margaret,"<@Lois> `(map #(update % :a f) ...)` ? I don’t know how you come up with your new values…; but if you have a function f that takes 1234 and returns “new_one” and takes 1223 and returns “new_2"" that will work"
621,1505336288.00015,Lois,"well, I´ll get the :a value transforme it and update it into array of map; humm, I´ll try it now; <@Margaret> that was too easy, thank you, it worked. I see I´m clojure newbie"
621,1505337770.000248,Margaret,"<@Lois> you’ll find that most things that involve data transforms are quite simple in clojure, though sometimes you’ll need to reconsider specific approaches (eg. using associative data structures instead of linear scans, updating a cache of derived data instead of doing in place updates by index, using keyed accumulators in reduce instead of mutating an item as you iterate a collection…)"
621,1505337926.00039,Lois,<@Margaret> so updating map is what kind of approaches?
621,1505337967.000053,Margaret,it’s one of the simple things I didn’t list; I only gave examples of the ones that tend to be a little trickier for people
621,1505338092.000363,Lois,"ok, sometimes the imperative programming is in my memories :slightly_smiling_face:"
621,1505338180.000349,Margaret,sometimes what helps is thinking of how you would do things in SQL; we have group-by etc.; (update m :a inc) is a lot like update table some_row set a = (a + 1); ugh - that’s not good SQL but hopefully you get the idea
622,1505342246.000031,Lucio,"<@Lois> think of it as function composition. Clojure has two basic functions to manipulate maps, `assoc` and `update`. You would use the former when you want to set the key of a map to a value. It takes a map, a key and a value, and returns a new map with your given value under your given key; If a value is already present in the map for the key you want to assoc, it will override it, e.g.; Now, if you wanted to transform the value under `:a` in the map by some function `f` (for example, increment it with `inc`), you could do this:; But that’s pretty verbose. Clojure core includes the function `update`, which takes a map, a key and a function, applies the function to the value under that key, and returned an updated map (as <@Margaret> demonstrated); In your case, you had a vector of maps that you wanted to update. Clojure core has the function `map` which applies a function to every entry in a vector, and returns an updated vector; What you wanted to do was to update a key for each map in your vector, so it’s quite natural to use the function `map` to then call `update` on each entry; This probably doesn’t always apply, but when manipulating data like this try to think of what you would do to update the “most nested piece” (here, maps), and then try to think how you would apply this operation if the piece you want to update is nested in a vector, or another map, etc; You might also want to check out <https://github.com/nathanmarz/specter>. It’s by no mean necessary to manipulate simple datastructures, but it might give you some insights on how to deal with immutable data"
622,1505342808.000369,Loura,<@Lois> try to use ```-&gt;``` and ```map```
622,1505342815.000031,Lucio,"In particular, I think the concept of “navigation” is quite helpful, even when thinking about mapping over a vector of maps, like you did; That confused me more than it helped to be honest :smile:"
623,1505345666.00002,Margaret,"NB for “navigation” you can check out zippers, which literally let you represent your traversal and updates as an arbitrary series of navigations of the data"
623,1505345927.000084,Owen,"zippers add a lot of overhead, whereas specter navigators generally run with near-optimal performance"
624,1505363532.000045,Etsuko,"Is there an idiomatic way to get a `file-seq` based on a `io/resource` for a directory in `resources/` in a uberjar?
It works in a lein run/repl session, but when bundled in a jar the file-seq only contains the path to the directory, not the contained subdirectories and files."
624,1505363585.000106,Margaret,"you can't get files from inside a jar, you can only get resources, you can make something that acts like file-seq, but file-seq itself isn't an option; I mean, I guess you can unzip the jar and then get a file-seq, but that's not likely what you want"
624,1505363794.000009,Etsuko,"no, that's not what I want :slightly_smiling_face:; Thanks, I'll dig further how to list files in a resource directory and build something like a resource-seq"
624,1505363852.000149,Shira,<@Etsuko> see <https://github.com/weavejester/resauce>; e.g. <https://github.com/weavejester/ragtime/blob/69f9266cb94da9f435b800b8571edcf1c0315285/jdbc/src/ragtime/jdbc.clj#L149>
624,1505364211.000128,Etsuko,Nice :+1:; Thanks a lot
624,1505364219.000066,Shira,np :slightly_smiling_face:
625,1505380835.000123,Librada,Has anybody watched this? <https://www.youtube.com/watch?v=nrpsMB2gYI0&amp;index=2&amp;list=PLetHPRQvX4a9iZk-buMQfdxZm72UnP3C9>; What are people’s thoughts on the current state of the clojure api docs?
626,1505381091.000115,Emelina,"hi all :slightly_smiling_face:
does anyone knows about a repl wathcher
something like npm's nodemon that watch my files and when i change anything it reloads the repl ?
same goes for tests, lintign etc..."
625,1505381097.000367,Emelina,*linting
625,1505381163.000337,Senaida,"I know <@Daniell> has some thoughts on this and there has been a lot of work recently on updating docs at clojure-docs. For example, I believe the docs for jdbc were updated about a month or two back (<http://clojure-doc.org/articles/ecosystem/java_jdbc/home.html>)"
626,1505381819.000157,Kami,"For webserver, ring has reload middleware <https://github.com/ring-clojure/ring/wiki/Reloading>.

But I would suggest you to reload manually with help from tools like 
<https://github.com/weavejester/reloaded.repl> or <https://github.com/weavejester/integrant-repl>"
627,1505387159.000238,Lucio,As a beginner I have found Clojure’s documentation overall to be very good; especially `<http://clojuredocs.org|clojuredocs.org>`
627,1505387977.000078,Coralee,"for variable names matching exactly with some builtin core function name, is there some naming convention to be followed for naming such variable?
eg, I have a function which accepts a parameter which represents name. I can not call it `name` as it will conflict with the clojure.core function `name`.
I have been using alternate names / short forms till now, wanted to check if there is some convention."
628,1505388344.000225,Librada,It certainly is possible to find what you’re looking for on clojuredocs. :smiley:
627,1505388433.000381,Librada,"The user submitted examples help a lot, for sure."
628,1505388481.000269,Librada,How about just using something like `name#`?
627,1505388577.000008,Lucio,<@Librada> the “see also” section has also been tremendously useful to me as a beginner learning clojure.core; It helped me discover many functions; or quickly find functions which I forgot the name of
627,1505388641.000127,Coralee,"seems good, although it seems more like variable defined in a macro"
627,1505388652.000198,Librada,You might also want to take a look at <https://github.com/danielsz/holygrail>
627,1505388679.000148,Lucio,"for example yesterday I remembered there was a function to set the value of an atom but forgot its name. I searched for `swap!` (which I remember was the function to transform the value of an atom) and looked in see also, which contained `reset!`, the function I was looking for; a bit of a silly example, but still"
627,1505388709.000002,Librada,it’s got a setup where it’ll refresh your repl automatically on file save… it helps to keep your repl in the same state as your source file…
629,1505390294.00017,Berenice,"Anyone here got experience with lacinia? I'm writing a graphQL proxy for a REST api, and I'm having problems traversing the REST endpoint and building; .. the data structure; The backend has data in the following format {object { children { list of objects } }, which can go on for a long time. However, I am only able to retreieve one level of children. Any suggestions?"
629,1505390408.000016,Lucio,<@Berenice> try the <#C4DLZKR9T|graphql> channel
629,1505390433.000435,Berenice,Thanks :slightly_smiling_face:
630,1505395090.000355,Sandy,"There was a discussion about this on the Clojure mailing list; two key takeaways (imo): 1) docs can be separate from code. No reason to tie doc updates to the main clojure distro. 3rd party docs are welcome! 2) Clojure loves data, can we keep it that way? Why not keep all this documentation in a data format (instead of markdown which is not data, but text). Seems like a combination of clojure core specs, doc strings, comments, and proper formatting could do a lot.; the bits are all there, just needs a bit more editor support"
631,1505395370.000591,Suzy,"Hello everyone. We had a hard time implementing custom transducer that tried to supply it’s initial value.
If we take a look at transduce impl:
(defn transduce
  ([xform f coll] (transduce xform f (f) coll))
  ([xform f init coll]
     (let [f (xform f)
           ret (if (instance? clojure.lang.IReduceInit coll)
                 (.reduce ^clojure.lang.IReduceInit coll f init)
                 (clojure.core.protocols/coll-reduce coll f init))]
       (f ret))))
We can see it’s 3-arity version invokes reducing function and passes it as initial value to 4-arity. I see the  problem here. If we see Transducer as a transformer for reducer then we should never invoke f ourselves here. We should have passed it to xf, get the real resulting r-f and invoke this with zero arity only after transformation. Could anyone please clarify on this? Is it some misunderstanding on my side or it’s just a bug?"
630,1505395649.00026,Sonny,Transducers shouldn’t supply an initial value; the transducing process does that
630,1505395674.000024,Suzy,But what is it’s zero arity is for?
630,1505395688.000425,Sonny,it’s to pass through the transducer chain
630,1505395706.000475,Sandy,link to the mailing list post: <https://groups.google.com/forum/#!topic/clojure/8awHqxldZKA>
630,1505395727.000148,Suzy,"I can’t see it being invoked in transduce at all. Am I wrong?; As far as I can see arity-4 is to be implemented with 3: 

(defn transduce2
  ([xform f coll]
   (let [f’ (xform f)]
     (f’ (reduce* f’ (f’) coll))))
  ([xform f init coll]
   (transduce2 xform (fn
                      ([] init)
                      ([r i] (f r i))) coll)))"
630,1505396668.000279,Jonnie,if you use boot there is a `watch` task.
632,1505403218.000456,Georgann,"Is this a surprise to anyone?

```
(clojure.data.json/read-str ""{\""foo\"": 43 \""bar\"": 42}"")
=&gt; {""foo"" 43, ""bar"" 42}
```

Note the missing comma in the json input"
632,1505403282.000216,Sandy,"data.json is a bit of a barebones json parser, so it doesn't surprise me. But I'm not sure why I'd ever care if bad JSON got parsed correctly?"
632,1505403475.000525,Georgann,Authoring test data that ends up working in clojure and then banging one's head against the wall trying to figure out why it doesn't work in another language? (or even after porting to cheshire maybe)
630,1505407462.000426,Margaret,"calling it `name` is valid, but you can also qualify it, as in `foo-name` (where I can’t guess foo’s real name without knowing more about your code)"
633,1505413246.000074,Rebeca,in a macro use (new Whatever ...) instead of creating the Whatever. symbol
633,1505413327.000031,Wenona,same error replacing `~ctor-sym` with `new ~type-name`
633,1505413332.000235,Rebeca,sure; unrelated tip; the error is because you have the defn inside the let
633,1505413433.000518,Wenona,"hmm, so probably make the `recycler#` a var instead"
633,1505413438.000236,Rebeca,"actually, for deftypes using the factory function -&gt;Whatever is prefered to using the construtor directly; no"
633,1505413475.000577,Wenona,I was going to redef `-&gt;Whatever` to do something different
633,1505413922.000481,Rebeca,"I would leave it, make mk-sym your special constructor name, and leave -&gt;Whatever as the standard thing as an escape hatch so someone who doesn't want your special thing can avoid it"
633,1505414349.000217,Wenona,"well the goal was to replace usage of `defrecord`s with this (and add `ILookup` etc to the type), and a lot of the code (which uses `-&gt;Whatever` to make `thing` and does dispatch on `(type thing)`) would stay the same"
634,1505417175.000204,Melvin,"Having hyphen in folder name gives error but when i rename `test_utils` to `testutils` it works
```java.lang.Exception: namespace 'com.pay.boomerang.config' not found after loading '/com/pay/boomerang/config', compiling:(com/pay/test_utils/helpers.clj:1:1)
```
there has been a similar question posted here  but no actual reason of the problem -&gt;  <https://stackoverflow.com/questions/12718658/why-does-java-complain-that-namespace-is-not-found>"
634,1505417445.000442,Wenona,"this is the real impl I have so far, btw <https://gist.github.com/csm/1d2d708029a79db937c01b7d1c01dc30>"
635,1505418862.000629,Daniell,"Clojure, being a Lisp, allows `-` in symbol names. Java, the compiled target host environment, does not. So when Clojure compiles `com.pay.test-utils.helpers`, it produces a Java package `com.pay.test_utils` containing a class `helpers`. The file system must conform to Jaya's view of packages so it must be `com/pay/test_utils` on the file system. Does that answer your question?"
635,1505419230.000033,Guillermo,defrecord already has ILookup
636,1505421689.000205,Lori,"In `compojure-api` is there a way to mark a field in a schema as `""deprecated""` so that it shows up in the swagger UI?"
637,1505424202.000194,Jovan,"I am trying to get the `*cider-error*` buffer to always display in the same frame. Right now it opens in the last window it was open in, which might be in another frame. I recently learned that there is a variable `display-buffer-alist` that sounds like it might be useful. But it sounds like `display-buffer` is not what's being used, since it displays the buffer without selecting it, but when an error occurs the error buffer is selected. Then there is `pop-to-buffer`, `switch-to-buffer`, etc. Anyway, does anyone know how I can get cider to always display the error buffer in the same frame, but not the same window?"
634,1505425777.000132,Wenona,"But the idea was to make a “recyclable” type, where there are mutable fields behind the scenes, and the ILookup would return the current value, not whatever mutable container that held that value"
637,1505426029.000102,Margaret,<@Jovan> when I used emacs `winner-mode` saved my sanity - it gives you a history where you can undo and redo all changes to buffer layout in your pane <https://www.emacswiki.org/emacs/WinnerMode> - it comes standard with emacs you just need to turn it on
637,1505426238.000219,Jovan,"<@Margaret> I'll check it out, thanks.; For now I figured I can delete the old buffer with an advice before cider tries to switch to it"
637,1505426328.000313,Guillermo,gross :wink:
634,1505426858.000282,Wenona,I'm at the point where GC thrashing is my biggest issue. Time to try out gross stuff :stuck_out_tongue: 
638,1505439653.000027,Librada,"so about that 2nd part, keeping data as data…; I don’t completely understand that point…; doesn’t good documentation necessarily have to be text?; it can be enriched with data, I guess?"
638,1505440140.000039,Daniell,<@Librada> He means that the system of record should be data -- and then all sorts of tools can generate whatever type of docs them want from that data.
638,1505440328.000022,Librada,"I understand the value of consumable/transformable data… but still… suppose I want to end up with some documentation that looks like this:
<https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector>; Most of the main content of that page is straight text and can be represented well as some kind of markup language. How might that be represented with other kinds of data?; I want to help with improving the docs… but I’m honestly having trouble understanding the point being made in the mailing list…"
638,1505440513.000175,Daniell,"Look at <http://clojuredocs.org|clojuredocs.org> — <http://clojuredocs.org/clojure.core/select-keys> — that’s drawn from data: the metadata of all the namespaces and the functions, and some additional data added from a database, entered as examples by community members.; The only thing on that page drawn from the `select-keys` function is the docstring — and it says Available since 1.0 (from metadata on the function).; Members can contribute to <http://clojuredocs.org|clojuredocs.org> and members can contribute to <http://clojure-doc.org|clojure-doc.org> (longer form tutorials and stuff about the ecosystem rather than core Clojure).; In addition to the raw data inherent in the Clojure core code itself (namespaces, symbols, metadata, docstrings), there are also all the core specs which can be used to generate all sorts of additional documentation (folks haven’t done anything with this yet, beyond the updates to the `doc` function shows specs as well as docstrings).; <http://clojuredocs.org|clojuredocs.org> probably has the lowest bar for contribution: just login and start adding examples and see-alsos etc; the underlying infrastructure is on GitHub and accepts PRs if you think anything needs changing in the code. Next would be <http://clojure-doc.org|clojure-doc.org> which is entirely managed on GitHub and the “guides” team are happy to accept PRs (we need to automate the publishing after a PR is merged tho’). Finally there’s <http://clojure.org|clojure.org> itself, for which you need to sign a CA (to assign copyright of your contributions — but you can do that electronically) and then submit PRs."
638,1505441421.000033,Librada,I want to ask about the core specs stuff… but lemme ask this one first… Is there something wrong with trying to inject more detailed docstrings (maybe in a markup lang) for tools to look up?
638,1505441466.000018,Daniell,"And then there’s docstrings in Clojure/core itself which are treated as “code” and therefore need a CA and a patch, rather than a PR.; <@Librada> If the docstrings used markup, then _all_ tooling, even the bare bones REPL, would need to deal with it. That’s a bad idea. And that’s why the Clojure/core folks are so against that."
638,1505441576.000016,Librada,"right~ but if we have a separate repository of just “better docstrings”, but community would be able to actively participate in making it better…"
638,1505441587.000071,Daniell,The docstrings all end up in the clojure-x.y.z.jar file so that’s another reason for not wanting more detailed docstrings _in the code_.
638,1505441609.000182,Librada,add in some tooling to look up docstrings from that alternative source… wouldn’t that work?
638,1505441632.000168,Daniell,"Sure, and anyone is welcome to set up a community project with “better docstrings”, in some form that tooling can use (data).; A web site that could yield arbitrary documentation in plain text, markdown, rendered HTML, etc from a GET /clojure/java/jdbc/query?format=… style URL would be great. Any volunteer or group of volunteers could do that, and seed it with the default docstrings until community members edited them."
638,1505441789.000241,Librada,sounds good :smiley:
638,1505441853.000048,Daniell,"I’ll observe that I moved the java.jdbc docs out of the contrib repo to <http://clojure-doc.org|clojure-doc.org> specifically to get them out of the CA/patch process and into an open community GitHub/PR process. I did that ages ago. But almost no one has ever contributed to those docs, beyond me and (recently) one other community member."
638,1505441889.000246,Librada,and thank you for running that project!
638,1505441925.000104,Daniell,"Allowing the community to maintain external documentation is one thing — and it’s a good thing — but actually getting people to _contribute_ is something completely different. Lots of people love to complain about the state of Clojure documentation, but when it comes down to actually making it better… _crickets_ :neutral_face:; (and since some folks have been complaining about the docs for years now, but community contribution levels remain low, you’ll understand why the Clojure/core folks tend to be a bit unsympathetic to the complaints these days :slightly_smiling_face: )"
638,1505442056.000053,Librada,"yeah~ well… working on documentation probably doesn’t seem very appealing to people, unfortunately… but it definitely is necessary…; I looked into clojure.core with the other day. It reports there are 500+ public functions in there. It’s a bit daunting to have to replace that many docstrings."
638,1505442214.000044,Daniell,"I value the time the Clojure/core team spend on the code — on Clojure itself and the power it provides us all. I don’t want them to “waste” time on documentation instead. But I’d sure like to see more _community_ members contribute to the various documentation sites.; <@Librada> You’d generate an initial version from the default docstrings in the core — not much effort — and then provide an editing mechanism for the community to expand those. It would be a slow, incremental replacement over time.; That’s pretty much what <http://clojuredocs.org|clojuredocs.org> does."
638,1505442393.000107,Librada,I actually hacked together something that will highjack CIDER’s doc requests and inject it with new docstrings if available…; it’s not fancy and it’s not a web service… but I guess it’s a start…; <https://github.com/Odie/sidedocs-nrepl>; back to the core lib specs you mentioned earlier…; *has* the core lib been spec’ed? where can I get a hold of that?
638,1505443370.000064,Daniell,<https://github.com/clojure/core.specs.alpha> — mostly macros right now I think — that’s part of Clojure 1.9 alphas (we have Alpha 20 in production).
638,1505443569.000008,Librada,"okay~ having any kind of type info on the function params would help a whole lot. I can’t remember the number of times when I wondered “what kind of stuff will that function actually accept?”; Being able to play with the function in the repl definitely helps. But, that seems to introduce unnecessary friction into the dev process and is likely to penalize newcomers to the language.; Will look into generating function param documentation using core.specs.alpha. :smiley:; looked at Racket’s api docs the other day…
<https://docs.racket-lang.org/collections/collections-api.html>

It’s rather nice that each function’s prototype is clearly outlined above any additional explanation.; I guess instead of “prototype”, I should say, function signature…"
638,1505444241.000079,Daniell,"I guess I’ve gotten used to just pressing `ctrl-alt-, d` when I want to see docs (inline, in ProtoREPL). I tend to only have a few lines of the REPL open at the bottom of the screen and do everything in files and have ProtoREPL display inline results in the editor. I’ve also gotten used to Clojure’s “lack of types” so there are a lot of functions you don’t really need to know “what kind of stuff” they will accept, if they’re written for a sequence, for example."
638,1505444774.000006,Librada,"yeah~ I like the lack of strict types and the flexibility that comes with it. Still, when I first get acquainted with an api/function, it can get a little confusing.; For example, the api docs for ‘ns-publics’ says:
-------------------------
clojure.core/ns-publics
([ns])
  Returns a map of the public intern mappings for the namespace.; at first glance, I have no idea what it actually accepts…; do I pass it a string? do I somehow lookup an ‘ns’ (as the param name suggest) first?; oh, I can just pass it a symbol?; yeah~ The repl is very good for exploring an api. But, I think a little clarity in the docs will go a long way."
639,1505448010.000095,Lavinia,"So I have the following macro in my code:
```(defmacro run-sym [sym &amp; args]
             (require (symbol (namespace sym)))
             `((resolve ~sym) ~@args))
```
Which I would think works, however when I run it I get the following error: `java.lang.ClassCastException: clojure.lang.PersistentList cannot be cast to clojure.lang.Named`. What causes this? And how can I fix it?"
639,1505448142.000078,Margaret,"sym needs to be a literal symbol, it can't be a form that returns one"
639,1505448162.000028,Lavinia,"it is a literal symbol.; Here's my test line: `(run-sym 'clojure.string/join "" "" [1 2 3 4 5])`"
639,1505448193.000161,Margaret,you passed in (quote clojure.string/join)
639,1505448200.000031,Lavinia,oh
639,1505448200.000076,Margaret,that's a list
639,1505448206.000135,Lavinia,I see; How do I pass a literal symbol? I haven't had to do that
639,1505448281.000151,Margaret,"just leave off the '; most forms will automatically resolve symbols, macros don't"
639,1505448310.000224,Lavinia,"right it's a macro, I haven't used those much."
639,1505448349.000006,Margaret,or you could use `(do ...) to put the require inside the macro body output too; then ~ on the symbol / namespace call etc.; come to think of it that's the only way to have one input that works with both forms I think...
639,1505448488.000081,Lavinia,Got it to work. Thanks!
640,1505452848.000007,Alla,"<@Lori> hi, you can add any swagger data with key `:swagger`, e.g. `:swagger {:deprecated true}`."
641,1505482422.000082,Gladys,How do you use boot in Intellij + Cursive? I am asking especially about REPL
641,1505482555.000312,Mallie,"Personally, I don't; I just run a repl in a terminal; Cursive also seems built around lein, and failed to find a load of my dependencies even after I'd converted my build.boot to a project.clj, so I gave up in favour of clojure-kit until Cursive gets proper boot support, then I'll try again; That might also have been because i have loads of different Clojure projects within a single 'project', but it didn't seem to work even when I just loaded one of them"
641,1505482855.00007,Gladys,"yeah, i used to Cursive, but i have to use boot sometimes and then issues come. clojure-kit is something like cursive?; Did you try solutions like nightlight or atom for Clojure? I was trying atom in the past but it was definitely not ready then."
641,1505483866.00016,Mallie,"Well I use IntelliJ for a load of other languages I use, so I wanted something that I could do Clojure in there too; clojure-kit is an unofficial plugin for IntelliJ to do Clojure, but it is written by a guy who *works* for IntelliJ, so...; It's not as full featured as Cursive, but it doesn't have issues finding my dependencies, and gives me syntax highlighting which is the main thing I wanted"
641,1505484539.000265,Gladys,"thx for sharing your experience with Intellij. I have similar situation, but as long as i have to use `boot` i start to think again if intellij is good choice in such case"
642,1505485708.000494,Suzy,<@Gladys> clojure-kit runs boot to figure out deps and to run a repl. I would prefer the other way around to integrate with IDEs. Ideal IDE would listen to proj configuration updates on a socket for maximum flexibility.
641,1505485922.000075,Mallie,"<@Kassie> 2nd argument is 'default', or ""What to return if key doesn't exist in map""; ```
(def x {:a 1 :b 2})
(x :c ""NOSUCHKEY"")
```
will return ""NOSUCHKEY""; Useful if you want to default for nonexistent keys, rather than returning nil and then checking if you got a nil and returning some other value if you did"
642,1505486067.000384,Suzy,BTW it is useful to distinguish having a nil as a value in map and an absent key.
641,1505486825.000237,Mallie,That too
643,1505488015.000761,Gladys,thx
644,1505493053.000097,Luanne,"Hi guys, I'm hitting a really weird compilation error with `defprotocol` - namely `java.lang.RuntimeException: Method code too large!`"
644,1505493076.000182,Aldo,cool
644,1505493076.000566,Luanne,"It's a big protocol, but surely there isn't a limit to how many methods a protocol can have?; Anyone seen this before? (And can tell me how to overcome the underlying problem, without having to refactor... well... everything?); Have seemingly managed to prove that the issue is the number of methods I'm defining (by commenting out chunks until the error went away; and then commenting out different chunks to make sure it wasn't related to the last chunk I redacted)"
644,1505493516.000592,Aldo,how many methods does this protocol have?
644,1505493524.00032,Sandy,<@Luanne> there's a limit to how much code you can put in a single method.; Are you using core.match or core.async's go?
644,1505493556.00016,Luanne,"Yeah, but this is just the protocol - the methods haven't even started compiling at this point; It's about 50 - haven't counted"
644,1505493574.000357,Sandy,in a single protocol?
644,1505493580.000268,Luanne,Yup
644,1505493607.000336,Aldo,I'm guessing that defining the protocol is defining a method with some inlined table somewhere or something
644,1505493633.000273,Sandy,"no, the're just a fair amount of code involved in defprotocol"
644,1505493642.000585,Luanne,Okay - I managed to solve it by cutting the definition in half and chaining the second half as an `extend-protocol`; But would rather not have to hack my way around it
644,1505493655.000323,Sandy,"But really, break that thing up a bit. Good protocols are normally &lt; 10methods, most should be &lt;5"
644,1505493680.000281,Luanne,It's a core protocol defining a lot of helpers for higher-order classes
644,1505493698.000011,Sandy,"why can't these just be normal functions?; And often you can break stuff down. Instead of IList for example you can have IAppendable, ICounted, IIndexable, etc.; Most of the time you can almost have a 1:1 ratio of protocols and methods."
644,1505493744.00013,Willow,do you have 2 complete and distinct implementations of those 50 functions?
644,1505493780.000643,Luanne,"Some have 2-3, others have up to 12"
644,1505493811.000044,Aldo,if they don't change at the same time they shouldn't be named by the same abstraction
644,1505493886.000339,Luanne,"I'm doing is writing a library for handling analytical data contextually - so the higher-level types are things like a measure, aggregate or transform, etc... The goal is to be able to handle these things generically (hence the protocols) but they also have a hierarchical ownership (e.g. a transform might operate on two aggregates)"
644,1505493913.00037,Willow,"for instance, how general is your protocol? maybe carve out 7 protocols that are more specific"
644,1505493932.000087,Aldo,"IMeasure, IAggregate, ITransform, IFact, IWarehouseEntity"
644,1505493936.00011,Luanne,"Yeah, it can certainly be broken down into sub-sections"
644,1505493937.000074,Willow,"`defprotocol Analyze` =&gt; ^; and if you have up to 12, then you have at least 12 types and you have therefore 600 functions implementing this protocol!"
644,1505493994.000352,Luanne,"Well each of those has their own protocol already for the methods specific to their types - this is the general set of methods that are universal, but require different implementations"
644,1505494005.000219,Sandy,"for example, look at core.matrix: <https://github.com/mikera/core.matrix/blob/develop/src/main/clojure/clojure/core/matrix/protocols.cljc#L173> A lot of things be done to a matrix, but they're all given their own protocol."
644,1505494065.00039,Luanne,"I can absolutely break it out into smaller sub-protocols, it just seemed tidier to keep everything in the same place - given that a lot of them are going to always be dependent on the others"
644,1505494102.000112,Aldo,life will be better if you break them up into areas of responsibility/change I guarantee it
644,1505494219.000679,Luanne,Happy to follow that way of operation; And there are certainly clearly defined areas that I could break out; Is it going to be general code-management issues I run into without that? Or something else?; (Just trying to better inform myself)
644,1505494349.000148,Willow,"so crazy thought. if you have 50 functions and up to 12 different implementations, many many of these must have common implementations. at this point i think i might write a macro to do this for me"
644,1505494365.000108,Luanne,(I did have things broken out in earlier iterations - but it seemed pointlessly opaque to have every type of dependent record invoking the same 10 different protocols
644,1505494386.000074,Willow,can a macro expand to more than one form? ie return `~@forms`?
644,1505494394.000176,Aldo,no
644,1505494398.000022,Willow,bummer
644,1505494426.000348,Luanne,"(Ha - I did consider that it might have been worth learning macros to do this, but that was only after I'd gone a significant distance)"
644,1505494427.000428,Rebeca,"the main thing is don't define the protocols and implementations in the same file, people almost always want to do this, but it very easily turns in to circular references between the implementations helper code and the protocol definitions"
644,1505494456.000082,Luanne,No worries there - I've got everything filed away separately already; Anyway - thanks for the help guys
645,1505498761.000429,Max,"Hi all, I’ve started on a project to address the read and start-up time in Clojure. It’s a bit of an experiment at the moment so far I have it doing most symbol extraction, next I’ll be working to build an AST. Lexing the Pedestal repo at the moment takes about 184ms which is spread across 4 readers and 16 lexers. If you’re interested in taking a peek it’s here: <https://github.com/nfisher/cljbuck>"
644,1505499918.000141,Virgilio,"<@Willow> You can often get a similar effect by returning `(do ,,,) with multiple forms inside the do."
644,1505500051.00017,Willow,i was wondering if he could get around the method too large boundary by returning a `(deftype ~type [implement protocol]) (extend-protocol ~type [more stuff here])` but this is apparently not possible. a `do` form would preserve and actually exacerbate the method too large error
644,1505500081.000541,Margaret,"yeah, calling out to functions is the best way of fixing that; now, you could make a macro that defined a function and also made a method body that called it…; not especially efficient but it could help maybe?"
646,1505515476.00003,Silas,QUESTION: Any way I can take a arbitrary Java POJO and print it into something the Clojure reader can read back into the Java POJO?
644,1505517116.000103,Kathlene,"I have a question regarding namepsace and difference in compilation for CIDER vs lein; all 4 files compile and pass tests on cider. `two_test.clj` does not compile on lein though, with `Exception in thread ""main"" java.io.FileNotFoundException:` error, regarding `parent.child.one-test`; My hunch is that even with the dependencies specified, only items in `src/` can be imported into other namespaces."
644,1505517344.000185,Rebeca,"nope; there is no difference, if you are seeing one it is as a result of something you did"
644,1505517398.00012,Kathlene,"any idea as for why it would pass/compile in cider, but not in lein ?"
644,1505517400.000206,Rebeca,but you ns forms are also incorrect; should be `:require`
644,1505517418.000198,Kathlene,those are not copy &amp; paste
644,1505517426.000003,Rebeca,and you alias both one and one-test as one
644,1505517450.000147,Kathlene,sorry I should’ve been more careful with the sanitization
644,1505517475.000103,Rebeca,my guess would be you haven't restarted the cider repl in a while and the running code has diverged from what you have in your files; if you kill cider and restart it you will get the same error
644,1505517509.00015,Kathlene,I re-started emacs/cider and it compiled and ran
644,1505517641.000029,Rebeca,"your example is all kinds of wrong, so it is hard to get anything useful from it, I don't think anyone will be able to help based on it"
644,1505517650.000034,Kathlene,ok. I’ll try to reformat it
644,1505517658.000117,Rebeca,it isn't a formatting issue; the namespaces don't match the file paths
647,1505534820.000042,Silas,"QUESTION: Is there something that can be used from Clojure to create a Java class and instance at runtime? Like a proxy that doesn't need to extend from anything, and you can just define custom methods? Or like a macro that both defines a protocol and its implementation and reify it into an inctance all in one go?"
647,1505534939.000122,Margaret,"gen-class can do this, but you'd need to do some trickery to meta-program a gen-class properly"
647,1505535336.000056,Silas,"Hum, I didn't think of this, you can call it at runtime?; Doc says: ""When not 
 compiling, does nothing.""; I think this could give me what I want: <https://github.com/jgpc42/insn>; Hum, that might be too low level for me actually"
647,1505535822.000148,Margaret,iirc gen-class literally checks for a flag like `*compiling*` which is dynamic and you could override- worth trying at least?; the flag is `*compile-files*`
647,1505535892.000155,Daniell,"<@Silas> Depending on what you're trying to do, couldn't you use `definterface` to declare whatever methods you want and just `proxy` that interface with the methods defined?"
647,1505535913.000024,Margaret,"yeah, that might actually be the simpler option"
647,1505535952.000004,Daniell,"```boot.user=&gt; (definterface Greeter (^String greet []))
boot.user.Greeter
boot.user=&gt; (proxy [Greeter] [] (greet [] ""Hello""))
#object[boot.user.proxy$java.lang.Object$Greeter$150fd98b 0x6d9cee8a ""boot.user.proxy$java.lang.Object$Greeter$150fd98b@6d9cee8a""]
boot.user=&gt; (.greet *1)
""Hello""```; `proxy` acts as a proxy for `Object` in the absence of a more specific class, and you can implement whatever methods you have interfaces for..."
647,1505536282.000007,Silas,"Setting *compile-files doesn't seem to work.; Ya, I guess that seems like the best route, could make a macro on top of them to do it all at once."
648,1505539241.000089,Silas,"Any idea how I can have this return a meta:
```(defmacro tm [s]
  `(^void ~s))

(macroexpand-1 '(tm name))```; It expands to: ```(name) ``` and I want ```(^void name)```"
648,1505540277.000012,Margaret,<@Silas> emit a call to with-meta
648,1505540602.000139,Silas,"I'm not sure how to resolve void though?; ```(meta (vary-meta 'n assoc :tag `Integer))``` this works, but not for the aliases like void ```(meta (vary-meta 'n assoc :tag `void))```"
648,1505540855.000063,Margaret,"tags are allowed to be strings - and I didn't say vary-meta, I said with-meta; but I guess vary-meta works, it's just more complex than you need"
648,1505540916.000002,Silas,"I guess, but vary-meta retains meta, with will lose the original meta. Which probably don't matter for what I'm doing here."
648,1505540941.000041,Margaret,"oh, right, because s is passed in, good point"
648,1505540943.000069,Silas,"So a tag of ""void"" will type hint to void correctly?"
648,1505540953.000067,Margaret,"checking...; also, your macroexpand doesn't show metadata, but if you bind `*print-meta*` it can"
648,1505541035.000009,Silas,"Oh, that's neat to know"
648,1505541148.000011,Margaret,"```user=&gt; (binding [*print-meta* true] (prn ^:a {}))
^{:a true} {}
```; ```+user=&gt; (binding [*print-meta* true] (prn '^void 'foo))
^{:tag void, :line 12, :column 36} (quote foo)
nil
```; ```+user=&gt; (-&gt; '^void foo meta :tag)
void
+user=&gt; (-&gt; '^void foo meta :tag type)
clojure.lang.Symbol
```; looks like it wants the symbol 'void"
648,1505541530.000019,Silas,Perfect; thanx
649,1505542958.000096,Kassie,"<@Mallie> cool, thanks for the info!"
650,1505565111.00008,Troy,"i have a question about fn definitions inside defrecord / deftype vs normal fns; they don’t seem to support :pre and :post conditions - is that right?; here are some worked examples; Maybe this a well known problem … in which case, OK … I’ll move along; But if I’m missing something, I would appreciate some tips / advice"
650,1505566270.000039,Weston,I think if you create the impl via extend-protocol it *might* work; Since it will be just a normal fn under the hood. When it s inline like in your example I think it s optimized and compiled differently
650,1505566894.000019,Troy,<@Weston> I don’t have any luck when using extend; I was doing it wrong <@Weston>… you are of course correct; I lose access to x as I have to go via `this`
651,1505567701.000035,Troy,but we do get `:post` conditions back too; thanks
651,1505568028.00006,Geneva,Do any1 knows about TCP/uso?; Udp 
651,1505574246.000085,Weston,"inline it compiles to a method of the record (class), via extend it does a runtime lookup in the proto to find the corresponding clj fn that was registered; But it is an impl detail"
652,1505575721.000111,Berry,"input: [a b c d e]
output:
  [ [ a b c d e], [ b c d e], [c d e], [d e] [e]]

is there a builtin for this? (it's fine if it returns lists instead of vectors); hmm, stack overflow suggests (reductions (fn [s _] (rest s)) x x)"
652,1505576033.000092,Kareen,either that or `(take-while seq (iterate rest x))`
653,1505576922.000025,Elaina,"hi hivemind, I always see 
```
:repositories [[""releases"" {:url ""<https://blueant.com/archiva/internal>""
                            :creds :gpg}]]
```
anyone knows what the <http://blueant.com|blueant.com> does mean? it seems that is a unowned domain name."
653,1505577198.000065,Margaret,"it's an example of using a private repository; I'm surprised they don't just use <http://example.com|example.com>, but it's used in the lein docs <https://github.com/technomancy/leiningen/blob/master/doc/DEPLOY.md#artifactorynexusarchiva>"
653,1505577572.000067,Elaina,<@Margaret> thanks. I do agree that’s better to use <http://example.com|example.com> to avoid unnecessary confusion.
652,1505578497.000017,Berry,is there a builtin for (fn [x y] [y x]) ?
653,1505578582.000103,Margaret,"not that I know of, I would use `(comp vec rseq vector)`; leaving out vec if I don't strictly need a vector of course; anyway the rseq / vector combo is the only one that doesn't need to arrange the items twice"
653,1505578678.000005,Berry,I was hoping there would be something like swap2 or something
653,1505578716.000001,Margaret,if we have varargs flip it would be (flip vector)
653,1505588483.000004,Silas,<@Berry> What about  ```(apply - (reverse [1 2]))```
654,1505588661.000079,Lavenia,"It's a William Gibson reference.

<https://en.wikipedia.org/wiki/Hubertus_Bigend>; <https://www.tor.com/2017/06/26/recognizing-a-familiar-future-william-gibsons-blue-ant-trilogy/>; Awesome books."
654,1505588715.000116,Margaret,"wait, where did `-` come from?"
654,1505588787.00005,Silas,"Oh, just an example, I assumed he wanted that function to reverse arguments to a function. So I showed it in example; Any good reason why dissoc doesn't work on vectors? My only guess is because Clojure seems to default to not giving you any potentially inefficient collection functions. "
654,1505589042.000018,Margaret,"that's pretty much it, the best option for an efficient collection that does this is a finger-tree"
654,1505589071.000071,Silas,Is that in core?
654,1505589234.00009,Margaret,"no, it's a decent library though, worked on by people who work on core <https://github.com/clojure/data.finger-tree>"
654,1505589544.000053,Silas,"Interesting, I'll have to give it a look"
654,1505589695.000092,Lavenia,"Is there any way to access the form originally used to define a var, if that var was defined in the repl? eg if I do
`(defn f [x] (inc x))`  or `(def a 3)`
is there any way to recover that expression, given the name of the var? `clojure.repl/source` will do it if it was defined in a source file, but I specifically want ones that were defined in the REPL.

I'm experimenting with doing it by creating a REPL using a custom `:read` fn which saves off the forms, but I wanted to be sure there wasn't already a good existing solution."
654,1505589809.000113,Margaret,"if you look at what clojure.repl/source does, it uses the line number info and such to extract the source"
654,1505589821.000041,Lavenia,Yeah.
654,1505589822.000045,Margaret,"there's no tracking of the actual input form that was compiled; you could make your own version of fn / def / defn etc. that does this; but ... yeah, nothing built in"
654,1505589931.000019,Lavenia,"That's what I suspected. I would find it useful to be able to say, ""give me the def for this form, preceded by the defs for any locally-defined vars contained in the form."" It would make it easier &amp; less tedious to move code from the repl to a source file.; I'm having plenty of fun experimenting with a custom `:read` fn for the repl, though :slightly_smiling_face:"
655,1505590487.000053,Trevor,"hi, can someone explain how to use `client_middleware` in `aleph`, so that i can do not parse the response body manually? (edited)"
656,1505605232.000049,Lieselotte,"hi! can I have a .cljc and a .cljs / .clj of the same namespace? (eg I have a utils namespace and there is some stuff in there which can be shared, some not)"
654,1505609693.000038,Margaret,"that is what cljc is supposed to be for but no, you cannot, that doesn't work"
657,1505609745.000023,Margaret,you might notice that in cljs it's usually either foo.bar vs. foo.bar.macros or cljs.foo vs. cojure.foo
658,1505643673.000083,Georgann,"In an xml doc that starts like `&lt;?xml version=\""1.0\"" encoding=\""UTF-8\""&gt;`, how is the encoding of the document made available to the calling code?"
659,1505650282.000039,Emelina,"has anyone worked with ""lein auto"" or ""lein watch"" ?; <https://github.com/weavejester/lein-auto>; i'm trying to setup a hot reloader for my http kit service so for every change in one of my file it would re-run ""lein run""; i'm using:
lein auto run; which doesnt work; lein compile does work; lein auto compile; lein auto run just gets stuck on the server listening to requests - it probably waits for the process to finish its work (and it never does since its listening); any idea how to solve this issue ?"
660,1505660016.000085,Margaret,"buzzdan the common approaches here are
1) pass the var for the handler to the server process and not the handler itself, that way when you redefine your handler, it gets used on the next request without needing to restart the server
2) define a start up and tear down such that every stateful condition in your code is reset when tearing down (so hold onto the return value given to you when the server starts, and later call its stop method after reloading code in order to start it up again); when a globally defined function is called inside another function, your code will automatically see and use changes to the definition, but when the function is an argument to a long running process, the process itself won't see changes to the thing you passed as your argument - the var was dereferenced once when you called it. By passing `#'handler` instead of `handler` you are passing a var instead of resolving one, and conveniently if you try to call the var itself as if it were a function, it dereferences and calls the current value when called; for start up and tear-down, there are libraries like stuartsierra/component and weavejester/integrant made for this"
660,1505686851.000071,Daniell,"<@Emelina> I'll reiterate what <@Margaret> said. We do live development on our web apps from the REPL, by using vars and Component."
661,1505690433.000076,Silas,QUESTION: What happens when you type hint something to the wrong type? Does Clojure try/catch the cast and defaults back to reflection?
660,1505691896.000097,Lilian,<@Margaret> that’s great advice. Do you have code samples demonstrating this somewhere?
660,1505692818.000135,Margaret,"sadly our app is a closed source software as a service, but templates like luminus should be a start; they use mount which I'm not as fond of, but the basic ideas are there and luminus is very useful as a big picture starting point which does a lot of things the right way for a web app"
660,1505693578.000058,Wendi,"Can anyone recommend a good way to deploy a clojure service on a Windows server?  A quick google uncovered procrun and winsw as candidates; <https://github.com/kohsuke/winsw>; <https://commons.apache.org/proper/commons-daemon/procrun.html>
Procrun is a set of applications that allow Windows users to wrap (mostly) Java applications (e.g. Tomcat) as a Windows service.; winsw seems really nice"
662,1505703040.000079,Silas,"The manifesto for it says:
&gt;As the name implies, this is for Windows only. Unix systems have their own conventions for daemons, so a good behaving Unix daemon should just be using launchd/upstart/SMF/etc, instead of custom service wrapper.
But I've been looking for a linux daemon which manages a process lifetime. Something that can catch all application crashes, log it, and restart the application with an appropriate context."
660,1505703974.000156,Wendi,"For linux I've used supervisord but there's plenty of options I think.
<http://supervisord.org/>"
663,1505717011.000262,Noella,general question: which Clojure HTTP client do you prefer and why?
663,1505717160.000187,Danyel,"Http-kit, for its non-blocking IO and data-driven interface"
663,1505717825.000188,Vikki,aleph for the same reason :slightly_smiling_face:
663,1505717986.000002,Misti,Does anyone know what might cause Datomic to delete databases?: <https://stackoverflow.com/questions/46269961/datomic-deletes-databases>
663,1505718016.00016,Jacqui,which kafka clojure library do you guys use ?
663,1505718527.000328,Georgann,"I made ksml if you're into kafka streams. Still a bit alpha but more fun than the java interop

<https://github.com/cddr/ksml>"
664,1505720152.000107,Jacqui,"<@Georgann> hey i'm actually looking for kafka clients in clj. i went through these repos :
1. <https://github.com/pingles/clj-kafka>

2. <https://github.com/pyr/kinsky>
3. <https://github.com/ymilky/franzy>

but they seem to be outdated. What library do you use ?"
664,1505720622.000312,Georgann,I don't really use Kafka without Kafka streams. But ksml is a clojure Kafka client. It lets you define a data flow topology in data and then compiles it down to the underlying java interop.
664,1505720766.000377,Lesia,"I just use the kafka java api, polling loop inside a manifold future (thread). Not sure how great that is though."
664,1505720855.000176,Georgann,Yeah you can go a long way with Java interop. Kafka itself is moving very fast so wrappers are always out of date unless the maintainer has lots of time to keep on top of the changes
663,1505736998.000415,Cherlyn,"Used franzy quite a lot, no complaints; clj-kafka very old now (&lt;= Kafka 0.8)"
663,1505739852.000312,Danyel,"oh, I never knew that aleph also shipped a client, worth checking out!"
665,1505743654.000379,Alan,<@Jacqui>: add <https://github.com/weftio/gregor> to your list. it's pretty minimal and upto date (this is an upto date fork: <https://github.com/ccann/gregor> due to <https://github.com/weftio/gregor/issues/17>)
666,1505751485.000269,Guillermo,wow there are a lot of Kafka libraries
666,1505751778.000149,Georgann,Kafka 0.8 was current when I started my kafka journey a couple of years ago.; I guess 2 years is a long time. Doesn't feel like it though
665,1505754119.000213,Billie,"<@Jacqui>: we still use clj-kafka, sometimes with <https://github.com/yieldbot/torna> on top."
665,1505754204.000389,Aldo,"we just use ""org.apache.kafka/kafka-clients"" in about 4 different clojure services"
667,1505756254.000422,Guillermo,I smell a beta release brewing.; <https://twitter.com/cognitect/status/909832214199832576>
667,1505756691.000317,Daniell,"With Conj just around the corner, I'm not surprised...; I guess we'll put that in production next week :slightly_smiling_face: We're on Alpha 20 in production right now and already locked for this week's production release."
667,1505757036.000477,Guillermo,"It's been pretty good for a while, but when's the last time you were bitten by an alpha/beta <@Daniell> ?"
667,1505757259.000328,Daniell,"I honestly can't remember. I remember we dodged a bullet with 1.5.0 -- we were on the last pre-release before the memory leak was introduced and the timing of 1.5.0 was such that we went straight to 1.5.1 in our next build.; Mind you, we have a lot more Clojure in production now than we did back then."
667,1505757362.000428,Guillermo,yeah that wasn't a fun release
667,1505757404.000545,Earlie,"How can I have a macro read in a file next to the source file? (Perhaps something like *ns*, but with the current directory of the file or something like &amp;env or &amp;form?)"
668,1505757514.00005,Margaret,"depends, do you want code that works when run from a jar?"
667,1505757547.000361,Margaret,because if yes (and that’s the usual answer) things like “current directory” don’t really work (perhaps you can generalize to “path to the current resource”?); but you really do have to avoid all concepts of “file” or “directory” to make code that packages and deploys correctly without weird hoop jumping
667,1505757604.000446,Earlie,"No, it's just a compile time thing."
667,1505757614.000373,Margaret,clojure compiles any time you like; the clojure compiler runs on startup
667,1505757650.000798,Earlie,The issue is I don't want to give the macro a full path to the file. I want to colocate these files next to the source files.
667,1505757656.000201,Margaret,"that is, if you deploy a library, it compiles when the jvm starts (with few and rare exceptions); it would be easy enough to construct the path to a resource out of the current namespace; since namespaces map to resource paths"
667,1505757796.000372,Earlie,"Yeah, I suppose I could do that. *file* also gets me close. Was just wondering if this was standard."
667,1505757800.000184,Margaret,"if you do it that way, you can ignore the questions of files and directories - use `<http://clojure.java.io/resource|clojure.java.io/resource>` to find the thing (it won’t matter if it’s a file, a url, a thing inside a jar - it will just work); <@Earlie> the standard thing is to only use File and directory based stuff for things that will not be packaged with your code; io/resource works well and abstracts packaging / deployment nicely"
667,1505757875.000379,Earlie,"Ok, thanks"
667,1505759243.000723,Sandy,"I seriously doubt it does, it's most likely some other issue. Can you post the code somewhere were we can take a look at it?"
669,1505761050.000055,Geneva,"<@Sonny> guards 
<https://github.com/clojure/core.match/wiki/Overview>
<http://shybovycha.github.io/2016/12/21/clojure-guards.html>

<https://github.com/killme2008/defun> &lt;- this one uses core.match; any plans to add to clojure?"
669,1505761084.000071,Sonny,no
669,1505761088.000212,Geneva,I see
669,1505761098.000449,Sonny,you’ve got all those libs ^^ - use those!
669,1505761133.000168,Geneva,"I know.. but core.match still in alpha, no plans to finish until 1.9 realease?"
669,1505761212.000652,Sonny,I think <@Timika> would be happy to have some help with core.match as he has many things on his plate; I don’t think there is anything preventing you from using it now
669,1505761268.000239,Geneva,"I will try, but I'm still new in clojure, thanks <@Sonny> for the news"
669,1505761316.000461,Kareen,I can't speak for <@Timika> but core.match is really not alpha at all -- the alpha modifier for the 0.3.0 release might refer to some experimental feature in that specific version but the basic engine is very stable and usable in production
669,1505761366.000031,Geneva,"thanks <@Kareen>, that is really helpful, guards helps a lot in functional development"
669,1505761479.000104,Kareen,"meh, I wouldn't say they do that much in clojure, we don't do extensive pattern matching like haskell do for example. When people use core.match it's usually for some internal  bits, not as a way of doing their general library development (exceptions apply)"
669,1505761622.000263,Misti,"<@Sandy> here is the code:

(defn establish-conn
  []
  (try
    (d/create-database (conf/get :db-uri))
    (reset! conn (d/connect (conf/get :db-uri)))
    (catch Throwable t
      (log/error ""Could not establish db conn."" t))))


(defn create-db!
  []
  (establish-conn)
  @(d/transact
     @conn
     (collect-schema)))

;;it's used in global exception handler
(defn fix-if-conn-ex
  [ex]
  (let [err-msg (.getMessage ex)]
    (when (any? #(str/includes? err-msg %) ["":db.error/transactor-unavailable"" "":db.error/connection-released""])
      (db/establish-conn))))"
669,1505761773.000238,Geneva,"I see, thanks"
670,1505765123.00007,Daniell,<@Geneva> That `clojure-guards` post just looks like a complicated solution instead of using the built-in `cond` expression...
671,1505768289.00013,Earlie,So I'm attempting to build a system to colocate css files with source code. I'm using boot-reload to reload my clojure files. Is there a way to make boot-reload reload clojure files that depend on css files (using <http://clojure.java.io/resource|clojure.java.io/resource>)?
671,1505768527.00022,Shaunda,<@Earlie> you might want to ask in the <#C053K90BR|boot> channel
671,1505768548.000159,Earlie,Good call :thumbsup:
672,1505818495.000347,Katelin,"(This is likely a cljs, cljsbuild or version clash problem, but it was triggered by moving to clojure 1.9.0-beta1, so posting here)...

Moving <https://github.com/deg/trilystro> to the new Clojure beta caused cljsbuild to fail with:

```
Sep 19, 2017 1:46:59 PM com.google.javascript.jscomp.LoggerErrorManager println
SEVERE: /home/deg/Documents/git/projects/trilystro/target/cljsbuild-compiler-1/cljs/core.js:3579: ERROR - Parse error. primary expression expected
case ##Inf:
      ^
```
This is in the function cljs.core/hash"
671,1505820017.00039,Adele,cljs-ajax. so that I can use the same API in frontend and backend
673,1505824916.000241,Jackeline,"hi guys, what’s your preferred dsl/library for interacting with SQL?"
672,1505825245.000489,Sonny,<@Katelin> This is a known thing re cljs - might ask over in <#C03S1L9DN|clojurescript> or <#C07UQ678E|cljs-dev> on status
672,1505825278.000352,Katelin,"Thx, will do.; <@Sonny> - Yup, <@Dirk> had the answer on <#C07UQ678E|cljs-dev>.
But, looks like this will bite all ClojureScript projects that try the beta, until ClojureScript is updated to match.  Can a warning be added to the beta release notes, meanwhile?"
673,1505833203.000902,Earlie,<@Jackeline> I personally prefer using Yesql over a Clojure DSL for SQL. It allows you to write everything in actual sql files and gain all SQL tooling from that.
673,1505833240.000401,Jackeline,will have a look thank you
673,1505833250.000133,Earlie,<https://github.com/krisajenkins/yesql>
673,1505833291.000385,Mia,<@Jackeline> I really like <https://www.hugsql.org/>
673,1505833350.000298,Earlie,I was just looking into that the other day <@Mia>. What's the reloading situation like?
673,1505833545.000263,Noella,"<@Jackeline> I prefer <https://github.com/jkk/honeysql>, SQL as data structures"
673,1505833611.000754,Mallie,HoneySQL gave us the advantage of being able to programmatically build up SQL queries. Like have a base one and then add a join onto that and a different where clause to filter and such. Not sure how you'd do that with YesQL
673,1505833959.000042,Earlie,"Any opinions on `tools.namespace` reloading (possibly `reloaded.repl`) vs plain repl reevaluation?
I'm using `reloaded.repl` at the moment, but I'm starting to feel as if going back to plain repl evaluation might be simpler. Though I'm not sure if changed to my ring handler would be picked up without restarting the server."
673,1505834456.000274,Jackeline,"interesting, so the trend is to use libraries that use SQL as data structures as opposed to what Korma (for example) does; I used Korma before but something about the DSL feels off to me, will have a look at those libraries as well thank you"
673,1505835114.000759,Gisele,"<@Jackeline> <@Shemeka> elaborates a bit more on this Korma vs HoneySQL (data-centric vs otherwise) on the (very nice) Clojure Remote keynote: <https://youtu.be/kP8wImz-x4w?t=1409>. Thanks for that, mr. Drogalis!"
674,1505835143.000311,Shemeka,<@Gisele> Anytime :slightly_smiling_face:
675,1505843194.000519,Jerold,"I'm quite confused about this example...I have one function that appears to return a long, yet when I call `inc` (or any other numerical function) on it the compiler tells me it's an Object: <https://gist.github.com/Sophia-Gold/6e0abe5080b4db078220031ff3c95d6d> What am I missing here?"
675,1505843420.000531,Sonny,by default the params and return vals of all functions are of type Object; you’ll need to type hint the return to get something different; `(defn foo ^long [String string] ...)`
675,1505843474.000566,Jerold,"Ah, that's a simple answer. Thanks, Alex."
675,1505843514.000075,Sonny,"the inner loop of `foo` will used boxed longs as written now, but that could be rewritten with loop/recur to use primitive longs"
675,1505843575.000279,Kareen,`type` will also always box the object so it will never return a primitive type
675,1505843585.00021,Jerold,"Oh, interesting. I always default to thinking `reduce` would be more performant through using the Iterator interface.; <@Kareen>, that's not true"
675,1505843601.00038,Kareen,it is; i'm talking about Long vs long
675,1505843644.000676,Jerold,You can see in this example that it returns a Java long. What am I misunderstanding?
675,1505843675.000776,Kareen,"primitive means a primitive `long` type, `java.lang.Long` is a boxed object, that's the distinction i was making"
675,1505843698.0003,Jerold,I think you mean Clojure long vs. Java long...
675,1505843719.00062,Kareen,no
675,1505843727.000902,Willow,"```
;; =&gt; (type (foo ""baz""))
;; =&gt; java.lang.Long
```; notice the capital L in your output"
675,1505843755.00001,Jerold,The capital L refers to a boxed long?
675,1505843757.000276,Kareen,there's no such thing as a clojure long
675,1505843828.000048,Jerold,"<@Kareen> sorry, you're right about that. I for some reason thought there was clojure.lang.long"
675,1505843911.000115,Kareen,"the jvm has a primitive `long` type (which is not an object type) and a boxed class `java.lang.Long`, `type` will never return `long` even if a function returns a primitive long, because `type` only works on objects and thus will cause a primitive value to be boxed"
675,1505843954.000532,Jerold,Gotcha. And I assume `class` and `instance?` are the same?
675,1505843959.000367,Kareen,yes
675,1505843964.000253,Silas,"If type can't give you the correct type of primitives, is there anything that can?"
675,1505843986.000437,Kareen,no; well
675,1505844002.000101,Jerold,"Well, `:warn-on-boxed` will."
675,1505844009.000109,Kareen,"it would have to be a macro that interopped with the compiler, or a compiler feature"
675,1505844040.000222,Jerold,"That's a compiler feature, though."
675,1505844054.000414,Kareen,"no function can because it would have to accept both objects and primitive values, and the clojure compiler would cause values to be either boxed or unboxed as it deems appropriate, so not retaining the real type; <@Jerold> yeah, but it doesn't do what <@Silas> was asking"
675,1505844078.000764,Silas,A little annoying when you want to validate you're not using boxing
675,1505844092.000561,Kareen,"if that's all that you care about than as <@Jerold> said, `warn-on-boxed`/`warn-on-reflection`"
675,1505844093.000198,Margaret,"<@Jerold> ~what are you calling a compiler feature?~ I get it now, never mind"
675,1505844100.00071,Jerold,<@Silas> `(set! *unchecked-math* :warn-on-boxed)`
675,1505844114.000232,Silas,"Ya, I guess.; And whats with this:
```(defn ^long foo [x] (int x))
(type (foo 12))
=&gt; java.lang.Integer
```
?"
675,1505844177.000462,Kareen,that's not ac correct type hint; move it from foo to the argvec; `(defn foo ^long [..`
675,1505844241.000341,Silas,"Damn, all this time, using the wrong syntax lol"
675,1505844252.00019,Kareen,it's only wrong for primitive type hints; but I suggest using it even for non primitive type hints
675,1505844302.000283,Silas,Primitive type hints have a different syntax?
675,1505844306.000364,Kareen,"no; both primitive and non primitive can work in either place; but because the metadata on var names will get evaluated, you'd have to `(defn ^{:tag 'long} foo ..` (i.e. explicitly quoting it); otherwise you're tagging foo with the value of the `long` function rather than with the `long` symbol"
675,1505844382.000264,Sonny,var meta is evaluated. Function type hints are not.
675,1505844407.000427,Kareen,"moreover, the compiler will not emit primitive versions of the function if you tag the var meta rather than the argvec"
675,1505844444.000432,Sonny,"I think the takeaway is that you should nearly always type hint the function return, not the var"
675,1505844450.0003,Kareen,"<@Sonny> sorry i''m not understanding, are you saying what I've said is wrong? because it isn't :); yep; s/nearly// IMO"
675,1505844460.000267,Sonny,"no, I’m trying to agree with you :)"
675,1505844462.000571,Kareen,"ah ok; misunderstood what you meant by ""function type hints"" then"
675,1505844491.000359,Silas,"Hum, so would the resulting cast be around the var access instead of the function return?"
675,1505844492.000306,Sonny,I meant “the type hints interpreted by defn”
675,1505844497.000799,Kareen,yep gotcha; <@Silas> yeah
675,1505844568.000007,Silas,"Actually, I'm definitly a bit confused about type hints. I've noticed somtimes you can type hint wrongly, and all works, no warnings or errors, sometimes you get runtime type errors."
675,1505844570.000083,Kareen,"what happens in `(defn ^{:tag 'long} foo ..)` case is that foo returns an Object and at callsite  it *might* get unboxed as a long,  if the compiler deems it useful/necessary; <@Silas> yeah, this (afaict) is because of clojure's GIGO attitude. I don't particularly like it in this case (I think we could safely warn at compiler time) but it's gotten a bit better than it used to be"
675,1505844696.000334,Sonny,"it’s not GIGO, it’s because it’s a hint, and the hint might be wrong; you might not know it’s wrong till runtime"
675,1505844722.000493,Kareen,"I'd consider it GIGO when the type hint *can't* ever be right, not to warn"
675,1505844729.000008,Silas,So does a wrong hint detected by the compiler reverts it back to using reflection?
675,1505844730.00016,Sonny,so you can fall back to Object; yes
675,1505844741.000206,Kareen,"well, if something is definitely not a type/class at compile time then it's not a *type* hint"
675,1505844751.000354,Sonny,well that I agree with
675,1505844762.00066,Kareen,I can't see how the compiler accepting a funcntion as at type hint w/o warning/erroring out is not GIGO
675,1505844776.000104,Sonny,I’m in full support of that being an error
675,1505844791.000094,Kareen,"(gah, I can't write function anymore apparently, fifth time I write funcntion)"
675,1505844797.000452,Silas,"```(defn foo ^String [x] (int x))```
This still works, no warning or error."
675,1505844806.000504,Kareen,"patch incoming then :); that is not the case I'm arguing should warn; that is a validly formed type hint, it's just a nonsensical one; what if `int` got redefed to return a string; then that hint would be correct at some point"
675,1505844860.000633,Sonny,it’s the `(defn ^long foo ...)` one
675,1505844867.000186,Kareen,^
675,1505844870.000028,Margaret,it’s more like `(defn foo ^clojure.string/join [x] (int x))` - the hint is a function not a type
675,1505844899.000182,Silas,"Right, well ya, that I agree should even more so be warned or even error; But, about the other one, I understand maybe it compiling, but why does it work once its compiled to jvm byte code?"
675,1505844987.000004,Kareen,"depends on your definition of working!; once you start doing interop, the compiler will assume that type hint to be correct; and will dispatch to String methods; if it can't match one, it will use reflection"
675,1505845021.00019,Sonny,<@Kareen> patch welcome for <https://dev.clojure.org/jira/browse/CLJ-1674> or whatever other jira is out there for this problem
675,1505845029.000409,Kareen,"but if, say, Integer and String had 2 methods with identical signatures, than that would fail at runtime"
675,1505845044.00036,Silas,"I mean, in java you can't type the return to string and have it return int. So does clojure ignore the hint amd still returns Object?"
675,1505845073.00055,Kareen,"type hints are not static types; the compiler enforces type hints only if/when it needs to; and for function return types, it only enforces them when that value is used in an interop form; e.g. `(.foo (bar))` will enforce the type hint on the return type of `bar` (at callsite of `foo`!) but `(identity (bar))` won't; because it would be useless; type hints are only to prevent reflection (and in some cases, boxing), they're not to *enforce* static types; and are not guaranteed to cast/box/unbox"
675,1505845273.000324,Silas,"I see, okay, that explains I think the inconsistency of wrongly typed type hints I've seen. It'll fail at runtime with java interop."
675,1505845281.000062,Kareen,"yes; an example of this behaviour is ```user=&gt; (deftype Foo [a])
user.Foo
user=&gt; (deftype Bar [a])
user.Bar
user=&gt; (defn ^Foo x [] (Bar. 1))
#'user/x
user=&gt; (x)
#object[user.Bar 0x4983159f ""user.Bar@4983159f""]
user=&gt; (.a (x))
ClassCastException user.Bar cannot be cast to user.Foo  user/eval158 (NO_SOURCE_FILE:8)
```"
675,1505845378.000209,Silas,Right
675,1505845379.00007,Kareen,"the incorrect type hint doesn't cause (x) to fail, it causes host interop on (x) to fail"
675,1505845457.000119,Silas,"Whats the idea of not enforcing the hint to always box/unbox or cast ? I don't see a negative in enforcing, except you'd know quicker that you hinted it wrong "
675,1505845524.000187,Kareen,"well, the short answer is: type hints are not type assertions, the long(er) answer is: the compiler might now better or enforcing could affect redefinition; and if you want enforcing I guess spec is better suited at that"
675,1505845650.000353,Silas,"```(defn foo ^String [x] (int x))
(type (foo 12))```
Id expect this to be equal to
```Object foo(Object x) { return (String)((int) x); }``` and fail at the cast at runtime"
675,1505845688.000438,Kareen,"no, again, type hints are neither type assertions nor type casts; they sometimes act like either, but at the discretion of the compiler; to do what you want, use `(cast String (int x))`"
675,1505845816.000073,Silas,"I'm not talking static checks. But runtime type errors. Ok, ya I understand, so they're unpredictable and mostly for interop and certain unboxing situation."
675,1505845892.000634,Kareen,as to enforcing at return type vs callsite -- I believe it's a performance compromise of sorts; to enforce at return type would require emitting checkcasts at every callsite; vs only when needed
675,1505846007.000211,Silas,I understand how they work now. Thank you.
675,1505846012.000466,Kareen,np
675,1505846108.000081,Silas,I guess I'll restrict their usage to only when the compiler warns for boxing or needs it to dispatch.
675,1505846118.000331,Kareen,"that is when you should be using them, yes"
675,1505846189.000402,Silas,"Some people use them as programmer hints,  like documentation. But that had mislead me, because sometimes the hint is wrong, yet all works. I see that's a pretty bad use of them now. Spec is the way to go."
676,1505847337.000757,Jerold,"Ha, had to step away for a phone call. Glad to see this discussion continuing :slightly_smiling_face:; I actually had a related question. Is anyone familiar with Zach Tellman's primitive-math library? I'm wondering exactly how it differs from using unchecked-math in clojure.core. I'm not sure how long the latter has been around, but was under the assumption that library was still useful for providing reflection warnings for math operations."
677,1505849288.000369,Sonny,"The warn-on-boxed stuff was kind of done about the same time as primitive-math (independently). The warn-on-boxed stuff will cover you in most situations, but it’s not perfect and won’t catch all cases (particularly in return paths). I have not looked at primitive-math closely enough to know for sure, but it may be useful in some cases that are not well-caught by warn-on-boxed.; I have nothing against it :) (but there is some overlap)"
677,1505849505.000111,Jerold,That's pretty much exactly what I told someone in a GitHub issue who was trying to tell me they're exactly the same (with more color that reflection could occur in the return paths) so happy to know I was mostly right :slightly_smiling_face:
676,1505849875.000403,Jerold,"Oh, I suppose I should also mention that afaik primitive-math _is_ more comprehensive. For example, it includes equality and bitwise operators."
677,1505850680.000061,Lucio,"<@Sonny> Hi! I was just reading you blogpost <http://insideclojure.org/2014/12/15/warn-on-boxed/> and tried to use `no.disassemble` with boot but requiring the dependency doesn’t seem to be enough (some jvm flag is missing I think, looking a the lein plugin)"
678,1505850709.000157,Lucio,Could you guide me on how to set it up? Or is there another tool I can use for the same purpose?
678,1505850752.00031,Eliana,it requires an instrumenting agent at startup
677,1505850754.000165,Sonny,you should look at the docs at <https://github.com/gtrak/no.disassemble> or the related leiningen plugin <https://github.com/gtrak/no.disassemble/tree/master/lein-nodisassemble>
678,1505850762.000268,Sonny,or ping <@Audrea> here!
678,1505850859.000166,Eliana,lein-disassemble is an easy <@Lucio> then `lein repl` then `(require '[no.disassemble :refer [disassemble]])`
678,1505850861.000141,Lucio,"I found this <https://github.com/gtrak/no.disassemble/blob/master/lein-nodisassemble/src/lein_nodisassemble/plugin.clj#L20>, but I am not quite sure what path I should pass; <@Eliana> I would like to use it with Boot; actually, could this cause an issue with boot’s approach of loading dependencies after the JVM is started? <@Daniell>; since I would need to pass the agent flag to the JVM that will be running boot"
678,1505851106.000614,Daniell,You'd specify the Java agent option via `BOOT_JVM_OPTIONS`. Pass `-javaagent:/path/to/the/nodisassemble.jar`; (you'd need to run Boot at least once without that in order to download the JAR to `.m2/repository` and then you'd have the (long) path to the JAR)
678,1505851267.000216,Lucio,<@Daniell> thanks. So something like this? `BOOT_JVM_OPTIONS='-javaagent:~/.m2/repository/nodisassemble/nodisassemble/0.1.3/nodisassemble-0.1.3.jar'`
678,1505851351.000687,Jerold,"Sorry, yet another boxing question... Are there best practices for converting characters to numbers? Using the primitive-math casting operators throws an error so I have to switch to those from clojure.core. Not sure if this is something to log an issue with over the primitive-math casts or whether it falls under one of those cases where I'm just not being warned about reflection when using the core versions."
678,1505851490.000078,Daniell,"<@Lucio> Example ```(! 687)-&gt; BOOT_JVM_OPTIONS=""-javaagent:/Users/sean/.m2/repository/nodisassemble/nodisassemble/0.1.3/nodisassemble-0.1.3.jar"" boot -d nodisassemble repl
...
Initializing NoDisassemble Transformer
boot.user=&gt; (require 'no.disassemble)
nil
boot.user=&gt; (in-ns 'no.disassemble)
#object[clojure.lang.Namespace 0x5c26a243 ""no.disassemble""]
no.disassemble=&gt;  (println (disassemble (fn [])))
//  (version 1.5 : 49.0, super bit)
public final class no.disassemble$eval2043$fn__2044 extends clojure.lang.AFunction {
  
  // Method descriptor #6 ()V
  // Stack: 1, Locals: 1
  public disassemble$eval2043$fn__2044();
...
no.disassemble=&gt; ```; I think you'll need the full path, not `~`"
678,1505851521.000595,Lucio,"<@Daniell> yep I just realised that. It works now; Unrelated question (well, related to the discussion we had earlier on uberjars): how do you usually deploy boot applications to production?"
678,1505851553.000375,Daniell,I love Boot for experimenting with new libraries :slightly_smiling_face: No need for a project folder or anything :slightly_smiling_face:
678,1505851559.000556,Lucio,Yes it’s brilliant!
678,1505851597.00012,Daniell,"Mostly we build uberjars. <@Sonny>'s comment about them being ""evil"" notwithstanding, it's the most convenient way so we only need Java and the JAR file on the target system.; (that said, we still _also_ deploy `.clj` source files since we use them inside other apps that predates our uberjar approach)"
678,1505851661.000012,Lucio,Could you imagine a jar downloading its dependencies on startup using boot? Or am I misunderstanding something?
678,1505851667.000597,Daniell,So we still have `boot repl` available on production too (and `boot whatever-task` stuff as well); <@Lucio> What do you gain over having the source of the project there and just doing `boot run` or whatever?; What would that JAR be?
678,1505851717.000395,Lucio,Nothing it seems; I should have asked: would it make sense to use `boot run` from source in production
678,1505851760.00041,Daniell,"Define ""make sense"". There are pros _and_ cons :slightly_smiling_face:"
678,1505851770.00005,Lucio,What would be the cons? :slightly_smiling_face:
678,1505851982.00062,Daniell,"The cons include deploying all your source etc rather than just a single file (which may make your build process more complex); requiring Boot be installed on all your servers; requiring that your servers can access Maven Central and Clojars at all times; ...; That last one was enough for us to run our own Archiva instance acting as a caching proxy for Clojars (before Clojars got the nice, new, redundant CDN implementation for the repo) and all of those together with a desire to move processes to Docker pushed us to use uberjars instead.; (that said, we haven't actually made the move to Docker yet)"
678,1505852198.000057,Jerold,"<@Sonny> sorry to ping you, but wrt to my last question do you know whether something like `(map (comp long char) ""foo"")` is one of those cases where the compiler doesn't throw an error on boxing? I suspect this may be the case since all the primitive-math version of `long` does is call `unchecked-long` from clojure.core, which throws an error where as cc's `long` does not."
678,1505852223.000424,Daniell,"If you deploy an uberjar, you can still have a REPL in production of course (start it with the Socket REPL Server options) -- or just run the uberjar with no options (we don't AOT, and we set `:main` to `clojure.main` so an uberjar can run `clojure.main` to get a REPL -- or we can use `-m my.namespace` to run the `-main` in that namespace)."
678,1505852385.00056,Sonny,anything you do with seq functions will only use objects
678,1505852439.000307,Margaret,"just curious, what does `(comp long char)` accomplish that `long` doesn’t?"
678,1505852465.000085,Sonny,I don’t think it will do anything different
678,1505852466.000468,Jerold,"Yeah, I just realized since I used `map` to convert from a string I should probably mention I get the same erorr with just `(primitive-math/long \a)` whereas `(long \a)` doesn't throw a boxing warning."
678,1505852491.000313,Sonny,the boxed warnings will only happen if you’re calling a numeric operation; and `map` is not one of those
678,1505852554.000486,Jerold,My clarification was meant to say it happens outside of being passed to a higher order function.; <@Margaret> I'm using Zach Tellman's primitive-math library so for that `long` you do actually need to cast to a char first
678,1505852648.00036,Margaret,but it is a char already?
678,1505852684.000272,Sonny,"`long` is handled in RT, so it’s not caught by the warnings in Numbers"
678,1505852685.000055,Jerold,"I assume it has to do, again, with being an argument to `map`.; <@Sonny> thank you. That's exactly what I needed to know."
678,1505852744.000066,Sonny,I think you’re going to end up passing a Character object into RT.longCast(Object)
678,1505852745.000353,Margaret,"so if you just use `(map long ""abc"")` with clojure.core/long it just works, but you need `(comp long char)` instead because of primitive-math?"
678,1505852764.000131,Jerold,<@Margaret> exactly
678,1505852777.000136,Sonny,"none of these options are going to giving you a sequence of primitive values regardless, so I’m not sure it really matters"
678,1505852798.000094,Jerold,"Yes, that's what I was trying to determine."
678,1505852800.000004,Margaret,"yeah-  you can’t put a primitive on the stack, so if you are using map it’s boxed, guaranteed"
678,1505852836.000197,Jerold,"Sorry, I just provided a bad example to begin with, but got the answer I needed."
678,1505852838.000478,Sonny,"it’s hard to recommend something different, b/c it matters a lot what you’re going to do with the result"
678,1505852842.000488,Margaret,(I guess you could make an array transducing context and use a map transducer - or would the map transducer still force the boxing?
678,1505852852.000272,Sonny,yes
678,1505852862.000181,Margaret,:thumbsup:
678,1505852874.000285,Sonny,(although we’ve talked about primtiive transducing options)
678,1505852879.000234,Lucio,<@Daniell> can you start a repl in a running production system if you didn’t start the uberjar with the socket repl server option?
678,1505852947.000028,Sonny,"if your goal is to produce a collection, you could either use a Java long[] or a primitive vector of longs. In general, the latter tends to force boxing on use anyways (through the vector APIs) so you primarily get only memory savings."
678,1505852990.000221,Jerold,"Hmm. Does this ""primitive transducing"" discussion have any bearing outside of a higher-order context? Before Justin brought that up I assumed I was stuck with boxing for chars, but I'm not sure whether you're suggesting something from the java.lang.Character."
678,1505853015.000548,Sonny,"generally, if I’m trying to super optimize all this stuff, I’d use `long-array` or maybe `int-array` here (depends on whether you just care about ascii or full unicode); this is a particularly tricky area of Java"
678,1505853045.000193,Jerold,Right. I'm not going so far with optimization here to use unboxed sequences (and have found `vector-of` to be almost always useless for the reason you mentioned).
678,1505853063.000185,Margaret,"fascinating ```user=&gt; (doto 'primitive-math require in-ns)
primitive-math
primitive-math=&gt; (long \a)

ClassCastException java.lang.Character cannot be cast to java.lang.Number  clojure.lang.RT.uncheckedLongCast (RT.java:1464)
primitive-math=&gt; (long (char \a))

ClassCastException java.lang.Character cannot be cast to java.lang.Number  clojure.lang.RT.uncheckedLongCast (RT.java:1464)
primitive-math=&gt; (map (comp long char) ""hello"")

ClassCastException java.lang.Character cannot be cast to java.lang.Number  clojure.lang.RT.uncheckedLongCast (RT.java:1464)
```; I’m sure I’m doing something silly here"
678,1505853149.000558,Jerold,Your first two cases were the behavior I was asking about here. The third one for some reason works for me.
678,1505853165.000373,Margaret,"there’s a namespace to use to start the socket server by hand, and of course you can use clojure.tools.nrepl.server to make an nrepl server instead"
678,1505853196.000355,Jerold,No. Scratch that. You're correct on all counts.
678,1505853247.000328,Lucio,<@Margaret> can you plug into a running jvm like that? I am not familiar with how those things work
678,1505853316.000003,Margaret,"The clojure process can call the functions to start a server. If you really need to monkey your way in, a debug connection could be used to access clojure via interop from the java side and make it do so I guess…"
678,1505853532.000554,Daniell,In the past we've had a way to tell a process to start a REPL (and to stop it again) so we can have a REPL open when we need it.; (that has varied depending on the process)
678,1505853594.00005,Jerold,"There is also `Long/parseLong`, but that only works for numerical strings. Similar to `(map #(Character/digit %) ""123"")`"
678,1505853637.000091,Daniell,"Mostly, for debugging, we'd just restart a process with the socket REPL server JVM options if we needed that. Or just start a standalone REPL while ssh'd into the server, for local interactions."
678,1505853658.000095,Jerold,"Err, sort of similar. You get the point."
678,1505853865.000173,Daniell,"(running a REPL server in a live, production process comes with all sorts of caveats about security and risk and so on and so forth... we _have_ -- occasionally -- applied a hot fix via the REPL by sending a new function `defn` but... ""ultimate power"" and all that... generally _not recommended practice at all_ :neutral_face: )"
678,1505854441.000208,Margaret,"<@Jerold> it seems like without using clojure.core/long etc. the easiest way to get a number from a char in a string is ```=&gt; (Character/codePointAt ""foo"" 0)
102```; but that may be doing something wrong with unicode contexts; actually ```=&gt; (Character/codePointAt ""☃"" 0)
9731```"
678,1505854642.000274,Jerold,This is for hashes so I'm fine with just ascii
678,1505854860.000645,Jodie,This is the power of a lisp machine. 0 downtime deploys are much easier if you can live reload code this way.
678,1505854888.000709,Jerold,"Oh, it doesn't seem to work in higher-order functions, e.g. `(map-indexed #(Character/codePointAt %2 %1) ""foo"")` so I'd need to use loop/recur. Plus I'm not even sure it saves me from boxing wrt to the individual elements."
678,1505855169.000227,Margaret,"the boxing would depend on what you do in your consuming function, and I would use `(map #(f (Character/codePointAt s %)) (range (count s)))` - if f knows how to use a numeric value unboxed, it would work I bet"
678,1505855560.000236,Vena,I have no qualms about leaving a localhost nrepl on production servers. It’s invaluable.
679,1505856149.000459,Ava,"<@Daniell> we maintain our processes listening on localhost nrepl ports and use ssh to control them. in rare circumstances we apply hotfixes or debugging that are urgent or otherwise problematic. just another component that spins up an nrepl server. There are caveats and we don't do it lightly, but the power has saved my company a lot of money over the last 4 years."
678,1505856162.000272,Margaret,"```primitive-math=&gt; (let [s ""hello, world!""] (map #(inc ^int (Character/codePointAt s %)) (range (count s))))
(105 102 109 109 112 45 33 120 112 115 109 101 34)```"
678,1505856382.000318,Jerold,"Oh, duh :stuck_out_tongue:; Thanks. I'll compare. I sort of suspect it's not worth it since I'm just dumping them into a sequence, but will test."
679,1505857844.00008,Daniell,<@Vena> <@Ava> Glad to hear of others using a live localhost REPL for this!
680,1505858400.000128,Margaret,"yeah - it requires discretion, but can lead to sorting out weird production issues faster"
679,1505860536.000054,Vena,"When we had just a few production nodes, we would hot patch fixes regularly. There’s also nothing like being able to instrument or sample live data.  Obviously you need to know your tools well and tread lightly, but there’s nothing like being able to go from bug report to fixed in production in 5 minutes."
678,1505860552.000194,Jerold,"<@Margaret> postmortem: worth adding a helper function for, but not significantly faster for any use cases and slower for some. Regardless, thanks for the tip."
679,1505863368.000286,Lucio,"<@Vena> doesn’t it become a bit of a nightmare if you apply ad-hoc patches on production?; like, don’t you lose track of what code is running?"
679,1505863479.000192,Vena,"After the fire is out we will get packages built and deployed, but that could be a day or two later; Now we just have too many production nodes to do this, but our infrastructure for fixes is more sophisticated; Today it could take half a day to get a fix committed, built in CI, approved by QA and deployed by ops; in the best case; I miss the old days :slightly_smiling_face:; We still use prod nrepl, just not for fixes; Hand fixing 3 heads takes a couple minutes.  Patching 20 is less fun manual.  It all depends on the scale"
679,1505863639.000181,Bibi,"<@Lucio> if you maintain the git commit as a value in your running code, you can sync your local version. You now have a nice base with which to apply a fix, test it, roll back if process demands, then push the fix through proper channels."
679,1505863676.000168,Vena,"Yes, I would always commit changes for reference"
681,1505875862.000148,Kandice,"Hey all, I've been learning Clojure for like 3 months now and I really enjoy it. I think my main block with becoming a savant is finding small practical programs to write to learn Clojure in more depth. I've been going through Clojure For the Brave and True, and it's definitely helped with learning Clojure, but I want a bit more."
681,1505876037.00024,Bibi,I like the problems at <http://www.4clojure.com>
681,1505890928.000327,Noella,<@Kandice> I recommend <https://www.amazon.com/Joy-Clojure-Michael-Fogus/dp/1617291412/>
681,1505892686.000358,Senaida,<@Kandice> I'd also highly recommend Living Clojure (by <@Jess>) and Programming Clojure 3rd ed. (by <@Sonny> et. al.) <https://pragprog.com/book/shcloj3/programming-clojure-third-edition>
681,1505897756.0003,Terra,"<@Kandice> Besides the book suggestions (all of them great although Joy of Clojure can be a bit tough to follow) I recommend <http://exercism.io|exercism.io>, 4clojure, Parens of the Dead (<http://www.parens-of-the-dead.com/>), Tim Baldridge's Clojure Tutorials (<https://www.youtube.com/channel/UC6yONKYeoE2P3bsahDtsimg>), <https://lambdaisland.com/>, and <https://purelyfunctional.tv/>
Some of them are paid, but I think they are well worth the cost.; Also check ""beginning to learn Clojure after imperative programming my whole life"": <https://groups.google.com/forum/#!topic/clojure/FVhL4ZZxHy8>"
682,1505901247.000072,Jermaine,"I really can't get compojures destructuring working right. Can anyone tell me if I can make this route look nicer? 

`(POST ""/api/request-priority""  req #(api/request-priority (:body req)))`"
682,1505901578.000074,Efrain,"How about `(POST ""/api/request-priority"" {body :body} (api/request-priority body))`"
682,1505904001.000181,Jermaine,"Yeah, thank you. That seems to be working.; `(POST ""/api/request-priority"" {:keys [:body]} (api/request-priority body))` also seems to do the trick.; But if anything this cements how hard it is to reason about someone elses macros at times and how one should try to avoid them."
682,1505904653.000102,Efrain,"compojure destructuring is the same as in clojure, you just need to keep in mind that incoming request will be in ring map format, as described here - <https://github.com/ring-clojure/ring/wiki/Concepts#requests>
In any route definition you can get access to any upper level key with constructions like - `{:keys [body server-port uri ... etc]}` or, if you need to get some nested key with `{{some-key-in-body :some-key-in-body} :body}`
I’m using this gist for remembering how destructuring works in clojure - <https://gist.github.com/john2x/e1dca953548bfdfb9844> 
Maybe this will helps you as well)"
683,1505907573.000009,Marx,"If you’re looking for programming challenges, you should check out Project Euler <https://projecteuler.net/>. Tends to be more math-oriented and not specific to clojure, but they’ve got some great problems to work on."
684,1505912672.000268,Gino,does anybody know of a bcrypt library with support for 2b other than this branch <https://github.com/anebril/jBCrypt/commits/gcsvn-merged-0.4-overflow-fix> ?; would like to avoid having to package this
685,1505917328.000314,Jaye,"just wondering, is there a more concise/elegant way to map a Java method (e.g. `name()`) on a coll/seq of Java objects than `(map #(.name %) coll)` ?"
685,1505917587.000509,Noella,"I think that is the correct way to do it, there is <http://clojuredocs.org/clojure.core/memfn> but I haven’t seen that used much"
685,1505917687.000302,Michelle,"Anyone familiar with a way (ideally in vim) to trace every use of a var or function? vim-fireplace will trace an invocation of a function back to its definition, but I’m looking for the reverse. Thoughts?"
686,1505920440.00032,Guillermo,"Have you checked whether bouncy castle supports it?; <https://github.com/bcgit/bc-java/blob/master/core/src/main/java/org/bouncycastle/crypto/generators/BCrypt.java>; It says it corresponds to the OpenBSD implementation, not the original 1999 paper; I think that must be 2b"
686,1505921342.000108,Tammie,Does anyone have a handle on how we are doing on Java 9 support (generally)?
686,1505921784.000423,Jodie,Clojure 1.9 is all sorted for it afaik; the beta1 changelog suggested as much; and even that was just a minor change.
686,1505921940.000361,Sonny,"current state is summarized here: <https://groups.google.com/d/msg/clojure/IB2CaORBMnM/oKvk6cLuDAAJ>; since then, CLJ-2077 was applied and is included in 1.9.0-beta1"
686,1505922099.000158,Jodie,"A minor clarification to what that google groups says: Boot does *not* use the bootclassloader, so works today with Java 9 (I suspect, I haven't tried myself)."
686,1505922167.00019,Guillermo,"Just to split hairs, Clojure has always worked on Java 9, it's lein and boot that didn't."
686,1505922264.000426,Jodie,"ah, Boot didn't work with Java 9 because of <https://github.com/tobias/clojure-java-9/issues/3>"
686,1505922321.000022,Guillermo,boot does now (2.7.2)
686,1505922326.000488,Sonny,there are apparently issues with the clojure-maven plugin as well although I haven’t seen a report on that yet
687,1505923787.00057,Janelle,is Leiningen ok with Java 9?
688,1505924020.000594,Jodie,"<@Michelle> Hi. I have a trick that works if you have refactor-nrepl, but it's basically a large ugly blob."
686,1505924038.000527,Jodie,"It used unite.vim, I haven't really maintained it, so it's gone now I think"
688,1505924162.000429,Jodie,"<@Michelle> <https://github.com/SevereOverfl0w/.files/commit/7e24428b70b508786f8d9931a35407763c90340c> here's the big blob of code.; a lot of it is unite-specific formatting. I had a version that loaded into the quickfix buffer.; (btw, you should join us in <#C0DF8R51A|vim-fireplace>)"
687,1505924565.000006,Altagracia,How would you put `(mapv #(identity {:subject % :count (:count %)}) employees))` more concisely?
687,1505924682.000097,Margaret,"fyi `{:keys [:body]}` may sometimes work by accident but the correct version is `{:keys [body]}` (see also `:strs` and `:syms`, I bet you can guess what they do)"
687,1505924724.000785,Guillermo,IMHO it's not easily readable -- defn the mapping function top-level to improve it; if you def it to `!` then it'll be really concise :laughing:
687,1505924769.000407,Jodie,`(mapv #(hash-map :subject % :count (:count %)) employees)` is one start I guess
687,1505924774.000724,Margaret,`#(hash-map :subject % :count (:count %))` is nicer I think
687,1505924825.000396,Altagracia,No way to leverage the literal map notation here?
687,1505924832.000321,Guillermo,no
687,1505924837.000109,Jodie,"I have a utility I came up with I call ""juxtamap"", which combines `juxt` &amp; `hash-map` which would be perfect for this:

`(mapv (juxtamap {:subject identity :count :count}) employees)`

Of course, introducing new syntax is not always a good thing.; <@Altagracia> not without switching to `(fn [%] {…})`"
687,1505924908.000144,Altagracia,Thanks for your input! I'll go with the `hash-map` way; <@Jodie>: `juxtamap` looks nice!
687,1505925274.000185,Jodie,"```
(defn juxt-map [&amp; {:as x}]
  (comp #(zipmap (keys x) %) (apply juxt (vals x))))

(map (juxt-map :a inc :b dec) [1 2 3])
```

^^ quickly came up with this new version which resembles `hash-map` a little more."
687,1505925953.000276,Michelle,"<@Jodie> Hey, I appreciate your suggestion—I’ll check it out."
689,1505930136.000242,Silas,"Don't do that, even if you could. Try to have reproducible builds, which leaves zero chance of anything having differed. Better to resolve all things beforehand, and then copy those in one go to your hosts. That's the only way to be 100% sure all hosts are perfectly in sync. "
690,1505931356.000077,Merrie,<@Altagracia> `(mapv #(-&gt; {:subject % :count (:count %)}) employees))` :opieop:
690,1505931607.000457,Margaret,"<@Merrie> `do` has the same result and is less obfuscated; (just using fn, or a function meant to make a hash-map, is still better than either option)"
690,1505933355.00005,Merrie,`-&gt;` uses less pixels than `do` does :troll:
691,1505935408.000112,Leonida,"aka ""extensive downtime deploys when you mess it up""  :wink:"
692,1505935754.00026,Kaci,"Hello all

I’m having a issue with getting nrepl to run in a Docker container using DockerMac.  I’ve exposed port 7000 and from my -main function the nreql/start function is called. 

The app is started via a CMD in the Docker file --&gt; CMD [“lein”, “uberjar” “-Djava.net.preferIPv4Stack=true”] (The prefere IP4 was what I found online as a suggestion that would fix this but it didn’t work)  

The error I get is:  ‘Caused by: java.net.SocketException: Protocol family unavailable
	at java.net.PlainSocketImpl.socketBind(Native Method)’ error.  So I wondered if anyone else has worked around that problem; Any help is appreciated"
693,1505937403.000462,Kyung,"`lein uberjar` builds and packages the jar but it doesn’t run the jar.; Since you already have the sources in the container you could `CMD [""lein"", ""run"", ""--"", ...]` with whatever parameters you need and don’t bother package the jar."
693,1505937435.000316,Easter,tomorrow release of java 9. is lein ready for java 9?
693,1505937713.000448,Kaci,"<@Kyung> I actually have CMD that runs it later, but I guess I could run it with lein"
693,1505937901.000079,Kyung,"Or, you could build the uberjar outside the container and ADD it in.  Then your Dockerfile would contain something like 
```
ADD target/uberjar/myapp-1.2.3-standalone.jar /
CMD [""/usr/bin/java"", ""-jar"", ""/myapp-1.2.3-standalone.jar""]
```; sorry … crossed messages with you. Yes, we said the same thing."
693,1505937997.000094,Kaci,the weird thing is that I get that error about java.netSocketException just by having the jar run with java
693,1505938273.000428,Kyung,"I think you said at the beginning you were having problems with nrepl… Is this right — you’re using ring (with jetty?) to expose a web server on port 3000, and also something like `(clojure.tools.nrepl.server/start-server :port 7000)` to expose a repl on port 7000?"
694,1505938469.000597,Guillermo,there's some scrollback about this in <#C03S1KBA2|clojure> this morning
693,1505938832.000595,Kyung,"Oh, wait.  Our dockerfiles are not the same thing.  When you do `CMD [""lein"", ""uberjar""]` that’s happening in the docker container. But you haven’t added the sources yet, so there is nothing to build there.  That command is probably failing with “Couldn’t find project.clj, which is needed for uberjar”; The next line `ADD target/uberjar/backend-clojure.jar /backend-clojure/app.jar` will try to add the most recent uberjar you built in the project directory on your mac.; Which might be there, or might not, or might not be current.; Look for example at this project <https://github.com/gonewest818/benchcurl>; Never mind what the app does, it’s just a little toy example, but I wrote a little utility script `docker_build.sh` that ensures a fresh uberjar is packaged and *then* it invokes `docker build -t ..` to build an image that runs the container."
693,1505939223.00038,Kaci,"<@Kyung> I have my local dir mapped to the container, so it finds the sources and uberjars them.  The web app itself runs fine.  Just haven’t been able to get the nrepl to run.  As I get that SocketException: Protocol family unavailable; looking at your benchcurl example though, so thanks"
693,1505939706.000447,Kyung,"Ok.  As far as I know you can `docker run -v` but you cannot `docker build -v` so your `CMD [""lein"", ""uberjar""]` must be erroring. It must be only because you’re then doing `ADD` that there is a jar to be run.   So anyway, we can go back to focus on the socket error."
693,1505939814.000577,Casimira,"Does anyone here use VS Code with Clojure? Just curious, as my team is evaluating Clojure, but currently uses VS Code for all other languages (Ruby, SCSS, CSS, HTML, JavaScript, etc). Visual Clojure is working well for me, but one thing I'm noticing is that when I tab/shfit + tab, it messes up my map indentations:; ```
{:value name
:name ""name""
:on-change sync-field
:placeholder ""Name""}
```"
693,1505939876.00061,Kyung,by the way <@Kaci> we should move this discussion to the <#C0PME9N9X|docker> channel
693,1505939894.000335,Casimira,"^^^ That appears to be VS Code, not Visual Clojure. Wondering if anyone has found a good workaround for that?"
693,1505939943.00007,Kaci,<@Kyung> moving to docker
695,1505941882.000093,Daniell,"<@Leonida> Heh, just send the old `defn` back into the running image :slightly_smiling_face:"
696,1505951639.000032,Elfreda,i was curious how Rust deals with things like clojure.core/update and i’m not sure if i should be impressed or horrified by this: <https://doc.rust-lang.org/std/collections/hash_map/enum.Entry.html>; it’s definitely a clever solution
696,1505956188.000023,Guillermo,"<@Elfreda> I've been working on a couple generator functions that I've found useful enough for Clojure, but one of the prior arts I'm looking at is Rust's unfold implementation. Lemme grab a link"
697,1505956225.000232,Guillermo,<http://rust-bio.github.io/rust-bio/itertools/fn.unfold.html>
698,1505962647.000036,Kristen,"Is it really true that neither jetty nor httpkit gives you access to the HTTP verb (POST, OPTIONS) part of the request?  Or am I just looking in the wrong places?"
698,1505962748.000108,Margaret,"use ring if you aren't already, and the request itself should have a `:request-method` key on it <https://github.com/ring-clojure/ring/wiki/Concepts>; if you are using eg. compojure remember that the destructuring is hiding most of the data for you"
698,1505962813.000122,Wendi,Is there a place for a <#C77A7THGE|documentation> channel to coordinate and support clojure documentation efforts?
698,1505962842.000198,Margaret,"OK, link worked, that's a start"
698,1505962947.000132,Kristen,"<@Margaret> There is indeed such a key, however when I get the value it is :options; It looks very much like a bug where there is no value so the next key becomes the value."
698,1505963101.000127,Daniell,"<@Kristen> Some browsers send an OPTIONS request first to find out what is supported.; If you're building a REST API, you need to support OPTIONS."
698,1505963145.000032,Kristen,"Ah, my bad, I was not expecting the leading :; It is indeed an OPTIONS message."
698,1505963192.000001,Daniell,"<https://github.com/r0man/ring-cors> -- we use that middleware to provide OPTIONS support, as I recall."
698,1505963245.000145,Kristen,"I am working on building something exceedingly small and simple; But yes, I need to support options.; Even if not incredibly well"
698,1505963310.000137,Daniell,"Use appropriate middleware so you don't have to reinvent every wheel.; Have you looked at ring-defaults? That offers a standard set of middleware for both ""web sites"" and ""APIs"" -- and SSL/non-SSL variants of each.; (it doesn't include CORS so you still need that as well); Clojure is all about composing small things :slightly_smiling_face:"
698,1505963543.000055,Kristen,"Thanks I will look at that, but CORS is the one thing I need and I don't want to have to use routes to use CORS middleware, which is what I inferred from the middleware documentation I saw."
698,1505963583.000101,Daniell,You inferred incorrectly. `my-routes` is just whatever handler you have.
698,1505963591.000105,Margaret,a CORS exchange needs to use OPTIONS right?
698,1505963599.000114,Daniell,Routing is just middleware anyway.
698,1505963650.00005,Kristen,<@Margaret> Yes.  I have to send a good header back when I get an OPTIONS.; The docs are less than obvious.  I don't even see where to find the type of my-routes
698,1505963755.000213,Margaret,a router is a function that gets a request and passes it to a request handling function; usually it is made with a library like compojure or bidi
698,1505963793.000048,Kristen,What's the output?
698,1505963795.000122,Margaret,"I mean technically it could just be a function that takes a request and does whatever but in practice that's what it is; the output is described, along with the inputs, on the wiki page I linked; if you return a string, that becomes the body of the response, if you return a hash-map various keys set properties of the response, it's all documented on the ring wiki; for your convenience here's the link again <https://github.com/ring-clojure/ring/wiki/Concepts>"
698,1505963922.000073,Kristen,"Sorry for being obtuse, I will go quietly to my corner and RTFM."
698,1505963924.000148,Daniell,I'd recommend reading through the Ring documentation and following the tutorials to get a sense of how web development is done in Clojure -- it's very different to how most languages do it.
698,1505963962.00007,Margaret,"<@Kristen> if you have specific questions I'm happy to help, but that wiki is more concise and accurate than I could manage to be if your question is just ""what's a response"" (actually you asked what the output was, but the handler should return a valid response etc.)"
698,1505964046.000036,Kristen,I do have the mild problem of starting to learn Clojure on Monday and going live on Friday.
698,1505964055.00005,Margaret,oh wow that sounds super fun
698,1505964106.000093,Kristen,"<@Margaret> Thanks very much, I am mostly just being slightly confused by new nomclemature.; The good part is that it is not a job, so the comeback isn't really painful, it's just an app for a small group."
698,1505964192.000182,Daniell,"<@Kristen> In that case you want to write as little ""boilerplate"" yourself and rely on existing components as much as possible. After all, you shouldn't have to worry about writing code to support CORS -- but your app needs to support it -- so... middleware. Same with route handling, JSON decoding of the body (if relevant) and pretty much all the basic stuff any web app or API needs."
698,1505964194.000184,Kristen,But learning things in a hurry is actually fun.
698,1505964218.000046,Daniell,"The downside is: you need to ""grok"" Ring -- and pretty much everything in Clojure is based on Ring or is compatible with Ring."
698,1505964230.000121,Kristen,"CORS I need, architecture is 1 endpoint."
698,1505964262.000065,Daniell,Our web apps and REST APIs all use a standard stack of middleware and can choose to run on Jetty or http-kit at startup.
698,1505964282.000115,Margaret,"there's a cors middleware, the model of ring is data -&gt; function -&gt; data, so you get a hash-map, do some work, and return something (likely a hash-map); and a middleware takes a handler and returns a new one with a feature added"
698,1505964303.000054,Kristen,That makes sense
698,1505964306.000118,Margaret,"which either adds data to the incoming request, or to your reply; (usually - they can just do side effects instead of course)"
698,1505964362.000109,Kristen,"What, do they launch nukes? :slightly_smiling_face:"
698,1505964399.00012,Margaret,"so the wrap-cors middleware will have some way of letting your handler pretend it's a normal request, and doing the options handshake with the client for you, and it should be smart enough to know when to pass data to your actual function"
698,1505964439.000078,Daniell,Authorization? Middleware. Request logging or timing / metrics? Middleware. Providing configuration from the environment or database connections or something? Middleware. :slightly_smiling_face:
698,1505964550.000125,Margaret,"a pattern I use quite a bit is to decompose an app into features, and have each one manage its resources or configuration or initialization as needed, and return functions that others can use, including middleware for the http server. so the http server is the component that pulls in all the others, and knows which middleware to pull out of them and apply to its handler to get the runtime features it needs"
699,1505968799.000153,Kristen,What do I put in the dependencies in project.clj to get ring-cors?  And more generally how do I find that out?
699,1505969396.000085,Willow,"<@Kristen> ^; its on the github page for it. also, you can search clojars at <https://clojars.org/>; the image is nice as its updated by publishing mechanism but you can't copy paste unfortunately"
700,1505974691.000013,Jodie,"Fun fact, you can if you load the svg directly. Just not via github's proxy which converts it to png"
701,1505975820.000082,Isabell,is there an easy way to print functions as code instead of #object[...]?; I like to work with maps containing several little functions and it would be really usefull
701,1505978674.000253,Jodie,<@Isabell> not one I've heard of.
701,1505978805.000351,Isabell,I find it weird that functions being so opaque in a functional language
701,1505978877.000134,Jodie,"<@Isabell> the function as a value is fairly opaque, yep. I'm not sure why metadata isn't applied to functions, and is instead on their vars (or why not both!)."
701,1505978930.000133,Isabell,<@Jodie> yes I agree!
701,1505979090.000323,Jodie,"I'm sure there's a good reason though, usually surfacing around complexity or edge-cases which don't make sense."
702,1505980703.000301,Ethelyn,"Is there greenkeeper-like service for Clojure, by the way?"
703,1505984827.000091,Altagracia,<@Merrie> nice trick!
701,1505986455.000334,Eliana,"<@Isabell> `(clojure.repl/source ns/fname)` will fetch sources, assuming you can load them from a clj file sitting in the classpath"
701,1505986535.000163,Isabell,"<@Eliana> thank you, yes I was aware of this, but my concern is more about anonymous functions; and I think this stuff is related to vars"
701,1505986707.000284,Eliana,once the lambda is evaluated there is no more sources available (unless of some tricky stuff to rebuild them from the bytecode)
701,1505986821.000241,Isabell,yes I understand
704,1505988681.000134,Merrie,"<@Altagracia> don't actually use it, `-&gt;` implies something should be done with 1st argument ({} in this case), and might waste reader's attention on figuring out whether author forgot to add something"
704,1505988804.000157,Altagracia,<@Merrie> Good point.
704,1505988981.000324,Merrie,"generally, you would not want to see in code today something you called a ""trick"" 2 weeks ago :opieop:"
705,1505991999.000275,Crystal,"Trying to embed a REPL in my app in code. Trying to run this in REPL: (clojure.core.server/start-server {:name ""repl-server"" :port 5555 :accept 'clojure.core.server/repl}) and then doing lein repl :connect localhost:5555. My windows command shell just hangs doing nothing. If I use a different accept-function, I get an error so the connection is established, it's just not starting the REPL. Is this the right way to start a new socket repl in code?"
705,1505992179.000238,Elsy,"<@Crystal> `lein repl` tries to connect to an nREPL server, `clojure.core.server` is a socket REPL which is just plain tcp.; either start <https://github.com/clojure/tools.nrepl> or use a different client"
705,1505992247.000201,Crystal,"Right, so I need to use something like telnet instead?"
705,1505992260.000059,Elsy,that would work yes
705,1505993065.000158,Crystal,"Great, that got me one step further, thanks!"
705,1505993681.000108,Jaqueline,Anyone knows who’s done <https://clojurians-log.clojureverse.org> ? Are there any more friendly export formats beyond html?
706,1505994073.00027,Margaret,"<@Isabell> if you define an anonymous function with a name, it becomes slightly less opaque (`(fn foo [] ...)` instead of `(fn [])`) - the bigger gain is that stack traces make more sense, but it also becomes helpful if you run into a function literal. But! if you find yourself passing around maps full of functions, double check that your design wouldn't work out better with multimethods, or records implementing protocols."
706,1505994316.000048,Isabell,"<@Margaret> thank you for the advice, I tend to avoid protocols and multimethod these days (I like to program with only maps and functions as much as possible) but they are really cool and when performance is needed I use them."
706,1505994355.00039,Margaret,"<@Isabell> but this isn't about performance, it's about not making a total mess; records are maps, protocol methods and multimethods are functions"
706,1505994471.000073,Isabell,maps of functions are more dynamic than records or types; I like to generate and compose those kind of things
706,1505994518.000003,Margaret,"a clojure record is a superset of a hash-map - it does all the things a hash-map does, plus it lets you extend functionality in an organized way"
706,1505994531.000196,Isabell,yes I know; but how should I use a record where I can use a map; I don't need a type for dispatch
706,1505994601.000256,Margaret,"because it lets you write code that makes a design clear to the reader - but if your function composition isn't organized around something that matches dispatch, then it's not your solution sure"
706,1505994642.000146,Isabell,yes it is organised around something that make dispatch
706,1505994645.000343,Margaret,"<@Isabell> this suggestion came from working with a legacy codebase that was full of partials and first class functions that rendered the design of the system opaque, which over time led to errors and duplicated work"
706,1505994662.000283,Isabell,yes I see your point; I find this kind of way of coding offers a great deal of flexibility when used in the context of research and early dev but in prod maybe not
706,1505994728.00023,Margaret,"the fact that the authors of the code could no longer read about and understand the parts of the system (or even see a system in order to recognize parts) led to an avalanche of partials and closures that became unmaintainable, the solution was to use records and protocols to deliniate the ""big picture"" features of the app. This is all slightly fuzzy stuff, if you don't need to do this you don't, that's fine.; <@Isabell> right, the early flexibility sabotaged long term maintenance (in this project, and some other similar ones); well, flexibility plus lack of developer skill / lack of developer understanding"
706,1505994784.000173,Isabell,"Yes I see, I wrote lots of protocols and types in the past, and I became tired of this layer"
706,1505994801.000254,Margaret,right - I'm definitely not suggesting types and protocols everywhere
706,1505994809.000307,Isabell,just maps and I feel good :slightly_smiling_face:; but yeah I understand I think
706,1505994844.000176,Margaret,"I thought I was seeing one of those classic symptoms - a big bag of functions in a hash-map and you lose track of what's what, and got flashbacks :laughing:"
706,1505994862.000106,Isabell,:smile:
706,1505994940.00021,Merrie,maybe <@Jasmine> knows?
706,1505994978.000226,Margaret,"For example, there are places in the code where I ended up replacing a hash-map with a record that implemented no protocols. This was so that a) we could actually determine how much of the garbage sticking around in the profiled system actually came from this source (someone had a suspicion and we had to measure it somehow) and b) later the fact that it was a #some.ns.foo{} clarified things somewhat when looking at the data that comes into the other part of the system; I don't know if you have profiled a big clojure system, but the fact that everything is a clojure.lang.PeristentFoo datastructure or a LazySeq or clojure.lang.IFn eliminates 80% of the info a profiler would usually be giving you"
706,1505995103.000015,Isabell,I haven't profiled large systems neither in java neither in clojure.; I understand your point
706,1505995532.000309,Candace,That’s a good point. I previously worked on a large clojure backed webapp and we used AppDynamics. It helped but we were definitely limited because of all of the clojure-specific structures
707,1505996328.000339,Margaret,"it's not that they are clojure specific (it's all java at the bottom and the profiler can sort it all out), it's that they are not differentiated - the type of the data doesn't tell you anything about who made it other than ""something in clojure"" and the methods being called don't tell you much more than ""some clojure generated byte code is running"" (though in the latter case it's mostly noise rather than lack of data and if you keep digging you can actually figure out what code is doing what)"
707,1505997629.000008,Robbyn,does anyone have any experience with integrant? how do you find it comparing to luminus?
707,1505997693.000048,Margaret,"integrant is a resource management library, luminus is a template made of a large number of libraries, the library it uses which integrant would/could replace is mount; there's a lot of debate around mount vs. integrant vs. stuartsierra/component; component was the first one, and people found it very useful for keeping their code running as they reload and redefine things (it ensures that even if you have running state you can safely tear it down and restart without exiting your repl process); but people found it either ""too OO"" or ""too boiler plate"" and alternatives like mount and integrant were made; mount uses vars to put state in global shared mutable containers; integrant uses function args to pass in components (like component does) but has a syntax and some conventions which simplify the common use cases"
707,1505999575.000086,Robbyn,<@Margaret> thanks!
708,1505999597.000158,Robbyn,"sorry for confusion, I wanted to say 'duct' vs luminus, but thanks for explanation about integrant!"
707,1505999608.000545,Margaret,"haha, OK"
709,1506007936.000112,Jasmine,<@Jaqueline> there are the raw logs. They're not public but I can share them. Please DM me with what you need it for.
710,1506010379.000028,Alayna,"Say, what do people favor as a convention for the names of constant values? I have `(def ^:const buffer-size 100)` and I'm wondering whether to name it `BUFFER-SIZE`, but that seems uncommon. I've also seen `*buffer-size*` to indicate globalness, but the convention in clojure seems to favor using `*var-name*` for dynamic vars, not necessarily global ones"
710,1506010516.000442,Margaret,"<@Alayna> typically style guides suggest having no special convention for constants, all data should be constant in clojure with very few exceptions"
710,1506010648.000437,Alayna,"I'm generally ok with that, but there is something nice about a visual indicator that means I don't have to read back through a bunch of let-bindings to figure out where the thing was defined. Something about CAPS_LOCK just doesn't look right in Clojure though"
710,1506010733.000431,Margaret,"OK - you asked about conventions, and in clojure the ""convention"" is to not to name constants differently; in practice something is either defined in a let block (the whole let block should fit in your screen at once) or else it's at the top level of the file, so finding it should not take long at all"
710,1506011181.000074,Jodie,"There is a lisp convention which is +var+, but it's not considered idiomatic clojure.; <https://dev.clojure.org/display/community/Library+Coding+Standards>

&gt; Use *earmuffs* only for things intended for rebinding. Don't use a special notation for constants; everything is assumed a constant unless specified otherwise."
711,1506015074.000841,Berry,"1. How do I convert string (representing a unicode char) to a char?

2. The answer is NOT read-string, as it fails on ""(""

3. ""a"" -&gt; \a, ""b"" -&gt; \b, ""\u2323"" -&gt; \u2323

How can I do this in both clj/cljs ?"
711,1506015436.0006,Myles,"apply char works, but surely there's a better way; `(apply char ""\u2323"")`"
711,1506015469.000243,Elsy,"<@Berry> cljs doesn’t have a char type, for clj `(.charAt ""a"" 0)`"
711,1506015661.000387,Myles,"cljs doesn't have a char type, but it treats strings of length 1 as chars, right?; so `(char ""\u2323"")` outputs ""⌣"""
711,1506015690.000205,Ferdinand,"<@Berry> assuming you want unicode code points (which is not the same as a Java Character), your best option is to use `(.codePoints ""adsf"")`"
712,1506015766.000022,Ferdinand,"unicode characters in Java are stupid tricky to get right because Java chars are UTF-16, which means that higher code points are represented with TWO chars"
711,1506015844.000396,Ferdinand,"And easy way to turn them into a seq is: `(iterator-seq (.iterator (.codePoints ""asdf"")))`; Here's a good example:
```
(seq ""𐐷"")
=&gt; (\? \?)
(iterator-seq (.iterator (.codePoints ""𐐷"")))
=&gt; (66615)
```; Notice just calling `seq` produces TWO java chars, when, in reality, they represent a single unicode code point.; I have no idea about cljs. Surely there is some JS library that can translate a string to unicode code points."
713,1506018000.000009,Lori,"I'm using `component` and for some reason, no combination of the following is running my latest changes
- `component/stop`
- `clojure.tools.namespace.repl/refresh` (or `(refresh :after ...)`)
- `component/start`

any idea what's up?; (IE, if I add a `prn` command, or delete something, or add any new logic, and then refresh, I'm still working with my previous version until I close cider and relaunch it)"
713,1506018359.000332,Hugo,You may want to ask in the <#C0GQAAKA9|component> room but I suspect the answer is that your code changes are directly part of your system components and you’re not rebuilding your system
713,1506018485.000415,Lori,"&gt; ask in <#C0GQAAKA9|component>

good advice, I will

&gt; directly part of system components

they're actually not in this case :disappointed:

&gt; not rebuilding your system

`stop`ping and `start`ing should rebuild my components right? even if I _were_ changing components directly?; <@Hugo> ^^^"
713,1506018544.0004,Hugo,"No, you’d just be calling the stop and start methods on the existing system"
714,1506019240.000733,Leann,"Hi, does anyone know how can I create a record with dynamic fields?; Right now I'm doing `(defrecord MyRecord [attributes])`; but then I can't assoc without prepending `attributes`; `(assoc-in myrecord [:attributes :key] value)`"
714,1506019304.000323,Sandy,you can assoc anything into a record; so (assoc myrecord :key value) will work
714,1506019336.000173,Leann,"sure, but then the new field won't overwrite the old one, passed at construction"
714,1506019362.000531,Kareen,map/record fields are keyed nominally not positionally
714,1506019412.000622,Sandy,There's also (map-&gt;MyRecord {}). that function is generated automatically for every record.
714,1506019416.000484,Leann,"```
user=&gt; (defrecord MyRecord [attributes])
user.MyRecord
user=&gt; (def a (-&gt;MyRecord {:key :value}))
#'user/a
user=&gt; (assoc a :key :new-value)
#user.MyRecord{:attributes {:key :value}, :key :new-value}
user=&gt;
```"
714,1506019434.00053,Rebeca,a record with dynamic fields is a map
714,1506019453.000472,Kareen,<@Leann> that's because you're creating a record that has the `{:key :value}` map as value for the `:attributes` key
714,1506019473.000471,Margaret,<@Leann> wouldn't it do what you want if you used `map-&gt;MyRecord` instead of `-&gt;MyRecord` ?
714,1506019479.000091,Aldo,"ya, a MyRecord can't not have an :attributes key, that would mean it doesn't satisfy the one and only requirement that makes it a MyRecord"
714,1506019482.000599,Margaret,why put everything under one key?
714,1506019488.000155,Kareen,use `map-&gt;MyRecord` instead
714,1506019502.000008,Rebeca,why use a record at all for dynamic keys?
714,1506019512.000109,Sandy,I agree with <@Margaret> use multiple keys at the same level as attributes
714,1506019512.000595,Leann,"correct; ```
user=&gt; (def a (map-&gt;MyRecord {:key :value}))
#'user/a
user=&gt; (assoc a :key :new-value)
#user.MyRecord{:attributes nil, :key :new-value}
```; I can simply define no arguments and then use `map-&gt;`"
714,1506019553.000236,Kareen,"yes but also note <@Rebeca>'s point, avoid creating named records just for the sake of it, use a map instead unless necessary"
714,1506019564.000522,Leann,I know; thanks
714,1506019586.000276,Aldo,"honestly unless you've got a specific reason (with data!) I wouldn't use records, just maps"
714,1506019599.000205,Sandy,and with maps you can use namespaced kws: {:attribute/key 42 :padding/left 33}
714,1506019611.000273,Leann,this is a very simple example outside of my application so that the issue would be clear; these records extend protocols and I need the polymorphism; (previously I was using maps and an awful lot of multimethods)
714,1506019693.000269,Sandy,that's the most flexible; and the cleanest approach. Multimethods are faster than most people expect.
714,1506020064.000229,Rebeca,"I dunno, I definitely prefer protocols, but if you have all dynamic fields, that is a map, not a record; but it is unlikely that you really have dynamic fields; you most likely have four or five sets of static fields that you are treating as the same thing for some reason"
714,1506021009.00011,Leann,"no, I don't, I have records whose particular fields I don't care about, but I care about what they implement and the type they have; the given solution works flawlessly; of course I could just use maps with a `:type` field, and then use multimethods: I was doing that before; not a fan of doing `defmethod` many times over 9 namespaces for defining how certain entities should behave"
714,1506021180.000267,Sandy,how does using protocols help with that?; you still have to define 9 protocol implementations
714,1506021207.000082,Leann,"the `defmethod` approach ignores the fact that the defmethods that dispatch on the same type, are actually describing the same entity; yes, I still do, but I find it is way cleaner and less error prone"
714,1506021299.000244,Sandy,"How so?

(defmethod my-method  :box
  [...])

Vs.

(extend-protocol IMyMethod
  Box
  (my-method [...])"
714,1506021333.000009,Leann,"i'm not using extend-protocol, rather the contrary: extend-type (which is what defrecord does)"
714,1506021372.00045,Sandy,they're both syntactic sugar over (extend...) so I still don't understand
714,1506021376.000088,Kareen,extend-protocol and extend-type are just synctactic sugar over extend
714,1506021382.000369,Sandy,:stuck_out_tongue:
714,1506021384.000343,Kareen,they're the same thing with different syntax; hah
714,1506021429.000142,Leann,"```
(defmethod method-a :box ...)
(defmethod method-b :box ...)
(defmethod method-c :box ...)
```

vs

```
(defrecord Box []
   WhateverProtocol
   (method-a [this] ...)
   (method-b [this] ...)
   (method-c [this] ...))
```; matter of taste but latter is more comfortable imo"
714,1506021440.00024,Kareen,i guess your pointn is that you like being able to group implementaiton for the same type together?; meh
714,1506021493.000043,Georgann,<https://en.wikipedia.org/wiki/Open/closed_principle>
714,1506021537.000562,Sandy,"using protocols with defrecord are not closed for modification (or at least not for extension).; I get the point, and I've felt the same way in the past (grouping things). But I've more often been hit by the limitations of type polymorphism. That's where multi methods help."
714,1506021621.000566,Leann,"what's the limitation? I'm very sure I will only dispatch on type; otherwise being equivalent (both can be extended afterwards, with more multimethods in one case and with extend-type in the other), I prefer this one in this case; also I get `satisfies?`; the multimethod approach gives me the equivalent of `instance?` by checking the value of `type`; to implement `satisfies?` I would need a dedicated multimethod"
714,1506021850.000033,Sandy,"The limitations come when you want to dispatch on two types at once, or perhaps two aspects of the same type"
714,1506021860.000281,Leann,"sure, I won't"
714,1506021860.000354,Margaret,<@Leann> there's also `get-method` and you can check if the method returned is equal to the default
714,1506021895.000638,Leann,"right <@Margaret>but these records may not extend any of the possible fns of the protocol, and still should be considered part of it"
714,1506021922.000325,Sandy,"I've just found myself coming full circle lately. Started with multimaps, moved to protocols because of some of the reasons you listed, and over time found them more trouble than they were worth."
714,1506021943.000416,Leann,that sounds very possible :stuck_out_tongue:
715,1506023138.000364,Berry,<@Elsy> <@Myles> <@Ferdinand>: I ended up using (.charAt ...) -- thanks for all the suggestions!
716,1506026798.000154,Ena,Hello; I wonder how different libraries dependencies are resolved. For example I use 2 libraries and they use different version of the same third one. I bugs me a little but not that much to explore myself :slightly_smiling_face:
716,1506027324.000417,Jodie,The algorithm it's a little complex. But the software that answers that question is a java library called maven/aether-resolver
716,1506027714.000134,Ena,thank you; Do you know if it's overwritable? like in project.clj
716,1506027932.000469,Daniell,"Yes, you can specify `:exclusions` on a dependency to prevent the third one being pulled in, then specify it as a dependency directly with the version you want.; ```[[lib-a ""1.2.3"" :exclusions [lib-c]]
 [lib-b ""4.5.6"" :exclusions [lib-c]]
 [lib-c ""2.2.2""]]```"
716,1506028062.00015,Ena,aha! thank you
716,1506028630.000145,Shira,"Also, I think any explicit dependencies you provide at a top level will override any transitive dependencies, so you don't _need_ the exclusions, but it does make things clearer, and prevents lein warnings"
717,1506029201.000312,Earlie,None
716,1506029329.000223,Guillermo,<@Earlie> use-case?
717,1506029368.000139,Earlie,<@Guillermo> Generated css class names
717,1506029500.000041,Guillermo,can you say more?
717,1506029568.000245,Earlie,"Yeah, sorry.
I'm using the hash of the styles to generate css class names.
The main issue is with server side rendering creating different class names.
Up to this point I thought they were equivalent, until I ran into integers not being consistent."
717,1506029761.000309,Guillermo,Are the styles a 1-level map?
717,1506029780.00045,Earlie,"Normally, but not always; They might be any immutable type.; Perhaps an md5 hash or something."
717,1506029834.000351,Guillermo,"well if it's not too complex, you may want to flatten the map and sort explicitly, then do some sort of securehash; flattening is harder when it's nested more than one level deep"
717,1506029877.000172,Earlie,"That may work.
The goal is really just to get a consistent unique name."
717,1506029912.000094,Guillermo,"clj/cljs 's hash is not secure, and you almost certainly will have collisions"
717,1506029938.000417,Margaret,clj and cljs would generate the same bytes from transit for equal data right? what about hashing the transit string?
717,1506029959.000142,Earlie,That's not a bad idea. ^
717,1506029964.000336,Guillermo,no <@Margaret>  -- transit does not have a canonical encoding
717,1506029970.000301,Aldo,do they generate the same bytes for an unordered map? that would be surprising
717,1506029971.000223,Margaret,"oh, that's too bad; <@Aldo> if that was the only difference you could just sort the map entries as part of the process, but yeah, good point"
717,1506030004.000073,Earlie,<@Guillermo> So far it seemed to not have any conflict issues. Though I haven't used it extensively. I'm just now realizing integers are different.
717,1506030006.000506,Guillermo,"you have to sort map's key-values, transit doesn't give you a hook into that (there's also caching)"
717,1506030018.000109,Ena,"yeah, that the easiest."
717,1506030025.000167,Earlie,Is pr-str consistent?
717,1506030036.000417,Aldo,I'd do as ghadi said. turn the data structure into nested vectors (where they're sorted in the case of a map) then sha1 it or whatever; pr-str is not consistent
717,1506030086.000271,Earlie,Even for basic data types?
717,1506030094.000522,Renata,How do you access `this` inside a `proxy` definition?
717,1506030114.000169,Guillermo,"when printing a map, ordering is not guaranteed"
717,1506030124.000285,Aldo,"```
(pr-str {:1 1 :2 2 :3 3})
=&gt; ""{:1 1, :2 2, :3 3}""
(pr-str (assoc {:3 3} :2 2 :1 1))
=&gt; ""{:3 3, :2 2, :1 1}""
```"
717,1506030127.000078,Earlie,"Ah; Thanks, <@Aldo>"
717,1506030150.000056,Margaret,"<@Renata> every method takes a this arg; oh - wait, it's automatically named 'this"
717,1506030209.000127,Kareen,yeah proxy is anaphoric
718,1506030211.000022,Kyung,"So, a discussion I’m having with <@Kaci> over in the <#C0PME9N9X|docker> channel has led to what I believe is a bug in tools.nrepl.  Is there someone here who can review what we’re seeing and confirm if a Jira ought to be opened?"
717,1506030215.000233,Aldo,I think you only need to xform+sort map and set and you're good though. particularly if you're just talking about css which is probably a small subset of types
718,1506030293.000171,Renata,<@Margaret> <@Kareen> thanks! :slightly_smiling_face:
718,1506030329.000402,Kaci,"<@Kyung> I tried it again last night and it does seem that you are right.  I haven’t fully verified yet, but it does seem if you don’t put “0.0.0.0” for :bind that you get a Socket failure on the nrepl"
717,1506030491.000172,Kyung,Good. I was pretty sure. I’ve got a repl in alpine linux right now and it’s easy to reproduce that unhandled exception by following what “start-server” does under the hood.
718,1506030493.00007,Kaci,"<@Kyung> It would be good for someone else to see same issue. We’re seeing it on DockerMac, so wonder if that is the issue as well, b/c DockerMac docs say there are a few issues surrounding network stuff…"
717,1506030529.000397,Kaci,"Yes, exactly what I ended up doing as well.; Even in my Luminus project, it did that; I have to pass in “0.0.0.0” as the nrepl :bind or it fails with that Socket exception every time; Thanks so much for the help yesterday too."
718,1506030800.000145,Kyung,np.
717,1506030867.000029,Ena,"how I wonder how to find out what libraries are used. I built uberjar and looked inside, that's kinda gross"
718,1506030892.000308,Ena,is there 'normal' way?
718,1506030979.00005,Daniell,`lein deps :tree`
717,1506031003.00024,Daniell,"(or `boot show -d`, if you're using Boot); Leiningen has a ""pedantic"" mode that makes sure you have no possible conflicting versions (and won't run if you do!).; Boot also has a ""pedantic"" mode that shows possible conflicts (but still runs). We have a small Boot task that throws an exception if it detects conflicts -- and we use that for all our builds!"
719,1506031283.000109,Rebeca,you should try adding -Djava.net.preferIPv4Stack=true to you java command line; some operating systems prefer to resolve localhost to ::1 instead of 127.0.0.1
719,1506031355.000013,Aldo,iirc ::1 is the ipv6 loopback address?
717,1506031364.000128,Rebeca,<http://dev.clojure.org/jira/browse/NREPL-83>
719,1506031367.000207,Rebeca,right
717,1506031569.000146,Kyung,It’s Alpine linux where (I believe) ipv6 is disabled by default. The description in NREPL-83 suggests it will try “::” first and then fall back to “localhost” but in this case the attempt to bind “::” throws an exception and the fallback never occurs. It’s easy to workaround but IMHO the feature is not behaving as advertised because of the unhandled exception.   Steps to reproduce are in this gist: <https://gist.github.com/gonewest818/ae5c5caf49380f81c5a2667408da6d4f>
719,1506031592.000317,Rebeca,open an issue then; you should check what version of nrepl you are running first though
717,1506031667.000448,Rebeca,"yeah, the nrepl change isn't in a released version yet"
719,1506031669.000161,Kyung,yep.   nrepl 0.2.13… the gist is very explicit
719,1506031712.000145,Rebeca,"oh, actually the nrepl readme is out of date; (it only mentions 0.2.12)"
719,1506031766.000311,Ena,ha! it does and it shows plenty of conflicts for me. bucket of worms
717,1506032140.000022,Daniell,"It can be really painful to get to zero conflicts -- but it's worth it for your sanity! And once you get there, it's easy to stay there even when adding new libraries."
717,1506032403.000344,Kyung,"Ok, well I’ve googled a bit and it appears the proper path for opening a bug is to ask in the Google group first, and confirm if the behavior is in fact considered a bug."
720,1506032435.000259,Bibi,"Hi All,

I've inherited some code that has some threads running a a service, distilled to essentially this:

```(def test-channel (chan 5))                                                                                                                                                 

(def running (atom true))

(thread
  (while @running
    (let [m (&lt;!! test-channel)
          x  (m :a)]
      (some-fn x)))

(defn stop-service []
  (close! test-channel)
  (reset! running nil))```"
717,1506032487.000012,Margaret,that's going to hit an npe when &lt;!! returns nil from a closed channel
717,1506032506.000309,Bibi,"Okay, trying to edit it so it looks like 'code'; hold on :slightly_smiling_face:"
717,1506032518.00034,Margaret,you can put '```' on each end
717,1506032536.000385,Kaci,I filed a PR last night on that
717,1506032544.000159,Bibi,"Thanks! And yes, there's an NPE; Which really only happens during testing, as that's about the only time the service is stopped as such.
However, there has to be a nicer idiom/pattern to doing this?"
717,1506032630.000087,Margaret,"yes ```(loop []
  (when-some [m (&lt;!! test-channel)]
    (m :a)
    (recur)))```"
717,1506032630.000352,Bibi,"It's not causing issues in production, but another error in the tests masked this NPE"
717,1506032640.000276,Margaret,then you don't need an atom - closing the channel stops the loop
717,1506032720.000169,Bibi,"Hmmm... yeah, I like that. I guess my code snippet doesn't exactly show the issue as in the 'let' expression there are more bindings based on the read from the channel"
717,1506032749.000279,Margaret,then put a let block inside `when-some`; since you don't want to do any of that if you got nil on the channel anyway
717,1506032856.000179,Bibi,"Makes sense, much cleaner. I'll try it out, thanks!"
717,1506033016.000065,Ena,lein deps :tree prints to stderr. surprise
717,1506033428.000013,Kyung,"btw, I just tried this and it doesn’t resolve the issue."
717,1506035462.000027,Bibi,"<@Margaret> Thanks for the clarity and help, took your suggestions and the code is *so* much better!"
721,1506038854.000073,Sandy,What are you trying to do? Arachne has a lib for consistent equality hashing; i.e. things that are equal in Clojure will have equal serialization hashings; let me look up the lib; <@Earlie> here we go <https://github.com/arachne-framework/valuehash>
721,1506040232.000093,Guillermo,"ahhhh I was searching for ObjectHash; i would like to have something like valuehash but for serialization; got any other bright ideas <@Sandy>?; i'm using a blockchain with a requirement that the state transition functions produce the same hashed output, and the output could be an arbitrary blob.  if you serialize JSON as the output of a function that runs on every blockchain node ('validator') they must all produce the same result -- so you have to sort json keys"
722,1506045534.000007,Kristen,Is there sqlite middleware for ring?
722,1506048645.000198,Daniell,"<@Kristen> Not sure what a database middleware would even look like for Ring. What would it do, generically?"
722,1506048984.00001,Kristen,"Wrap a handler such that the database is opened at the beginning and closed at the end.; On second thought, I am doing something weird.  I have a pipeline of request -&gt; request functions; At the end it turns into a response; I am trying to figure out how to get them all access to an opened sqlite database"
722,1506049174.000111,Daniell,"```(defn db-middleware
  [handler]
  (fn [req]
    (with-db-connection [db db-spec]
      (handler (assoc req :connection db)))))``` something like that?; That would open a connection on each request, add `:connection` to the request map, call the `handler`, and then close the connection as the response is returned."
722,1506049278.000095,Kristen,"That is what I am after, I am trying to follow earlier advice and not reinvent wheels.; But I think you wrote my code for me, may I use that?"
722,1506049327.000101,Daniell,"That's using `clojure.java.jdbc/with-db-connection` -- `org.clojure/java.jdbc ""0.7.1""` and you'll need the dependency for SQLite as well."
722,1506049341.000034,Kristen,yup
722,1506049363.000047,Daniell,"`org.xerial/sqlite-jdbc ""3.20.0""` looks like the latest."
722,1506049440.000116,Kristen,How much practise does it take to find things like that quickly?
722,1506049449.000047,Daniell,"The `db-spec` would be `{:dbtype ""sqlite"" :dbname ""whatever""}`.; <https://github.com/clojure/java.jdbc> -- it's a Contrib library, and the README links to all of that.; (disclaimer: I maintain that library so I'm more familiar than most :slightly_smiling_face: )"
722,1506049535.0001,Kristen,Ah
722,1506049564.000052,Daniell,"But the readme links to the community docs (<http://clojure-docs.org|clojure-docs.org> -- under Ecosystem &amp; Tools) and to all the database drivers on Maven Central.; Out of curiosity, which Clojure books have you picked up so far?"
722,1506049701.000099,Kristen,Learning everything from online sources
722,1506049763.000062,Daniell,Clojure Cookbook is a good way to jump start a lot of this.
722,1506049792.000108,Kristen,Side note:  fn is the Clojure equivalent of lambda?
722,1506049834.00003,Daniell,"All the code is available here <https://github.com/clojure-cookbook/clojure-cookbook> if you want to look at how a bunch of things are often done in Clojure; Yes, `fn` is for an anonymous function."
722,1506050173.000251,Kristen,"Thank you, you have been outstandingly helpful"
722,1506050206.000029,Daniell,"I'm always happy to help folks be successful with Clojure!; I first picked it up in 2010 -- Amit Rathore (author of Clojure in Action) was offering a one day intro to Clojure workshop near me for $200 on a Saturday. Best $200 I ever spent! Introduced it to work some time later, and I've been doing Clojure in production since 2011. Happiest I've ever been as a developer."
723,1506065287.000139,Jacqui,what monitoring tool do you use to monitor kafka ?
723,1506066039.000291,Gladys,"```
(defn start-async-consumers
  ""Start num-consumers threads that will consume work
  from the in-chan and put the results into the out-chan.""
  [num-consumers]
  (dotimes [_ num-consumers]
    (async/thread
      (while true
        (let [line (async/&lt;!! in-chan)
              data (process line)]
          (async/&gt;!! out-chan data))))))
```

Is better way to start N workers for the time of work? Something like `pipeline-async`?; like i want to create N consumers to update DB (no out to channel, out is DB)"
723,1506066399.000143,Noella,We send Kafkas built-in metrics to Graphite and use Grafana for dashboards
724,1506072334.000246,Johana,Is there a way to discover unused functions in a clojure codebase?
723,1506072509.000449,Efrain,<https://gist.github.com/joelittlejohn/4729776>
724,1506072526.000109,Efrain,"not perfect, but simple and extendable"
723,1506073307.000271,Shira,"Cursive has inspections for unused functions; I thought there was something for Cider, but I can’t find it now; and there’s <https://github.com/venantius/yagni>"
725,1506077882.000091,Kenia,"hey guys, if I publish a library to Clojars with GPG signature can someone else (collaborator/second owner) also publish it?"
725,1506078701.000005,Shameka,"<@Kenia> if you are publishing to a group, then you can add other users to the group and then they will also be able to publish to the group; <@Kenia> by group i mean you have an entity id like ""foo-group/bar-library""; then you will be able to add users to `foo-group`"
725,1506078811.000121,Kenia,<@Shameka> oh that is great to hear !! yes we do. thanks a lot for your help; I was already considering whether having a GPG key per group was a thing :confused:
726,1506083551.000153,Merri,<@Gladys> How about using futures or something like claypoole? I find that sometimes those will fit my needs better than core.async.
726,1506083610.000145,Gladys,"didn’t try claypoole, so i don’t know :slightly_smiling_face:; i moved discussion to <#C05423W6H|core-async>  so we will see"
727,1506084154.000387,Hildegard,"Hi there, can someone explain to me why this :point_down: doesn't work?
 ```#{{:id (UUID/randomUUID)}
  {:id (UUID/randomUUID)}}```
while this :point_down: works just fine 
```(set {:id (UUID/randomUUID)}
            {:id (UUID/randomUUID)})```
This seems pretty strange to me :see_no_evil:"
727,1506084207.000239,Margaret,"#{} enforces uniqueness at read time, before the UUIDs are generated; since it's a reader construct"
727,1506084495.000381,Kareen,"<@Hildegard>what would `(read-string ""#{{:id (UUID/randomUUID)} {:id (UUID/randomUUID)}}"")` return?"
727,1506084683.000023,Hildegard,It returns me ```#{{:id (UUID/randomUUID)} {:id (UUID/randommUUID)}}``` :thinking_face:
727,1506084712.000375,Kareen,yeah because i made a typo :); fixed now
727,1506084843.000341,Hildegard,"Yeah, I didn't saw it either :joy:. now it returns the as the first experiment: ```java.lang.IllegalArgumentException: Duplicate key: {:id (UUID/randomUUID)}```"
727,1506084891.000084,Kareen,and isn't that what you'd expect?
728,1506085276.000352,Lucio,Hello! What would be the cleanest way to take every other item in a sequence? e.g. `[1 2 3 4 5] -&gt; [1 3 5]`
727,1506085322.000404,Hildegard,~`(filter odd? [1 2 3 4 5])`~
727,1506085323.000142,Lucio,"I thought about zipping with a range a filtering on even (or odd), but I wonder if there is a shorter way; <@Hildegard> the sequence was just an example; I want it to work on any abitrary sequence"
727,1506085347.000485,Margaret,~`(map first (partition-all 2 s))`~
727,1506085356.00008,Kareen,"<@Lucio> `take-nth`; ```user=&gt; (take-nth 2 [1 2 3 4 5])
(1 3 5)
```"
727,1506085396.000139,Lucio,Thanks <@Kareen> <@Margaret>!
729,1506089647.000071,Detra,"I'm *occasionally* getting ""No namespace: twou.centralpark.async"".  Cleaning and rebuilding the code fixes it for maybe a few iterations. `clojure.tools.namespace.repl/refresh` does not complain about any cycles in namespaces.; The source file's namespace declaration looks correct.; I think this happened when upgrading to the last alpha of clojure.; I'm out of leads, any ideas?; Both the calling namespace (according to the stack trace) and the `twou.centralpark.async` namespace require `clojure.core.async :as async :refer [some-thing]`."
730,1506093601.000401,Jayne,"is there something similar to Promise.all in clojure ?
<https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all>"
729,1506094131.000788,Etsuko,"<@Detra> I experienced that sometimes, too, when I do a `lein uberjar` and then start a repl. Somehow the class loader gets confused. Like you say, a clean and a restart of the repl helps."
730,1506094997.000488,Merri,"<@Jayne> You might be able to get similar behavior out of core.async `merge`: ```
(let [c1 (async/chan 2)
      c2 (async/chan 2)
      c3 (async/merge [c1 c2])]

  (async/go
    (loop []
      (if-let [v (async/&lt;! c3)]
        (do (println v)
            (recur))
        (println ""Channels closed""))))

  (async/put! c1 1)
  (async/put! c2 2)

  (async/close! c1)
  (async/close! c2))```"
731,1506095787.000183,Mia,"anyone know why when starting my app with `lein run` I am getting dozens, maybe hundreds of java processes spinning up?; this seemed to have started ever since iTerm shut down when my app was still running; I’ve reinstalled leiningen and java; and still happens; and there are tons more of those same processes"
730,1506095953.000688,Jayne,<@Merri> <@Etsuko> Thanks
731,1506095961.000183,Jayne,both sinppets are useful
731,1506096724.000513,Myles,"<@Mia> maybe I'm missing something, but why would you expect there would be dozens or hundreds of processes?"
732,1506096829.000494,Johana,Thanks all.
731,1506096850.000338,Mia,"I wouldn’t expect there to be, but there are; I have no idea why they’re starting; ah, I see. typo"
732,1506096915.000657,Detra,"<@Etsuko> I wonder if there's a way to troubleshoot this, like looking in the `target/` directory?"
731,1506096927.000692,Detra,"Next time it happens, I'll see what I can figure out."
732,1506096962.00023,Detra,(I had a problem like this once that had to do with a case-insensitive filesystem and functions - turned into .class files - that had names which only differed by case.  But that doesn't seem to be the problem here.)
732,1506097011.000123,Etsuko,It would be interesting to know what is going on there and take precautions to prevent it. But I'm too much of a newb and short on time to debug that unfortunately.
731,1506097052.000122,Margaret,<@Mia> are you using core.async? are you using an http server that uses a thread pool?
731,1506097064.000384,Mia,using immutant
731,1506097066.000467,Margaret,"sometimes a process manager gets confused and shows all your threads as if they were seperate processes; yes, I'd expect immutant to start a large number of threads"
732,1506097077.000365,Renata,"I’m looking to “unfurl” some datastructure going deeper into it while maintaining some context from the wrapping maps… anyone some clever ideas how to approach this?
```
  ;; Turn this
  [{:id 1
    :todos [{:id 2
             :name ""xx""
             :people [{:id 4
                       :name ""Martin""}
                      {:id 5
                       :name ""Amy""}]}]}]

  ;; Into this
  [{:project-id 1
    :todo-id 2
    :id 4
    :name ""Martin""}
   {:project-id 1
    :todo-id 2
    :id 5
    :name ""Martin""}]
```"
731,1506097082.00021,Mia,"nah, it’s bringing my computer to a halt; this is new, though; ‘new’ as in, it just started happening"
731,1506097122.000247,Margaret,"<@Mia> when it's doing that, hit `Control-\` to make it show all stack traces, then upload it so we can see it; or if you prefer, run jstack with the pid of the process (same output)"
731,1506097262.00023,Mia,even running `lein ancient` starts up a ton of java processes
731,1506097303.000357,Myles,what if you just run `lein`; any new lein plugins or anything?
731,1506097395.000342,Margaret,"<@Mia> you can execute the c-\ shortcut or jstack to see what it's doing, even when it's just lein running, the stack traces will show what code is actaully doing it"
731,1506097448.000662,Mia,let me check; sorry I’m slow. I have to reboot when these processes start up since it brings my computer to a halt. And I have to quickly uninstall leiningen and java before “too many open files in system”
731,1506097498.000453,Margaret,(of course with that many threads it will be a lot of output)
731,1506097586.000317,Mia,"<@Myles> yup, just `lein` does the same thing; although, let me try outside of my project; it’s OK if I’m outside of my project; let me try from within a barebones project; OK in new project; this looks odd `501 19553   402   0 10:37AM ??         0:00.01 /bin/bash /usr/local/bin/lein run .git`; maybe not; might have been line cutoff"
731,1506099636.000198,Gladys,"i want run N threads and in main thread i want wait until they done, how?"
731,1506099669.000121,Aldo,<@Gladys> there are hundreds of ways to do that
731,1506099692.000727,Merri,<@Gladys> Look at my `merge` example above. Another good alternative is `pipeline` (blocking if you're going to do IO)
731,1506099732.000146,Gladys,this is for very long I/O operations where input came part by part and output is send part by part. And whole process is running on multi sources.
731,1506099760.000159,Aldo,"ya, like jstew I'm a fan of pipeline-blocking for parallelising io"
731,1506099830.000292,Gladys,"but there is not transducer, because in each thread i run function to read source part by part and i can’t read next part until i read current part; so i think i can’t use pipeline-blocking here; and *the main problem* is i have to wait until all threads are finish to run next similar operation, because next one is depend on previous; so i have to know when all threads finish; that is the issue which i don’t know how to solve in this context"
731,1506100034.000192,Aldo,"```
(let [out-chan (chan num-threads)]
  (pipeline-blocking num-threads out-chan (comp (map long-running-fn) (filter (constantly false))) (to-chan (range num-threads)))
  (&lt;!! out-chan))
```; out-chan will not be closed until a long-running-fn has run for each of the integers in (range num-threads) with p//ism num-threads, so &lt;!! wil block until that has finished"
731,1506100173.000307,Merri,I think you can still use pipeline-blocking since your transducer can run all of those steps composed as a single fn. I would be curious about throughput though. Seems to me like it should be about the same.
731,1506100244.000109,Gladys,"but it is not like that, i don’t have `long-running-fn`. Ok i have to explain it more:
1) first issue is i have multi sources of data and i have to read from each one part by part. That one is easy.
2) next issue i have to use output of 1) to output this data in new place part by part
3) when this process is finish i have to do 1) 2) but for another source of data. And that is the issue. Because even when channels are close still something can send output.; PS the source of data is very big, so also i have to put to channel part by part; ech i will paste my code here to better understand; <https://pastebin.com/CgBp1i0x>; but maybe i am blind to solve that in different way; `(archai/fetch-epoch #(&gt;!! in-elastic %))` and that one `&gt;!! in-elastic` on every incoming part of data"
731,1506100524.000372,Aldo,which are the long running functions here?; archai-&gt;push and fetch-epoch?
731,1506100559.000048,Gladys,"yes, both; but what important; `(archai/fetch-epoch #(&gt;!! in-elastic %))` do`&gt;!!` multiple times; just inside that function i download source part by part (no other way); and that is fine i run it parallel and it work. But i need to know when it finish and this is what i don’t know how to solve; i can do (atom) and inc/dec… but it looks so bad; the easiest way will be to know when all:
```
(thread
                        (try
                          (elastic/archai-&gt;push input)
                          (catch Throwable ex
                            (l/error ex))))
```

finish"
731,1506100781.000468,Margaret,"each call to thread returns a channel, if you can collect them and wait on all of them"
731,1506100815.000259,Aldo,sounds like you want pipeline-astync
731,1506100818.000294,Gladys,"but if i will wait on them i will be blocked by limited numbers of `go`, so i don’t wait; <@Harry> first solution based on that, but it doesn’t help. Still i can’t determine when output finished processing; `pipeline-async` stop blocking as soon as input channel is closed; output channel can be still processing"
731,1506100916.000148,Aldo,yeah you need to have a finish channel for the thing consuming the output of that
731,1506100917.000404,Margaret,"<@Gladys> why would you be blocked? waiting on a channel parks, you can wait on all the channels from the thread calls, when there are no more you know you are done; if needed, you can put the channel returned by the thread call onto another channel, to park in another context"
731,1506100960.000223,Mia,<@Margaret> <@Myles> thanks for the help. a new `git checkout` seems to have fixed it ¯\_(ツ)_/¯
731,1506100960.00028,Gladys,"<@Margaret> i don’t see it, do you have some example?; i mean i don’t see how it helps; and how not blocking by limit of `go` numbers"
731,1506101009.000463,Margaret,"if the threads have all returned, then you can read from on their channels; if you use `&lt;!` to read the result, this parks and doesn't block the go block"
731,1506101039.000592,Merri,remember that `thread` returns a channel. You know that the thread is finished by waiting for the channel.
731,1506101060.000259,Gladys,"i know, but still i don’t see how it helps; in that context; no way to start threads with some names and check if threads with this names exists?"
731,1506101255.000285,Margaret,"no, but you can put all the channels returned by thread calls onto another channel, perhaps called ""pending"""
731,1506101262.000156,Gladys,"```
(go-loop []
                  (let [input (&lt;! in-elastic)]
                    (when-not (nil? input)
                      (thread
                        (try
                          (elastic/archai-&gt;push input)
                          (catch Throwable ex
                            (l/error ex))))
                      (recur))))
```

so step by step, if i will add `&lt;!!` here with thread it will be running only 1 at a time, if i will run multiples workers in go block i will be blocked by limited numbers of go block"
731,1506101274.000334,Margaret,"when every channel you read off of pending has been read from, you know all the threads you started are done"
731,1506101298.000302,Gladys,ok let me think about that once again
731,1506101310.000352,Aldo,"<@Gladys> here is what I would do
```
(defn archai-&gt;elastic-refresh []
  (let [epochs (archai/generate-epochs epochs-from-now)
        in-elastic (chan 100)
        finished-chan (chan)]

    (pipeline-async
      10
      in-elastic
      (fn [epoch out-chan] (thread (archai/fetch-epoch #(&gt;!! out-chan %)) (close! out-chan)))
      (to-chan epochs))

    (pipeline-blocking
      10
      finished-chan
      (comp
        (map
          (fn [input]
            (try
              (elastic/archai-&gt;push input)
              (catch Throwable ex
                (l/error ex)))))
        (filter (constantly false)))
      in-elastic)
    
    (&lt;!! finished-chan))
```"
731,1506101330.00055,Merri,"I think merge covers that use case nicely, <@Margaret>. You can merge all your chans into one uber-chan."
731,1506101332.0002,Aldo,10 being the number of threads you want
731,1506101358.000479,Gladys,how would it help here?
731,1506101422.000539,Aldo,I'm assuming you wanted to vary the amount of threads between the input and the output functions. if that's not necessary I'd just make it one big pipeline-blocking xf
731,1506101442.000081,Myles,lmao. computers are very good
731,1506101490.000064,Merri,If you're starting n workers. `(merge (map #(worker-fn..) (range n)))`; then later on `&lt;!!` from the chan that merge returns.
731,1506101623.000458,Gladys,"it wouldn’t work in that way, because `out-chan` has place for only 1 `&gt;!!` but `(archai/fetch-epoch` how to `&gt;!!` many times part by part; but…. i know how to solve it, so thinking forward how to combine your example"
731,1506101665.000544,Merri,"Good deal, glad I could help a little."
731,1506101859.000372,Gladys,hmm how it works about memory consuming? if for example 1 &lt;!! takes 100 MB and it is returned by (map) will it be free after read from channel or after whole map end? Another problem is i can’t run it in that way because i know how to get next part of data only after get previous part of data…
733,1506102317.000253,Mia,spoke too soon :disappointed:
734,1506103256.000312,Mia,```; <@Margaret> is this what you’re asking for with `Ctrl-\`?
734,1506103525.000288,Aldo,out-chan does not only have a place for 1
734,1506103590.000495,Margaret,yes - that should have enough info in it to see where things are going wrong; (checking it out now)
734,1506103622.000706,Aldo,oh wait it does; that's interesting
734,1506103686.000466,Margaret,the stack that looks suspicious to me there is environ; it's in the middle of trying to read things from your environment variables - if you dump the output again is it still doing that? what happens if you disable environ?
734,1506103784.000065,Aldo,"the documentation for pipeline-async indicates af could put more than one result onto the channel it has passed in, but my reading of the code is that's not actually possible"
734,1506103830.000078,Mia,let me check
734,1506104100.000494,Aldo,*hmm*
735,1506104830.000143,Mia,"nope, still happening"
736,1506105510.00031,Aldo,<@Gladys> so long as you `close!` the channel as the last operation in af it works
736,1506105556.000449,Gladys,"yeah, still trying figure out how to write that whole code"
736,1506106526.000014,Caroyln,"Can someone explain `any?` to me? `not-any?`, which has been around since the beginning, takes a predicate and a collection and checks that no element in the collection satisfies the predicate... And then 1.9 adds `any?` which takes a single argument and just returns `true`."
736,1506106580.000483,Aldo,<@Caroyln> it was added to make defining specs that accept any value easy
736,1506106615.000271,Caroyln,but
736,1506106648.00064,Noella,<@Caroyln> <https://groups.google.com/forum/#!searchin/clojure/not-any%7Csort:relevance/clojure/f25y6N1OiIo/5Gq70PV1CAAJ>
736,1506106654.000199,Caroyln,this feels PHPesque in how not cohesive the naming is
736,1506106660.000017,Noella,grab a bowl of popcorn and have at it; <https://groups.google.com/forum/#!searchin/clojure/not-any%7Csort:relevance/clojure/2l2f1jKExUc/NMulyVQiBAAJ>
736,1506106684.000225,Aldo,yeah it's not perfectly consistent with the naming of other core functions. lots of things aren't though; `not-any?` probably should've been called `none` to match `some` originally but it's done now and personally I don't think it's that important
736,1506106914.00006,Caroyln,I guess... thanks
736,1506106988.000283,Margaret,naming is hard. I bet we could eliminate 35% of beginner problems if for and map were renamed to lazy-for and lazy-map
736,1506107007.000237,Sandy,"somehow I really doubt that :stuck_out_tongue:; then people would say ""why isn't filter lazy?"""
736,1506107024.00017,Aldo,I would assume `lazy-map` creates a map where each value is a thunk :stuck_out_tongue:; just to spite you
736,1506107042.000267,Margaret,haha
736,1506107327.000327,Sandy,"People complain about laziness in Clojure being a stumbling block for new users, yet somehow these sort of things exist in every language. 

For example:

```
def create_multipliers():
    return [lambda x : i * x for i in range(5)]

for multiplier in create_multipliers():
    print multiplier(2)
```

Prints a list of 8, because closures are mutable."
736,1506107983.000149,Aldo,<@Gladys> in hindsight I think `pipeline` is a bad fit for the first set of producer threads. as you don't care about the order of the chunks but it guarantees them; I think for that first set of threads I'd manually create a thread for each producer and manually create a channel for each producer and then `merge` them and use as the input for the `pipeline-blocking` call
736,1506108222.000323,Mia,"It’ll even happen if I’m not running the app. Everything is fine `ps -ef | grep lein` returns no results (other than the grep). I will reinstall java with `brew cask install java`. After it’s done, still everything is OK. I can `grep` many times over minutes and it’s gtg. As soon as I `cd` into the project directory, :boom:, those java processes start kicking off. I don’t even have to `cd` into it. If I have an iTerm tab open to that directory, a just hit ‘enter’, the processes start up."
737,1506108297.000195,Margaret,that's super weird
737,1506108780.000153,Mia,I feel like I’m taking crazy pills
738,1506109620.000016,Ava,"I agree with the general sentiment, but this specific example is because the closure isn't doing what the user might expect. The `i` is a reference which is what is getting closed over, not the value of `i`. Because the list-comp is realized immediately, the reference is always to the last value (4). I don't think this is an issue of laziness as much as python's comprehensions not closing over what is expected (a value instead of a reference). I think an example with generators or generator expressions would be more apt, in part because I see python newbies baffled by those all the time."
738,1506110977.00016,Charlie,"what's the standard way to run a clojure product in production? is it to lein run or make a java jar and run it? Also, my main only calls an infinite go-loop. works fine when i run it from repl but lein run and java -jar uberjar file both seem to not keep an open process. Wondering if anyone can advise on this."
738,1506111050.000287,Margaret,"<@Charlie> for keeping your main running, you can just call `@(promise)` at the bottom of your main; running lein in production is possible, but best avoided - it's a build tool"
738,1506111216.00043,Charlie,so i added @(promise) at the bottom of my main but it seems like lein uberjar never finishes now
738,1506111283.000174,Margaret,you need to explicitly exit somehow
738,1506111309.000125,Charlie,like ctrl+c or do you mean something else?
738,1506111321.000429,Margaret,"with core.async running, your system can't really guess your intention - you can bind the promise, then deliver to it when you want to exit; or you can use `(System/exit 0)`"
738,1506111351.000033,Guillermo,Are you putting it in your main function or main ns?
738,1506111366.000531,Charlie,main ns
738,1506111380.000195,Margaret,"or you can put a channel read like `(&lt;!! exit-chan)` at the bottom of -main and then write to exit-chan later...; oh, I meant the -main function, not at the top level of the ns"
738,1506111396.000211,Guillermo,You want them in your main function ^
738,1506111408.000482,Margaret,"yeah, I should have been less ambiguous"
738,1506111571.000098,Charlie,"I think that is working much better. I'm not a java guy, is supervisord usually used to run a long running java process?"
738,1506111614.000195,Margaret,"that's one option, I've had good luck with jsvc and I made a small shim lib to simplify using it (it's still alpha quality though); some people prefer using the native daemon running script for their os/distro and have that call java with the right args"
738,1506111714.000036,Charlie,this isn't super critical so i'll probably just stick with what i know. Thanks for the help :pray:
738,1506111787.000379,Sandy,"I agree, it's not a laziness thing. My point was, every language has those parts that don't make sense unless a user reads the docs"
739,1506114419.000181,Gladys,"```
(doseq [epoch epochs]
        (&lt;!! (thread (Thread/sleep 3000)
                     (+ 1 1)))
        (println ""bar"" epoch)))
```
How can i run it parallel? `doseq` doing this one by one. `pmap` doing only few at time, but i want run all of them at once and wait until finish"
739,1506114491.000278,Sandy,"<@Gladys> create all the `thread`s at once, and then call `&lt;!!` inside your doseq; but be careful of laziness, so something like:

(doseq [c (mapv create-thread epochs)]
   (&lt;!! c)); `mapv` is eager so it'll create all the threads at once, then wait for the results one at a time"
739,1506114744.000296,Gladys,"thx, it inspired me to do something"
740,1506115422.000063,Necole,"Any hugsql users? I'm getting `Parameter Mismatch: :email parameter data not found.`. I'm passing in `{:email ""<mailto:test@test.com|test@test.com>""}` and when i run it through the sqlvec function it looks good."
741,1506117912.000118,Gladys,"How to wait until channel (async) is closed and empty?; hmm ok i think i have some idea, but not sure :slightly_smiling_face:"
741,1506118187.000228,Aldo,"<@Gladys> channels are only really meant for putting and taking, closed is a special case of taking. so trying to use the closed/empty states as a way to convey some extra out of band information to for instance another thread would be a bit of an antipattern"
741,1506118959.000274,Gladys,"<@Aldo> <@Merri> <@Margaret> <@Sandy> thx for help, i didn’t solve my main issue today, but i am much closer. But now is time to sleep :slightly_smiling_face:"
742,1506126742.00009,Vernon,"Hello everyone, cascalog looks very nice,you can use it to query/update etc a relational database throw jdbc taps?"
743,1506147149.000034,Ena,let's say i have a collection of elements in map and I'l like that mutable and I'ld like to change one element. How do I do that?; clojurewise
743,1506159274.000045,Lucio,"<@Ena> could you give an example? I am not exactly sure what you mean. If you are talking about update the value under a key in a map, check functions like `assoc`"
744,1506164403.000141,Berry,"<https://clojuredocs.org/clojure.core/defmulti> &lt;-- is defmulti dispatch function not allowed to return "":default"" ?"
744,1506167574.000113,Fe,<@Berry> I don't think so
745,1506167592.000098,Darcel,"hey folks, I'm encouraged a friend who is a python dev to learn clojure. what book do you recommend for a python dev to learn clojure ?"
745,1506168109.00016,Fe,"I like <http://shop.oreilly.com/product/0636920013754.do>; Coming from Python, it hit the sweet spot for me"
745,1506168530.000124,Darcel,thanks man
746,1506174405.000045,Merri,If your friend is a web dev Web Development With Clojure is good. My first Clojure book was Clojure Programming.
745,1506175205.000111,Darcel,cool
747,1506186222.000025,Debroah,Hello. Is there a way to go from output of `clojure.tools.reader/read` (called all till EOF I mean) back to Clojure source file?
747,1506191020.00004,Jodie,<@Debroah> rewrite-clj can do this; (but it provides the read function)
747,1506191077.000058,Debroah,"thanks <@Jodie> . I've just had a look at it; In fact, `clojure.tools.reader` itself doesn't perserve exact shape of code read. E.g. `::foo` might become `:current-ns/foo`"
747,1506191388.000049,Jodie,<@Debroah> rewrite-clj fixes that
747,1506191576.000024,Debroah,"<@Jodie> ah cool, thanks; Is there a way to insert into a vector, e.g. having `[1 2 3]` and `42` get `[1 42 2 3]`? :slightly_smiling_face:"
748,1506200574.000035,Jerold,"Is anyone here familiar with core.cache? I'm trying to determine whether I have a use case for it, but I suspect the maps I'm working with are far too small. For example, microbenchmarks show `memoize` _decreases_ performance by ~10%. Are there any guidelines other than comparing the size of your data to L1 + L2 cache?"
747,1506202319.000034,Georgann,<@Debroah> Why would `42` go into the 2nd spot in the result?
747,1506202340.000053,Debroah,<@Georgann> just an example
747,1506202351.000075,Georgann,Or are you looking to define a function that lets you specify where it should go?
747,1506202441.000049,Debroah,I'm looking to insert a particular element to particular position of a vector. In this case 2nd (position 1).
747,1506202606.00003,Georgann,"Gotcha. With clojure, you'd probably construct a new vector with the element added in the correct position. Something like

```
(defn insert-at [v item pos]
  (concat
   (subvec v 0 pos)
   [item]
   (subvec v pos)))
```"
747,1506202639.000029,Debroah,"<@Georgann> yes, thanks. Only there's a problem <https://stuartsierra.com/2015/04/26/clojure-donts-concat>"
747,1506202735.000067,Georgann,I don't think that applies in this case. `n` is only ever 3.
747,1506202755.000033,Debroah,ok. got it
749,1506210518.000017,Sandy,"<@Jerold> memoize implies a hashmap lookup on with the key being a seq of the arguments to the function. This adds a fair amount of overhead.; Probably has little to do with cache lines, and more to do with inlining and memory allocations"
749,1506210628.000044,Jerold,"Makes sense. I was testing it on a function that performs a heavy amount of insertion. My use case doesn't do a whole lot of lookup and when it does I've found Nathan Marz's Specter library to be very useful.; I did try inlining some of the small functions on the lookup side, but it didn't make much of a difference and in some cases slowed things down.; Btw, <@Sandy> this is the library I stole a bunch of your core.async code to use for source transformation. I'm not focusing on that part right now, but am hoping to ask you some questions about it when I do as I definitely don't fully understand how it works."
750,1506212416.000069,Evan,"```boot.user=&gt; (assoc [1 2 3] 1 42)
[1 42 3]``` this also works"
749,1506213071.000006,Sandy,"<@Jerold> sure, feel free to ping me here, or even in a pm when the time comes"
749,1506213262.000013,Jerold,"Thanks! It's quite ironic actually, the numeric part I'm optimizing now I assumed I would be able to swap out for a library yet none come close to meeting my needs, whereas the complicated control flow analysis and source transformation already existed."
751,1506224741.000074,Jacob,"can any-one explain how the following would be converted to clojure, including the import. ```ArangoDB arangoDB = new ArangoDB.Builder().host(""192.168.182.50"", 8888).build();```; ArangoDB is a class
Builder is a static class inside ArandoDB, Builder calls super()
host is a method on Builder
build() is method of the ArangoDB class"
752,1506228911.00003,Bibi,Should you use a 'new' on the static builder like that?
751,1506228952.000017,Sandy,"<@Jacob> inner classes don't really exist on the JVM, they're simply naming sugar. So You'd want to import ArandoDB$Builder"
752,1506228959.000037,Sandy,"and yeah, the `new` doesn't look right"
751,1506239263.00005,Jacob,"<@Bibi> <@Sandy> - the code is directly from the git hub page for the project <https://github.com/arangodb/arangodb-java-driver> (i think they used `maxConnections(...)` instead of `host(...)` but same difference.; well
```(.build (-&gt; (new ArangoDB$Builder) 
            (.host ""127.0.0.1"" 8888)))```
 seems to work (at least it returns `#object[com.arangodb.ArangoDB 0x703a3035 ""com.arangodb.ArangoDB@703a3035""]` which is something :smile:"
751,1506256199.00001,Janelle,<@Jacob> What do you think of ArandoDB? I hadn't heard of it.
751,1506256482.000042,Jacob,"<@Janelle> It seems nice - havn't used it enough to be critical, but I have the impression that most people that use it are satisfied (obviously not clojurians by state of the libs)... Trying to decide if I should write a wrapper around the java lib or just write a new one? The most popular clojrue lib <https://github.com/Lepetere/clarango> looks dead (hasn't been touched in 2 years - and looks like version 3.0+ of the db breaks it); I've come unstuck again with these nested classes. If anyone has any hints feel free <https://stackoverflow.com/questions/46390544/clojure-importing-nested-classes>"
753,1506263436.000003,Mallory,"Hi guys; what is the best practice for naming methods which handle different types, ax example: i have two namespaces A and B both should has method foo but each will handle different data structure, so it's the best to use them as A/foo B/foo or write multimethod which handle them ?; i'm asking about best practice in FP in general"
753,1506265375.000115,Rosa,"<@Mallory> go multimethods, it'll be much cleaner and readable a month later :wink:"
753,1506269200.000034,Torie,"<@Mallory> don't use multimethods unless you really need to, they have runtime performance implications, they are not composable and they are less readable than plain functions. IMO multimethods are worth it when you need runtime polymorphic dispatch which is open. by open I mean that you expect consumers/callers of your code to potentially extend the hierarchy by defining their own implementation. From what you wrote it does not seem to be the case. Why not renaming your functions to `A/foo-with-ds-a` and `B/foo-with-ds-b` if you want to be explicit, or don't rename them and implement runtime assert/spec to warn caller about wrong data structure passed?"
753,1506269220.000019,Jodie,"<@Mallory> Generally, I namespace all functions I use. I'm presuming that the different data structures they handle are indicated (even partially) by their namespace, in which case I would go with A/foo or B/foo every time. It's not often that I `:refer` something."
754,1506269373.000028,Torie,"and one last note, if you needed to do one umbrella function which does the dispatch, you can write it as plain clojure function, say X/universal-foo, which has one huge `cond` to dispatch to individual namespaces based on data structure passed, this would be like multimethod, but closed (and without unneeded overhead)."
755,1506279894.000079,Debroah,"Hello. Is a list of all Clojure reserved words (like `ns`, `def`, `defn`, `if`) etc available somewhere?; UPD: found something here: <https://github.com/vim-scripts/VimClojure/blob/master/syntax/clojure.vim#L31>"
755,1506280169.000068,Lucio,<https://clojure.org/reference/special_forms> maybe <@Debroah> ?
755,1506280211.000049,Debroah,"thanks<@Lucio>. I tried this one, but it's incomplete; huh, that's really quite a bit: <http://dpaste.com/0P9XQEW> :smile:"
756,1506282111.000098,Bibi,"Not really ""reserved"" words, though, as they're mostly names in name spaces.; I think the special forms are more complete than you think :slightly_smiling_face:; But I don't completely grok the reader stuff yet, so I may well be wrong."
755,1506282731.000091,Debroah,Is Clojure macroexpansion performed depth-first or breadth-first? Is it possible to change that?
755,1506282871.000017,Torie,"<@Debroah> ""outer"" macro is expanded first and its result is expanded further until there is no further expansion detected"
755,1506282894.000057,Debroah,"<@Torie> got it, thanks!"
756,1506282899.000069,Sonny,and there is no recursion there - the top macro will receive the unevaluated forms; so it’s neither breadth nor depth first as far as I would say
755,1506282992.000037,Debroah,"aha, got it. ty <@Sonny>"
756,1506283016.000093,Sonny,"technically, there aren’t really any reserved words other than “true”, “false”, and “nil” - those are the only special symbols read explicitly in the reader; almost everything else is a namespace or var name (that you can shadow and use yourself)."
755,1506283077.000052,Torie,"<@Debroah> I believe you can write your own macro-expanding for code you receive in macro as input, this way you can reverse the outer-inner order. This is what I did: <https://github.com/binaryage/cljs-oops/blob/master/src/lib/oops/compiler.clj#L21-L36>"
756,1506283126.000029,Sonny,"there are some special forms that the compiler understands, as defined in <https://clojure.org/reference/special_forms>. Everything else (and even some of those) are just vars declared in clojure.core namespace"
756,1506283136.000027,Torie,"it is cljs-related, but the idea should be similar, you can ""force"" macro expansion on your input if you really need"
756,1506283174.000129,Sonny,there are some custom macro expanders out there like <https://github.com/ztellman/riddley>
755,1506283196.000026,Debroah,"<@Torie> huh great. Btw, it all ends up to use prewalk/postwalk (though it's not a recursion)"
756,1506283222.000119,Debroah,"In fact, I'm trying to rewrite the code in such a way that I'll touch only functions"
755,1506283276.00012,Debroah,`(when x (fn1 a b))` -&gt; `(when x ((dbgfn fn1) a b))`; (but I got `((dbgfn when) x ((dbgfn fn1) a b))`)
756,1506283457.000026,Berry,"if I want a single api that:
on jvm: provides cuda acceperated blas
on js: provides some blas api

is core.matrix the best way to go?"
755,1506283529.000121,Torie,"<@Debroah> I'm not that familiar with this, but I believe you can look at metadata of individual sub-forms and get some useful properties from analysis (to determine what symbols are functions maybe). Otherwise you would have to invoke full-blown analysis for your code form, which might be pretty advanced (and slow?) thing to do."
755,1506283715.000087,Debroah,"<@Torie> Yes, exactly. I'll probably just filter out all the macros (pretending there're just a few) by their name. I was just trying to follow the idea: If “code is data”, then let's edit it. But this doesn't work straight away."
755,1506283832.000092,Torie,"well, code is data, but if you want to rewrite it, you should better do it based on a template, not on compiler's analysis knowledge; knowing if a given symbol is a macro, function or something else is not encoded in the form itself"
755,1506283896.000003,Debroah,"True. In that sense my idea would be better implemented via hacking a compiler probably (which knows that and has explicit step — macro expansion, all the transformations etc)"
755,1506284010.000022,Torie,"look at the metadata first, maybe you'll find something useful there :slightly_smiling_face:; also you can force macro-expansion on your macro input, so you can work on already expanded code, so there will be no ""macro-calls"", only ""function-calls"" and quoted data"
755,1506284068.000001,Debroah,there should be also like `:env` somewhere? may be this already holds all the macros' names?
755,1506284167.000076,Torie,"as I wrote, if you force macro-expansion, macro names are no longer your issue, you will have to detect quoted stuff, which might look like function calls, but is quoted, so you don't want to touch it"
756,1506284181.00008,Sonny,"macro vars have {:macro true} meta on them, in case that’s helpful"
755,1506284195.000001,Sherrie,Has anyone looked at getting httpkit to run over https/wss ?
755,1506284349.000089,Debroah,"<@Sherrie> if you're running a server, you might probably do this via `nginx` (or `apache2` etc) to add certificates

if you speaking of client and have troubles calling https, then you'd better try to figure out if all certificates (of a target server) are in place"
755,1506284413.000059,Sherrie,"I have it running locally with ws:// and its working fine. Then when I pushed to a server running https behind nginx with certs, it just says connection failed. Which I take it to mean that its not getting ported in/not listning on the port"
755,1506284464.000058,Debroah,"<@Sherrie> is all the `proxy_pass` etc in place?; <@Sherrie> you might wanna check this https website of yours with: <https://cryptoreport.rapidssl.com/checker/views/certCheck.jsp>; (or other provider's tool, this one for RapidSSL)"
755,1506284560.000059,Jutta,"See also:
`(dir clojure.core)`"
755,1506284579.000061,Debroah,<@Sherrie> you might also check with `curl`
755,1506284661.000079,Sherrie,"It is, yes"
755,1506284768.000021,Jutta,"With <#C0FVDQLQ5|specter>
```
(transform (walker number?) inc '(let [n 1] (+ n 1)))
=&gt; (let [n 2] (+ n 2))
```
And you can use all others navs, like `continue-then-stay` and recursive stuff"
757,1506287017.000039,Debroah,<@Torie> <@Sonny> just FYI there's what I came up with: <http://dpaste.com/27S1PS9>
757,1506287107.000067,Torie,"<@Debroah> `eval` is evil, what if `x` is implemented as `launch-nukes-to-north-korea!`?"
757,1506287148.000033,Debroah,"<@Torie> it just evaluates to the name, and doesn't do actual function call :slightly_smiling_face:; i.e. I have another tool that would rewrite 1st symbol of all lists in particular file(s); and for me, if this one would work it already would be amazing; e.g. ```user=&gt; (defmacro m2 [x] (eval x))
#'user/m2
user=&gt; (m2 identity)
#object[clojure.core$identity 0x56a9c24a ""clojure.core$identity@56a9c24a""]
```"
757,1506287411.000062,Torie,"`(m2 '(identity (println ""boom!"")))`; or just `(m2 '(println ""boom!""))`"
757,1506287479.000015,Debroah,"aha; ```user=&gt; (defmacro m2 [x] (when (symbol? x) (eval x)))
#'user/m2
user=&gt; (m2 '(println ""boom!""))
nil
```"
757,1506287516.000066,Torie,you should be able to find something like `resolve` which should be more light-weight than eval and will do what you are afte5r
757,1506287998.000043,Debroah,"just replacing `eval` with `resolve`... uhm, it fires an exception anyway somehow; i.e. can't macroexpand this way"
757,1506288172.000077,Torie,"don't know, but I would be very careful calling `eval` on arbitrary input in your macros"
757,1506288188.000031,Debroah,btw yes...; and no. can't use `macroexpand`; arbitary symbol in my case.; if only someone would provide something which is `symbol?` and inside hosts sth callable/evaluatable?
757,1506288592.000057,Torie,"why exactly you cannot `(defmacro m3 [form] (my-dbg-transform (clojure.walk/macroexpand-all form)))`; where `my-dbg-transform` walks the form and replaces all lists with dbg wrapper, except for special forms and quoted data"
757,1506288697.000066,Debroah,"well, just I've selected different point of application; as well I want to keep the position inside the source file (line/column); didn't think about it though; i.e. if doing macroexpand vs. this ""with-eval"" magic is worse in terms of what is possible in keeping all the positions"
757,1506288870.000084,Torie,"AFAIK source positions are in metadata, you can be properly providing them if careful enough; but maybe I'm wrong here"
757,1506288972.00009,Debroah,"In fact, first I'm using project called `rewrite-clj` to add this `(dbg ...)` forms; (which has that positions info and I'll inject it to there)"
757,1506289334.000019,Torie,"you lost me here, if I remember correctly rewrite-clj does source-&gt;data-&gt;source transformation, or you can use it from a macro? by feeding it forms?"
757,1506289442.000063,Debroah,"well, I'm first editing a code (say, whole namespace of files) to wrap every 1st member of list with `(dbg first-member)`; `(fn1 a b)` -&gt; `((dbg fn1) a b)`; (before that `require` is added to include the dbg)"
757,1506289522.000034,Torie,"so now you are doing source -&gt; source transformation, right? without clojure macros"
757,1506289536.000061,Debroah,"yes, that's the 1st step; and then it's everything (functions and macros) wrapped with `dbg`, thus `dbg` macro should leave macros as-is and make functions log themselves; (and in the end I want to build whole call stack/tree and see like wow, it's what has happened when I've ran a request in my very-huge-and-hard-to-debug-project)"
757,1506289772.000017,Torie,"I'm afraid this is not going to work. If you rewrite code `(my-macro 1 2 3)` into `((dbg my-macro) 1 2 3)` you change meaning of it, it might not compile at all, if `my-macro` checks args"
757,1506289810.000068,Debroah,uhm this is also a problem; I was comparing `((dbg my-macro) 1 2 3)` vs. `(dbg my-macro 1 2 3)` vs. `(dbg (my-macro 1 2 3))` etc
757,1506289913.000045,Torie,"and secondary minor problem which comes to my mind is that rewrite-clj does not use tools.reader, they have their own reader, it won't be able to read everything  the same way normal clojure reader would"
757,1506289982.000073,Debroah,"well, it's ""based"" on it, but does provide it's own stuff; uhm, here on real code have another ""Can't take value of a macro:"" error"
757,1506290150.000051,Torie,"wait I take my ""I'm afraid this is not going to work"" note back, I was thinking about `dbg` as function, but it is a macro"
757,1506290196.000029,Debroah,"yes sure; oops, it was one with resolve. Will try ""eval"""
757,1506290339.000071,Torie,"I think you should go `(dbg my-macro 1 2 3)` route, look at 1st arg and decide what code to emit based on it"
757,1506290390.000001,Debroah,this has failed: `(-&gt; x (dbg my-macro 1 2 3))`
757,1506290448.000081,Torie,yep :slightly_smiling_face:; <@Debroah> maybe you could mark `my-macro` arg in 1st phase `(dbg (my-marker my-macro) 1 2 3)` and make `dbg` flexible to look it up and remove it from any position
757,1506290813.000022,Debroah,"uhm, might also work btw!"
757,1506290815.000049,Torie,"but still it would not be perfect solution, more complex macros could get puzzled by extra arg there"
757,1506290976.000021,Debroah,"uhm I'm still having ""Can't take value of a macro""; I mean with `(dbg (...original expr...))`; btw how crazy is this:; ```      (println ""foo"" ((dbg when) true ""Hello world111!""))
      (println ""bar"" (when true ""Hello world222!""))
```; and I've got; ```foo Hello world111!
bar nil
```; (it's inside file itself); sorry. wrong chat :slightly_smiling_face:"
758,1506304662.000007,Millicent,anyone still doing android development with clojure? i'm not really a fan of react-native; it basically sounds like java interop at this point... and i'm not really sure i'd rather write java over clojure java interop
759,1506306157.000108,Maurita,"Hi everybody maybe someone can help me with this question (<https://stackoverflow.com/questions/46396717/axis-2-client-support-multiple-certificates-for-the-same-webservice-enpoint>) is not Clojure thing but I’m desperate, almost stuck 2 weeks on the error. :confused:"
760,1506328202.000371,Berry,"only slightly joking: in lisps, why don't people measure 'lines of code' by number of (), [], {} }; it seems like this is a simple measure of complexity"
760,1506328625.000066,Margaret,(-&gt; x f g h i j) is as complex as (j (i (h (g (f x))))); similar issues with comp and partial
761,1506331006.000028,Hedwig,you could count the nodes in the code after macroexpansion
761,1506331123.000105,Margaret,"then for / doseq would look extremely complex; ```user=&gt; (pprint (macroexpand-1 '(for [x {:a [1 2 3] :b [4 5 6]} [y z] x] [x z])))
(clojure.core/let
 [iter__7307__auto__
  (clojure.core/fn
   iter__23
   [s__24]
   (clojure.core/lazy-seq
    (clojure.core/loop
     [s__24 s__24]
     (clojure.core/when-first
      [x s__24]
      (clojure.core/let
       [iterys__7303__auto__
        (clojure.core/fn
         iter__25
         [s__26]
         (clojure.core/lazy-seq
          (clojure.core/loop
           [s__26 s__26]
           (clojure.core/when-let
            [s__26 (clojure.core/seq s__26)]
            (if
             (clojure.core/chunked-seq? s__26)
             (clojure.core/let
              [c__7305__auto__
               (clojure.core/chunk-first s__26)
               size__7306__auto__
               (clojure.core/int (clojure.core/count c__7305__auto__))
               b__28
               (clojure.core/chunk-buffer size__7306__auto__)]
              (if
               (clojure.core/loop
                [i__27 (clojure.core/int 0)]
                (if
                 (clojure.core/&lt; i__27 size__7306__auto__)
                 (clojure.core/let
                  [[y z] (.nth c__7305__auto__ i__27)]
                  (do
                   (clojure.core/chunk-append b__28 [x z])
                   (recur (clojure.core/unchecked-inc i__27))))
                 true))
               (clojure.core/chunk-cons
                (clojure.core/chunk b__28)
                (iter__25 (clojure.core/chunk-rest s__26)))
               (clojure.core/chunk-cons
                (clojure.core/chunk b__28)
                nil)))
             (clojure.core/let
              [[y z] (clojure.core/first s__26)]
              (clojure.core/cons
               [x z]
               (iter__25 (clojure.core/rest s__26)))))))))
        fs__7304__auto__
        (clojure.core/seq (iterys__7303__auto__ x))]
       (if
        fs__7304__auto__
        (clojure.core/concat
         fs__7304__auto__
         (iter__23 (clojure.core/rest s__24)))
        (recur (clojure.core/rest s__24))))))))]
 (iter__7307__auto__ {:a [1 2 3], :b [4 5 6]}))
nil
```"
761,1506331379.000241,Hedwig,"true, some macros maybe should be masked :slightly_smiling_face:; ```
=&gt; (clojure.pprint/pprint (macroexpand '(-&gt;&gt; 2 inc dec inc)))
(inc (dec (inc 2)))```"
762,1506332654.000155,Lily,"wow, so many core functions in this expansion I've never seen, `clojure.core/when-first` nice!"
763,1506335545.000221,Katy,"Hello, I'm trying to create a custom generator for string of fixed size. I found `gen/string-alphanumeric` but didn't find a way enforce the size. Help ?"
763,1506335707.000213,Weston,I guess you can do something like:
763,1506335709.000049,Katy,"`(gen/generate generator size)` returns a value of that size, not a generator"
763,1506335720.000184,Weston,"```
(gen/fmap #(apply str %)  (gen/vector gen/char-alphanumeric 2 10))
```"
763,1506335779.00003,Katy,"not a bad idea, but string will still be of random size"
763,1506335785.000173,Weston,I wouldn't be surprised if there's a better way
763,1506335797.000223,Katy,me too :slightly_smiling_face:
763,1506335801.000063,Weston,right
763,1506335803.000166,Katy,Thanks anyway
763,1506335935.000208,Weston,"(gen/sample (gen/fmap #(apply str %)  (gen/vector gen/char-alphanumeric 10))); 1 arg of vec is fixed size; `-&gt; (""W6gz7Z339v"" ""CnLv6KSfSv"" ""viHShHZ44P"" ""2CZxxAIP6r"" ""IvN0zum2MR"" ""3lEx60c3bH"" ""D0oNW9ZZPU"" ""Z8FQ0mytW6"" ""3KH8uV08hA"" ""b05J5U7l4d"")`; seems to work; seems also that test.check does something very similar for rnd size: <https://github.com/clojure/test.check/blob/master/src/main/clojure/clojure/test/check/generators.cljc#L1311-L1313>"
763,1506336384.000106,Jacqui,"how do i pass command line tasks to lein aliases ? 

```:aliases {""bump-version""  [""do""
                             [""change"" ""version"" ""leiningen.release/bump-version""]
                             [""vcs"" ""commit""]]}```"
763,1506336440.00017,Margaret,I use the lein-shell plugin for that
763,1506336466.000031,Jacqui,"i would like to mention :patch, :major, :minor with bump-verson  like ```lein bump-version :patch```"
763,1506336567.000351,Margaret,"oh, I misunderstood - you don't mean shell tasks, you mean shell arguments applied to lein tasks"
763,1506336580.000094,Jacqui,<@Margaret> yes.
763,1506336746.000161,Margaret,"I don't see anything for this in the `lein help sample` output, it might be easier to do something like ```~(System/getenv ""BUMP_LEVEL"")``` and then invoke with ```BUMP_LEVEL=:patch lein bump-version```"
763,1506336868.000314,Jacqui,"that's nice. Maybe i can then set this BUMP_LEVEL using lein-shell and then invoke the change version command and put them in the same alias. i guess that should work; :smile:; no it wont. my bad.; anyways, thanks <@Margaret>"
763,1506336966.000098,Margaret,"I thought it had to be set from the command line; if you can set it elsewhere in project.clj, you can reference the project's own keys in the map; eg `:project/version` gets replaced with the contents of `:version`; you could add a :patch-level key and access it with :project/patch-level if you can set it inside the project file itself"
763,1506337109.000368,Jacqui,"no, i need to set it from command line.  what i suggested wont work."
763,1506337147.000214,Margaret,"yeah- in that case I see no documentation of accessing lein args inside the project map, so it might be simpler to work with and set env vars"
763,1506337188.000055,Jacqui,okay. thanks for the quick response <@Margaret>
764,1506338332.000005,Keva,How are they not composable?
765,1506340481.000212,Katy,<@Weston> Exactly what I was thinking while having lunch. Thanks !
766,1506344652.000415,Jacob,is there a way to create java objects from clojure maps?; something where the following would hold - `(= my-map (bean (convert-to-object my-map)))`
766,1506344926.000378,Sonny,"in core, no"
766,1506344945.000077,Jacob,perhaps with or `(= my-map (-&gt; my-map convert-to-object bean (dissoc :class)))`; any libs?
766,1506344980.000367,Sonny,"<https://github.com/clojure/java.data> I think does some of that; I’ve written some macros to do it on a non-recursive scale, but just as a one-off kind of thing"
766,1506345005.000582,Jacob,:+1:
766,1506345065.000389,Sonny,<https://stackoverflow.com/questions/22214175/java-class-to-clojure-map>; actually I guess that’s the other way for non-bean getters
767,1506348280.000221,Janelle,that's cool
768,1506354678.0005,Jacob,easiest way to test `seqable?` prior to 1.9?; `(try (seq x) (catch Exceception e false))`; but then it has been converted...
768,1506354856.000079,Margaret,`(try (seq x)  true (catch Exception _ false)))` ; still not quite
768,1506354891.000585,Jacob,what about `instance?`
768,1506354911.000336,Randee,SHould be equal: <https://gist.github.com/swannodette/952717>
768,1506355056.000748,Margaret,this doesn't work because there's no single Interface that is seqable - even a string can be seq'd
769,1506357835.000468,Ernesto,Hello!; Trying to use google-apps-clj library; is it normal I must import all java classes to make this library works?; I tought I would have only to `:require` clojure lib `ns` but it seems it only works when I some `:import` s present in the library source
769,1506358004.000365,Aldo,"I have not actually used that library, but as someone who writes clojure code against various google cloud project applications every day I feel compelled to warn you not to use it and just write clojure agains the google Java API's directly; they move *way* too fast and are too all-encompassing (and are to a significant extent auto generated) for any wrapper that hasn't been updated since january to be a good bet"
769,1506358119.000107,Ernesto,thank you; last release was on january 18th <https://github.com/SparkFund/google-apps-clj/blob/develop/CHANGELOG.md>
769,1506358164.000772,Aldo,"although this seems to be more the client applications side (Drive, Sheets, Calendar) than enterprise apps side. but it still seems likely to be true to me"
769,1506358197.000081,Ernesto,"still, I wonder if the library imports java classes, why do I need to import them again myself when I use the library"
769,1506358268.000401,Aldo,"not sure what you mean, but if you want to refer to a java class in a clojure namespace without fully specifying its package then you have to import it, otherwise how will the compiler know which namespace the class is in?; (and even if it could figure that how how would any poor programmer reading your code know? :-))"
769,1506358471.00026,Erlinda,"Question: I’ve got an auto-resolved keyword inside a cljs reader conditional and I get “Invalid token” when I attempt to compile, even though the namespace alias is required for cljs. Any ideas?
```
(ns some.namespace
  #?(:cljs
     (:require [some.other.namespace :as abbr])))

#?(:cljs ...  ::abbr/read-only?  ...)
```"
769,1506358560.000168,Sonny,Those are independent expressions
770,1506359163.000311,Erlinda,<@Sonny> forgive me. I don’t follow.  Is it not possible to use auto-resolved namespace aliases in cljc? or have I not written the ns correctly?
769,1506359295.000237,Sonny,It is tricky (maybe impossible) to use auto-resolved namespaces in tandem with reader conditionals
770,1506359316.000445,Sonny,"Off the top of my head, I don't have a good summary of what will and won't work"
770,1506359351.000404,Erlinda,ah! good to know. thx!
771,1506359960.000302,Margaret,"<@Ernesto> import just aliases a class name, it isn't the mechanism that loads the class from the jar; the jvm itself auto-loads classes when it finds them, we don't have to worry about it"
771,1506360069.000122,Ernesto,"something like 
```
(:import
 (com.google.api.services.drive.model
      File
      FileList
      ParentReference
      Permission
      PermissionList))
```; ?"
771,1506360079.000108,Margaret,"a similar related issue is that you should `require` a namespace from each ns that uses it (and preferably alias it to a shorter name) - this avoids a bunch of gotchas you would otherwise hit if the order of loading namespaces changes, or another ns changes implementation and doesn't require what it did before; <@Ernesto> something like that, you can stick to importing the specific classes you need short names for; and if you were also using `java.io.File` you'd have to decide which one (if any) should be `File` and which needs to use its full name"
771,1506360391.000187,Ernesto,<@Margaret> Much thanks! I was not using :require :as aliases but full path when call some library fns; This is great!!!; no more :import for a ton a java classes
772,1506363396.00021,Amado,"Hello everyone, is there an easy way to “merge” `match` clauses? I’m about to write a macro but id like to know if there is a standart way"
773,1506364944.000347,Willow,type hints of return types go after function name and before arg list right? `(defn name ^type [args ...]`
773,1506365084.000255,Kareen,yes
773,1506365140.000372,Willow,thanks. just wanted to confirm.
771,1506365488.000038,Guillermo,easy way to remember is that the meta always goes on the arglist
772,1506367121.000106,Mia,"for anyone that uses hombrew to manage your java installation, homebrew just upgraded java to 1.9,181 which does not seem compatible with clojure; ```; ~  java -version
java version “9”
Java(TM) SE Runtime Environment (build 9+181)
Java HotSpot(TM) 64-Bit Server VM (build 9+181, mixed mode)
~  lein repl
Exception in thread “main” java.lang.ExceptionInInitializerError
	at java.base/java.lang.Class.forName0(Native Method)
	at java.base/java.lang.Class.forName(Class.java:375)
	at clojure.lang.RT.classForName(RT.java:2168)
	at clojure.lang.RT.classForName(RT.java:2177)
	at clojure.lang.RT.loadClassForName(RT.java:2196)
	at clojure.lang.RT.load(RT.java:443)
	at clojure.lang.RT.load(RT.java:419)
	at clojure.core$load$fn__5677.invoke(core.clj:5893)
	at clojure.core$load.invokeStatic(core.clj:5892)
	at clojure.core$load.doInvoke(core.clj:5876)
	at clojure.lang.RestFn.invoke(RestFn.java:408)
	at clojure.core__init.load(Unknown Source)
	at clojure.core__init.&lt;clinit&gt;(Unknown Source)
	at java.base/java.lang.Class.forName0(Native Method)
	at java.base/java.lang.Class.forName(Class.java:375)
	at clojure.lang.RT.classForName(RT.java:2168)
	at clojure.lang.RT.classForName(RT.java:2177)
	at clojure.lang.RT.loadClassForName(RT.java:2196)
	at clojure.lang.RT.load(RT.java:443)
	at clojure.lang.RT.load(RT.java:419)
	at clojure.lang.RT.doInit(RT.java:461)
	at clojure.lang.RT.&lt;clinit&gt;(RT.java:331)
	at clojure.main.&lt;clinit&gt;(main.java:20)
Caused by: java.lang.ClassNotFoundException: java/sql/Timestamp
	at java.base/java.lang.Class.forName0(Native Method)
	at java.base/java.lang.Class.forName(Class.java:375)
	at clojure.lang.RT.classForName(RT.java:2168)
	at clojure.lang.RT.classForNameNonLoading(RT.java:2181)
	at clojure.instant$loading__5569__auto____6869.invoke(instant.clj:9)
	at clojure.instant__init.load(Unknown Source)
	at clojure.instant__init.&lt;clinit&gt;(Unknown Source)
	... 23 more
```"
772,1506367460.000359,Margaret,"that's a leiningen issue, addressed in the master branch but not released, last I heard"
772,1506367998.000108,Terra,And there are probably still more issues - and least when I tried to workaround this using latest lein RC which doesn't use boot classpath but still fails (I think some dynapath issue)
772,1506368542.000035,Mia,"Oh, cool; I hadn’t spent the time to look it up. :facepalm:"
772,1506369034.000397,Aldo,"so I decided to move a couple of type hints based on the comments above from `(defn ^Hint foo [args]` to `(defn foo ^Hint [args]` and now I get eastwood errors like `wrong-tag: Tag: Connection for return type of function on arg vector: [p__8116] should be fully qualified Java class name, or else it may cause exception if used from another namespace`; is that eastwood being silly, or is it a legit problem? why doesn't it apply to how it was before?"
772,1506369233.000012,Kareen,"it's eastwood warning about an issue that's been fixed in clojure 1.8; so if you're using clojure pre 1.8, eastwood is correct; otherwise ignore it"
772,1506369263.000073,Aldo,"ah, ok I'll try and disable that check.ta"
772,1506369774.000647,Jerold,"Is there a way to have a sorted-set using collections (currently just small vectors, but I may change them) as keys? This works: `(sorted-set-by (fn [a b] (&gt; (reduce +' (next a)) (reduce +' (next b)))) [3 1 0] [5 0 1] [7 0 0] [2 1 1])`, but this does not: `(sorted-set-by (fn [a b] (&gt; (reduce +' a) (reduce +' b))) [1 0] 3 [0 1] 5 [0 0] 7 [1 1] 2)`. Am I just not writing the comparator correctly or is this not possible?; I also assume `sorted-map-by` has the same semantics with regards to this. I may need to switch between the two in order to preserve duplicate elements before I apply relational algebra functions from clojure.core/set to handle them."
772,1506369970.000344,Aldo,"ugh, well you can't disable that test, which makes eastwood false +ve error on any function tagged that way, making eastwood useless; just going to switch back to the wrong way"
772,1506370011.000449,Willow,"the wrong way means just decoration for the programmer, right? ie, not performance benefit?"
772,1506370060.000223,Aldo,*shrug* well it makes the cursive warning go away so I'm guessing it avoids the reflection somehow
772,1506370149.000275,Margaret,"<@Jerold> I'd assume the second one breaks because you put things in the set that you can't reduce - collection functions for sorting is fine, as long as all things in the insertions are collections"
772,1506370226.000019,Jerold,Can you please clarify? Obviously the keys in that case _can_ be reduced.
772,1506370270.000213,Margaret,"keys? that's a set; the number 7 is being put in a set, and 7 can't be reduced"
772,1506370314.000407,Jerold,"Oh, I feel foolish. I've hardly used sets before this. One second...; Actually, wait (I was just going to provide an example where I nest the vectors with the scalars and only reduce the vectors) the documentation does refer to ""keys.""; ""Returns a new sorted set with supplied keys, using the supplied comparator.  Any equal keys are handled as if by repeated uses of conj."""
772,1506370448.000489,Delois,"<@Aldo> <@Willow> Annotating the var instead of the arg vector does work correctly, although IIRC it was sort of by accident."
772,1506370467.000214,Margaret,right - but in a set they are all keys
772,1506370488.000502,Willow,type annotations have got to be one of the most murky things in clojure. thanks for the heads up <@Delois>
772,1506370496.000404,Delois,"One disadvantage is that if you have multiple arities, you can’t type hint them independently, but I hope you’re not relying on that anyway :slightly_smiling_face:"
772,1506370555.000094,Jerold,"Yeah, that language is confusing. I understand it's correct in terms of what keys are in Clojure colls, it's just odd to think of them without corresponding values.; This example makes it pretty clear: ```user=&gt; (set {:one 1 :two 2 :three 3})
#{[:two 2] [:three 3] [:one 1]}```"
772,1506370590.000112,Aldo,"ha, noope"
772,1506370672.000173,Margaret,"that's very unclear, as it's using the implicit sequentialization of a hash-map to provide a sequence that is then made a set - the set function and the sorted-set function are not analogs, the analog to sorted-set is hash-set"
772,1506370799.000591,Jerold,It makes clear to me that sets don't have kv pairs and how they handle them in conversion.; It seems I probably want to use `sorted-map-by` and then convert to a regular set in order to use relational algebra functions.
772,1506370870.000099,Delois,"<@Aldo> FWIW I always type hint the var, even though it’s not “correct”, because of the issue about having to fully qualify hints on the arg vector.; I’m on Clojure 1.7 still so it’s a problem for me."
772,1506370891.000319,Margaret,but that's not what that example demonstrates at all; maybe I'm looking at this wrong
772,1506371032.000028,Kareen,"yes, that is a problem, but since 1.8 fixed it, I would not reccomend type hinting the var. it doesn't work as intended for primitive type hints; so my suggestion is if you're using &gt;=1.8.0, forget that type hinting on the var exists and always hint on the argvec"
772,1506371102.000498,Jerold,I think we're just referring to different things. I didn't realize converting a map to a set places the k-v pairs in vectors rather than preserving them. That's all.
772,1506371146.00062,Delois,"True, but I never use primitive type hints anyway, they’re just too quirky.; But I should add an inspection for that."
774,1506371177.000036,Kareen,what's quirky about them?
772,1506371198.000274,Delois,"Well, the var hinting issue, only allowing 4 params etc"
772,1506371244.000666,Margaret,"I don't know what ""preserving"" them means - in clojure when a hash-map is treated as a sequence, it is a sequence of key-value pairs, and `set` is a function on sequences"
772,1506371324.000387,Jerold,"It's that last part: `set` is a function on sequences. I was under the mistaken assumption it worked on associative.; Unfortunately, this seems to kill my idea to use relational algebra functions on just the keys."
772,1506371450.000171,Delois,"<@Kareen> Actually I had a question for you about type hinting. I’d like to be able to mark type hints as unused when they’re not required. Is it the case that they’re not required (for local bindings, params etc) unless a) the local is used as the target of an interop call b) the local is used as a param of an interop call and is required to disambiguate overloads, or c) the binding is bound directly to another binding (and thus transfers its hint) and the other binding is used as in a) or b)?; Are there other cases to take into account?"
772,1506371528.000016,Margaret,"beyond marking unused hints, it would be nice to mention when they can statically be shown as wrong as well"
772,1506371583.000413,Kareen,<@Delois> yes + also unless the type hint is a primitive one and used in an unboxed context; and return type hints are always potentially useful because they're non-local so unless you can controll *all* the callsites you can't know
772,1506371697.000538,Delois,"Right, I’m just thinking about marking them as unused on locals.; I hadn’t thought of the boxing part, thanks - currently I’m not tracking that although it should be straightforward."
772,1506371818.000394,Kareen,<@Delois> are you doing this analysis pre macroexpansion?; thinking of the case of inlineable functions that expand to static calls
775,1506373149.000545,Jerold,"Fwiw, I was massively overthinking this. `sorted-map` alone preserves ordering of these colls in line with at least one of the two ordering schemes I'm deciding between. And `(merge-with + ...)` on two sorted-maps handles one of my uses cases entirely :stuck_out_tongue:"
772,1506373377.000595,Delois,<@Kareen> Yes. What are the implications there - that the type hints need to be propagated from the parameters?; Do you mean inlineable or the intrinsics?
772,1506373975.000018,Kareen,"no, i mean like
```(defn bc {:inline (fn [x] `(Long/bitCount ~x))} [x] (Long/bitCount x))
(defn foo [^long x] (bc x))
```; that type hint is still useful even if `bc` is a normal funcntion invocation, because of the inline"
772,1506373998.000199,Delois,Right.; Hmm
772,1506374025.000052,Kareen,"(same in the case where `bc` took a primitive long as parameter, this is a bit of an artificial example, but i'm thinking about e.g. the array functions in core)"
772,1506374044.000136,Delois,"Perhaps I won’t mark it unused if the local is used as a param on an inlineable function, because I can’t really tell in that case."
772,1506374052.000047,Jacob,"how do I extend a java type to have interface `clojure.lang.ILookup`? I tried ```(extend VPackSlice
  clojure.lang.ILookup
  {:valAt (fn
            ([this k] (.get this k))
            ([this k default] (.get this k default)))})``` but I get `interface clojure.lang.ILookup is not a protocol`"
772,1506374057.000026,Kareen,yeah seems sensible; same if `bc` were a macro
772,1506374098.000334,Delois,"Right, being a macro is more restrictive though.; Hmm; Inline functions aren’t that common, but macros are.; BTW the boxing thing should only affect primitive hints, right? Or can that also be affected by hints like `^Integer`?"
772,1506374316.000232,Kareen,hmm; can't think of a case with non primitives of the top of my head
776,1506377213.000061,Darcel,"hye guys, any idea how to generate nested arrays of integers using spec ?"
777,1506377705.000124,Rubie,Does anyone know anything about pdfboxing or PDFBox? I’m trying to set some checkbox fields readonly and it doesn’t seem to stick.
777,1506377759.0002,Aldo,"```
boot.user=&gt; (s/exercise (s/coll-of (s/coll-of integer? :kind vector?) :kind vector?) 1)
([[[-1 0 -1 0 -1 0 0 -1 -1 -1 0 0 0 -1 0 -1 -1 0 -1 0] [-1 0 -1 0 0 0] [-1 0 -1 0 0 0 0 0 0 -1] [0 0 0 0 0 -1 0 0 -1 -1 0 -1 0 0 -1 0 0 -1 0]] [[-1 0 -1 0 -1 0 0 -1 -1 -1 0 0 0 -1 0 -1 -1 0 -1 0] [-1 0 -1 0 0 0] [-1 0 -1 0 0 0 0 0 0 -1] [0 0 0 0 0 -1 0 0 -1 -1 0 -1 0 0 -1 0 0 -1 0]]])
```"
777,1506378309.000104,Darcel,cool; :+1:
776,1506387788.000133,Margaret,"right, ILookup is an interface, and you can't extend other people's code to Interfaces, only protocols; you could use proxy to make something that extends VPackSlice and also implements ILookup, just calling the super method for every method outside ILookup"
778,1506399758.000063,Daniell,"Because the vector of `common-redefs#` in the `let` isn't quoted, it will all be evaluated -- put a `'` before the vector and see if that helps.; ^ <@Vernice> Not sure if you'll need more changes than that. You might..."
778,1506400561.000156,Vernice,"<@Daniell> thanks! I probably do. looks like this was a help in the right direction but now I get `Unable to resolve var: consul/get-record in this context` _in the calling code_ (but this is `require`ed in the declaring code),; do I need to mangle the symbols inside the vector? damn, I need to learn writing macros the right way."
778,1506402736.000184,Daniell,<@Vernice> Why not use `with-redefs`? I think you could do this with less code that way...
778,1506402840.000078,Vernice,<@Daniell> I might save some code in the `defmacro`. btw I used `'` instead of ``` which led to the former error
778,1506403301.000137,Daniell,"```(defmacro with-common-redefs [bindings &amp; body]
  (let [common# '[...]]
    `(with-redefs ~(into bindings common#) ~@body)))``` this seems to work for me locally; ^ <@Vernice> Would this work for you?"
778,1506408931.000006,Adrien,<@Daniell> <@Vernice> Wouldn't a fixture in combination with `with-redefs` be suitable for this problem? 
779,1506409676.000216,Sasha,I have a jdbc prepared statement and I want to get the “filled in” sql string. The reason is to send sql to non jvm service. Is there a better way than <https://github.com/akvo/akvo-lumen/blob/f2725e715945b96854768b705ffc5acf2fd67621/backend/src/akvo/lumen/lib/visualisation/maps.clj#L40> to #L44 ?
778,1506412900.000381,Vernice,yes! thanks <@Daniell>
780,1506415261.000078,Necole,"Getting `[object Object] is not ISeqable` when calling `js-&gt;clj` on some json in advanced optimizations, works fine without optimizations.; Can't see anything in the object that cljs wouldn't like."
780,1506416043.000332,Gino,"Just saw this now, will check it out, thanks a lot!"
781,1506417712.000014,Selma,"Hi folks. I'm looking to run a moderately intensive function on a remote machine, but there's a chance my connection may drop out, so I've setup a headless nREPL on the remote. I have to SSH onto the remote to connect to REPL (due to firewall), but I need a way to detach the REPL once I've kicked the function off. Is this possible, or am I just going to have to kick it off and hope it doesn't drop out?"
781,1506418338.000383,Lily,"```
(defn start-local-server []
  (jetty/run-jetty server/handler {:port 8441}))

(deftest test-google-chrome
  (api/set-driver! (driver/create-chrome))
  (api/implicit-wait 1000)
  (api/to ""<http://127.0.0.1:8441>"")
  (is (api/contains-text? ""title"" ""blabla"")))

(use-fixtures :once (fn [f]
                      (start-local-server)
                      (f)))
```
I haven't done this kind of test for long time, but when I start jetty, the whole test just stalls. Any way to run-jetty and make the test continue (if I remove the start-server, the tests run). (using lein test)"
781,1506418438.000381,Vikki,<@Selma> if it's on unix you can use screen or tmux for that
781,1506418556.000096,Selma,"Ah @stjn - that sounds like a good shout, thanks!"
781,1506418745.00016,Berry,what's the most efficient way to convert a java double [] to a java int [] } (I'd prefer to not call a clojur map/for)
781,1506418894.000264,Lily,to answer my question `:join? false` was needed in options
782,1506423512.000198,Evelin,is it possible to get the name of an anonymous function? like `(fn foo [x] (x + 42))`
782,1506423706.000249,Fe,"```cljs.user=&gt; (.-name (fn foo [x] (+ x 42)))
""cljs$user$foo""```"
782,1506423841.000119,Evelin,thanks a ton <@Fe>!
782,1506424087.000245,Fe,<@Evelin> oh I thought you were talking about cljs
782,1506424095.000223,Evelin,hrm yeah i was talking about clojure; was trying to figure out if i was doing something wrong and was about to say something about it; is there a way to get the name in clojure?
782,1506424153.000258,Fe,`(.getName (type (fn foo [x] (+ x 42))))` ? :slightly_smiling_face:; don't know if that's the proper way
782,1506424191.000313,Evelin,its a shame the name is mungled
782,1506424566.000377,Fe,`(clojure.repl/demunge (.getName (type (fn foo [x] (+ x 42)))))`
782,1506424626.000328,Evelin,jesus they thought of everything xd; thankyou so much for your help!
783,1506442081.000556,Leone,Is there any way to park a go block while waiting for a promise to be fullfilled?
784,1506442715.000255,Jodie,Maybe you could use `(&lt;! (async/thread @the-promise))`?
785,1506449407.000165,Gus,Is there any simple way to call reify such that if I leave a method out I’ll get an error at compile time?; Obviously I could write a wrapper but maybe somebody’s already done that or there’s a switch I’m missing?
785,1506449611.000642,Senaida,Does anyone know if Mark McDonnell is on this slack group?
785,1506449835.000163,Adrian,"not sure if this is the right channel to ask, but how do I go about setting my maven repository location with lein? needing to change it so I can cache it for CI builds"
785,1506449975.000614,Margaret,"<@Adrian> quoting the output of `lein help sample` ```  ;; Override location of the local maven repository. Relative to project root.
  :local-repo ""local-m2""```"
785,1506450014.000277,Adrian,"i've been seeing that in my searches, but i would prefer to do it via command line or environment variable if possible"
785,1506450113.000131,Margaret,"`lein update-in :local-repo '(constantly ""local-m2"")' --` should do it; the rest of your command would come after that"
785,1506450295.000199,Adrian,"tried ```❯ lein update-in :local-repo '(constantly ""/lein"")' -- cljsbuild once min
java.lang.ClassCastException: clojure.lang.PersistentList cannot be cast to clojure.lang.Named```"
785,1506450329.000296,Margaret,"oh, weird"
785,1506450501.000723,Gus,apparently f must be a resolvable var; so (constantly “/lein”) doesn’t work; hm; trying to think of a way to do it with a named var
785,1506450590.000512,Margaret,"maybe something like ```lein update-in :local-repo get :not_found ""local-m2""``` - hacky, but should put the right string in the right place"
785,1506450609.000272,Gus,"ha, clever"
785,1506450642.000088,Margaret,if we had lein assoc-in it would be nicer
785,1506450645.00051,Gus,nodnod
785,1506450691.000216,Adrian,"sorry guys; ```❯ lein update-in :local-repo get :not_found ""lein"" -- cljsbuild once min
java.lang.IllegalArgumentException: No implementation of method: :as-file of protocol: #'<http://clojure.java.io/Coercions|clojure.java.io/Coercions> found for class: clojure.lang.Symbol```; (tried even removing the leading /)"
785,1506450711.000155,Margaret,weird
785,1506450731.0005,Willow,is there a way to assert that a key is not present on a map in a test or should i just assert that it's the :not-found key from a `(get (fn ....) :permissions :not-found)`?
785,1506450753.000312,Margaret,"<@Willow> (not (find m :k)); it returns nil, or a vector of k/v; or (not (contains? m :k))"
785,1506450772.000359,Sandy,(not (contains? m :k))
785,1506450786.000044,Willow,"thanks. that's legible and ""conversant"" in a test"
785,1506450891.000408,Gus,<@Adrian> surround “lein” in single quotes; ‘“lein”’
785,1506450922.000369,Margaret,oh! of course
785,1506450926.000134,Gus,"shell sees and strips the single quotes, clojure reader sees a string"
785,1506450983.000481,Adrian,"```❯ lein update-in :local-repo get :not_found 'lein' -- cljsbuild once min
java.lang.IllegalArgumentException: No implementation of method: :as-file of protocol: #'<http://clojure.java.io/Coercions|clojure.java.io/Coercions> found for class: clojure.lang.Symbol```"
785,1506451001.000641,Gus,"you need the single quotes and the double quotes; single quotes on the outside, double quotes on the inside"
785,1506451016.000115,Adrian,ahh; hazaa!; thank you guys
785,1506451047.000036,Gus,^_^
785,1506451075.000223,Margaret,"it’s an ugly and hard to decipher command line, but it does what you want, a shell function with an apropriate name might help; (in terms of ops maintainability)"
785,1506451304.00046,Adrian,"definitely, thanks again"
786,1506454915.000504,Lin,"<@Adrian> it’s also possible to do the same with `assoc`: `lein update-in : assoc :local-repo \""/lein\"" -- cljsbuild once min`"
786,1506454962.000258,Margaret,"<@Lin> oh, I wouldn’t have expected : to work, cool"
787,1506462175.00043,Carlene,"in a `gen-class` method signature, is it possible to specify the types on the `k,v` of a `java.util.Map` return value?"
787,1506462505.000407,Aldo,no
786,1506464515.000142,Margaret,"that’s a fiction of javac - it doesn’t actually exist in the runtime in any way that matters; if you want it for introspection / javadoc etc. it’s much easier to just make a minimal java class and use clojure from inside that; (sadly there is actually code that breaks if it can’t use reflection to figure out what kind of generic was originally created, and that will break with clojure code, luckily that isn’t recommended and there’s very few libraries that do such a thing)"
788,1506464768.000248,Aldo,"^ a huge amount of the fancy new Apache Beam framework uses that ridiculousness, god knows what google were thinking"
786,1506464785.000258,Margaret,ugh
786,1506464826.000134,Aldo,they also decided to switch from interface implementation for integration to java annotations 2 releases ago :face_with_rolling_eyes:
786,1506464838.000304,Margaret,"theoretically we could make a macro that applies the right annotations so that the right generic would be inferred via reflection, right?"
786,1506464870.000029,Aldo,it depends on exactly how they captured the generic I think. I honestly don't know I just gave up on it; everything is an Object and is serialized using nippy. fixed :laughing:
786,1506464907.000155,Margaret,"I was under the impression a generic became an annotation of some sort that you could reflect on, but I should double check that; <@Aldo> haha, that’s one way to fix it"
786,1506465012.000095,Aldo,it's honestly a better way to fix it than doing weird generic capture so you can determine a serializer at compile time. I'm sure someone had some idea that that was going to be a huge performance boost but it turns out a case statement is actually pretty cheap
789,1506468331.000306,Lori,isn't there a `select-keys` alternative that works with functions instead of keys?
789,1506468651.000184,Margaret,what would select-keys but for functions do?; hazarding a guess - juxt?
789,1506468690.000321,Lori,"yes! i was thinking of juxt, but your comment was right, this isn't what i need :slightly_smiling_face:; thx"
790,1506474407.000033,Lacie,"Hi there, clojure noob trying to understand the language concepts and basic structures. May I ask for some clarification?

I’m trying to build a prime-number-seq generator using lazy-seq and the idea from the  Sieve of Eratosthenes.  This is the code I wrote:

```
(defn primes
  ([]
   (concat 
     (sorted-set 2) 
     (primes (remove #(= (mod % 2) 0) (drop 2 (range))))))
  ([s]
   	(let [x (first s)]
      (cons x 
            (lazy-seq (primes (remove #(= (mod % x) 0) s)))
      ))))

```
It works for getting, for example, the first 1700 primes from the sequence. When I ask for the 1772th prime number, I got a Stack Overflow. From the research I did, I suspect that this has some to do with head retention but I can’t see where is the problem. Any ideas?"
791,1506476579.00009,Margaret,"why are you passing s into the recursive call when you know that the first element will never be used?; I'm not sure this causes your problem, but it's definitely making your code do redundant work; I think the issue is that the nested remove calls each add to the depth of the stack needed to realize the next item; by the time you get to the Nth prime you are executing `(first (remove f (remove g (remove h (remove ....... coll))))))` to get x; if instead of nesting calls to remove, you pass in a set (and add an item on each recursive call) you can keep stack usage constant instead of having it grow linear with N; also, the usage of `(sorted-set 2)` is bizarre, because concat instantly removes all the sorted-set properties and leaves a simple lazy-seq, it would be simpler to do `(cons 2 ...)`"
792,1506491274.000121,Jerold,"I realize this is for learning purposes and hence not what you're asking, but fwiw there's a great SoE example using core.async: <https://github.com/clojure/core.async/wiki/Sieve-of-Eratosthenes>"
791,1506499605.000115,Lorri,those calls to `(lazy-seq (primes (remove` build up and so sooner or later you blow the call stack whilst attempting to chew throrugh them
793,1506499653.000181,Lorri,<https://stuartsierra.com/2015/04/26/clojure-donts-concat>; is tangentially related
794,1506502537.000045,Fe,"<@Cherelle> just saw <https://blog.jeaye.com/2017/08/31/clojure-code-quality/> -- nice work; you should consider adding joker to the list - its linter mode works wonders and works for cljs: <https://github.com/candid82/joker>; we use it on CI to check for unused namespaces at least, and locally as an emacs mode to catch some errors early (like eslint)"
795,1506503585.000389,Jodie,"I wasn't able to build joker, which was quite frustrating"
796,1506510407.000082,Hisako,"whats the most idiomatic way of keeping tabs on an element of a collection?
Do I store the index of the element or do I store the element and do some sort of lookups, or perhaps something else entirely?"
796,1506510491.000057,Lorri,"er, depends if your collection is a a vector
or a map
or a set
or a list"
796,1506510544.000275,Hisako,"values will always be distinct, so a set would make sense in this particular case; hmmm. That actually simplifies my use-case indeed :slightly_smiling_face:
I could probably use the element itself and a combination of `fnext` and `select`"
796,1506511015.000097,Jodie,"```
(let [x (calc-x)]
  (when (pred? x)
    (do-something-to x)))
```

I feel like this is something I could use. I like `when-some`, `when-first`, etc. Is there a more idiomatic way I should be writing this?"
796,1506511117.000047,Lorri,```(some-&gt; x calc-x pred? do-something-to)``` ?; not necessarily an improvement though
796,1506511293.000235,Jodie,"<@Lorri> I think that only works if `pred?` returns what you gave it for ""true"" and ""nil"" for false?"
796,1506511314.00023,Lorri,true
796,1506511328.000056,Jodie,"```
(some-&gt;
  10
  (number?)
  inc)
```

gives an exception about booleans &amp; numbers :slightly_smiling_face:"
796,1506511356.000292,Evan,"there is `cond-&gt;` too, but i guess for a single condition-function pair that might be overkill"
796,1506511417.000041,Lorri,that code you originally posted looks clear to me
796,1506511432.000255,Jodie,"<@Evan> `cond-&gt;` doesn't take the previous value in for the predicate though, `(cond-&gt; (calc-x) pred? do-something-to)` wouldn't work"
796,1506511453.000216,Evan,yeah you'd need a `let` as well alas
796,1506511474.000187,Jodie,"It's definitely clear, I've just been a little spoiled by:

```
(when-first [a [nil]]
  (println a))
```"
796,1506511637.000225,Evan,"```(whenp pred? [x (calc-x)]
  (do-something-to x))``` i guess you could write this macro if you fancied it :wink:"
796,1506511669.00024,Jodie,"I didn't think there was anything better, but I thought I'd fish in case I could rephrase it differently so there was no intermediate value.; Maybe this is just aesthetic though :slightly_smiling_face:"
796,1506511697.000237,Evan,no shame in that
796,1506512252.000395,Lorri,"I don't understand the difference between
<https://clojure.github.io/clojure/branch-master/clojure.core-api.html#clojure.core/binding>
<https://clojure.github.io/clojure/branch-master/clojure.core-api.html#clojure.core/with-bindings>; can any of youse point me at an explanation ?; is it that `with-bindings` creates a thunk that closes over the new value, and thus handles multi-threading better?"
796,1506512853.000058,Jodie,"<@Lorri> one does bindings via a `{}`, one does it like a `let` in a `[]`"
796,1506512946.00019,Lorri,yeah but must diff by more than just syntax
797,1506520264.00039,Shaunda,I remember reading about a book someone was writing that was a annotated read-through of the clojure.core source code. Does anyone know what I'm talking about and can point me to it?
797,1506520529.000337,Evan,could you mean <https://www.manning.com/books/clojure-standard-library> ?
797,1506520722.00064,Shaunda,"that's it, thanks"
797,1506520740.000216,Evan,no problem :slightly_smiling_face:
796,1506523499.000654,Lacie,Thanks a lot <@Jerold> <@Lorri> . I think that I did not got lazy-seqs the right way and I’ll do some homework on this topic before trying to move on; In fact I’m passing it around just to capture the first element and discard all multiples of it; I didn’t really know about this but thanks for the clarification. I’ll try to investigate the relationship between seqs and its interactions with the collections implementations
798,1506529915.000032,Etsuko,"I'm experiencing a strange issue where when I'm recompiling a test namespace (clojure.test based) after any change I get an error that all my other required namespace aliases already exist:

```
Caused by java.lang.IllegalStateException
   Alias sut already exists in namespace project.account-test,
   aliasing project.account
```
This is how the imports look:
```
(ns project.account-test
  (:require [project.account :as sut]
            [project.account.event-handlers :as account-events]
            [clojure.test :refer :all]))
```
The only way I've managed to resolve it (until the next change) is to restart the repl :disappointed:
`(ns-unmap 'project.account-test 'sut)` didn't help, just as `(reloaded.repl/reset-all)` doesn't help.
It's really annoying. Any idea what might be causing this?"
797,1506531789.000228,Giovanna,The macro that <@Evan> mentioned above (more or less) <https://gist.github.com/madstap/52f280f17289f1a1ec81f3c9f0b23778>
799,1506533847.000193,Cherelle,"<@Fe> Thanks for the suggestion! Joker slipped by, but I'll give it a go on this code and add an entry to the post."
796,1506533939.000363,Margaret,a good rule of thumb is that anything lazy turns its result into a LazySeq - nothing lazy ever preserves the type of its input collection; (unless by coincidence the input was already lazy)
798,1506534256.000632,Margaret,"<@Etsuko> ns-unmap is for vars, not for aliases; <@Etsuko> to remove an alias to another ns as created by require / :as - use `ns-unalias`"
798,1506534573.000576,Etsuko,"Thank you <@Margaret>, good to know. That allows me to clean up the mess manually. I still am curious why that is happening though."
798,1506534685.000008,Margaret,"if you use refresh, that deletes a namespace and replaces it; aliases aren’t by namespace name iirc, but by their object identity(?); so my theory is that the new namespace has the same name but isn’t the one aliased; (it would require some experimentation to verify this) - regardless, the simpler solution might be to also refresh the test namespace (which does the same thing to that one as well, deleting it entirely and recreating it)"
800,1506536371.000245,Carlene,"This may be more of a java question, but I've got a clojure service behind a KafkaConsumer that I've had to trim and expose as a gen-class that another service can call directly as a class/library for performance reasons, rather than going through kafka. How do I keep the quick development cycle on the clojure side without having to compile down to an uberjar and copy it into the other project (and then restart that other service) on every change? What was nice as a kafka consumer was that the service respected the reloaded workflow so a change was as simple as a (reset) in the REPL; if it makes a difference, the parent service is a scala application"
800,1506536529.000017,Aldo,"the interface class is hosed, whatever you're generating with gen-class if you make a change there you're going to have to restart; but that could be just left as a tiny shim that uses tools.namespace to reload etc"
800,1506536598.000303,Margaret,"<@Carlene> if you use clojure.java.api.Clojure.var to look up the function to call, it will see redefinitions every time you invoke it; then you don’t need gen-class either, just use `require` to make clojure load your code, and Clojure.var to look up the var you can call; <https://clojure.org/reference/java_interop#_calling_clojure_from_java>"
800,1506536695.000362,Aldo,"`require` won't reload files if they've changed though fyi, that's where you need tools.namespace"
800,1506536698.000588,Margaret,"or, you can make sure you have a layer of indirection between the ns that uses :gen-class and the code you are calling, so that if you reload the clojure code in the process, the gen-class methods call the new definition; <@Aldo> it takes a :reload arg, but that’s not what I was talking about, I was talking about the usage flow when not using gen-class - you need to remember to call require before using your code"
800,1506536731.000083,Aldo,well unless you tell it to using :reload/:reload-all. but tools.namespace is a bit cleaner because it clears out old vars
800,1506536775.000318,Margaret,"the reloading part is separate, I was just describing how to replace gen-class"
800,1506536825.000367,Carlene,are there any performance considerations (on the order of ms) between using a `(gen-class ..)` and using `clojure.java.api.Clojure.var`?
800,1506536882.00011,Margaret,"the noticible difference is on initial load (what would happen on startup in the case of gen-class, or on usage of require in the Clojure.var use case)"
800,1506536971.00039,Vallie,Noob question. How can I get `(clojure.repl/source my-function)` to work in a lein repl?; Just getting “source not found”
800,1506536995.000498,Margaret,"<@Vallie> by loading the definition from a file instead of typing it into the repl; the source function needs to know a file and line number, clojure doesn’t actually store the raw source of the code it compiles in memory"
800,1506537029.000058,Vallie,Using `load-file`?; That doesn’t seem to do anything for me
800,1506537037.000368,Margaret,sure - that’s what cider etc. are doing; load-file ensures that the metadata is present that allows repl/source to operate
800,1506537075.000494,Vallie,"I’ve got `(defn add-stuff [x] (+ x x))` in a file, I use load-file, and clojure.repl/source still says Source not found."
800,1506537087.000307,Margaret,… checking
800,1506537106.000215,Willow,"call meta on it to see what the var info is; ```
breeze.mast.services.accounts-test&gt; (meta #'permission-for)
{:arglists ([perm perms]), :line 37, :column 46, :file ""*cider-repl localhost*"", :name permission-for, :ns #object[clojure.lang.Namespace 0x73f10384 ""breeze.mast.services.accounts-test""]}
breeze.mast.services.accounts-test&gt; 
breeze.mast.services.accounts-test&gt; (meta #'permission-for)
{:arglists ([perm perms]), :line 44, :column 1, :file ""/home/dan/ops/projects/breeze_ehr/mast/test/breeze/mast/services/accounts_test.clj"", :name permission-for, :ns #object[clojure.lang.Namespace 0x73f10384 ""breeze.mast.services.accounts-test""]}
```"
800,1506537143.000213,Kareen,you can't get the source code of a function that's not defined in a file
800,1506537193.000738,Margaret,"<@Vallie> oh, the other gotcha is the file needs to be in the expected place on classpath. source is an odd little macro."
800,1506537209.000756,Vallie,Oh. what’s the default cp for lein repl?
800,1506537222.000172,Margaret,"<@Vallie> use `lein cp` to see it; or more accurately I guess `lein with-profile repl cp` (typo fixed, wants string not keyword)"
800,1506537373.000166,Vallie,"I’ve got clojure-projects/expand/src on there, do I need clojure-projects/expand/src/expand as well?"
800,1506537457.000208,Margaret,no - as long as the ns-declaration in your file matches the path from src to the file
800,1506537535.000212,Vallie,Weird. Still doesn’t work.
800,1506537607.000165,Margaret,what if you use `(require 'some.ns :reload)` instead of `load-file`
800,1506537648.000444,Vallie,That works!
800,1506537661.000161,Margaret,odd that it would need that…
800,1506537764.000796,Vallie,"Thanks a million for your help, idk what was going on with load-file there"
800,1506537930.00011,Willow,how were you invoking the load-file functionality?
800,1506537997.000565,Margaret,"<@Willow> a namespace loaded via load-file means that repl/source doesn’t work - I verified this myself; there’s only one way to use load-file, you give it a string with the path to the file; (well maybe you could also give it a `java.io.File` object, haven’t tried, but I wouldn’t expect this to act differently either0"
801,1506541151.000172,Erlinda,"if you’re in a place where you you’re wishing you had multi-arity anonymous functions, is it safe to say that you’ve overcomplicated things? :slightly_smiling_face:"
801,1506541264.000294,Sonny,"you can do multi-arity anonymous functions; `(fn ([] 0) ([x] 1))`; and I’d say no, not necessarily :)"
801,1506541418.000265,Erlinda,<@Sonny> hallelujah!; I’ve missed reading that for awhile now; right under special_forms#fn. my bad!
802,1506543120.000321,Evan,nice one!
803,1506545664.000132,Leandro,;     f   r
803,1506545959.000246,Vilma,Does anyone have advice for introducing clojure at work? I have a prototype in clojure for replacing some really gnarly xslt stuff and I’m going to be proposing switching to it to the team sometime this/next week. Curious if others have had success or failures introducing it to a non-clj workplace.
801,1506546738.000206,Cecile,What's the rest of the stack? any jvm? Good place to focus on a similar deployment / prod environment / toolchain
802,1506548385.0001,Vilma,"It’s mostly a python shop in our area and we’re pretty functional with python. Farther towards the front-end there’s a lot of scala use. The part I’m proposing replacing is actually a Java program to run XSLT transformations and the .xsl files required to transform them, so to some degree I’m replacing one non-standard piece of tech with another one (and I think it’s fair to say that almost everyone would rather learn clj than xslt)"
804,1506551385.000117,Jacob,is there a threading operator that given a value keeps threading until a return value is not `nil` and then breaks early?
804,1506551405.000075,Margaret,"<@Jacob> ~that is what `some-&gt;` and `some-&gt;&gt;` are~ oops, I misread, that doesn’t exist, but you can use `or`; what would be threaded, since you expect things to return nil until one doesn’t"
804,1506551555.000349,Jacob,<@Margaret> good point; just not as pretty as `(or (function-1 x) (function-2 x) ...)`
804,1506551699.000121,Margaret,"that would be a straightforward macro to write, the hardest part would be a decent name for it; oh wait, is this some-fn?; <@Jacob> oh, yeah, this is `some-fn` ```clojure.core/some-fn
([p] [p1 p2] [p1 p2 p3] [p1 p2 p3 &amp; ps])
  Takes a set of predicates and returns a function f that returns the first logical true value
  returned by one of its composing predicates against any of its arguments, else it returns
  logical false. Note that f is short-circuiting in that it will stop execution on the first
  argument that triggers a logical true result against the original predicates.```"
804,1506551810.000117,Jacob,"and as any return value will be truthy, this should work"
804,1506551832.000098,Margaret,"```=&gt; ((some-fn :a :b :c :d) {:c 2 :d 3})
2```; be aware that when given N args, it checks each arg separately as an arg to each fn"
804,1506552002.00015,Jacob,would it not be easier to write with reduce and `reduced`?; no; would need a let
804,1506552122.000264,Margaret,`#(reduce (fn [_ f] (some-&gt; % (f) (reduced))) nil fns)` would do it; but I think some-fn is still clearer; `(apply some-fn fns)` is equivalent to the above
804,1506552473.000072,Jacob,<@Margaret> I think the `some-fn` will work perfectly
805,1506584074.000308,Lavern,"<@Daniell> From <https://dev.clojure.org/jira/browse/JDBC-37>, 
&gt; Clojure/core specifically wanted java.jdbc to move away from dynamically bound variables

Is there somewhere the reasons for this are described?; Is that reasoning mostly from a library API’s perspective? Or are there reasons to not use a dynamic var to do transactions even within application code, where we’re fairly certain that the statements are actually on the same thread?"
805,1506588047.000157,Shira,<@Lavern> see <https://stuartsierra.com/2013/03/29/perils-of-dynamic-scope>
806,1506588063.000095,Shira,<https://stackoverflow.com/questions/12932530/what-is-the-practical-purpose-of-clojures-dynamic-vars-and-binding>; <https://stackoverflow.com/questions/11730828/clojure-and-dynamic>
807,1506595687.000059,Janelle,"I've been trying to use core.match to match on the type of a Record but haven't been able to figure out the syntax. Does anyone know how to reproduce the following condp but with core.match?

(defrecord A [a])
(defrecord B [b])
(defrecord C [c])

(let [x (B. 2)]
  (condp = (type x)
    A ""A""
    B ""B""
    C ""C""
    nil))"
808,1506601177.000241,Ellyn,try saying `A instead of just A; wait; here the result of type x is a class; why not just specify condition as (type A) instead of A; nvm you're looking for core match solution; btw does anyone have a good library for continuations in clojure?
809,1506603446.000242,Berry,"```
(ns server.snip.boof
  (:import [boofcv.struct.image GrayU8]))
```

results in:

```

1. Unhandled java.lang.ClassNotFoundException
   boofcv.struct.image.GrayU8

       URLClassLoader.java:  381  java.net.URLClassLoader/findClass
   DynamicClassLoader.java:   69  clojure.lang.DynamicClassLoader/findClass
          ClassLoader.java:  424  java.lang.ClassLoader/loadClass
```

now, I know that I have the boofcv loaded (via boot). Is there some way, via the repl, to dynamically get a list of all the classes / packages loaded?"
808,1506604103.00025,Ellyn,classes are loaded on demand; jvm doesn't load classes which aren't used
808,1506604779.000347,Berry,"how do I debug something like this? docs says:
```
                 [org.boofcv/all ""0.26""]
```
pulls in all the jars/classes

and I'm trying to use <http://boofcv.org/javadoc/boofcv/struct/image/GrayU8.html>"
808,1506605925.000215,Ellyn,well my IDE tells me all the jars I have in my build; and I can locate any class in those; your class is in `ip` artifact; and that dep pulls it; did you restart repl?; when you add dependencies you need to refresh your environment
810,1506609263.000566,Jacob,"does anyone know of a good way of instrumenting middleware so that I can step-debug through a particular `wrap-something` function. When I try `C-u C-c-c` (cider instrument?) it sometimes seems to work, but often not. My guess is that when the system is started - changes to the function no longer work. I thought that I could perhaps call out to another function that works like `identity` that I could then instrument?"
810,1506609349.000243,Guillermo,check in <#C0617A8PQ|cider>; not sure myself
811,1506611142.00015,Katy,"Hello, I have several functions `spec`ed with `spec/fdef` and I can easily generate tests in the REPL with `spec.test/check fn-sym`. How to integrate this functionality with clojure.test or clojure.test.check nicely without having to generate manually the inputs with `prop/for-all` ?; The guides at <https://clojure.org/guides/spec#_testing> and <https://github.com/clojure/test.check> don't show how to integrate functions spec'ed with fdef and clojure.test(.check); Seems like spec.test is not really integrated with test.check and clojure.test, I would have to manually parse the result of fdef and pass it to clojure.test/report; erff..."
811,1506613185.00035,Flo,"is this expected behavior?; ```  :64-bit-architecture ;; =&gt; :64-bit-architecture
  :energy-star/64-bit-architecture ;; =&gt; RuntimeError
```; it seems that if the name portion of a keyword would make a valid keyword then it should remain valid after adding a valid namespace portion"
811,1506613895.00008,Rosia,<https://dev.clojure.org/jira/browse/CLJ-1252>
811,1506614086.000339,Flo,thanks
812,1506620848.00028,Lennie,Hey guys.  Hopefully quick question...
812,1506620856.000332,Margaret,"I don’t know how helpful <#C0617A8PQ|cider> was, but the root issue here is that if you call `(wrap-foo x)` to make a handler, redefining wrap-foo doesn’t change that return value until you repeat that call - which likely means reloading the namespace in which the handler was wrapped after instrumenting the middleware; and, depending on how you start up your server, you might also have to restart it"
812,1506620880.000454,Lennie,"I'm trying to use java.jdbc with hugsql.  Should work without a problem as far as I've read.; I've got my dbspec in place and if I pass this directly to one of my hugsql-generated functions, it works great; But if I attempt to (jdbc/get-connection dbspec) , I keep receiving an IllegalArgumentException saying that my PgConnection object is missing a required parameter; I've looked at the docs and source for jdbc/get-connection, and I'm supplying all of the ones that are marked *required* - and since the same dbspec works thru hugsql, I honestly don't know what to do; Anyone else run into anything like that?"
812,1506621079.000095,Guillermo,can you paste your redacted db spec?
812,1506621109.000029,Lennie,"Yes,  one moment"
812,1506621124.000031,Guillermo,and what required parameter is it missing?
812,1506621161.000697,Lennie,"(def dbspec {
             :dbtype ""postgresql""
             :dbname (env :database-db)
             :host (env :database-server)
             :port (env :database-port)
             :user (env :database-user)
             :password (env :database-pass)
             }); I honestly wish I knew - it doesn't tell me or give me any clue; IllegalArgumentException db-spec org.postgresql.jdbc.PgConnection@187eff88 is missing a required parameter  clojure.java.jdbc/get-connection (jdbc.clj:374)"
812,1506621289.000537,Vallie,"Let’s say I take a function, like `(defn whatever [x] (+ x x))`, and a specific usage of this function, say `(whatever 10)`, is there a way I can return the original function definition but with the args replaced? So in this case, `(defn whatever [5] (+ 5 5))`?; Not sure what to call. Argument-replacement, some kind of static analysis or something"
812,1506621337.000354,Lennie,Relevant file from github: <https://github.com/clojure/java.jdbc/blob/java.jdbc-0.7.1/src/main/clojure/clojure/java/jdbc.clj>
812,1506621374.000188,Willow,have you evaluated each of the `(env :...)` forms to ensure they are returning the value you are expecting?
812,1506621501.000412,Lennie,"<@Willow> yes, they all appear to be exactly what I expect.  The only questionable one was the port, because it probably needs to be an int.  I've manually replaced that line with 5432, however, and that doesn't matter.... And as I said - if I pass this same dbspec thru a hugsql-generated function, it works as expected"
812,1506621604.000063,Keva,So like (replace-args [5] (partial whatever 10))?
812,1506621640.00042,Vallie,Oh crap I meant `(defn whatever [10] (+ 10 10))`
812,1506621653.000084,Keva,what
812,1506621661.000187,Margaret,<@Vallie> you can get close if you replace defn with defmacro and use macroexpand
812,1506621664.000095,Keva,what even do you mean :smile:
812,1506621667.000053,Margaret,but there’s definitely nothing baked in
812,1506621707.000083,Keva,`(defn whatever [10] (+ 10 10))` wat
812,1506621715.000596,Vallie,"<@Keva> maybe more like `(replace-args whatever 10)`, and that would output `(defn whatever [10] (+ 10 10))`; <@Margaret> interesting, I hadn’t thought of macroexpand"
812,1506621755.000551,Keva,still doesn’t quite make sense to me
812,1506621756.0001,Margaret,"```user=&gt; (defmacro whatever [x] `(+ ~x ~x))
#‘user/whatever
user=&gt; (macroexpand-1 ‘(whatever 10))
(clojure.core/+ 10 10)```"
812,1506621762.000121,Keva,"can you have `10` as an arg?; or not as an arg, but as a parameter denomination"
812,1506621808.000121,Vallie,"Yeah <@Margaret> that’s exactly what I’m thinking, but with regular functions instead; <@Keva> what do you mean by parameter denomination?"
812,1506621844.000035,Keva,as the name of an arg in an argument vector in a function definition
812,1506621849.000019,Margaret,there might be some trick based on clojure.tools.analyzer but it’s likely going to be a lot of work done by hand to create something that behaves that way
812,1506621895.00021,Vallie,"<@Keva> Yeah, any way of invoking it is fine. I’m trying to picture a new kind of tool for code debugging; <@Margaret> that’s a solid lead, I’ll check that out"
812,1506621952.000745,Margaret,"some of the folks that work on tools.analyzer hang out here, if you can’t find a dedicated channel they are active in the clojure-dev channel; tools.analyzer isn’t used by clojure itself, but it’s used by a lot of people who also work on clojure itself"
812,1506622008.000038,Keva,"<@Vallie> what I mean is this: 
```
(defn do-stuff [10] (+ 10 10))
CompilerException java.lang.Exception: Unsupported binding form: 10, compiling:(*cider-repl query*:145:6) 
```"
812,1506622024.000144,Margaret,that’s not what he’s trying to do at all though; this is about showing inline substitution to help you debug your code - eg. what edebug does in emacs with elisp code
812,1506622065.000093,Keva,oh; then I get the reference to analysis
812,1506622090.000097,Margaret,or what you would do by hand if you were trying to step through code by hand on a whiteboard
812,1506622098.000487,Keva,"yeah I see; so something like, what’s the editor by Chris Granger; Light Table?"
812,1506622134.000315,Vallie,"Yeah, something like that"
812,1506622141.000123,Keva,well there you have it; :smile:; can’t you look in the Light Table source?; or is their approach unacceptable?
812,1506622162.000386,Vallie,Does light table actually do a full on replacement? I haven’t seen that
812,1506622167.000134,Keva,no idea
812,1506622179.000552,Vallie,I just thought they did an instarepl kind of thing that turned out to be disappointing; But maybe I should give it another look
812,1506622228.000371,Keva,"The way that I _think_ I’ve seen it is that for a function invocation, you can see the current values for symbols in like, little balloons or something like that; I may be wrong; <https://youtu.be/H58-n7uldoU?t=93>; maybe I dreamt the balloon bit? or maybe that video is out of date"
812,1506622475.000208,Janelle,we need to port lighttable to vs code
812,1506622495.000436,Keva,"go ahead, <@Janelle> :smile:"
812,1506622561.00045,Janelle,"<@Keva> I'm thinking about it, but it's complex. I've used the F# extension Ionide for vs code and something like that for Clojure would be insanely great"
812,1506622605.000262,Keva,"I bet it is, <@Janelle> :slightly_smiling_face: Is there a video example of the greatness of Ionide? I’d like to see."
812,1506622613.000528,Janelle,"if i can figure out how to write vs code extensions in clojurescript, I would consider it"
812,1506622624.000414,Keva,"I haven’t ever seen VS code in action, I’m an emacs man these days, but certainly not religiously so"
812,1506622746.000716,Janelle,here's a link to ionide and the author of it's a really good guy (very active in the F# community) <https://www.youtube.com/watch?v=JWe1pOeh84U&amp;feature=youtu.be&amp;t=18m>; It's written using Fable which is an F# to JS transpiler; So it should be doable with clojurescript; As I don't want to write JS or TypeScript
812,1506622852.00052,Margaret,"I don’t know precisely what ionide does, but F# is strongly and statically typed, which are two features clojure lacks, and both features tend to make it easier to make helpful tooling; you can’t make the same kind of far reaching assumptions in clojure code that you can in f#"
812,1506622897.000016,Janelle,"yeah, but i think getting the vs code extension on par with the atom/proto-repl would be a good start; I'm thinking more about the project mgt, repl integration and debugging"
812,1506622928.000739,Guillermo,"I would love to see an implementation of the Language Server Protocol for clojure -- that is not tied to nREPL; (But certainly can reuse some of the nREPL functionality, just not the protocol)
<http://langserver.org/>; Lots of tools (like VS Code or Emacs) are planning on implementing the language server protocol"
813,1506623057.00019,Guillermo,"(Atom, too)"
813,1506623104.00064,Janelle,interesting
812,1506623359.000599,Vallie,"<@Keva> yeah, that’s pretty much what I’m envisioning, but like, a general library for that sort of thing; not necessarily tied to Light Table but usable in different tools"
812,1506623725.000036,Keva,"Tear it out of Light Table, then! :smile: If they can do it in this specific way, I’m guessing you can generalize it."
813,1506624672.000328,Dudley,"just realeased version 0.3.0 of postagga, the easy natural language parser - now with more flexible parsing rule :slightly_smiling_face: <https://github.com/fekr/postagga>"
812,1506625189.000377,Vallie,It appears that the light table source code has exactly zero comments anywhere
813,1506632751.000587,Arlean,"<@Dudley> just glancing, it's not clear that you could handle unmarked passives, whiz deletion, gaps, pp attachment etc, using your approach, is that correct?"
813,1506632893.000216,Dudley,"Oh yeah that’s true, it’s there  just to get you going with extracting meaningful information from text whose structure is known; Just for you to write bots quickly ; For now!"
813,1506633009.000507,Dottie,"Hello, I would appreciate a little help
I created a luminus template with the `+postgres` option"
813,1506633011.00044,Arlean,"Yeah, feels like Yale case frame parsers from the schank era. Definitely useful for a bunch of stuff still!; <@Dudley> do you have precision/recall for  Brown Corpus POS and file size for the cljs tagger? Looking for a small tagger that can run in the browser but everything seems to be impractically large :("
813,1506633368.000437,Dudley,"Yeah I assume this is not the fanciest NLP methodology out there but it is there for the rest of us to use :); You can use your corpus with it, shall be embeddable in your browser,"
813,1506633429.000289,Arlean,"Nono, not a slight at all! Been feverishly studying oldschool semantic parsers and great to see things being done for humans :)"
813,1506633458.000044,Dudley,I tried a corpus on the browser 
813,1506633484.000536,Arlean,"Problem with ""compact"" taggers i found you still need the corpus dictionary in the browser"
813,1506633505.000277,Dudley,Nor too bad performance-wise buy detection was poor ; You can maybe lend a hand improving it :)
813,1506633547.000019,Arlean,Or at least share notes. Seems we have similar hobbies :); Sadly I don't have a small footprint solution to POS atm :)
813,1506633692.000089,Dudley,Have you had a look at the ones I shipped?
813,1506635537.000466,Arlean,"I shall try them out tomorrow, thanks!"
814,1506637190.00043,Vallie,"Is there a clojure library for emitting plain clojure?; Sort of along the lines of what Tim Baldridge does here, but more complete: <https://www.youtube.com/watch?v=KhRQmT22SSg>"
814,1506637244.000216,Kareen,emitting from what?
814,1506637254.000165,Vallie,an AST; of Clojrue; from Clojure to Clojure haha
814,1506637270.000238,Kareen,tools.analyzer.jvm (the library that tim is talking about) has a pass that does that
814,1506637283.000173,Vallie,Really? hmmm
814,1506637290.000404,Kareen,"<https://github.com/clojure/tools.analyzer.jvm/blob/master/src/main/clojure/clojure/tools/analyzer/passes/jvm/emit_form.clj>; (in fact, that's the pass that core.async uses from going from AST back to clojure code)"
814,1506637362.00002,Vallie,"Not sure how I missed that, thanks a bunch!"
814,1506637666.000071,Kareen,"tools.analyzer's documentation is not the best, my fault. contributions are more than welcome tho :)"
814,1506637808.000189,Vallie,"pretty junior clojure guy here, but I’ll help if I see a way to"
815,1506638623.000372,Martin,Does anyone know of a similar test structure to “are” in speclj?
816,1506650015.000125,Cordia,"Sorry, wrong thread. Moving to <#C053AK3F9|beginners>"
817,1506654885.000067,Berry,"I need to generate an image by:
1. adding some text
2. adding some salt &amp; pepper noise
3. add some gaussian noise
4. distort the image a bit
5. write it out as a png
is quil the right library to use for this, or should I use something else ?"
818,1506660331.000132,Leah,I’m not that experienced with Quil but I think it’d be perfect for that
819,1506665639.000199,Berry,"how do I convert ""GrayF32/class"" to clojure ? GrayF32 image = UtilImageIO.loadImage(""test.png"",GrayF32.class);"
820,1506677059.00036,Kareen,just `GrayF32`
817,1506678265.00021,Berry,"<@Kareen>: lol, thanks :slightly_smiling_face:"
821,1506679472.000041,Arlean,is there a way to coax cider to allow inspection of return values in the repl like SLIME? currently it seems any value returned is just syntax highlighted but is otherwise a just a string in the buffer.
821,1506679838.000036,Jodie,there is a cider-inspect
821,1506679969.000321,Arlean,doh! thanks I'll take a look
821,1506680528.000304,Zola,how can i print to the console from .cljc files? neither `js/console.log` and `println` work (which is understandable as we're not specifying a build target)
822,1506682759.000024,Daine,"You can use something like   (:require [#?(:clj     clojure.spec.alpha
                :cljs    cljs.spec.alpha
                :default clojure.spec.alpha) :as s]) to support both clj and cljs specific funtionality; I used this to have all my spec’s in one file"
822,1506683499.000253,Shad,"Good day to all: I've encountered a namespace loading failure when using cloverage, which I'm not sure how to debug `Exception in thread ""main"" java.lang.IllegalArgumentException: Parameter declaration missing, compiling:(/tmp/form-init5334710656729606392.clj:1:73`; The `tmp` files does seem to exist anymore so I cannot inspect `/tmp/form-init5334710656729606392.clj:1:73`; and the Exception trace doesn't address any lines of my own code... I'm a bit stumped tbh; does &gt; doesn't; Does anyone know if temporary files like `/tmp/form-init5334710656729606392.clj:1:73` can be retained somehow?; I'm running under `lein` if that is significant: `lein cloverage` specifically.; I cannot find any obvious omissions of parameter declarations within my `(defn ...)`'s"
823,1506685031.00011,Lynell,(enable-console-print!)
822,1506686371.000033,Shad,"Well, that wasn't much fun. By nuke all test namespaces and progressively removing clj files from my project, until cloverage worked I isolated the problem to a `(defn exist-until)` - silly me.; Still it would be nice if these kinds of issues were easier to isolate - open to ideas; Seems like I was half-way through implementing a function I thought I'd need, but ended up not using it and since it was not referenced the application concerned compiles and runs fine.; But clearly `cloverage` wants to instrument everything, regardless of whether code is used or not...; Actually, it turns out the function was the only `(defn ...)` within a new `clj` file I'd created, that was not being required by any other namespace - doubly silly me. Which is why `lein run` was not picking it up.; When I actually require said file, I see a helpful error message that would have enabled me to isolate the problem a lot quicker `Exception in thread ""main"" java.lang.IllegalArgumentException: Parameter declaration missing, compiling:(xxx/xxxx/xxxxxx/domain.clj:13:1)` - just in case anyone is interested."
824,1506691226.000259,Senaida,"Hi <@Sonny>, I'm reading through this article of yours on sequences and was wondering what you meant by ""logical"" when you said:
&gt;Sequences are _logical_ lists
<http://insideclojure.org/2015/01/02/sequences/>"
824,1506696758.000489,Fe,"<@Senaida> I'm not <@Sonny> but I read this as ""conceptually"", i.e. something that conforms to the concept of a list, even if it may not be implemented as a classical Lisp list (cons pairs)"
825,1506696866.000218,Darcel,"I wrote a spec for a function, but spec can't create a generator for it. Is there any way to provide the generator for that function to spec ?"
824,1506696940.000497,Janelle,"<@Senaida> Perhaps this will help, <https://clojure.org/reference/lazy> ""A seq is like a logical cursor"""
825,1506697153.000629,Myles,<@Darcel> <https://clojure.org/guides/spec#_custom_generators>
825,1506697248.000005,Darcel,cheers
824,1506703365.000111,Sandy,"Unlike other lisps, Clojure has an abstract representation of a list. Instead of saying a list is a cons cell, in Clojure a ""list"" is something that implements ISeq; clojure.lang.ISeq, a interface that defines a ""first"" and ""rest"" method.; Seq - something that conforms to ISeq. May be a bunch of cons cells, may be an view over a collection, etc; Seqable - something that isn't itself a seq, but can be converted to a seq; List - a list is technically a PersistentList which is a ISeq that also implements some other features (like O(1) counting).; So all that to say, ""logical list' is a way of saying all of that ^^ while also showing that Clojure defines lists a bit differently from other lisps, or even Java."
824,1506704235.000521,Senaida,Thanks <@Sandy> :+1: Going to read that a few times over to let it sink in :simple_smile: 
826,1506706069.000343,Vallie,Is there a way to run `read-string` to get the from from a string without evaluating the defs?; So like something to wrap around `(read-string (defn inc [x] (+ x 1)))` so that clojure.core/inc doesn’t get overwritten?
826,1506706274.00005,Kareen,"that doesn't make much sense, read-string operates on strings not on data and doesn't do any evaluation; can you clarify what you mean?"
826,1506706326.000318,Vallie,"Funny, I thought `(read-string ""(def inc (fn [x] (+ x 1)))"")` would overwrite inc but it doesn’t seem to; Something fishy’s going on in my code. Somewhere the def is being evaluated, but I thought it was just being read…; Ok, so my problem wasn’t with read-string. <@Kareen>, is there a way to do `(e/emit-form (ana.jvm/analyze '(def inc (fn [x] (+ x 1)))))` without overwriting clojure.core/inc?"
826,1506707026.000136,Kareen,"yes, you can provide a different value for  `ana.jvm/create-var`; but; that will cause some issues, if you're not careful"
826,1506707640.000585,Bibi,Very intrigued by what <@Vallie> might be working on :slightly_smiling_face:
826,1506707800.000077,Vallie,"<@Bibi> still in the initial research/brainstorming phase, but I hope to have something releasable within a month; <@Kareen> so it’s not really possible without forking and extending the lib?"
826,1506707915.000183,Kareen,"no it's possible, all the knobs are there; it's just tricky to handle all the edge cases if you do; there's a few of implicit assumptions that the clojure evaluation model makes; that assume a var will be interned at analysis time rather than at evaluation time; depending on what you're doing, you might not care tho"
826,1506708130.000241,Vallie,"<@Kareen> I see. If I end up going down the road, can I dm you for help? :stuck_out_tongue:"
826,1506708137.000668,Kareen,sure
826,1506708140.000426,Vallie,thx
826,1506708145.000371,Kareen,expect some async in response tho :)
826,1506708152.000524,Vallie,haha of course :slightly_smiling_face:
826,1506708386.000362,Kareen,"while I'm here, I'll expand a bit on what the edge cases are; - clojure needs to intern vars at analysis time, to support expressions like `(def a (fn [] a))`, so that the var `a` is reachable in the intialization body of the var def
- t.a provides a configurable `create-var` function that you can replace with a no-op, so that the var won't get interned
- because t.a resolves vars using its global env map rather than inspecting directly clojure's reified namespaces, so that if you want you *can* make that expression analyzable w/o actually interning anything
*however*
- because side-effects can happen at macroexpansion time, including var interning and var unmapping, t.a. needs to rebuild its namespace map from clojure's reified namespaces after every macroexpansion (yes, there are actually libraries that do this sort of stuff, ugh)
- this means that the var assoced into t.a's namespace map will be dissoced after the first macroexpansion if it's not actually interned 
- to work around this, the function responsible for updating t.a's namespace map is pluggable, thrugh a function under the `:update-ns-map!` key in t.a.jvm's global-env, so that you can provide your own that ensures the non interned var is kept around; understanding all this requires some knowledge of how clojure's evaluation model works and some understanding of tools.analyzer's implementation; all this complexity is unfortunately unavoidable, since clojure's evaluation model wasn't designed with ease of analysis in mind"
827,1506711279.00049,Vallie,"good heavens, that is complicated…; I need to save that somewhere"
828,1506714930.000328,Branda,Is there a way to refer to unqualified `void` in a syntax quote context?
828,1506714996.00046,Margaret,isn’t that just nil?; I don’t think void means anything in clojure
828,1506715018.000496,Branda,I thought it did in `gen-class`
828,1506715045.000323,Margaret,"oh - gen-class probably wants the symbol; so in a syntax-quote, use ````(... ~'void)```"
828,1506715074.000058,Branda,it might ignore the namespace qualification I should test; ah there it is; many thanks
828,1506715091.000103,Margaret,"that would be handy, but usually the unquote / quote combo does the trick otherwise"
828,1506715140.000274,Branda,that was exactly what I needed; don’t have to test
829,1506716864.000012,Vallie,Lotta questions from me the last couple days. Got one more.; Is there a way to check if eval will work on a variable?; Something like `evalable?`
829,1506717157.000247,Margaret,"<@Vallie> you could see if resolve returns non-nil; ```user=&gt; (resolve 'inc)
#'clojure.core/inc
user=&gt; (resolve 'foo)
nil```; I don’t know what you mean by variable though; do you mean symbols that may be bound to a var or a local? just vars?; are classes included?"
829,1506717234.000219,Vallie,"Oh, I mean a form; So like true for (+ 2 2) but false for 5; Maybe seqable would do it?"
829,1506717251.000236,Margaret,"but you can eval 5; ```user=&gt; (eval 5)
5```"
829,1506717290.000237,Vallie,Hm.. I guess eval isn’t really what I need then
829,1506717305.000473,Margaret,do you want to know if something is fully simplified?; eg. in `(case x (1 2) :a :b)` `(1 2)` is fully simplified (one of the few places something that has parens inside it would be such)
829,1506717366.000275,Vallie,"Well in this case, I want a trigger on both; Both the outer form and the inner simplified form"
829,1506717407.000177,Margaret,OK but you’ll have gotchas for case and any other macro that treats parens oddly; (depending on how you’re doing this simplifying and whether the language you are supporting is actually clojure or not)
830,1506719477.00044,Branda,"One last syntax quote context question of the day :grinning:..   I am trying to construct a map from a collection of forms
```{~@yes-i-am-an-even-numbered-collection}```
but I receive a compiler exception ` Map literal must contain an even number of forms`"
830,1506719724.000277,Wenona,`(hash-map ~@stuff)`?
830,1506719765.000177,Branda,"trying that now…  my forms might be angry for another reason.   thanks!; nah, `hash-map` was the ticket…"
831,1506720167.000137,Darcel,how can I create to specs which reference each other?
831,1506722841.000303,Cecile,"<@Darcel> There is a <#C1B1BB2Q3|clojure-spec> room. There are many ways to have specs referencing specs, such as: `(s/def ::checks (s/coll-of ::depend))` (`::depend` is a spec)"
831,1506723350.000073,Darcel,"I see, but i need to reference to ::checks inside the ::depend as well"
832,1506739331.00007,Silas,"QUESTION: Anyway I can try catch a let binding, and have access to the bindings in my catch?"
832,1506739384.000041,Margaret,"nothing simple, no"
832,1506739422.000047,Silas,"```
try(
  (let [a 100
         b (throw (ex-info ""bla"" {})]
   a)
(catch Exception e a))
```"
832,1506739448.000062,Margaret,"right, that's not even going to compile"
832,1506739476.000036,Silas,Ya; erm
832,1506739546.000063,Margaret,"in some weird cases I've had positive results with binding delays in a let block, forcing the delays in a try, and then checking if they are realized and conditionally accessing them in the catch; but you want to be careful you aren't forcing delays that didn't run yet in the catch block of course so it's clumsy"
832,1506739574.00002,Silas,"Ya; I'm thinking to just let a bunch of atoms, and inside the let do some weird side effect Java style assignments"
832,1506739673.000048,Margaret,"```(let [a (delay (foo))
     b (delay (bar @a))]
  (try @b     
     (catch Exception e
        (when (realized? b)
          ...))))```; you don't need atoms if you are only assigning once"
832,1506739733.000015,Silas,"hum, true; I hate both ways honestly :stuck_out_tongue:; Just because I want to log some of the bound vars inside the let in the case something throws an exception lol; Is the delay going to properly throw?; When derefed?"
832,1506740041.000066,Margaret,a delay with a body that throws an error when forced throws the exception when forced - the reason to have the delay is so that a and b are in scope in the catch
832,1506740081.000079,Silas,Right ok; Which is why in my catch I need to check for realized? or it would rethrow
832,1506740333.000023,Margaret,"oh, wait, sadly it doesn't work out that way ```+user=&gt; (let [d (delay (/ 1 0))]
          (try @d
               (catch Exception _)))
nil
+user=&gt; (let [d (delay (/ 1 0))]
          (try @d
               (catch Exception _
                  (when (realized? d)
                    @d))))
ArithmeticException Divide by zero  clojure.lang.Numbers.divide (Numbers.java:158)
```"
832,1506740406.000126,Silas,:disappointed:; I guess I have to use atoms then
832,1506740436.000089,Margaret,"or promise/deliver; ```+user=&gt; (let [p (promise)]
          (try (deliver p (/ 1 0))
               (catch Exception _
                  (when (realized? p)
                    @p))))
nil
```; so you can guard usage of p in the catch block based on whether it's realized; it's too bad you can't do that with delays though"
832,1506740579.000062,Silas,"Hum, that's almost the same as making p an atom, but its a bit more explicit in the semantics I guess"
832,1506740605.000068,Margaret,it's a less powerful construct (and performs better)
832,1506741533.000005,Silas,How come delay was throwing on the deref but not promise though
833,1506741545.000024,Silas,I mean on the realized?; sounds like a bug
832,1506741627.000008,Margaret,"it's throwing on deref, but it shows as realized; similar to the behavior of future - if it sees an exception it throws on deref"
832,1506741721.000042,Silas,"oh ya, I remember that quirk now; so does promise just return nil or the exception, but does not throw it?"
832,1506741828.000026,Margaret,"the exception means that deliver never gets called; similar to `(println ""error"" (/ 1 0))` - ""error"" won't print, the exception prevents println from being called"
832,1506741872.000048,Silas,"oh right, ok I see; The downside, if I'm not careful in my catch, I can just forever block my thread; where-as atom would just be nil"
832,1506750329.000017,Patti,"I'm having an issue loading my `core.clj`. It depends on a .clj file in the same directory but it says it's not found on the classpath. The directory is on the classpath though. The weird thing is if I `load-file` on the depended upon file that runs fine, and after that I can also `load-file` on the `core.clj` without issues.; I suspect I messed up namespacing/directory structure or something in the project.clj.
<https://github.com/bbss/cljsc2/tree/master/src/cljsc2/clj>"
834,1506759619.000023,Hisako,"<https://gist.github.com/hkjels/5637e59933d4c8cebf73d4052d75b2f8>

Hi, I wrote this a while back and now I’m having a hard time understanding my own code :unamused:
Do any of you see where this short-circuits?
What I would like is for all of the matches to be returned; I’m not certain yet, but I think there might be a performance-issue here as well, so if there’s a more idiomatic way of doing this, that would be great!; *still learning*"
832,1506764001.000018,Bridgette,"<@Patti> `lein run` returns `No :main namespace specified in project.clj.`

 Perhaps adding the `:main` key and value will do the trick for you. You can run `lein sample` for an example.; Oh, I don’t see a main fn in core. My suggestion probably won’t help. :thinking_face:"
832,1506764901.00007,Patti,"<@Bridgette> thanks, good suggestion to try anyway."
832,1506765045.000045,Bridgette,"The other that might help is to use a tool like lein-ns-dep-graph to autogenerate a pic of your internal namespaces, and compare the generated image with your understanding of what should be. <https://github.com/hilverd/lein-ns-dep-graph>; Here’s what that program outputs for your proj; <@Patti> how are you actually trying to to load the file? From the REPL? etc.; <@Patti> FWIW, i’m getting the same error msg when running `(load ""cljsc2.clj.core"")` from user ns at repl:
`FileNotFoundException Could not locate cljsc2.clj.core__init.class or cljsc2.clj.core.clj on classpath.  clojure.lang.RT.load (RT.java:458)`"
832,1506766088.000022,Patti,"I'm running from Cider, but lein repl has the same issue."
832,1506766118.000024,Bridgette,"Yep, I was in lein. Now I’m just curious!"
832,1506766158.000051,Patti,"That graph looks good, I guess. I'm not near my computer right now to debug. ; Thanks for looking at it. Will let you know when I figure it out."
832,1506766594.000047,Berry,I'm willing to sacrifice pixel equivalency across platforms. Is there something faster than Graphics2D/bufferedImage for drawing text / rectangles / ovals ?
832,1506766807.000009,Bridgette,"<@Berry> not sure, but you might poke around <http://thi.ng/> because I know the author is into performance and well versed in such things."
832,1506766952.000032,Berry,<@Bridgette>: I have lost track of the # of times I have tried (but failed) to get into that librry
832,1506767001.000062,Bridgette,interesting. I’ll keep that in mind.
832,1506767043.000055,Berry,"it's clearly brilliant; I just can't seem to find a tutorial/docs for ""how to create an image+ render text with <http://thi.ng|thi.ng>"""
832,1506767224.000028,Isabell,Is there a straightforward way to turn a simple namespace (containing only defs and defns) into a map?
832,1506767337.000029,Bridgette,<@Isabell> Would `dir` do the trick? Or do you need something more?; I think namespaces are maps under the hood
832,1506767452.000101,Isabell,<@Bridgette> you mean `clojure.tools.namespace/dir` ?
832,1506767485.000025,Bridgette,`clojure.repl/dir`
832,1506767489.000042,Isabell,ok; I will try
832,1506767527.000052,Bridgette,"I thought it was in core, thanks for asking."
832,1506767624.000044,Isabell,"Ok just tried it, it just print all the vars names; I would like a map of kind {var-name var-value}"
832,1506767794.00001,Bridgette,Interesting. I recall namespaces themselves being maps. It might be useful to dig into Clojure source for this one and see if its somethings that is or can be coerced to a map.
832,1506767894.000009,Isabell,"<@Bridgette> thank you, I was hoping for a simple function but if I have to dive, I will :slightly_smiling_face:"
832,1506767926.000024,Bridgette,Hopefully some more experienced folks than I will wake up soon ; )
832,1506767941.000034,Isabell,yes!
832,1506768456.000018,Librada,"<@Isabell> You probably want to look at `clojure.core/ns-interns` or `clojure.core/ns-publics`; something like `(ns-publics 'clojure.core)`, for example, should get you all the public vars in that namespace"
832,1506768516.000036,Isabell,<@Librada> great! thank you
832,1506768528.00001,Librada,you’re very welcome :smiley:
835,1506770482.000032,Cristi,"Along those lines, don't forget that `meta` is a thing; With a little bit of convolution you can get all the docstrings and other fun stuff out of a namespace"
835,1506771781.000034,Isabell,<@Cristi> good point!
835,1506772278.000061,Cristi,"Actually, I just remembered I have the code around here: <https://github.com/lsenjov/clj-slackbot/blob/master/src/clj_slackbot/evaluator.clj#L118>"
836,1506772437.000003,Isabell,nice :slightly_smiling_face: thank you
837,1506784370.000037,Leone,None
838,1506786891.000066,Kyung,"<@Berry> I’ll be interested to hear what you decide on. Google turns up the usual mix of OpenGL bindings, game engines, and some stackoverflow commentary on how to optimize use of the standard java 2d libs. Are you rendering offscreen? Or is this onscreen visualization of some sort? Again, I’m just curious. "
837,1506788304.000011,Leone,"Never mind. I think the source of starvation/suppression is not `clojure.core.async/mix` itself. Rather, how the data producers compete for another shared resource and wait for some fixed interval before trying again. Randomizing the interval seems to improve the situation."
839,1506789588.000056,Vallie,"Need some macro help. I’m trying to walk a form and get meta data for each symbol.; (defmacro meta-sym [sym]
  `(if (symbol? ‘~sym) (-&gt; ‘~sym resolve meta) {})); But (clojure.walk/postwalk #(println (ex/meta-sym %)) (read-string (clojure.repl/source-fn ‘max))) just prints out a bunch of nils; However, I can do `(meta-sym defn)` and get a full meta map; Think I need <@Margaret> and <@Kareen>for this one"
839,1506791851.000109,Rickey,<@Vallie> `postwalk` and friends replace the nodes with the return values of your fn.
839,1506791885.00005,Vallie,So would `(clojure.walk/postwalk #(do (println (ex/meta-sym %)) (identity %)) (read-string (clojure.repl/source-fn 'max)))` work?; Note the do block that returns the identity
839,1506792171.000011,Rickey,"Should do, although you don’t need to call `identity`. Just have `%` as the last form."
839,1506792503.000012,Vallie,Now it’s printing a bunch of `{}`. (symbol? ‘~sym) is return false on all of them.
839,1506793532.000069,Rickey,"This seems to work (I only have my iPhone with Replete to do this on though, sorry):

`(def a {:foo ^{:test1 123} [] :bar (quote ^{:test2 456} baz)})`

`(clojure.walk/postwalk #(do (when (symbol? %) (println (meta %))) %) a)`"
839,1506793918.000009,Vallie,"<@Rickey> thanks a bunch, looks like the issue was with the data structure I was trying to walk; I was trying to do it with (def a (read-string (clojure.repl/source-fn ‘max)))"
840,1506804638.000106,Lavenia,"Some months ago, I think that <@Sonny> gave me a super-useful pointer on how to list all clojure data structures which implement some interface (eg `clojure.lang.Associative`). I thought I made a note of it at the time, but damned if I can find it, and of course it's long since fallen off the cliff at the end of Clojurians' history. Anyone happen to know offhand how you could do that?"
841,1506808967.000039,Leighann,is this the discussion?   <https://clojurians-log.clojureverse.org/datomic/2016-12-22.html>
841,1506809306.00001,Lavenia,"Dang, <@Leighann>, nice find! Turns out it's exactly backward from what I remembered -- not a way to show all data structures which implement some interface, but a way to show all interfaces implemented by a particular data structure (namely `(supers (class entity))`). So doesn't solve my immediate problem, but _definitely_ goes into my notes this time."
840,1506825952.000025,Sonny,"<@Lavenia> I usually use intellij, then hit ctrl-h on the class to show the class hierarchy to answer this question"
842,1506827644.000046,Douglass,"any suggestions for a good library/pattern to control per-user long running operations (e.g. I have plenty of relatively per-user heavy file operations that cannot run in parallel, shouldn't be re-tried)?"
843,1506840859.000052,Jacob,"does anyone know why I am getting a no matching method for the following? ```(def buff1 (byte-array [1 2 3 4 5]))
(def buff2 (byte-array 5))
(System/arraycopy buff1 0 buff2 5)```; ```CompilerException java.lang.IllegalArgumentException: No matching method: arraycopy```"
843,1506840990.000006,Mildred,Wrong arity? Missing length...
843,1506841168.000025,Jacob,<@Mildred> its arity 5...
843,1506841228.000063,Mildred,"Yep, you've only got 4 :)"
843,1506841559.00006,Jacob,"Yeah, can't believe I missed that... 10 mins of googling because I didn't read the signature properly :smile:"
844,1506844068.000031,Easter,hi! what is idiomatic way to set type hint for fn return value? before fn name or before args vector?; (defn ^String foo [x] (str x))    or     (defn foo ^String [x] (str x))
843,1506844688.000008,Mildred,"err, I'm pretty sure the second one is invalid (or does something else)"
844,1506844794.000028,Mildred,`^String` is shorthand for `^{:tag String}` which associates metadata to the proceeding symbol (the function name)
844,1506844930.000086,Easter,"no, both are valid. i've checked in repl. both allow to avoid warn on reflection."
844,1506845050.000038,Mildred,"Oh okay, cool, I hadn't seen it before :)"
845,1506849141.000064,Apolonia,"On the :arglist name is always first, but he makes some dancing at the beginning of defn definition to catch all the cases :smile:
```
(def

 ^{:doc ""Same as (def name (fn [params* ] exprs*)) or (def
    name (fn ([params* ] exprs*)+)) with any doc-string or attrs added
    to the var metadata. prepost-map defines a map with optional keys
    :pre and :post that contain collections of pre or post conditions.""
   :arglists '([name doc-string? attr-map? [params*] prepost-map? body]
                [name doc-string? attr-map? ([params*] prepost-map? body)+ attr-map?])
   :added ""1.0""}
 defn (fn defn [&amp;form &amp;env name &amp; fdecl]
        ;; Note: Cannot delegate this check to def because of the call to (with-meta name ..)
        (if (instance? clojure.lang.Symbol name)
          nil
          (throw (IllegalArgumentException. ""First argument to defn must be a symbol"")))
        (let [m (if (string? (first fdecl))
                  {:doc (first fdecl)}
                  {})
              fdecl (if (string? (first fdecl))
                      (next fdecl)
                      fdecl)
              m (if (map? (first fdecl))
                  (conj m (first fdecl))
                  m)
              fdecl (if (map? (first fdecl))
                      (next fdecl)
                      fdecl)
              fdecl (if (vector? (first fdecl))
                      (list fdecl)
                      fdecl)
              m (if (map? (last fdecl))
                  (conj m (last fdecl))
                  m)
              fdecl (if (map? (last fdecl))
                      (butlast fdecl)
                      fdecl)
              m (conj {:arglists (list 'quote (sigs fdecl))} m)
              m (let [inline (:inline m)
                      ifn (first inline)
                      iname (second inline)]
                  ;; same as: (if (and (= 'fn ifn) (not (symbol? iname))) ...)
                  (if (if (clojure.lang.Util/equiv 'fn ifn)
                        (if (instance? clojure.lang.Symbol iname) false true))
                    ;; inserts the same fn name to the inline fn if it does not have one
                    (assoc m :inline (cons ifn (cons (clojure.lang.Symbol/intern (.concat (.getName ^clojure.lang.Symbol name) ""__inliner""))
                                                     (next inline))))
                    m))
              m (conj (if (meta name) (meta name) {}) m)]
          (list 'def (with-meta name m)
                ;;todo - restore propagation of fn name
                ;;must figure out how to convey primitive hints to self calls first
								;;(cons `fn fdecl)
								(with-meta (cons `fn fdecl) {:rettag (:tag m)})))))
```; The ^ char function is managed by the reader, that's why metadata cannot be first argument as it's already embedded in next symbol."
845,1506857059.000019,Kareen,"since clojure 1.8.0, always use the latter "
845,1506864210.000005,Lavenia,"Thanks! I just got a Cursive license last week, basically just for the analysis tools…"
846,1506870794.000116,Inocencia,Is it possible to get any data out of a dereferenced var?
847,1506873357.000058,Rickey,Can you explain a bit more? Dereferencing a var yields data by itself.
846,1506877369.00007,Inocencia,"Sorry. Like a name, or namespace, or anything at all really; Whether it’s a def or a defn; I’m not sure what can be called on it, other than apply and str"
847,1506888428.000023,Rickey,"Do you mean resolving a symbol to its bound value? `ns-resolve` might be what you’re looking for - e.g. `(def a 123) (ns-resolve *ns* ‘a)`; Otherwise, as in all Lisps, names resolve to their values unless they’re quoted. =&gt; `a` is all you need."
847,1506892291.000098,Cristi,"If it's dereferenced/resolved already, probably not. At that point you're looking at the value, not where it came from"
847,1506892883.00006,Silas,"QUESTION: I've noticed that tools.logging doesn't seem to log the data map of ex-info, any way to have it log it also?"
848,1506893296.000107,Silas,"I saw a JIRA for it, but it mentions the issue is that log4j2 calls getMessage and not toString, but I use Logback as the backend with SLF4J and I see the same behaviour; Hum, actually this seems to be Logback's behaviour"
849,1506936514.000397,Jaqueline,"hi, I read another http server comparison on twitter <https://twitter.com/playpausenstop/status/914218443443929089> and decided to reproduce and add clojure to it: <https://github.com/razum2um/hello-http-bench> and wrk said clj was even faster. I suspect something is wrong, there shouldn’t be *such* difference. What am I missing?"
849,1506937789.000449,Randee,<@Jaqueline> The python code has a router it seems. Which ruse and clj don't have
849,1506938669.000021,Jaqueline,"<@Randee> ok, but to tell the truth, I’m not a python-guy, took it straight from twitter, can you PR?"
849,1506938723.000003,Randee,"Sorry no, I don't think such trivial benchmarks are meaningful. The big techempower benchmark tries to benchmark more real world usage patterns."
849,1506938857.000239,Jaqueline,"<@Randee> but still, what about such big difference even with rust?; who’s here ownes oss_clj in twitter?! why tweeting before getting understanding?"
849,1506951892.000655,Hien,"well.. the maintainer is mentioned in the twitter account description. But it seems to be using a daemon that tracks twitter mentions with <http://github.com|github.com> in it, so it seems to be an automated tweet"
850,1506954292.000562,Emelina,"hi guys
Hacktoberfest is here!
feel free to contribute to clojure projects:
<https://github.com/search?utf8=%E2%9C%93&amp;q=label%3Ahacktoberfest+state%3Aopen+type%3Aissue+language%3Aclojure&amp;type=>"
850,1506956089.000816,Misti,"Guys I created Clojurecademy I hope you like it, feel free to provide feedback; <https://clojurecademy.com>"
851,1506960972.000329,Arminda,"I’ve been programming in Clojure for years, but this one stumped me for a while:  Without giving away too much of the solution, why do `(pf)` and `(f)` return different ranges?; ```(let [csrng (java.security.SecureRandom.)]
  (defn pf
    ([] (pf csrng))
    ([rng] (java.lang.Math/abs (.nextLong rng))))

  (defn f
    [] (java.lang.Math/abs (.nextLong csrng))))
``` ; To confuse the issue, try taking out the call to `Math/abs`."
851,1506961372.000171,Carma,pretty sure you mean ```(pf csrng)``` there - and I have no clue what's going on ^^
851,1506961416.000523,Kareen,"you're closing over the same random generator so getting a new random value every time, independently of which function you invoke"
851,1506961447.000093,Willow,but the question is about why they return different ranges?
851,1506961637.000318,Kareen,i don't understand the question then
851,1506961719.000275,Willow,<@Arminda> can you explain a bit more what you mean?; are `pf` and `f` returning values that are in different ranges?
851,1506962707.000241,Aldo,"ok that is pretty weird; ```
boot.user=&gt; (pf)
545391547
boot.user=&gt; (pf)
1976462804
boot.user=&gt; (pf)
1535096817
boot.user=&gt; (pf)
825017953
boot.user=&gt; (pf)
596938158
boot.user=&gt; (f)
7871239576498841695
boot.user=&gt; (f)
8955889148814316217
boot.user=&gt; (f)
8975201899528191775
boot.user=&gt; (f)
3340060048302527866
boot.user=&gt; (pf)
768712039
```"
851,1506962879.000161,Eliana,"It has to do with some type information no propagated properly during the function call. If you type hint they return results of the same magnitude:
```
(let [csrng (java.security.SecureRandom.)]
  (defn pf
    ([] (pf csrng))
    ([^java.security.SecureRandom rng] (java.lang.Math/abs (.nextLong rng))))

  (defn f
    [] (java.lang.Math/abs (.nextLong csrng))))
```"
851,1506963021.000085,Kareen,"ah, I guess Math/abs reflective call is picking the abs(Integer) arity rather than abs(Long)"
851,1506963038.000643,Aldo,ahhhhh
851,1506963051.000289,Arminda,"<@Eliana>: correct.  But I find it bizarre that in the polymorphic function reflection fails, but not in the “normal” function.; Thanks, <@Kimberlie> for catching my typo."
851,1506963106.000605,Kareen,"reflection is not failing anywhere; refleciton is being used in `pf` and not used in `f`; because `f` knows the type of csrng, because it is statically determinable, while `rng` can be any Object"
851,1506963293.000672,Arminda,"<@Kareen> Yes, failure is too strong of a word.  But the inability to determine the type, and the unfortunate guess of integer leads to very surprising results.  In this case, the range of a crypto function suddenly loses 32 bits of randomness…; …silently, unless you have `*warn-on-reflection*` set, which is how I debugged this."
851,1506963433.000474,Rubie,"I have this for getting fields from a pdf document
```
(defn get-fields [document]
  (-&gt;&gt; document
       (.getDocumentCatalog)
       (.getAcroForm)
       (.getFields)))
```
If I wanted to be able to pass in any of those things to get the fields, what would be the clojure way to do that?"
851,1506963529.000214,Kareen,<@Arminda> well guessing the type as anything but object would be a mistake - - that arty is public so you'd be free to invoke it with anything exposing a nextLong method ; even a class that returned an integer from it :) 
851,1506963612.000506,Aldo,isn't reflection a runtime decision? doesn't it already have access to the object returned by nextLong at that point?
851,1506963716.000227,Kimberely,tossing this out there because I don’t understand: why does `first` work on a set? what utility does that have?
851,1506963859.000568,Aldo,it lets you get the object out of a set that you know to be of length 1; though I imagine the *reason* it works is just because the types fall out that way. but that's one use for it
851,1506964168.000655,Eliana,"<@Kareen> but isn't the Reflector here making a dubious choice? It looks like Math/abs int is taking precedence over the long version, probably because both are ""congruent"". Shouldn't be the conservative choice to go long?"
852,1506964449.000545,Kimberely,"also I suppose the seq abstraction uses first and rest to iterate over seqs so it is used there, you would just never use it on set a set with more than one element and expect to care about which element you get back"
853,1506964777.00047,Kareen,"<@Eliana> there's no good pick in this case, you're assuming that the Integer version will behave the same as the Long version but there's no guarantee "
851,1506964784.000082,Kareen,so clojure just picks a random one ; with a different clojure/Java versions you might get the long arity
854,1506966826.000474,Jaqueline,"How reading through jetty-server source and thinking about how much mutable is all the javax/servlet api. I think about http, sockets, and view templates: given we have immutable structures and (to tell the truth) a lot parts of a http response *doesnt change between requests* - cannot we leverage the fact and do less allocations flushing into the socket same and same strings(bytes) again (+ probably even doing a writev)?"
854,1506968054.000223,Vallie,So I have some code in a -main class that works in the REPL but not with lein run. Is that normal?
854,1506968229.000126,Margaret,<@Vallie> does your -main return a lazy-seq where the repl forces evaluation? (eg. a call to for or map)
854,1506968267.000579,Vallie,"Oh, does `for` return a lazy seq?"
854,1506968271.000762,Margaret,yes
854,1506968278.000146,Vallie,I switched to `doseq` and it works. Huh.
854,1506968287.000607,Margaret,"it’s a list comprehension for generating data, and yeah, doseq is a drop-in replacement"
854,1506968295.000138,Vallie,Thanks again; I think that’s the third time this week
854,1506968395.000679,Margaret,"at this point, the main thing I have to offer is recognizing the most frequent problems people have when first starting to use clojure, it’s a pretty predictable list, I should probably make a faq for clojure learners or something"
854,1506968431.00034,Daniell,"And lazy seqs would be the 1st, 2nd, and 3rd items on it :slightly_smiling_face:"
854,1506968434.000524,Vallie,Yeah that would be seriously helpful
854,1506968437.000289,Margaret,haha
854,1506968460.000098,Vallie,Official clojurians FAQ would be nice; Or unofficial
854,1506968498.000248,Margaret,"&gt; 1) lazy-seqs
&gt; 2) lazy-seqs
&gt; 3) lazy-seqs
&gt; 4) data structures are immutable"
854,1506968499.000737,Daniell,"A good rule of thumb to bear in mind is that `doseq` is for side-effects, `for`/`map` etc are for pure functions.; (it's a bit more involved than that but...)"
854,1506968648.000449,Vallie,"Yep, 4clojure put me in the 100% functional mindspace, but I’m working on something now with a bunch of side effects; Now I’ve got something that works with lein run but not as a standalone jar."
855,1506982061.000102,Vallie,This is the code for anyone who might be able to help: <https://pastebin.com/vRjvKZNc>; Has to do with setting *ns*; And a reddit question with more details: <https://www.reddit.com/r/Clojure/comments/73w95b/i_can_make_a_file_with_two_nss_using_lein_run_but/>
855,1506983380.000154,Daniell,I think you'll need `create-ns` / `in-ns` instead of that nested `ns` call.
855,1506983500.000225,Vallie,`in-ns` causes the same problem
855,1506983677.000117,Daniell,"Hmm, I didn't realize `in-ns` was also tied to the static namespace management of compilation.; <@Vallie> Looking at the docs for `in-ns`, yeah, you're not going to be able to use that either. I think you're going to find that you can't switch namespaces in compiled code.; If you stopped using AOT, you could probably do this (maybe)?"
855,1506984066.000226,Vallie,"Interesting, I’ll try that! Thanks for your help!"
855,1506984070.000127,Daniell,Set `:main` to `clojure.main` and remove any `:aot` and `gen-class` stuff.; Then build your uberjar and run it with the `-m` option to specify your `-main` namespace and see what happens.
855,1506984175.000025,Vallie,"Yep, that did it; <@Daniell> Is there any I can package it up as a standalone jar without having to do the -m option?"
855,1506984924.000153,Daniell,"What you could do is write your own `-main` in a standalone namespace that only refers to other namespaces dynamically (`require` / `resolve`) and have it be the only AOT-compiled piece, and then it can dynamically call your ""real"" main function.; You need to ensure that AOT doesn't cascade into the code you still need to be dynamically compiled (at runtime).; Clojure's AOT makes this a bit of a pain :neutral_face:"
855,1506985150.000224,Vallie,"Ah, I see. I don’t know if that will be possible here. I tried simply putting the extra `ns` call in another namespace but I think the AOT somehow spilled over and compiled it as well."
855,1506985237.000238,Daniell,"You can't have any static references from the namespace containing `-main` to the rest of your code.; So it would be a small, standalone namespace that _only_ contains your (new) `-main`, and that function only contains a `require` of your ""real"" namespace, and then a call via `resolve` of your driver function.; ```(ns compiled.main (gen-class))
(defn -main [&amp; args]
  (require 'real.main)
  (apply (resolve 'real.main/-main) args))``` something like that; And make sure only `compiled.main` is AOT'd."
855,1506985508.000156,Vallie,"Oh, that’s genius, let me try that real quick; I still get that pesky `Can't change/establish root binding of: *ns* with set`; FWIW in real.main/-main I still have a `ns` call inside a function; Well, turns out if you eval the second ns call inside of clojure.main/with-bindings, it works just fine!"
856,1506986589.000193,Vilma,Does anyone have experience using the clojure.data.zip and clojure.data.zip.xml member functions together?; I’m running into an issue where I’m always getting one element back when I’m expecting 14 elements and I’m having trouble inspecting it. I went to try to use clojure.data.zip/children but I got back `ClassCastException clojure.lang.LazySeq cannot be cast to clojure.lang.IFn  clojure.zip/node (zip.clj:67)`; Which presumably means that the object I’m getting back from the `zip-xml/xml-&gt;` function isn’t a viable input to `zip/children`; Do I need to re-parse it into something?; ah. Semi-solved. it was a seq of locs
857,1506996783.000155,Douglass,"argh. why is my mixed java/clj trying to first compile clj that is dependent on the java classes? even if I run lein javac, it tries to compile clj"
858,1506997092.000177,Margaret,often the simplest thing is to never compile your clj - to just put sources in your jar since you can't run clojure without the compiler anyway
857,1506997414.000159,Douglass,okay <@Margaret> - how do I tell leiningen not compile my clj?
857,1506997435.000128,Margaret,by not having an :aot key in your project.clj
857,1506997593.000165,Douglass,"I don't, I only have it in uberjar profile. but I don't know, I feel this should be very simple. my java doesn't refer to any clj classes, it's strictly a library, yet leining wants to compile clj first, even on ""lein javac"""
857,1506997635.000041,Margaret,it shouldn't be compiling anything if you don't specify aot
857,1506997677.000059,Douglass,my thoughts exactly
857,1506997684.000076,Margaret,there's gen-class but it shouldn't even get that far; do you have a prep task of some sort that needs to load your namespaces?
857,1506997731.000039,Douglass,no
857,1506997747.000042,Margaret,"clojure doesn't have a ""compile only"" mode, so if anything needs to load your namespaces, the classes they use must exist; which could include prep tasks or things like `lein check` or `lein eastwood`"
857,1506997814.000153,Douglass,right.. wonder if it could be a plugin but don't use many
857,1506997835.000041,Margaret,the stack trace when it complains about the class not existing might be informative
857,1506998065.000104,Douglass,"not to me but:
        at myclj.core$eval27078.invoke(core.clj:1)
        at clojure.lang.Compiler.eval(Compiler.java:6927)
        at clojure.lang.Compiler.eval(Compiler.java:6916)
        at clojure.lang.Compiler.load(Compiler.java:7379)
        at clojure.lang.RT.loadResourceScript(RT.java:372)
        at clojure.lang.RT.loadResourceScript(RT.java:363)
        at clojure.lang.RT.load(RT.java:453)
        at clojure.lang.RT.load(RT.java:419)
        at clojure.core$load$fn__5677.invoke(core.clj:5893)
        at clojure.core$load.invokeStatic(core.clj:5892)
        at clojure.core$load.doInvoke(core.clj:5876)
        at clojure.lang.RestFn.invoke(RestFn.java:408)
        at clojure.core$load_one.invokeStatic(core.clj:5697)
        at clojure.core$load_one.invoke(core.clj:5692)
        at clojure.core$load_lib$fn__5626.invoke(core.clj:5737)
        at clojure.core$load_lib.invokeStatic(core.clj:5736)
        at clojure.core$load_lib.doInvoke(core.clj:5717)
        at clojure.lang.RestFn.applyTo(RestFn.java:142)
        at clojure.core$apply.invokeStatic(core.clj:648)
        at clojure.core$load_libs.invokeStatic(core.clj:5774)
        at clojure.core$load_libs.doInvoke(core.clj:5758)
        at clojure.lang.RestFn.applyTo(RestFn.java:137)
        at clojure.core$apply.invokeStatic(core.clj:648)
        at clojure.core$require.invokeStatic(core.clj:5796)
        at clojure.core$require.doInvoke(core.clj:5796)
        at clojure.lang.RestFn.invoke(RestFn.java:436)
        at user$eval3$loading__5569__auto____4.invoke(user.clj:1)
        at user$eval3.invokeStatic(user.clj:1)
        at user$eval3.invoke(user.clj:1)
        at clojure.lang.Compiler.eval(Compiler.java:6927); this is from running lein javac"
857,1506998104.000022,Margaret,"why is it loading your user.clj ?; I mean, I can guess why lein would do that, but I am now suspicious about what user.clj is doing"
857,1506998397.000145,Sonny,The Clojure runtime always loads user.clj on initialization
857,1506998422.000093,Douglass,oh thought I didn't have user.clj but I do. this is from a Luminus template.. it's mounting the repl-server.. and I guess together with <https://github.com/technomancy/leiningen/issues/1245> causes the issue
857,1506998443.000069,Margaret,"yeah, I was unclear in my statement, I meant ""your user.clj is the reason this is breaking"""
857,1506998529.000063,Douglass,yeah that's it thanks <@Margaret>!
857,1506998581.000112,Margaret,you can probably see how I deduced that from your stack trace :smile:
857,1506998794.000078,Douglass,:slightly_smiling_face: sure. I didn't know about the whole user.clj or the problem with it &amp; javac. thanks again!
857,1506998883.000063,Margaret,"well, the issue we were looking for was why your clj namespaces were being loaded before running javac, the fact that user.clj is mentioned at the ""top"" of the stack trace tells me that it is the culprit"
859,1507003996.000168,Vilma,"<https://dev.clojure.org/jira/browse/DZIP-6?focusedCommentId=47080#comment-47080>

Found my issue haha."
860,1507006165.000025,Daniell,"Worth mentioning that is essentially ""untrue"" with Boot (Clojure _attempts_ to load `user.clj` but won't find it anywhere useful)."
861,1507010910.000129,Berry,"are there any recent libs for pulling stock data from google/yahoo ? I've found 3 libraries so far, they're all 7+ years old, and I'm pretty sure the API has changed since then"
857,1507021116.000421,Johana,Never seen this book before. Someone mentioned it on Twitter: <https://www.amazon.com/Quick-Clojure-Effective-Functional-Programming/dp/1484229517>
862,1507023441.000335,Tena,"Question for all: which do you prefer and why? 
`(:my-key my-map)`; or; `(get my-map :my-key)`"
862,1507023520.000269,Noella,"I usually use `(:keyword m)` if the map uses keywords as keys, and `(get m thing)` for everything else"
862,1507023524.00034,Tena,(assuming :my-key is a keyword in-line and not dynamically resolved in which case there’s a chance it can be nil or something non-callable)
863,1507025188.000058,Gladys,"What do you think about <http://www.onyxplatform.org> ? Just to know, do we have another alternatives? At that moment team needs mainly get data from one DB and put to others in different formats."
863,1507025311.000143,Senaida,"<@Johana>, I ordered a copy on Sunday evening. Should arrive some time today. I _believe_ the author is <@Clemencia>, but not certain; I was hoping to get some feedback from anyone else that had ordered the book before (I think it's a September '17 release), but no one replied to my comments a few days back."
863,1507025803.000181,Jaqueline,"<@Gladys> it’s readme mentiones <http://storm.apache.org/> - the latter is proven, stable, but seems to be not such actively developed"
863,1507025911.000161,Gladys,"yes, first impression is better about onyx :slightly_smiling_face:"
863,1507025935.000109,Noella,"AFAIK, Storm has been superseded by <https://twitter.github.io/heron/> at Twitter; I haven’t had the time to try out Onyx unfortunately, but it does look pretty sweet"
863,1507025973.000066,Weston,if you just need to fan out maybe you dont need any of these
863,1507026001.000396,Noella,<@Gladys> what DB are you using?
863,1507026094.000117,Gladys,"The source is API and we need to put it into elastic and postgresql; yeah, but writing ourself logic about what to do when something fail, write everywhere try and catch only to send errors to sentry (logger) etc. What i know onyx has this logic already implemented.; But didn’t use it"
863,1507026899.00023,Shameka,<@Gladys> we've been using onyx to process events out of kafka for a while and had mostly happy times
863,1507026965.000149,Gladys,"thx all, we will just probably try it :slightly_smiling_face:"
863,1507027086.000229,Georgann,"This is one of the use-cases that confluent are pimping Kafka for. It would be pretty simple. You'd write a kafka-connect source connector to get your API data into kafka, maybe add some transformations to get it structured correctly for your target database, then a kafka-connect sink would load it into postgres; The multiple sinks requirement is solved quite elegantly with this approach. Just have separate processes consume the source topic and write out to their sink topic. "
864,1507028928.000355,Merrie,<@Tena> `(:key m)` avoids nullpointers in `m`
864,1507028974.000206,Tena,<@Merrie> yes… what do you mean exactly? :slightly_smiling_face:; `(get m :key)` also avoids… (but not as concise)
864,1507029038.000032,Merrie,"```
(let [m nil] (:key m))
=&gt; nil
(let [m nil] (get m :key))
=&gt; nil
(let [m nil] (m :key))
java.lang.NullPointerException
```"
864,1507029066.000216,Tena,ahh yes :slightly_smiling_face: I never do (m :key) for that reason; also dangerous is `(my-key m)`; unless you’re 100% sure my-key will always end up being a keyword
864,1507029134.000215,Merrie,"and `get` is wordy :)
I usually use `-&gt;`, which is basically `(:key m)`"
864,1507029156.000224,Tena,yes… I agree
864,1507029165.000214,Merrie,(-&gt; m :foo :bar)
864,1507029186.000098,Tena,the one useful feature of (get …) is `(get m :key :not-found)`; (if you’re interested in knowing whether it was found or the value was nil)
864,1507029240.000139,Lorenza,can also say `(:key {} :was-not-found)`
864,1507029255.000475,Tena,<@Lorenza> woah! :slightly_smiling_face:; didn’t know that!
864,1507029267.000167,Merrie,"but majority of my usecases: ui templates, where I am 99% sure key is keyword, and m is 90% dynamic.
however I always use `get` if I supply default value, because default value for `(:key m default)` is ""unusual"", and `(get m :key default)` feels more explicit to me"
864,1507029311.000351,Lorenza,whatever communicates intent best :thumbsup:
864,1507029337.000113,Tena,"<@Lorenza> damn that’s cool! haha always enjoy learning new things about Clojure, even after a bunch of years using it now…; on a somewhat separate point, perhaps a less known thing about Clojure is `(nth [] 1 :not-found)`"
864,1507029437.000163,Merrie,"also default value for :key does not ""play well"" with threading macros -&gt; and -&gt;&gt;"
864,1507029446.000135,Tena,… which also avoid exceptions (just adding here if useful for someone); <@Merrie>… rrright…; for that reason I don’t use the threading macros that much… sometimes it just becomes cumbersome to “thread it through the right place” lol; but (some-&gt; …) I enjoy a lot :slightly_smiling_face:
864,1507029561.000022,Merrie,"I mean:
for just keys you can do both -&gt; and -&gt;&gt;, and change macro ""at will"", say you started with
(-&gt; m :foo :bar), but then you need to add map, so you do
(-&gt;&gt; m :foo :bar (map inc))"
864,1507029601.000141,Evan,i think that's what as-&gt; is for :slightly_smiling_face:
864,1507029648.000395,Tena,<@Merrie> mmm yes… I would probably do this one like `(into [] (comp (map :foo) (map :bar) (map inc)) [m])` … I abuse transducers a lot lol
864,1507029677.000264,Merrie,"but you can't switch from -&gt; to -&gt;&gt; willy-nilly with (:foo default).
and for some reason, I think (get :key default) makes it more obvious that you ""stuck with"" `-&gt;`; your code is ... not obvious ); ```
(let [m {:a {:b [0 1]}}] (-&gt;&gt; m :a :b (map inc)))
=&gt; (1 2)
(let [m {:a {:b [0 1]}}] (into [] (comp (map :foo) (map :bar) (map inc)) [m]))
java.lang.NullPointerException: 
```; <@Tena> also there is `as-&gt;`, for when you need to thread through random argument positions
```
(as-&gt; [1 2] $
  (conj $ 3)
  (map inc $))  
=&gt; (2 3 4)
```"
864,1507030201.000038,Tena,"<@Merrie> yes… :slightly_smiling_face: I do know that one, somehow I never made big use of it, maybe I should; perhaps because it’s a macro with “a lot of syntax” (relatively speaking) and my brain has generally become allergic to most syntax lol; but it is quite elegant if used properly"
864,1507030524.000216,Merrie,"yeah, way too much syntax, like specifying all of the function's arguments, who does that anyway! :kappa:; competing with `-&gt;` is hard though"
865,1507032259.000196,Leone,Is there any agreed upon convention for naming of binding of `atom`s and `ref`s?
864,1507035175.000055,Tena,<@Leone> do you mean like `(defonce my-atom (atom {})`
866,1507037925.000521,Aletha,how do we respond? <https://medium.com/@dandisagrees/do-you-have-some-mainstream-projects-you-can-recommend-that-use-clojure-or-haskell-525d0681e290>
864,1507038778.000034,Merrie,"""recommend"" for what?"
866,1507038898.000302,Weston,"indeed, it's not clear to what purpose"
866,1507038947.000124,Merrie,I heard datomic is good :kappa:
866,1507038966.000271,Aletha,"...to show how FP works in real-world projects, I guess"
866,1507038971.000126,Weston,"no source access, if it's to learn the language that sucks :slightly_smiling_face:"
867,1507040019.000351,Rosia,"hi, anyone knows if any attempts have ever been made to standardize lazy, callback-style asynchronous computations ?"
866,1507040036.000226,Janelle,<@Aletha> Clojure is a good example of a mainstream project written in Clojure :boom:
867,1507040343.000526,Easter,"can you tell, what was changed in 1.8.0?  And where i can find recommendations about latter case?"
866,1507040512.000488,Aletha,good point~
866,1507040681.000257,Kareen,1.8.0 fixed a bug where type hinting classes on the return vector wouldn't resolve them
866,1507040915.000104,Evan,<@Aletha> CircleCI's frontend is in cljs and on github
866,1507041151.000547,Rosia,"anyways, if anyone is willing to contribute to this effort, feel free to DM me"
868,1507042346.000336,Cherlyn,Trying to get my head around some macro basics. Is it possible for me to provide a symbol and have that resolved inside the macro so that I can do something like this? `(my-macro my-vector) =&gt; #{:a :b :c}` (contrived example)
868,1507042535.000567,Sonny,"```user=&gt; (def my-vector [:a :b :c])
#'user/my-vector
user=&gt; (defmacro my-macro [v] `(set ~v))
#'user/my-macro
user=&gt; (my-macro my-vector)
#{:c :b :a}```"
868,1507042764.000484,Cherlyn,"<@Sonny> Thanks, I think the macroexpand was confusing me"
868,1507042826.000781,Sonny,"just always keep in mind that macros are code -&gt; code functions; ```user=&gt; (macroexpand '(my-macro my-vector))
(clojure.core/set my-vector)```; so my-vector is not resolved “inside” the macro, rather it is part of the rewritten code emitted by the macro (and later evaluated)"
868,1507042992.00088,Kristle,anybody know how to use spec on a multi-arity function? such as `(defn x ([] (x 1)) ([n] n))`? i can spec the one with args easily enough but not sure how to let `:args` know it's cool if there is no argument.
868,1507043045.000246,Sonny,`(s/fdef x :args (s/? :n any?))`
868,1507043192.000166,Kristle,"hmm, getting ""wrong numbers of args to ?"" looks like it wants `pred-form`"
868,1507043396.000218,Sonny,"oh, no :n; `(s/fdef x :args (s/? any?))`; my bad; if you want better doc’ed conformed args, could also do:; `(s/fdef x :args (s/cat :n (s/? any?)))`"
868,1507043469.000592,Kristle,"ah, ok, i was about to ask. i'm getting another issue i think because i have them in the wrong order (`s/cat in s/?`)"
868,1507043507.00012,Sonny,seems like would also possibly work?; `(s/fdef x :args (s/? (s/cat :n any?)))` ?; s/? is a little strange when used at top level
868,1507043552.000191,Kristle,both orderings result in `Boolean cannot be cast to IFn`
868,1507043580.000121,Sonny,"can you list a full repro?; no, s/or takes specs (including predicates as specs); spec names like that are fine; don’t see anything wrong there; what do you evaluate when you get the error?"
868,1507043823.000278,Kristle,`(connect!)`
868,1507043874.000704,Sonny,well that doesn’t do anything with spec; unless you’ve instrumented or are invoking spec inside connect!
868,1507043906.000301,Kristle,"oh, sure, i have called `instrument`; looks to be dying here: <https://github.com/clojure/spec.alpha/blob/master/src/main/clojure/clojure/spec/alpha.clj#L880>"
868,1507044103.000543,Sonny,the parts you’ve shown look fine to me. what’s in ::client and ::client-spec?
868,1507044152.000159,Kristle,::client is an `inst?` spec and ::client-spec is a `keys` spec. they work fine outside the function context.
868,1507044293.000257,Sonny,have you re-invoked instrument after modifying the specs?
868,1507044357.000323,Kristle,"yep, the returned vector included `connect!`"
868,1507044369.000015,Johana,I absolutely love this clojure linting tool (can use it in conjunction with several editors): <https://github.com/candid82/joker>
868,1507044563.000031,Sonny,<@Kristle> I built a subset in local repl and couldn’t reproduce; so either I’m missing something or your repl has out of date state
868,1507044602.000633,Kristle,how odd. it definitely goes away if i get rid of the `s/?`. i will restart repl and try again.
868,1507044660.00071,Sonny,going offline…
868,1507044672.000285,Kristle,thanks for the help!
868,1507044676.000463,Guillermo,"<@Kristle> there are 2 issues with `s/?`, grabbing you the links..."
868,1507044770.000683,Kristle,gracias
868,1507044797.000136,Guillermo,"<https://dev.clojure.org/jira/browse/CLJ-2105>; <https://dev.clojure.org/jira/browse/CLJ-2003>; Probably the first one (2105); If you have a reproduction case that looks different, please help out by pasting it on the jira!  (can put code blocks like `{code}` ....  `{code}`)"
869,1507048010.000413,Lennie,"Does anyone have a few minutes to help me out with a HugSQL issue I'm experiencing?; I have a postgres table with 2 timestamptz fields that allows NULLs.  On the hugsql side, one of the fields maps to basically {:timestamp_1 ...} while the other one maps to {:sub {:timestamp_2}}
:timestamp_1 properly inserts a NULL, but :timestamp_2 throws a Parameter Mismatch exception (parameter data not found).
I'm accessing timestamp_1 via :timestamp_1 in my .sql file, and timestamp_2 via :sub.timestamp_2 - so I don't believe it's a simple mistake on my part - as I'm doing this for other field types just fine; I have verified that the map being passed to the hugsql-generated function has the keys for both fields and their values are nil; quit; ...wrong window, sorry."
869,1507056449.000542,Jerry,<@Aletha> Wire IM has server-side stuff written in Haskell <https://github.com/wireapp/wire-server>
870,1507056750.000465,Monet,"is the correct way to reference a project value in maven to simply key off of project (e.g. `(:jar-filename project)`)?; err, lein, not maven"
871,1507060206.000295,Branda,<@Merrie> have you used `as-&gt;` when you have mixed arities?
872,1507062856.000022,Elanor,here are a few <https://metabase.com/> <http://riemann.io/> <http://lighttable.com/>
872,1507071015.000279,Kym,"Anyone using Apache Spark, sparkling, and the Datastax Cassandra Driver all together ... looking to share insights/misery."
873,1507074428.000227,Delois,"I’m going a bit nuts here - I want to generate a form using quasiquoting, which includes a non-namespaced quoted symbol. I’m trying to generate code which calls `intern`.; ```
`(intern 'clojure.core 'test true)
=&gt; (clojure.core/intern (quote clojure.core) (quote clojure.core/test) true)
`(intern 'clojure.core 'test.foo true)
=&gt; (clojure.core/intern (quote clojure.core) (quote test.foo) true)
`(intern 'clojure.core ~'test true)
=&gt; (clojure.core/intern (quote clojure.core) test true)
`(intern 'clojure.core (quote test) true)
=&gt; (clojure.core/intern (quote clojure.core) (quote clojure.core/test) true)
```; So quasiquoting only namespace qualifies symbols which don’t contain dots?; How can I get the `test` symbol unqualified in the output?"
873,1507074582.000307,Rebeca,'~'test
873,1507074589.000262,Aldo,"```
boot.user=&gt; `(intern ~'test)
(clojure.core/intern test)
boot.user=&gt;
```; gah, beat me; seems like you actually got it for one instance"
873,1507074623.000025,Delois,"<@Aldo> It actually requires the extra quote too, otherwise it’s not quoted in the output.; <@Rebeca> Thanks - that would have taken me a while.; I know `clojure.core` is compiled with direct linking - is `clojure.test` also?"
873,1507081507.000009,Guillermo,I think so. <@Delois>
874,1507081544.000053,Guillermo,All of clojure.jar is direct linked
875,1507082309.00006,Marquerite,Greetings fellow Clojurians.
873,1507085501.000071,Delois,<@Guillermo> Thanks.
876,1507091312.000026,Harrison,"I'm trying to use hugsql with component, and I'd like to be able to call the `def-db-fns` macro from within a specific namespace, to have the query functions reloaded in that namespace; so.. i guess i need to wrap the function call in something which sets the namespace just for that call; bit off in the weeds, any help appreciated..; nevermind, `hugsql/map-of-db-fns` is much better to use from component."
877,1507096116.000036,Douglass,"I have a unit test that works perfectly fine in java but fails in clj/repl. pretty sure it has something to do with annotations, what could be wrong and/or any ideas how to debug this?; exactly the same implementations in the two unit tests. the code is testing xml deserialization with xstream, and the java code has been working for years. some of the simple unit tests work in clj as well"
877,1507097133.000035,Daniell,<@Douglass> You're going to need to share more details -- a link to the code maybe -- for us to provide any sort of input of that.
878,1507105350.000187,Belen,what's the state of clojure on android?; or what's the most clojurey thing I can use that works well on android?
878,1507105739.000087,Virgil,I’m constantly being tripped up by `when-let` doc-string:; (or rather the paramter names); `(when-let bindings &amp; body)`; since it only allows one binding.; anyone else feeling this is a problem?
878,1507106124.000353,Weston,not really as the multiple binding possibility would be quite ambiguous
878,1507106140.000185,Virgil,"yeah, I’m not arguing for multiple bindings; I’m arguing for a change of parameter name/doc-string"
878,1507106171.000065,Weston,right
878,1507106185.000493,Virgil,Since  a parameter name which is plural which only accepts a singular is strange.
878,1507106187.000275,Weston,yeah the docstring could be improved
878,1507106217.000161,Virgil,And Cider shows the param-string (like <http://clojuredocs.org|clojuredocs.org> do.)
878,1507106901.000084,Jerome,<http://cljsrn.org/> this uses cljs. using clojure maybe <https://github.com/clojure-android/lein-droid>
879,1507107532.000401,Ross,"Hi all, can you help me with the following? I have a namespace for the svc layer, and I want to return meaningful values/errors from the svc layer to later be converted to http responses; I could return a map `{:status :found|:notfound|:ok}` or similar and map that on the http layer, but was wondering whats the clojure way of doing this. Was taking a look at `<https://github.com/adambard/failjure>`"
879,1507108414.000052,Jerome,"<@Ross> I am facing similar issues, returning map plays well if I don't have multiple functions working on a value in that case I could return the status straightaway. In case the values are being threaded through multiple functions then this becomes a problem. i try to use nil puning in those cases but there is a problem in relaying the correct error message.
Note that, I am still learning clojure so I could be missing sth obvious. It would be wonderful to know what the idiomatic solution would be to this problem."
880,1507110018.000115,Noella,mping I think the way you’re doing it currently is Clojure-y :slightly_smiling_face:
879,1507110486.000172,Ross,ty
879,1507111053.000276,Jerome,"I apologize if this is silly, but lets consider this snippet  `(some-&gt; user login get-token)` If there is some error in the login, what I try to do is return nil so the chain fails but I am unable to get the error cause (eg. pass incorrect). Now to return such error cause, is raising an exception a good way or am I missing sth here."
879,1507111223.000441,Jodie,"<@Jerome> I think exceptions are the accepted way to do this in Clojure. <https://github.com/adambard/failjure/blob/master/README.markdown> is similar to what you're doing with nil's, but allows you to add an error (sort of in like metadata)"
879,1507111479.000211,Jerome,"Thanks, I will check it out"
881,1507119522.000494,Lily,"I want to make trough clojure a proxy server where I can rewrite the url of some chosen requests. I see by searching with google that there are few proxy libraries: ring-proxy, ring-request-proxy, clj-http-proxy and http-kit. Some recommendation of which one to use?"
881,1507120730.00013,Karisa,<@Lily> I suggest you to have a look to this middleware <https://github.com/puppetlabs/ring-middleware/blob/master/src/puppetlabs/ring_middleware/core.clj#L56>
881,1507120859.000392,Lily,aaa nice <@Karisa> thanks!
882,1507124931.000138,Vallie,Is there a way to use alter-var-root on clojure.core functions? Doesn’t seem to have any effect in the REPL.
882,1507125219.000484,Randee,"<https://clojure.org/reference/compilation#_compiler_options>; See ""direct linking"""
882,1507125882.000267,Vallie,"<@Randee> Oh, awesome. So would setting this in leiningen work? `:jvm-opts [""-Dclojure.comipler.direct-linking=false""]`; I’m having trouble with that still for some reason…"
883,1507126371.000392,Randee,I think clojure.core will always be directly linked. Not sure you can redefine functions in there. But Maybe <@Kareen> can confirm this.
883,1507126411.000037,Kareen,correct; you can redefine functions for later usage; but you can't redefine clojure.core functions that have already been directly linked
883,1507126566.000072,Vallie,<@Kareen> There’s absolutely no way to get clojure.core functions non-directly linked? Would I have to recompile Clojure?
883,1507126587.000255,Kareen,yes; clojure doesn't distribute a version of itself non directly linked
883,1507126792.000906,Randee,"There is some talk about it here: <https://dev.clojure.org/display/design/Build+Profiles>; Though, it seems there is no ""dev"" or ""dynamic"" `:classifier` for clojure on maven."
883,1507127228.000513,Kareen,build profiles aren't a thing; that's a confluence page for things that might eventually happen
883,1507127615.000811,Willow,can't you exclude functions? then def them to the core implementation and then redef to your custom implementation?
883,1507127709.000204,Kareen,you can redef core functions so that functions not compiled with direct linking enable will see the redefinition; but the code that ships with clojure has already been direct linked so you can't redef a clojure.core function and have another clojure.core function use the redefined version
883,1507129310.000441,Vallie,"That’s good to know, thanks again <@Kareen> for your wisdom"
884,1507129771.000326,Elvin,"I know the percentage of actual semi enterprise production clojurists on here is low comparatively,  but is there any chance anyone on here has used a quartz scheduler in clojure before with a durable backend on multiple environments?; the quartz config stuff is real confusing to me..; I think I have to override the scheduler factory class in order to set some properties on it.. kind of hack in my environment specific config values.. but that's a level of interop I've not attempted yet"
884,1507132003.000214,Aldo,<@Elvin> I work in a semi enterprise. every time I've been tempted by that thing I've just installed or used an existing airflow instance to run a java -jar command
884,1507132029.000087,Elvin,"lol, tell me about it."
885,1507133314.000171,Rebeca,"I would love to use quartz just once, but every time I try to use it in a system someone decides a cronjob would be simpler, or to write our own scheduler, or some other crazy thing"
885,1507134271.000554,Jodie,"I read the source to quartz &amp; wasn't _hugely_ excited, The locking strategy using jdbc seemed a little confusing to me, like it might be a hack.; (I'm saying that to be corrected btw!)"
885,1507134330.00066,Rebeca,"I am not saying it is some tower of virtue, I am saying someone has written a drop in library that does this, why must I continue to reinvent it?"
885,1507134383.00015,Jodie,"but then, what is the benefit over cron or a clojure-cron"
885,1507134404.000264,Rebeca,using an acid database (or god forbid a non-acid database) to implement a distribute mutex is not uncommon
885,1507134418.000153,Douglass,"<@Daniell> related to my last night's issue, the case is exactly the same as in <https://stackoverflow.com/questions/18355495/xstream-duplicate-field-exception>. when I'm running an Xstream related unit test in repl, it's like the annotations in my java class are not read at all. same code works in plain junit test in the same project. very interesting problem and I'm rather baffled at this point"
885,1507134470.000465,Rebeca,"it will depend on your deployment environment, but cron runs the same thing everywhere the same crontab is installed; and you want to install the same crontab everywhere to reduce the differences between the 200 odd vms you are running on; but you very often have a task you don't want to spin on up 200 copies of; (assuming the clock is correct across the 200 vms, so cron actually runs at the same time); distributed schedulers lead to distributed locks"
886,1507138678.000629,Daniell,"Can you explain a bit more about the workflow where you are ""running an Xstream related unit test in repl""? Are you testing Java code or Clojure code at that point?"
886,1507138685.00028,Lovella,"I am doing some interop with Stanford CoreNLP and I want to be able to use Clojure's count function on one the classes in there, which is not a collection type. The class does have a .count() method, though. I thought Clojure might have a way to make this work by metaprogramming, but I haven't discovered how."
886,1507138856.000293,Margaret,"<@Lovella> sadly count is implemented on the java side, with Interfaces rather than Protocols"
886,1507138863.000152,Aldo,<@Lovella> count appears to delegate to pure java land for performance reasons. so you won't be able to make that work
886,1507138898.000164,Margaret,"one approach would be to make a new type that delegates to the class as its super for everything it does, and implement Counted in that type
* fixed name of Interface; but that seems to be a lot of effort for a small benefit"
886,1507139081.000037,Lovella,hm ok. Sucks! Thanks <@Margaret> <@Aldo>
887,1507139275.000641,Merrie,"<@Branda> yes, I used as-&gt; with mixed arities"
887,1507140279.000141,Branda,"I haven’t tried quartz and learned of it after I wrote a scheduler which we have used in several production services.  I have tried Chime and found it to be buggy.  Rolling your own with core.async really isn’t hard.  We may be able to eventually open-source ours, but it is complicated unfortunately :disappointed:"
888,1507141864.000194,Fran,are there any clojure libraries/frameworks that provide the same kind of hot-reloading as figwheel?
888,1507142019.000469,Misti,Hi everyone! Here is Clojurecademy DSL link if anyone interested in creating Clojure based courses on Clojurecademy; <https://clojurecademy.github.io/dsl-documentation/>
888,1507142856.000807,Branda,"<@Fran> use of the “reloaded” workflow is one approach — <https://github.com/stuartsierra/component>  

There is also the related <https://github.com/danielsz/holygrail> which works with boot"
889,1507146875.000333,Vallie,<@Bibi> I released what I was working on! <https://github.com/lincoln-b/mortimer>; I can’t overstate how awesome everyone’s been at answering my questions. Seriously. Made the project a heck of a lot more enjoyable :slightly_smiling_face:
889,1507147127.000508,Daniell,Clojure should be all about having fun! :slightly_smiling_face:
890,1507148680.000136,Mistie,"I have a prod quartz implementation in Java for work, any confusing parts of config that aren't clojure implementation specific I could probably help with.  I'm also planning on spinning this implementation out into a standalone service using clojure so we could try to hack this out together <@Elvin>"
890,1507148962.0001,Elvin,"thanks, <@Mistie>!  I actually did get it working.   I built a function that allows you to generate and start a scheduler from a properties map.  I basically built a properties object using java.util.Properties, added the values from the map to it, then built a STDSchedulerFactory from that properties object, then called getFactory on that object.  Took a but of java reading, but I got it working.  In case you're curious, heres what the function looks like (I'm testing it for correctness now)

```
(defn scheduler-with-config [config]
  (-&gt; (reduce #(doto %1 (.put (key %2) (val %2))) (java.util.Properties.) config)
      org.quartz.impl.StdSchedulerFactory.
      (doto .initialize)
      .getScheduler
      .start))
```"
890,1507149020.000123,Mistie,"Sweet, thanks for sharing, this will save me a lot of pain when I get around to doing this (probably a month away)"
890,1507149403.000236,Elvin,"cool.  be sure to save this off in a separate place for yourself,  <@Mistie> clojurians only keeps history up to a certain number of messages and then it removes them in order of age.  (I've lost cool snippets that way before)"
890,1507149551.000035,Mistie,yep for sure thx for the reminder <@Elvin> :slightly_smiling_face:
891,1507156623.000346,Janelle,It is until the you get one of the awesome exception / stack traces
892,1507157834.00015,Demarcus,"Hi! I have some code that wraps a java library as such:

```
(defn java-wrapper
  ""calls a variadic java function of the form Function(String... values)""
  [a-string string-vec]
  (.Function an-object a-string (into-array String string-vec)))
```

In the rest of the program, I call this function with a string (computed at runtime) and small static set values for the vec argument:

```
(java-wrapper dynamic-string1 [""foo""])
(java-wrapper dynamic-string2 [""bar""])
```

Those are in a hot loop. It seems like I'm paying the cost of `into-array`.

Given that those arguments are known in advance, I feel like those into-arrays could be done once when the program starts and be reused. Any elegant solution to do that?"
892,1507158012.000404,Margaret,you could refactor and make it take a string array
892,1507158023.000192,Daniell,"You mean like ```(def foo-arg (into-array String [""foo""]))
...
(.Function an-object a-string foo-arg)```"
892,1507158047.000081,Margaret,"yeah, even that works - into-array is smart enough not to do that job twice, right?"
892,1507158087.000161,Daniell,"(I'd be suspicious of your `java-wrapper` function operating on `an-object` that it is not passed as an argument -- globals are bad(tm)...); The `def` would run once, when the ns is loaded (so each separate set of known-in-advance arguments would be set up once at startup)."
892,1507158142.00024,Margaret,"<@Demarcus> also, as a style consideration, I’d avoid using the term “Function” for things that are not java.util.funciton.Function or clojure.lang.IFn because methods are a completely different thing (I mean, I think I know what you mean here but clarity does help)"
892,1507158186.00019,Demarcus,"this is not the actual code :slightly_smiling_face: the an-object is not actually global, and .Function has a different name; but you're right; <@Daniell> so one `def` for each value I have and then use the appropriate right?"
892,1507158281.000013,Daniell,"Based on what you've shown so far, yes, that sounds right."
892,1507158283.000307,Margaret,or just hold the string array in a local binding and reuse - whatever matches your real usage
892,1507158303.000068,Daniell,And the `def`s at the top-level -- not inside a `defn` (just checking!)
892,1507158503.000227,Kristen,I have a small Clojure backend using ring to an Elm SPA.  I need to expand it from 4 actions with common return values (json) to 6 with 3 return values (all still json).  I do not currently use routes but the extension to multiple returns suggests that I do so.  Compojure has been suggested as a solution.  A brief perusal suggests that it is over complicated for this task.  Is it easier to use than it looks?  Or is there a simpler (reasonably supported) library that will do this?
892,1507158795.00007,Margaret,bidi is pretty straightforward - it lets you describe some routes with data (as opposed to compojure which defines a routing DSL)
893,1507158843.000252,Margaret,"<@Kristen> for example, this should be close to what you need <https://github.com/juxt/bidi#multiple-routes>"
892,1507158853.000168,Margaret,(link is directly to an example in the readme)
892,1507160702.000276,Demarcus,thank you <@Margaret> <@Daniell>
894,1507166054.000045,Delois,"Since `clojure.test` is compiled with direct linking, am I correct that I should be able to recompile it without direct linking using:
```
(binding [*compiler-options* (assoc *compiler-options* :direct-linking false)]
  (load ""/clojure/test""))
```
?"
894,1507166844.000069,Guillermo,I don't think so <@Delois> - what are you actually trying to do?
894,1507166944.000038,Delois,"<@Guillermo> So for Cursive’s test integration (looks sort of like this: <https://cursive-ide.com/userguide/testing.html>, slightly out of date but you get the idea) I `with-redefs` `do-report`, because `report` gives no file/line info for `:pass` events.; I have a simple test:
```
(defn patched-report [original]
  (fn [report]
    (println (pr-str report))
    (clojure.stacktrace/print-cause-trace (Throwable.))
    (flush)
    (original report)))

(let [original-do-report do-report
      original-report report]
  (with-redefs [do-report (patched-report original-do-report)]
    ;(binding [report (patched-report original-report)]
      (run-tests *ns*)))
```; So, prints the event map and a thread dump of how we got there.; Using this, I only get `:pass` and `:fail` events in Clojure 1.8, but not e.g. `:begin-test-ns`; I can’t figure out why I even get those, TBH.; I figured I should be able to reload `clojure.test` with direct linking disabled, but AFAICT it doesn’t work.; Obviously it wouldn’t work with 3rd party code adding custom `assert-expr`s"
894,1507167263.000218,Guillermo,Yeah maybe we should mark it ^:redef; I don't think the reload will work; It's aot'ed
894,1507167304.000198,Delois,"I think the idea is that `report` should be dynamic, but needing file/line info is kind of an esoteric use case.; Why does that matter? Oh, you mean that `load` will pick up the AOT’ed version?; Perhaps I should grab the contents of `/clojure/test.clj` off the classpath and explicitly load that into the REPL."
894,1507167659.000151,Sonny,load will just reload the class file. You'd need to do this and call compile to recompile the aot class without direct linking.
894,1507168082.000067,Delois,"```
(binding [*compiler-options* (assoc *compiler-options* :direct-linking false)]
  (-&gt; ""clojure/test.clj""
      (<http://clojure.java.io/resource|clojure.java.io/resource> (-&gt; (class list) .getClassLoader))
      (<http://clojure.java.io/reader|clojure.java.io/reader>)
      (load-reader)))
```; I’m off for a shower and a good scrub now.; That’s the see-no-eval monkey :slightly_smiling_face:"
895,1507168217.00018,Shira,hahahaha
894,1507168323.00021,Delois,"<@Sonny> <https://clojurians.slack.com/archives/C03S1KBA2/p1507168082000067>; Is what I ended up doing.; Fugly, but works."
894,1507169087.000045,Berry,"I need to generate a gaussian sampled float-array of 100 elements. Is there a builtin for this? If not, what library should I look into?"
894,1507169323.000128,Margaret,"<@Berry> ```user=&gt; (let [r (java.util.Random. 42)] (repeatedly 100 #(.nextGaussian r)))
(1.1419053154730547 0.9194079489827879 -0.9498666368908959 -1.1069902863993377 0.2809776380727795 0.6846227956326554 -0.8172214073987268 -1.3966434026780434 -0.19094451307087512 1.4862133923906502 0.8023071496873626 -0.12151292466549345 1.4105062239438624 -0.6402327822135738 -1.2096444592532913 0.35375769787202876 -0.4903496491990076 0.5507215382743629 -1.2035510019650835 0.3210160806416416 1.5511476388671834 0.43853028624710505 0.4815980608245389 1.5196310789680683 -0.2768317291873249 -0.08393897849486337 1.255833005788796 -0.3252727938665772 -0.17329033306108363 -1.8585851445864527 1.4238069456328435 -1.363726024075023 -1.964666098753878 -0.9185948439341892 -2.548887393384806 -1.6309606578419305 -0.12200477461989162 1.289159071801577 -0.2691388556559934 0.2574914085090889 -0.3199143760045327 -1.7684998592513064 -0.4834503128592458 -0.5099904653893699 1.1166733769661994 -0.04094720151728288 -1.1076715169200795 1.8623214176471945 1.1457411377091524 -1.0586772048930921 1.0725991339400673 -1.9317441520296659 0.30102521611534994 0.2475231582804265 1.406156849249087 -1.5202207203569256 0.2709294126920897 0.561249284813777 -0.5298295780368607 0.5390221914988275 2.2123402141787243 -0.6329335687728442 -1.8831759122084633 0.3865659853763343 0.32582927090649455 -0.9013043195000002 -0.002680308907617573 -0.4739592549853249 -0.5479781547659026 -0.01910014847196348 1.6468163882596327 -1.107062592215791 0.5938103926672539 -0.15566462108511642 0.6632872929286855 1.226793360688623 0.8839698437730904 0.22172454670212935 0.9197020859698617 -0.7393758185888677 0.803517749531419 -0.2539417447630359 -0.7638388605060555 -1.8645567427274516 -1.861306200027518 -0.576599881116305 -0.40899380621224757 0.24846093761654187 -0.48091295490277447 0.44621205735391023 -0.4465888888803913 0.045638687865053575 0.7045663273135641 -0.2718240183671583 0.08074877915238832 1.2590964696340183 0.7635098382407334 1.7220810801509723 0.14595005405372477 -0.9946630124621867)
```; the ""42"" there is the seed"
894,1507169939.00007,Berry,"<@Margaret> 
1. nice, this answered the question I initially asked

2. is this making a function call per random number? as it turns out, I need to generate lots of random numbers (simulating noise for machine learning) -- is there a 'vectorized' approach where I specify the # of random numbers I want, make one call, and it all happens inside some highly optimized java code ?"
894,1507170018.00006,Margaret,"I'd assume hotspot would likely be able to optimize it, but we'd need to test; you might be able to get better results with filling a mutable array instead of using repeatedly, depending on how much of a bottleneck this is; and no, as far as I know there's no vectorized version - I don't know of good RNGs that parallelize well (not that I'm an expert on that)"
894,1507170269.000133,Berry,"I think technically, one can run AES(key, i) all in parallel for different values of i, but running an entire round of AES just to generate a random number might be overkill"
894,1507170294.000103,Margaret,"I've benchmarked the first version (15 microsecs) and I'm benchmarking the array version now; ```user=&gt; (let [r (java.util.Random. 42) b (double-array 100)] (dotimes [i 100] (aset b i (.nextGaussian r))) (seq b))
(1.1419053154730547 0.9194079489827879 -0.9498666368908959 -1.1069902863993377 0.2809776380727795 0.6846227956326554 -0.8172214073987268 -1.3966434026780434 -0.19094451307087512 1.4862133923906502 0.8023071496873626 -0.12151292466549345 1.4105062239438624 -0.6402327822135738 -1.2096444592532913 0.35375769787202876 -0.4903496491990076 0.5507215382743629 -1.2035510019650835 0.3210160806416416 1.5511476388671834 0.43853028624710505 0.4815980608245389 1.5196310789680683 -0.2768317291873249 -0.08393897849486337 1.255833005788796 -0.3252727938665772 -0.17329033306108363 -1.8585851445864527 1.4238069456328435 -1.363726024075023 -1.964666098753878 -0.9185948439341892 -2.548887393384806 -1.6309606578419305 -0.12200477461989162 1.289159071801577 -0.2691388556559934 0.2574914085090889 -0.3199143760045327 -1.7684998592513064 -0.4834503128592458 -0.5099904653893699 1.1166733769661994 -0.04094720151728288 -1.1076715169200795 1.8623214176471945 1.1457411377091524 -1.0586772048930921 1.0725991339400673 -1.9317441520296659 0.30102521611534994 0.2475231582804265 1.406156849249087 -1.5202207203569256 0.2709294126920897 0.561249284813777 -0.5298295780368607 0.5390221914988275 2.2123402141787243 -0.6329335687728442 -1.8831759122084633 0.3865659853763343 0.32582927090649455 -0.9013043195000002 -0.002680308907617573 -0.4739592549853249 -0.5479781547659026 -0.01910014847196348 1.6468163882596327 -1.107062592215791 0.5938103926672539 -0.15566462108511642 0.6632872929286855 1.226793360688623 0.8839698437730904 0.22172454670212935 0.9197020859698617 -0.7393758185888677 0.803517749531419 -0.2539417447630359 -0.7638388605060555 -1.8645567427274516 -1.861306200027518 -0.576599881116305 -0.40899380621224757 0.24846093761654187 -0.48091295490277447 0.44621205735391023 -0.4465888888803913 0.045638687865053575 0.7045663273135641 -0.2718240183671583 0.08074877915238832 1.2590964696340183 0.7635098382407334 1.7220810801509723 0.14595005405372477 -0.9946630124621867)
``` same answer, theoretically faster method; that's just over twice as fast; ```user=&gt; (crit/bench (let [r (java.util.Random. 42)] (doall (repeatedly 100 #(.nextGaussian r)))))
Evaluation count : 3887760 in 60 samples of 64796 calls.
             Execution time mean : 15.584700 µs
    Execution time std-deviation : 244.518601 ns
   Execution time lower quantile : 15.212346 µs ( 2.5%)
   Execution time upper quantile : 16.101522 µs (97.5%)
                   Overhead used : 1.570108 ns

Found 1 outliers in 60 samples (1.6667 %)
	low-severe	 1 (1.6667 %)
 Variance from outliers : 1.6389 % Variance is slightly inflated by outliers
nil
```
```
+user=&gt; (crit/bench (let [r (java.util.Random. 42) b (double-array 100)] (dotimes [i 100] (aset b i (.nextGaussian r)))))
Evaluation count : 9223620 in 60 samples of 153727 calls.
             Execution time mean : 6.688612 µs
    Execution time std-deviation : 115.068935 ns
   Execution time lower quantile : 6.514699 µs ( 2.5%)
   Execution time upper quantile : 6.917354 µs (97.5%)
                   Overhead used : 1.570108 ns
nil
```"
894,1507170479.000127,Berry,"(map identity 
 (let [r (java.util.Random.)]
   (as-&gt; r **
     (.ints ** 0 100)
     (.limit ** 100)
     (.toArray **))))

this isn't gaussian yet, but there is limit / toArray"
894,1507170561.000175,Margaret,"wait, where is that ints method comingfrom? I don't see it in the docs; also you can use seq instead of map identity; oh I see it now, it's new in java 8"
894,1507170672.000197,Berry,"1. thanks for info on seq
2. I found .ints on stack overflow :slightly_smiling_face:; alright, so there's also a .doubles; but it's not clear if we can get gaussian from these"
894,1507170960.000212,Margaret,next question is whether 6.8 microsecs per 100 numbers is too slow; (or whatever that translates to on your target of course)
894,1507171597.00002,Berry,"I'm probably prematurely optimizing -- but I'm translating over numpy code, and the one thing that numpy has hammered into my thought process is ""vector ops"" instead of ""for loops""; anyway, thanks for your help / benchmarking -- back to translating numpy/tensorflow code :slightly_smiling_face:"
894,1507171689.000119,Margaret,"yeah, I think for actual vectorized stuff you need to use native libs with the jvm; there's bindings to the fortran libs right?"
894,1507171721.000093,Berry,I'm using java/tensorflow bindings
894,1507171721.000107,Margaret,jblas
894,1507171739.000138,Berry,"but those bindings don't have linspace / rand (as far as my grepping skills show); so I think the situation is: there are java tensorflow bindings, but there are NOT java numpy bindings; so numpy util functions like linspace / random generation are not available"
894,1507191330.000146,Stacia,"<@Berry> This is one of the simplest things that Bayadera does, and it can give you billions of such numbers (not only Gaussian) in very short time (AMD GPU only for now, Nvidia support is comming)."
896,1507192775.000282,Arlean,"<@Stacia> oh, i had not run into that library, neat. Although afaik, tensorflow is nvidia only (or at least was), so that's an annoying gpu support mismatch for qqq's problem. :disappointed:"
897,1507195484.000152,Wendi,Is there a reason that for doesn't have an implied do in it's body?  It's an inconvenience when I want to add a debug print statement.  `(for [] x)` has to become `(for [] (do (print...) x))`; Perhaps there's a performance hit or some optimisation issue.  I'm just curious really.
897,1507195639.000526,Fe,just guessing but `doseq` is for imperative code and `for` is for pure collection processing - the fact that `doseq` has implicit `do` but `for` doesn't reflects that difference
897,1507196177.000024,Wendi,I agree the logic is there.  Just wondering if it's pedantic or pragmatic.  Print statements are kind of important when you want to know lazy things happened.
897,1507196254.000376,Fe,"I agree, I've definitely run into this before; pro tip: `(for [x xs] (doto (do-something x) prn))`"
897,1507196389.000157,Wendi,Genius!
898,1507197958.00005,Grisel,"hi, `(resolve (symbol ""prn""))` resolves well to function that I can call, but if i require a function called `export-csv` then `(resolve (symbol ""export-csv""))` does not work anymore, resolves to`nil`"
898,1507198578.000003,Randee,<@Grisel> how do you require it?
898,1507198734.000369,Grisel,"(ns lala.x
  (:require [some.lib :refer [export-csv]))"
899,1507200892.000316,Berry,"I have a vector of (vector of (vector of float))) representing a 3d array of height * width * depth

what is the best way to flatten this into a ""float-array"" ?"
899,1507201057.00028,Efrain,`(flatten your-vector-of-vector-of-vector-of-float)`
900,1507208362.000132,Chrissy,Why not (float-array (flatten [[[1.0 2.0] [3.0 4.0]] [[5.0 6.0] [7.0 8.0]] [[9.0 10.0] [11.0 12.0]]])) ?
900,1507213791.000142,Kareen,"evaluation of function objects works in some cases but you should not rely on that; in particular, it doesn't work when the function object closes over some values; in this case, the function returned by `(comp inc inc)` closes over `inc`"
900,1507213890.000047,Edmond,"Interesting, thanks. Is there a workaround?"
900,1507213892.000695,Kareen,if you need to make it work you can use `(fn [x] (inc (inc x)))`  manually; this version doesn't close over any local binding; but; just don't do this :)
900,1507215162.00042,Alishia,what you guys are using to communicate with aws ? s3 / cognito / sqs …
900,1507215168.000193,Edmond,"Yeah, it was definitely a hack in the first place."
901,1507215652.000226,Corine,Will there be specs for functions in clojure.core? Are they needed? Or is it too difficult to make?
902,1507217968.000007,Edmond,Huh. Interestingly leaky abstraction.
903,1507218094.000261,Kareen,how is it leaky?
903,1507218276.00011,Ernesto,I am trying to migrate from clj to cljc some ns but I get `java.io.FileNotFoundException: Could not locate... on classpath`; Apparently something is renaming my cljc file extension to  `cljc.clj`; at least emacs displays the file with this weird extension; ??; Anyone has an idea?; My file system still sees .cljc but emacs tells me otherwise when browsing the file tree
903,1507218717.000201,Willow,so i'll take a wild guess. you have clj-refactor along with cider. your buffers are in `clojure-mode` and the refactoring is ensuring that the file suffix is appropriate. i'll bet that if you change to `clojurec-mode` (note the c) you will end this algorithmic tug of war
903,1507219053.0004,Ernesto,Thank you <@Willow> :slightly_smiling_face: How to change to clojurec-mode?
903,1507219078.00041,Willow,M-x clojucec-mode
903,1507219138.000591,Ernesto,(no match)
903,1507219158.000198,Edmond,"Just that it works in some cases and not others, presumably has something to do the underlying implementation."
903,1507219493.000421,Ernesto,Not sure. I am in a clojure file then I type M-x clojurec-mode; i see clojure-mode but not clojurec-mode; not sure if this get me in a clojure buffer. I am not an emacs pro :disappointed:
903,1507219679.000178,Kareen,no; it has to do with the fact that eval works on clojure code/data structures; and function objects are neither
903,1507220167.000608,Edmond,"I see. Good tip, actually was able to get my hack to work with that in mind."
903,1507220195.000293,Ernesto,"Ok I reinstalled clojure-mode and I see clojurec-mode; i select it, but still see .cljc.clj …; Even if I reboot emacs"
903,1507220391.000129,Georgianne,Does anyone use Jupyter Notebooks with Clojure? There are three Clojure kernels and I have no idea which are best.
903,1507220396.000812,Ernesto,"And even if I close emacs and have proper .cljc extension, I get `java.io.FileNotFoundException: Could not locate`; I seems to be two problems"
903,1507220453.000279,Willow,maybe my suggestion was misleading. sorry
903,1507220529.000089,Ernesto,"I got `Could not locate foo/bar__init.class or foo/bar.clj on classpath.` instead of `Could not locate foo/bar__init.class, foo/bar.clj, or foo/bar.cljc on classpath.`; I seams cljc in not there; I have clojure 1.8.0; and i got `:source-paths [""src/clj"" ""src/cljc""]` in my projet.clj; hmmm; Thank you anyway for your help"
903,1507221332.000568,Sonny,there’s a ticket for that - the error message is just missing it. it is actually looking for foo/bar.cljc though
903,1507221380.000608,Ernesto,ok thanks <@Sonny>
903,1507221444.000084,Sonny,<https://dev.clojure.org/jira/browse/CLJ-1797>
903,1507222056.00011,Ernesto,"`Reloading Clojure file ""/foo/bar.cljc.clj"" failed.`; even without emacs, I get `.cljc.clj` file naming issue; ```
Compiling ClojureScript...
Reloading Clojure file “/foo/bar.cljc.clj” failed.
clojure.lang.Compiler$CompilerException: java.lang.RuntimeException: Conditional read not allowed, compiling:(foo/bar.cljc.clj:3:6)
```"
903,1507222261.000648,Sonny,"that ends in .clj so will be treated as a Clojure file, not a cljc file; but maybe that’s an error message error. That “Reloading” message is not part of Clojure core, not sure where that’s from.; I think that’s lein-cljsbuild? <https://github.com/emezeske/lein-cljsbuild/blob/master/support/src/cljsbuild/compiler.clj#L126>"
903,1507222478.000074,Ernesto,"On my mac, if I do CMD + i on file, I see the file has .cljc.clj extension. When I rename it from there, it compiles; Seems really an Emacs issue; Sorry about that"
903,1507222942.000452,Sonny,"np, too many things that need to work together!"
904,1507225649.0001,Douglass,"If I'm invoking a static operation in a java class in repl, is the static initializer block in the class guaranteed to be executed? because it looks to me it's not. it only seems to be normally executed if I add an extra level of indirection, i.e. have another class on java side that invokes the static operation"
904,1507225823.00069,Rebeca,how are  you testing that?
904,1507225958.000451,Douglass,"well I noticed a very odd behavior when my unit test in clj failed even though it executed the same code as the corresponding junit class. they invoke static operation but results depend on the static initializer block to be run before; if I add the indirection with an extra java class, the clj test succeeds"
904,1507226158.0002,Rebeca,have you been able to directly observe effects of the static initializer not happening?
904,1507226277.000218,Douglass,"I can't explain the result otherwise. there are no other code changes involved, but no, not directly. I suppose it'd be simple to write a standalone test for it. but sounds like this is not a known issue?"
904,1507226291.000126,Rebeca,"the static initiliazer isn't usually something you have to invoke directly, but there are ways to load a class without having it invoked, and clojure has had some changes over the years to delay when the static initializers are run; are you invoking the static methods reflectively?"
904,1507226350.00048,Douglass,"eh no, how can I invoke it reflectively from clj? I can try that"
904,1507226377.000366,Rebeca,if the compiler can't determine the types to resolve the method at compile time it will insert the reflection for you; you can `(set! *warn-on-reflection* true)` at the top of your source file and then recompile it to get warnings about it
905,1507227377.000419,Amado,"hello everybody, is anyone aware of some webserver in cljs? something like a port of compojure to run with nodejs or something like that"
905,1507227401.000205,Margaret,compojure is a router
904,1507227452.000266,Margaret,<@Amado> anyway you might find macchiato interesting <https://github.com/macchiato-framework>; just be aware that if you care about performance or resources jvm clojure is going to be the better bet
904,1507228564.000487,Amado,ill take a look thx :slightly_smiling_face:
906,1507238844.000186,Silas,"What would be the best way to have an experimental namespace? So maybe one day the fns inside it move to another namespace, but I wouldn't want people to need to change their require when that happens. So the experimental should still point to the now none experimental fn."
907,1507240201.000007,Raul,"Potemkin's import-vars <https://github.com/ztellman/potemkin#import-vars> does what you want.

Personally, rather than doing it that way though, I'd probably just tag the function as experimental in the final intended namespace, rather than having an NS of experimental things imported all over the place"
908,1507268499.00004,Douglass,"my java/clj interop test is giving me: java.lang.ClassCastException: Cannot cast android.graphics.Point to android.graphics.Point
 at java.lang.Class.cast (Class.java:3369)
    clojure.lang.Reflector.boxArg (Reflector.java:427)
    clojure.lang.Reflector.setInstanceField (Reflector.java:282)
I have this class in the classpath only once.. so this is a classloader issue? I'm trying to set a field in java class with clj; yeah, a classloader issue:
point classloader from clj  #object[clojure.lang.DynamicClassLoader 0x20c7622 clojure.lang.DynamicClassLoader@20c7622]  , classloader for SurveyMap  #object[sun.misc.Launcher$AppClassLoader 0x4554617c sun.misc.Launcher$AppClassLoader@4554617c]
how the heck do you guys do clj/java interop development? Is there a trick to make all java classes load through DynamicClassLoader?; or perhaps it's the Virgil plugin I'm using (for reloading java) that causes the issue?; no, looks like this is at least somewhat of a known issue (e.g. <https://github.com/xiongtx/lein-trampoline-aot>). I don't have circular dependencies, I'm in control of loading my plain java classes so I feel like I should be able to instruct my clj to load them all through DynamicClassLoader"
909,1507285691.000245,Marnie,"why can i do `(conj {} [\a \b])` but not `(conj {} '(\a \b))` ?; i'm guessing it's because maps require their entries to be vectors, not just sequences"
909,1507286323.000276,Janelle,";; When conjoining into a map, vector pairs may be provided:
(conj {:a 1} [:b 2] [:c 3])
;;=&gt; {:c 3, :stuck_out_tongue: 2, :a 1}

;; Or maps may be provided, with multiple pairings:
(conj {:a 1} {:b 2 :c 3} {:d 4 :e 5 :f 6})
;;=&gt; {:f 6, :d 4, :e 5, :stuck_out_tongue: 2, :c 3, :a 1}

;; But multiple pairings cannot appear in vectors:
(conj {:a 1} [:b 2 :c 3])
;;=&gt; IllegalArgumentException Vector arg to map conj must be a pair...

;; And pairs may not be provided in lists:
(conj {:a 1} '(:b 2))
;;=&gt; ClassCastException ...Keyword cannot be cast to ...Map$Entry..."
909,1507286631.00016,Kareen,"vector pairs are map entries, lists aren't"
909,1507286692.000014,Marnie,got it
909,1507286742.000245,Janelle,you can always write a function to do it if you want
910,1507297145.000355,Inocencia,"Why would a println affect something like evaluation order? I’m getting a test that passes when I run a macro as a side effect wrapped with println, but fails without. I’ve tried replacing with dorun and doall but still fails; Fails with eval also"
910,1507298218.000687,Basil, Do you use `for` or `map` for side effects?
910,1507298915.000088,Wilfredo,`doseq` or `dorun`; If you have a side-effecting function that you want to apply consecutively to a lazy sequence use `doseq`.
911,1507302487.000071,Mia,"<@Basil> `for` and `map` are both lazy, so the side effects won’t happen until the results are realized"
911,1507302508.000155,Basil,bostonaholic: I know that.
911,1507302627.000203,Mia,then I’m unsure of you question
911,1507302694.000188,Bibi,<@Mia> he's asking <@Inocencia>
911,1507302702.000466,Mia,"ah, sorry. I just realized that; :facepalm:; haven’t yet had my coffee"
911,1507302768.000217,Inocencia,It’s a thread last macro that threads the result of a macro through a filter and two maps; There’s a function in one of the map fns that does the side effect
911,1507303135.000115,Bibi,"<@Inocencia> I'd run it in a repl, to see the result of the macro when it ends with the side-effecty call, to see if what comes back is what you expect."
911,1507303485.000234,Inocencia,Forgot to mention it works fine at a REPL without println or dorun or anything
911,1507304158.000357,Merri,<@Inocencia> you might be running into a chunking issue depending on the sample size. I would wager that your sample size in the repl is smaller than your data size outside of the repl.; This could be helpful: <https://stuartsierra.com/2015/08/25/clojure-donts-lazy-effects>
911,1507304353.00051,Inocencia,"!!!. <@Merri> Thank you! replaced map with `run!`, works and learned something :slightly_smiling_face:"
911,1507304466.000427,Mallie,`run!` is awesome. We've made extensive use of it
911,1507304570.000279,Inocencia,Didn’t know it existed
912,1507304768.000531,Mallie,"Neither did we until we found that exact article you were linked to above, after running into lazy-sequence processing issues :wink:"
913,1507305187.000103,Bethel,anyone familiar with hara project by Chris Zheng? <http://docs.caudate.me/hara/hara-event.html#entry__hara_event__raise>
913,1507305216.000126,Jodie,"I am somewhat, yep; <@Shantell> hangs out here sometimes too :slightly_smiling_face:"
913,1507305365.000432,Bethel,"ok thx <@Katherine> Can you make sense of the sentence on the hara.event website which goes like… “It can be noted that the try/catch paradigm can implement sections and . Other clojure restart libraries such as errorkit, swell and conditions additionally implement sections , and .” , below section 5 - Strategies??; sorry, I meant ‘thx <@Jodie>…"
913,1507305448.000249,Jodie,Looks like the references have been clobbered; <https://github.com/zcaudate/hara/blob/431451dc81215e93b2efcaaf05ed9009ee6eb0d3/test/documentation/hara_event/strategies.clj#L5> this is how it is supposed to read
913,1507305499.000321,Bethel,"ok…thx, thought I was missing something :slightly_smiling_face:"
913,1507305501.000526,Jodie,"a few links are missing, or maybe sections were renamed"
913,1507305582.000582,Bethel,<@Jodie> thanks!
914,1507309061.000033,Silas,Thanks for both suggestions. You might be right about the last bit. I'll look into just tagging things as experimental.
915,1507319313.000016,Robbyn,hi all!; do you guys use exceptions for something in your clojure code?; for instance -- for code decoupling?
915,1507319395.000053,Guillermo,"exceptions tend to couple code together; It makes code need to become aware of exception classes of any library, at any stack depth"
915,1507319459.000305,Robbyn,exceptions allow separating code from exceptions handling; <https://docs.oracle.com/javase/tutorial/essential/exceptions/advantages.html>
915,1507319482.00017,Guillermo,clojure disagrees
915,1507319513.000369,Robbyn,"so if I want a single-responsibility function I don't wanna handle wrong cases inside the function, I just want to allow someone to handle this"
915,1507319524.000349,Guillermo,"People tend to turn errors into values/data, then act upon the data"
915,1507319545.000313,Robbyn,ok. how to separate main use case flow from alternative flows?
915,1507319578.000297,Guillermo,"I will say exceptions are a way of life on the JVM, you can't avoid them.  Usually I pick a spot in the code where I turn a specific concrete exception into a datastructure... then send the datastructure around the program"
915,1507319599.000392,Merri,"exceptions are like side effects, IMO. Unintended side effects that make it hard to write pure functions."
915,1507319601.000486,Guillermo,Think of ring web responses -- you turn an exception into a `{:status 400 ...}`
915,1507319610.000382,Robbyn,"I think you don't get my question. let me explain; lets say I have a use case ""signup user"". I have email, password and confirm password. Firstly I need to check that fields are filled, then -- password and its confirmation match. then I need to check that the same user does not exist yet in DB. Then, after creating user, that the user was successfully created; see the point? lots, LOTS of branching; I want to avoid that; in Java I have exceptions, in Haskell -- Either moand; how to do it in clojure?"
915,1507319749.000066,Merri,Usually I try to just use `some-&gt;` if I don't care about which part of the process broke.
915,1507319791.000109,Robbyn,and if I do care? I just want to separate the main flow of the use case from the alternative flows
915,1507319805.000187,Merri,Something like this works well if you do care: <https://adambard.com/blog/acceptable-error-handling-in-clojure/>
915,1507319811.000156,Robbyn,just read that
915,1507319830.00044,Willow,`{:user-info {:email ...} :reasons-preventing [:already-present :missing-email]}` and then `(if (seq (:reasons-preventing user-analysis)) (bad-response) (good-response (create-user user-analysis))`; something along those lines is what i do often
915,1507319918.00009,Merri,If you have to branch n times you're doing it wrong. I've played with this too: <http://funcool.github.io/cats/latest/>
915,1507319933.000501,Robbyn,"ok, so you guys don't use exceptions?; so what then? monads?"
915,1507320013.000164,Willow,i wouldn't trust anything beyond trivial usage of monads in a dynamic language. i would absolutely hate to pick up someone else's code like that
915,1507320058.000233,Robbyn,"<@Willow> same as me, monads are for static type system; so I'm getting back to my question -- how to separate main flow and alternative flows without exceptions?.."
915,1507320188.000555,Willow,"i like my example. build up an object with the inputs and analysis. you can put reasons preventing creating a user in the db, whatever. and then afterwards a function that takes that analysis object and has a simple cond statement examining the reasons-preventing the creation, and otherwise do the thing you want; ```
(def token-verification-functions [not-breeze-token?
                                   not-recent?
                                   not-verified?
                                   not-user-id?])

(defn- analyze-token*
  [decoded-token]
  (let [reasons (into []
                  (keep #(% decoded-token))
                  token-verification-functions)]
    {:valid?  (empty? reasons)
     :reasons reasons}))
```"
915,1507320366.000117,Robbyn,"yeah, it looks like a bit more complex variant of monad Either; i think Either should go here; exceptions look alien to clojure"
916,1507320632.000594,Ernest,"Hi. I’m trying to find a short macro expression for the following:
```
(-&gt; x
  (foo a b)
  (foo c)
  (foo d e))
```
Any suggestions? I have the following in mind:
```
(foo-all x
  a b
  _ c
  d e)
```
or
```
(foo-all x
  [a b]
  c
  [d e])
```"
915,1507320771.00012,Merri,"<@Robbyn> Off the top of my head I would try something like this: ```(let [[result err] (-&gt; [[:success, nil] {:name ""name"" :password ""pw""}]
          validate-user
          check-exists
          create-user)])
```; each fn returns a result and error and continues only if there's a good result.; `-&gt;` could also be `some-&gt;` so that you don't have to check the input on each fn.; The only kind of gross thing is having to return the [result err] seq in each fn.; reminds me a little of the way that go handles errors."
915,1507320936.00024,Margaret,it’s basically a hand-rolled monad
915,1507320972.000399,Merri,"It pretty much is, and we've come full circle."
915,1507320997.000097,Arlean,and you might as well implement Validation instead :slightly_smiling_face:
916,1507321214.000012,Arlean,in fact. you did.
915,1507321298.000452,Daniell,"I don't consider exceptions to be that evil, now that we have `ex-info` and `ex-data`.; OTOH, if you can `reduce` all your steps you can short-circuit evaluation by returning `(reduced {:fail ...})`..."
916,1507321426.000499,Arlean,hmm- is there a good article or code that shows idiomatic usage of those?
915,1507321443.000182,Merri,Hmm. That's a good use case for `reduced` that I haven't thought of.
916,1507321482.000518,Arlean,it seems the idea is to just wrap your catches with them?
915,1507321504.000329,Daniell,`(try (some complex pipeline that throws ex-info anywhere) (catch clojure.lang.ExceptionInfo e (ex-data e)))` -- one top-level `catch` to return whatever data was thrown...
916,1507321528.000365,Arlean,right. thanks!
915,1507321560.000262,Daniell,A bit like having transients inside a process and making them persistent to return the value :slightly_smiling_face:
915,1507321581.000043,Arlean,i'm surprised it's not been covered in the book I'm reading so far
916,1507321611.000342,Daniell,Which book?
915,1507321620.00022,Daniell,(sorry if you said earlier and I missed it)
916,1507321624.000025,Arlean,joy of clojure- although i'm only halfway through
915,1507321687.000084,Arlean,"ah, it is. chapter 12. still on my way there :slightly_smiling_face:"
915,1507321816.000024,Robbyn,<@Merri> have you ever heard about monad Either? :wink:
915,1507321830.000153,Arlean,<@Robbyn> scala hacker? :wink:
915,1507321835.000562,Daniell,Page 304 onward and page 447 onward cover some good stuff about exceptions (assuming JoC 2nd Ed); It lives by my left hand :slightly_smiling_face:
915,1507321863.000166,Arlean,<@Daniell> it was the friendliest to common lisp refugees I found. :slightly_smiling_face:
915,1507321938.000067,Robbyn,<@Daniell> looks like ex-info/ex-data is a good workaround for my case
915,1507322003.000335,Daniell,"<@Arlean> Yeah, JoC 1st Ed was my first Clojure book -- but I'd done Lisp and a fair bit of FP in various academic languages back in the early 80's."
915,1507322096.000477,Arlean,"Modern clojure/clojurescript is truly refreshing, I didn't think I'd be able to do this seriously. The community is doing an amazing job and I am in awe.  Just wish I'd made the jump sooner!; I picked up clojure a bit early on, but it was rather fringe and iirc, there were some nasty bugs in maps that made me decide to sit it out for a while"
915,1507322173.000078,Daniell,"I picked up Clojure to play with in 2010, been doing it in production since 2011, and it became our primary back end language a few years ago."
915,1507322214.000348,Robbyn,<@Daniell> maybe you can give us a talk about it on our conference?
915,1507322224.000052,Arlean,"I've been very happy with ring, and it looks like spec will get me some way to functional dependant types without the pain of blowing up intellij you get with scala's shapeless :slightly_smiling_face:"
915,1507322240.00033,Daniell,<@Robbyn> Pretty easy to mimic Either and related monads with `first`/`second` and `vector` for the values. A few `def` aliases for syntactic sugar and you're golden! :slightly_smiling_face:
915,1507322267.000109,Arlean,and never underestimate the fearsome power of macros :slightly_smiling_face:
915,1507322286.00022,Robbyn,"yeah, but monad is about the syntactic sugar, otherwis it looks like even more complex solution than the problem it tries to solve"
915,1507322383.000312,Daniell,Type systems are overrated :slightly_smiling_face: (I've had a love/hate relationship with Haskell since it appeared and I worked with a number of its predecessors in the 80's)
915,1507322429.000009,Arlean,"Yeah, I'm in two minds with types, I think spec can hopefully find the middle ground.  It looks so great until one of your nodes restarts and you goofed and push the rest of the cluster over. :confused:"
915,1507322429.000171,Robbyn,<@Daniell> can't agree with you more. I feel like I'm much more productive in Clojure than in Haskell and even in Java. But I don't know why; sometimes I think that clojure just offers such simple solutions that we don't need to spend the time for investigating complex frameworks
915,1507322461.000253,Arlean,that said i did some nodejs consultancy a few years ago and the scars drove me towards the Haskell/Scala camp :slightly_smiling_face:
915,1507322480.000139,Robbyn,<@Arlean> what brought you to clojure?
915,1507322492.000275,Verona,"I hope someone can help me, for some reason I'm unable to get the `(reset)` working for a reloaded workflow. I've used this on multiple projects in the past two years now, but it always seems very unstable. Quite often I'm unable to use the reset-fn since it errors that a namespace isn't found... I have checked that the source-paths in project.clj are correct. Anyone with similar troubles?"
915,1507322498.000113,Daniell,"Ah, yes, JS can inspire a fear of dynamic languages / love of type systems :slightly_smiling_face: I've managed to avoid JS almost completely...; <@Verona> There's a <#C0GQAAKA9|component> channel that may be able to give more specific advice. I must admit I've also had problems trying to use that workflow on projects..."
915,1507322582.000303,Arlean,"<@Robbyn> initially I was a hairy undocumented sbcl hacker, so lisp is an old friend.  My recent desire to learn it fluently is driven by discovering in production Scala is not delivering on types, and cemented by figwheel and general repl development"
915,1507322609.0003,Verona,"<@Daniell> Ah, thanks, didn't know that. Will ask it there :+1:."
915,1507322676.000185,Arlean,"<@Robbyn> some of what you get with CIDER repl development is 'meh' to a CL user, NASA literally debugged the pathfinder probe at the repl while it was on Mars using lisp- yet my initial forays into what clojure offers has wowed me, which just means I'm here to stay :slightly_smiling_face:"
915,1507322699.000367,Robbyn,"nah, I've heard that 1000....0000 times"
915,1507322702.000408,Arlean,"hehe; let's face it, it's going to be a while before the lisp communities are going to top that anecdote; <@Robbyn> but if you're of a scala/haskell persuasion, spec being able to emulate scalacheck/quickcheck and provide static checking seems like a massive step towards closing any gap there may be.; every point on the lambda cube has pain. it's nice to try other geometry"
915,1507323378.000281,Robbyn,Nice! And how do you emulate it without static type system?
915,1507323396.000465,Arlean,"clojure.spec.alpha :slightly_smiling_face:; it's dependent typing and structural typing in a common definition language, as far as i understand it (please anyone better qualified jump in at this point :))"
917,1507323545.000075,Rebeca,no
915,1507323552.000077,Rebeca,spec isn't a type system at all; it is more like a contract system
917,1507323581.000284,Rebeca,there is no static checking
915,1507323633.000003,Rebeca,"the only checking it does for functions is generative(generating inputs and checking outputs, no analysis of the code), which isn't suitable for use in production"
915,1507323694.000313,Arlean,"but for example, it could easily be used to declare structural types, ala typescript, no?; the type system is obviously far to strong to be totally enforced at compile time, but ten years from now, couldn't we see linters using the common format to statically check certain aspects?"
915,1507323814.000327,Rebeca,"possibly, but unlikely, it allows arbitrary predicates"
915,1507323867.000324,Robbyn,As for me without lots of tests this specs are useless
915,1507323873.000426,Arlean,"absolutely, it would not even be *possible* to statically enforce the full level of specs; <@Robbyn> did you ever use property based testing?"
915,1507323899.000397,Robbyn,Yes
915,1507323985.000462,Arlean,"hmm. come to think of it, specs structural language may be itself too powerful to do typechecking, predicates or no :confused:"
915,1507324160.000213,Willow,"is there a good collection compare for testing when order doesn't matter besides set, or this essentially what any collection compare would do anyways?; i guess that would destroy duplicates in teh general case which doesn't affect me here but presumably this is a standard problem?"
915,1507324227.000126,Aldo,<@Willow> (= (frequencies col1) (frequencies col2))?
915,1507324246.000506,Willow,ah nice; thanks
915,1507324264.000244,Aldo,"np, I love that function"
915,1507324271.000156,Arlean,"bag=, i love it"
915,1507324275.000328,Aldo,it's so useful in so many surprising ways
915,1507324276.000012,Willow,i like it and never thing to use it.; <@Arlean> do you have `bag=` defn'd to the frequencies comparison bfabry showed?
915,1507324385.000041,Arlean,<@Willow> no! but I will now :slightly_smiling_face:
915,1507324385.000237,Willow,or have an alternative imp; haha i was kinda thinking the same thing
915,1507324407.000001,Arlean,"it's the perfect bag= function. perfect for all your ISeq needs :slightly_smiling_face:; my naive answer would be coerce both args to sets, and now look, we don't handle bags :slightly_smiling_face:"
915,1507324739.000385,Willow,ticket closed for not being amenable to nice looking code
918,1507329419.000275,Elvin,question while I'm stuck at work late.  Why doesn't clojure have a `&lt;-` macro?  something that takes the last form and puts it at the beginning
918,1507329752.000235,Jodie,How would that be used?
918,1507329950.000154,Elvin,"it would be _really_ helpful for working with the other threading macros, like cond-&gt;/cond-&gt;&gt;, some-&gt;/some-&gt;&gt;, and `as-&gt;` which require the in threaded value to be first.  often you're working with a collection in a thread, so you're using map and filter (which are mostly worked with via the `-&gt;&gt;` macro), but you cant do anything conditionally with them, etc.  You can easily hop from thread first to thread last, but you cant go the other direction.  Let me give an example."
918,1507330042.000033,Rebeca,macros don't work like that
918,1507330064.00013,Elvin,"that's what you think :joy: check it out:; so, this is not doable, because you're threading last; it would be doable like this:"
918,1507330163.000185,Rebeca,"```
user=&gt; (defmacro f [body] (prn 'f body))
#'user/f
user=&gt; (defmacro g  [body] (prn 'g body) body)
#'user/g
user=&gt; (g (f 1))
g (f 1)
f 1
nil
user=&gt; 
```"
918,1507330193.000109,Margaret,or `(-&gt; (retrieve...) (-&gt;&gt; (map ...) (map ...)) (cond-&gt;&gt; ...) (cond-&gt;&gt; ...))`
918,1507330271.00022,Elvin,"right, you have nesting options that are less easy, like that <@Margaret>.  you could also do this (if you wanted to keep each step in the pipe easily re-orderable):; you can use -&gt;&gt; to jump into a thread last at any point; its just odd to me that there's no way to go the other direction."
918,1507330325.000218,Rebeca,you can also collapse the cond-&gt;&gt;
918,1507330352.000017,Elvin,"yes, you can :slightly_smiling_face:"
918,1507330353.000239,Jodie,"It becomes complex to follow I think, with too many flow rewrites. I find nested -&gt; a bit much at times"
918,1507330354.000158,Margaret,<@Rebeca> only if show-inactive? doesn’t need data added by the condition side of show-internal-data?
918,1507330362.000049,Rebeca,nope; cond-&gt;&gt; will pass through all the true cases
918,1507330387.000104,Margaret,what I mean is if it needs the change the previous cond made
918,1507330395.00008,Rebeca,it can't
918,1507330397.000194,Elvin,"I mean look, the point is to keep the whole thing flat"
918,1507330406.000031,Rebeca,the condition doesn't have access to what is being threaded through
918,1507330411.000035,Elvin,"if you just use -&gt;&gt; on each line, they become self contained steps; likewise, if I had a symmetrical `&lt;-`, I could have self contained filter steps thrown into the mix."
918,1507330580.000093,Rebeca,have you played with transducers?
918,1507330630.000109,Elvin,"it just seems to me that, since there is no form of `cond-&gt;` or `some-&gt;` or `as-&gt;` that can possibly be used in a thread last, the existence of a `&lt;-` would be an obvious thing.; right.  do you kind of see how this would help to reduce nesting?; without it, you have no choice but to nest to do the same thing."
918,1507331314.000222,Rebeca,"I may not know what there needs to be, I remember pasting a link to <https://gist.github.com/hiredman/184831> in '<#C03S1KBA2|clojure>' years ago and then ten days later '-&gt;&gt;' showed up in core; jeez I still think of cond-&gt; as being recent additions, but they are ancient; <http://clojure-log.n01se.net/date/2012-10-12.html#14:41>"
918,1507331587.000066,Elvin,oh yeah?  possibly before `-&gt;`?
918,1507331624.000057,Rebeca,"no, I just mean they are from 2012 or so, which may as well be forever ago"
918,1507331656.000029,Elvin,"<@Daniell> yeah, that's alright, but I really prefer my pipes to be flat, so I can reorder them easily as requirements change.; maybe I want to filter earlier on to avoid running transforms on all the records, etc."
918,1507331734.000073,Daniell,"If you think your code is too complex / hard to read, refactor it into smaller functions."
918,1507331783.000071,Elvin,I understand.  I think that argument could be made for all of threading though.
918,1507331802.000006,Daniell,"Yes, a lot of people combine too much code when threading."
918,1507331857.000024,Elvin,"could be, but I happen to believe they are often a much better choice to represent a program, if you can keep them flat."
918,1507331871.000196,Daniell,Transducers are often an even better choice.
918,1507331879.000239,Margaret,bad bot
918,1507332024.000152,Elvin,"well, anyway, I think my point is pretty well made here.   when working with collections, it is often useful to use `cond-&gt;` or `some-&gt;` or `as-&gt;` (insofar as it is useful to use those macros in _any_ context).  the existence of a `&lt;-` would make that possible, without having to reorganize your thoughts around core's limitations."
918,1507332048.000026,Margaret,you should write `&lt;-` then
918,1507332066.000203,Elvin,"oh, I have.  I was just wondering why it wasn't in core, and thought I'd make the case."
918,1507332090.000116,Rebeca,prismatic had a library for building processing graphs; you would give it transforms (as functions) and dependencies between transforms (as metadata on the function if I recall) and it would do the sorting and piping to give a function did what you wanted
918,1507332177.000131,Margaret,I’ve been meaning to try plumatic/plumbing some day
918,1507332204.000009,Rebeca,"data transforms are almost never linear, you end up wanting something more  graph like"
918,1507332227.000003,Daniell,(I was a bit surprised `comp`osing `identity` into the transducer pipeline worked)
918,1507332285.000137,Rebeca,I've got a version of that graph thing somewhere that expects all inputs to be seqs
918,1507332286.000013,Margaret,"in this case clojure is evaluating show-internal-data? as a condition - I don’t think that is what was intended; oh, never mind, it was; I had misread"
918,1507332306.000201,Rebeca,so you end up with some cross between that and a for comprehension it is very list monad
919,1507333140.000146,Rebeca,<https://gist.github.com/hiredman/71b71e4e07e7666fe1b9def9a476c765> that took a while to dig up
918,1507333621.000134,Rebeca,apropos as a way to build a processing pipeline/graph that isn't heavily nested
920,1507368701.000034,Lavinia,"So I'm trying to create an IFn from a java Runnable in java code (using `clojure.java.api.Clojure` for interop). What's the best way to do this? Using `Clojure.read` can't create an annonymous functions, and I'm not sure how to create an annonymous function with `Clojure.var`"
920,1507368846.000057,Rosia,the easiest way is to subclass AFn
920,1507368882.000089,Lavinia,Right. That's a lot of overrides to do. Just wanted to make sure that this wasn't handled in the api.
920,1507368913.000035,Rosia,"AFn has default implementations for the whole IFn interface, just override the ones you need"
920,1507368934.00013,Lavinia,"oh I thought you typoed on IFn, let me look up afn"
920,1507369008.000016,Rosia,AFn is concrete and is actually used by many of clojure's concrete types
920,1507369655.000133,Lavinia,"That worked, thanks for the help"
921,1507384308.000091,Cristen,"Hi, how to use cemerick/friend and ring anti forgery tokens together? I get a failed login when adding forgery token field; Oh I deleted the user :slightly_smiling_face:"
922,1507397798.000116,Silas,Am I wrong to assume seq will realize a lazy sequence? I thought converting it to a non lazy sequence would fore realize it
921,1507398034.000038,Margaret,"seq does not realize a lazy-seq; ```+user=&gt; (type (seq (map inc (range))))
clojure.lang.Cons
+user=&gt; (type (rest (seq (map inc (range)))))
clojure.lang.LazySeq
```; it only makes the outermost element non-lazy"
923,1507467373.000082,Jodie,"<https://clojuredocs.org/clojure.test/report>

I think the docstring for this is out, I can't find test_is.clj"
921,1507467486.000004,Jodie,I think it's referring to test.clj
924,1507484726.000035,Silas,What does that mean? What would be different between LazySeq and ChunkedCons ?; If the elements are lazy thunks
924,1507486075.000065,Roscoe,"(I suppose this actually is ""on topic"" for the main clojure channel)"
925,1507486822.000024,Margaret,"it replaces the first pair of the linked list with a ChunkedCons which is a kind of cons pair; if the input were chunked a whole ""chunk size"" elements would have been realized; but it doesn't realize the whole thing - after the first pair / pairs the rest is still a lazy-seq"
924,1507488060.000095,Merri,"<@Roscoe> seems kind of like redis with rdb, only closer to your app. I would check first if redis/rdb is a better fit. Wouldn't want to reinvent the wheel"
926,1507488091.000085,Merri,"I've done the same thing with re-frame, periodically writing to local storage. The performance sucked though."
926,1507488146.000066,Roscoe,"cool, will check that out, thanks!"
926,1507498350.000065,Berry,"is it worth considering ""let me rewrite this code to cache this math sub expression inside this loop"" or should I just think ""let the JIT take care of it"""
925,1507498455.000066,Margaret,"I'd keep things simple first, then if it's not fast enough measure and find out where the bottle neck is - by that point if you need the optimization that means the JIT didn't take care of it, and your next step is either optimize yourself, or convert it to something the JIT can handle"
925,1507498468.000029,Berry,"that is the correct answer; unfortunately, being the lazy idiot I am, I still haven't setup a decent profiling setup; I guess the XY problem is: how do I setup a decent statistical profiling environment"
925,1507498522.000096,Margaret,have you tried yourkit?
925,1507498710.000035,Berry,"$400 / year?; I still haven't jumped over the mental hurdle of ""if it saves me 4 hrs, I should just pay for it"""
925,1507499059.000064,Shira,<@Berry> around January for the last two years Yourkit have had a sale for a personal license for ~$100; <https://twitter.com/yourkit/status/336891893558427648?lang=en>; <https://www.reddit.com/r/java/comments/5kt8tk/yourkit_java_profiler/>
925,1507499318.000022,Berry,"at $100, I would absolutely pay for it; weirdly enough, I'd probably also pay $100 for emacs, but not $400 for emacs, though the value I derive from emacs far exceeds that; is there a clojure builtin which does 
input: [:a :stuck_out_tongue: :c :d] [1 2 3 4}
output: [[:a 1] [:b 2] [:c 3] [:d 4]] ?"
925,1507499451.000065,Shira,map
925,1507499453.000022,Margaret,(partial map vector)
925,1507499464.00005,Shira,beat me to it
925,1507499478.000033,Berry,"right, I keep on forgetting map can be (map func col1 col2)"
927,1507530878.00011,Berry,"there's clojure library FooBar, which uses JNI. There's two JNI options. CPU support and GPU support.

Maven package of FooBar has CPU support.

I built a local *.so with GPU support.

How do I properly package up FooBar so that my local boot config picks up my LOCAL *.jar with the GPU support ?; I expect this to be a mess, so if you can point me at some docs / tutorials, I can go hash it out myself."
928,1507549917.000193,Lynell,"Emacs related question, but is there any way go get a list of definitions/functions in the current buffer or project?"
928,1507551347.000088,Jena,for the current buffer i use `M-x imenu`
925,1507551392.000144,Jena,or you can use `M-x helm-imenu` if you have helm
928,1507552427.000037,Lynell,"Thanks, works like a charm, found imenu-list emacs plugin as well."
929,1507557416.000454,Lily,"sensible testers, how do you access the test result from clojure.test after a test run via `lein test`, what I'm looking to do is send email/slackmsg after all tests.; I use `use-fixture` to correctly sequence the test, didn't try, but maybe it returns what I'm looking for..."
929,1507557628.000439,Hannelore,"is there an idiomatic way to write a function that will read a string per edn/read-string, but return values that get returned as symbols to be returned as strings instead?; i.e. read-string looks like `(read-string ""42"")` -&gt; `42`, `(read-string ""hello"")` -&gt; `hello`; I would prefer `(read-string ""42"")` -&gt; `42`, `(read-string ""hello"")` -&gt; `""hello""`"
929,1507557712.000338,Lily,"`(read-string ""\""hello\"""")` ?"
929,1507557724.000078,Hannelore,"the actual strings are being read in from a CSV file; a CSV without quotes :stuck_out_tongue:; tab-separated, actually; so I can’t really control the input to read-string very well, or I’d prefer not to"
929,1507557787.000151,Lily,"hmm, pass the symbol 'hello to the function `name`?"
929,1507557829.000583,Hannelore,"read-string is probably not actually what i want, looking more closely; I guess i have to try to parse the string as a number, and if it fails just return the string"
929,1507557877.00073,Jodie,"<@Hannelore> if it's number or string, then yeah, do that."
929,1507557881.000572,Lily,"you can also use a function, not in clojure.core tough, `numeric?` if you only want to get the numbers out of the string and read them only."
929,1507557895.000038,Hannelore,some numbers are floats and other numbers are ints though :disappointed:
929,1507557915.000743,Jodie,<@Hannelore> treat them all as float?
929,1507557934.000522,Hannelore,I think I might be able to get away with that; maybe
929,1507557947.000485,Jodie,Clojure doesn't care about the differences.
929,1507557948.000346,Hannelore,Most of them are floats for sure
929,1507557961.00044,Lily,"this one from rosetta stone works for floats I believe
```
(defn numeric? [s]
  (if-let [s (seq s)]
    (let [s (if (= (first s) \-) (next s) s)
          s (drop-while #(Character/isDigit %) s)
          s (if (= (first s) \.) (next s) s)
          s (drop-while #(Character/isDigit %) s)]
      (empty? s))))
```"
929,1507558049.00001,Hannelore,probably easier to just catch the error from converting…
929,1507558053.00046,Jodie,"<@Hannelore> 

```
user=&gt; ((fn [n] (try (Float. n) (catch NumberFormatException _ n))) ""hello"")
""hello""
user=&gt; ((fn [n] (try (Float. n) (catch NumberFormatException _ n))) ""10"")
10.0
user=&gt; ((fn [n] (try (Float. n) (catch NumberFormatException _ n))) ""10.5"")
10.5
```

Does that work for you?"
929,1507558076.000277,Hannelore,"using (float n) though… is there a difference?; Oh, yes there is; that’s just a class cast exception; OK"
930,1507564233.000705,Dillon,is there a clojure built-in for compositing multiple boolean checks? i.e. `(?? arg [is-x? is-y? is-z?]))`
930,1507564452.00024,Franklin,(map Boolean? [a b c])
930,1507564476.000193,Guillermo,`some-fn` or  `every-pred` depending on your needs <@Dillon>; they're combinators
930,1507564508.000341,Dillon,`every-pred` is what I’m looking for. Thanks!
930,1507564544.00044,Guillermo,"beware, depending on the situation it can reduce readability"
930,1507564919.00006,Maurine,"I found today a really weird behaviour with insert-multi! and Redshift jdbc driver. If I give to insert-multi! two rows like [[""id1"" 1.1] [""id2"" 2.2]], I get values 1.1 and 2.2 in Redshift. But if I give rows [[""id1"" 1] [""id2"" 2.2]] then I get values 1 and 2 (not 1 and 2.2) in Redshift. I was wondering that this should probably not be the default behaviour (the first row is used to interpret the type of columns or something weird like that)?"
931,1507565592.000443,Willow,"can you run into the 20 arg limit of function calls with apply? I'm a little confused why `(apply str (take 100 (range)))` works, as i assume this is calling str on 100 args"
930,1507565647.00071,Margaret,"there’s no such limit, after 20 args it takes a varargs; this is the highest arity defined, notice it ends with Object… at the end <https://github.com/clojure/clojure/blob/master/src/jvm/clojure/lang/IFn.java#L89>"
930,1507565786.00057,Kareen,the limit is on function definition not function invocation; you can't *define* a function with more than 20 *fixed* args; but you can use varargs
931,1507565833.000282,Willow,ah thanks.
930,1507565836.000456,Kareen,i.e. rather than `(defn foo [a1 .. a21 a22])` you can do `(defn foo [a1 .. &amp; [a21 a22]])`
930,1507565854.000261,Willow,ok. that's always been fuzzy in my head. thanks for clearing that up for me
932,1507568778.000365,Margaret,"also I doubt anyone would find this intuitive (though it’s probably useful in some context) ```peregrine.circle=&gt; ((every-pred even? pos?) 2 -1 1)
false
peregrine.circle=&gt; ((every-pred even? pos?) 2 4 6)
true```"
932,1507569537.000556,Guillermo,I usually only use the combinators when I'm passing the resulting function somewhere else
933,1507569940.000304,Douglass,"hey anybody using re-frame? if so, do you know if it's usable on JVM yet?; at least the basics seems to work. the tests are not yet converted to .cljc so there could be dragons"
933,1507573467.000096,Shira,"<@Douglass> re-frame on JVM is only intended for testing/development, not production use; At least at the moment, we haven’t had people want to use it in prod (not sure what the use case is) ; But people do use it. re-frame-test allows you to write cross platform tests too"
933,1507575470.000084,Douglass,thanks <@Shira>. I'm happily using re-frame on the client but I'm seeing a use case for it on the server as I have to keep a fairly complex load state tree in memory per user. I'm trying it right now!
933,1507577059.000189,Shira,"ok, good luck, let us know how it goes, and feel free to open issues about it on re-frame. It's not a core use for us, but happy to take PRs on it. The architectural pattern for ""re-frame on the server"" is CQRS, so take a look for other CQRS systems for more inspiration"
933,1507577294.000261,Douglass,"thanks, sounds good. it's a shot in the dark, but at this point I felt the alternative would have been a plain global atom, so might just as well try re-frame here"
934,1507584779.000332,Krystina,"I'm trying to add some server side rendering to a pedestal+reframe project; so I just added `clostache` and in theory it should be quite simple; I just changed it from
```
(defn home-page
  [request]
  (-&gt; (ring-resp/file-response ""index.html"" {:root ""resources/public""})
      (ring-resp/content-type ""text/html"")))
```
to
```

(defn- get-config
  [language]
  (merge
    ENV
    {:language (str language)}
    (get TEXT language)))


(defn render-homepage
  [language]
  (clostache/render-resource
   ""public/index.moustache""
   (get-config language)))

(defn home-page
  [request]
  (-&gt; (ring-resp/response (render-homepage :en) {:root ""resources/public""})
      (ring-resp/content-type ""text/html"")))
```; but with the second version Figwheel keeps on complaining that it doesn't find the resource; even though playing around in the REPL it seems all correct; any idea about what it could be the problem?"
935,1507590773.000154,Silas,"Okay, that's a bit strange. I guess its because it reads the head, and then the tail just points to the rest of lazy-seq?; Any way I can with-redef clojure.tools.logging log/warn ?"
935,1507590911.00028,Aldo,"<@Silas> redef clojure.tools.logging/logp; sorry, log*; clojure.tools.logging/log* is the function that all those macros eventually delegate to"
935,1507591038.00013,Silas,"Ah, ya that works; So can you not redef a macro?; I thought it would still just be pointed by the var, and so would have its macro be replaced; Oh, I guess its expended at load time, so before with-redefs runs?"
935,1507591673.000119,Aldo,"guess so, I never really thought about it too hard"
935,1507591687.00008,Margaret,"yes, that's exactly it"
935,1507592011.000316,Silas,"Ok, thx for the info; alright, thx"
936,1507618599.000028,Donella,anyone know a good way to get a file system based memoize instead of using memory?
936,1507620854.000125,Krystina,<@Donella> mm it will eventually load the data in memory when you have to use it anyway right?; what's the use case?
936,1507621348.000347,Donella,<@Krystina> i have 100's of network calls that take 20-60s each to complete and they are always the same (historical event data)
936,1507621398.000389,Krystina,well you can use any DB for something like that; Redis even handles the TTL for you
936,1507621420.000351,Donella,"yes, i can write a caching layer; i was hoping to simply memoize the fns; i don't want to add a dependency on a specific tech like a db or redis"
936,1507621579.00007,Krystina,well you can just do it yourself as well; write to some EDN files; and read from them
936,1507621616.000369,Donella,current plan is to copy and paste the clojure core memoize function and swap out the lookup for a file system based logic; it just seemed like something that might already exist
936,1507621640.000109,Krystina,"it won't save you any memory though, it will only save the computation time, unless you have a different file per input"
936,1507621658.000105,Donella,"yes, different file per fn/args combination"
936,1507621663.000088,Krystina,<https://stackoverflow.com/questions/31186791/clojure-memoize-on-disk>; some answers there; but depending on what you're doing even sqlite could be better than doing it yourself; and that doesn't require any other server running
936,1507621738.000416,Donella,"sqlite seems like a lot of work; the event data i'm getting has no schema; so i either have to hammer a schema into place to represent the specific data coming back from the query; or put k/v into the db, which doesn't seem better/easier than just dumping to files; this stack overflow answer is exactly what i was thinking; so the answer is ""there's no existing libraries, so hand roll something simple"""
936,1507622007.000273,Randee,<@Donella> I wrote that answer :slightly_smiling_face:. You could also use: <https://github.com/Factual/clj-leveldb> if you don't want to deal with multiple files. I have no experience with leveldb though.
936,1507622110.000015,Donella,"mmmk, i'll start with the simple approach and move to a db if i find a reason to"
936,1507622137.000139,Randee,"LevelDB is no ""real"" db, there is no server. It's just a single file."
936,1507622139.000336,Shira,<@Donella> I think you probably want to use a cache instead of memoising
936,1507622161.0003,Donella,<@Shira> why?
936,1507622176.000128,Shira,"a cache gives you more control over where it spills out to; <https://github.com/raphw/guava-cache-overflow-extension>, <https://stackoverflow.com/questions/26884521/use-guava-cache-to-persist-data-to-a-hard-disk>"
936,1507622204.000018,Randee,Also: <https://github.com/shriphani/fort-knox>
936,1507622239.000333,Donella,but a cache also relies on me inserting cache logic; which will end up being the same as memoize behaviour
936,1507622310.000137,Shira,"sure, they're basically the same thing here?; you can write a `PluggableMemoization` if you prefer, see <https://github.com/clojure/core.memoize>"
936,1507622453.000177,Donella,it all just seems like overkill... what's the downside of tweaking memoize to use a folder of files instead of an atom?
936,1507622590.000393,Krystina,By tweaking you mean rewriting it I guess? ; It just means you are reinventing the wheel imho
936,1507622819.00029,Donella,what wheel?; a db?
936,1507622834.000198,Jodie,"Rather than changing memoize, you could have the function write to the fs and return a path to it"
936,1507622837.000084,Donella,"writing a custom plugin for a library?; those are spokes, not a wheel :stuck_out_tongue:"
936,1507622963.000398,Randee,"<@Donella> There is nothing wrong with just using files, but YOU will have to do the coordination if you write/read from multiple threads. Or you'll get garbage. LevelDB library would allow you to just get/write as you like. It's thread safe (as long as you don't use Iterator)."
936,1507623069.000205,Donella,"ok; i don't think i'll run into that issue with what i'm doing; but that's a fair point in general; i'm strictly serially hitting api endpoints, and each time i get about 3 million rows back; and just doing this in a repl; i don't think there's any threading in there, but i could be wrong"
936,1507623224.000401,Randee,"Well I hope you're right, b/c initially yous said it'd take 20-60sec for you to answer the request."
936,1507623245.000087,Donella,yeah it does; i can wait that long once or twice; just not over and over
936,1507623481.000086,Randee,"<@Donella> My point is: What if a second request comes in, while you generated your cache from the first request..."
936,1507623505.000129,Donella,why is that a problem?; each request has different args and so a different file on disk
936,1507623635.000338,Randee,<@Donella> So why cache it then? If it's never going to be accessed again since they're all different?
936,1507623650.000277,Donella,"it will though; the next time i run the function to run a report; it's not always different; it's just not the same for a single set of calls; the only way to have the same args _at the same time_ is for me to run two repls side by side; but the same args will definitely be called sequentially, when i call the fn a second or third time in the repl; anywho, i've already rewritten the memoize to do what i want for now; so i'm getting some dinner, thanks for all the suggestions everyone :slightly_smiling_face:"
936,1507625209.00022,Berry,"(def _+ 20) &lt;-- this appears to work, but is it guarnteed by any standard?"
937,1507625291.000212,Kareen,both _ and + are valid symbol constituents; so yes
938,1507625298.000107,Randee,<@Berry> See: <https://clojure.org/reference/reader#_symbols>
938,1507625343.000148,Berry,"<@Randee>: the phrasing of Symbols begin with a non-numeric character and can contain alphanumeric characters and *, +, !, -, _, ', and ? (other characters may be allowed eventually). threw me off"
937,1507625370.000038,Berry,"by special casing the ""_"", one could interpret ""non-numeric"" to mean ""non-numeric alpha-numeric"" char (or atleast that was my first interpretation)"
939,1507630326.000187,Tameka,is there an equivalent function to `flip` (in other programming languages) in clojure?; to flip arguments
939,1507630811.000321,Kareen,no
939,1507630815.000338,Eliana,"No, you'll have to roll your own. For example `(defn flip [f] (fn [&amp; args] (apply f (reverse args))))` and then `((flip reduce) (range 10) +)` <@Tameka>"
939,1507630832.000172,Tameka,"thank you; basically I have this function
```
(defn game-progress [score]
  (cond
    (zero? (mod score 4)) add-more-colors
    (zero? (mod score 5)) decrease-time-left
    :else identity))
```
and thought I would refactor that repetitive bit somehow and perhaps use `condp` instead"
939,1507630975.000137,Elsy,I vaguely remember a library that can read EDN data and write it out again while preserving all comments and formatting. Can someone remember the name?
939,1507631160.000295,Kareen,i believe rewrite-clj has utilities for that sort of things
940,1507632702.000026,Shira,And maybe <https://github.com/cgrand/sjacket> ?
940,1507633414.000161,Marla,<@Shira> no please :-)
940,1507633508.000089,Elsy,`rewrite-clj` was the thing I was looking for. thx.
940,1507633918.000097,Jodie,<@Marla> Do you mean <http://i0.kym-cdn.com/photos/images/newsfeed/000/865/302/3d5.gif>
940,1507634054.000069,Marla,Don’t know the reference but that’s clearly the spirit 
940,1507634247.00033,Jodie,"I didn't think words would quite express enough no in this case, I just pictured you screaming it. :joy:"
941,1507635417.000235,Misti,"Hey guys, new Clojurecademy course uploaded: `Code Katas` - <https://clojurecademy.com/courses/17592186068882/learn/overview>"
941,1507635449.000115,Brande,"hum, is there a brew formula available for the clj script?"
942,1507643359.000256,Inocencia,"I can’t figure out how to implement a custom pretty print method without mutating the default behavior. Is there an idiomatic way to use a custom pretty print method for one call to pprint?; ```
(def my-atom (atom nil))
(defn pprint-dispatch []
  (do
    (defmethod clojure.pprint/simple-dispatch clojure.lang.IDeref [o]
      (print o))
    clojure.pprint/simple-dispatch))
(clojure.pprint/write my-atom :dispatch (pprint-dispatch))
(clojure.pprint/pprint my-atom)
```"
942,1507643637.000466,Shamika,These examples might help <https://github.com/clojure/clojure/blob/0a6810ab3484b5be0afe4f505cd724eb5c974a09/src/clj/clojure/pprint/dispatch.clj#L471>
942,1507643664.000068,Inocencia,"```
clojure.pprint/pprint my-atom)
#&lt;Atom@58a7831e: nil&gt; ;; this is the default I'm trying to overwrite
=&gt; nil
(clojure.pprint/write my-atom :dispatch (pprint-dispatch))
#object[clojure.lang.Atom 0x58a7831e {:status :ready, :val nil}]=&gt; nil ;; great, this is the way I want IDerefs to print
(clojure.pprint/pprint my-atom)
#object[clojure.lang.Atom 0x58a7831e {:status :ready, :val nil}] ;; oops -- all subsequent calls to pprint will look this way?
=&gt; nil
```; <@Shamika> Thanks. I see these use code-dispatch instead of simple-dispatch, but I think I face the same issue. I  want to alter the way IDeref is pretty printed and leave everything else the same :confused:; ^ might also be a question about extending multimethods since that’s how clojure.pprint/simple-dispatch is implemented"
943,1507647027.000466,Jena,does anyone know how to disable clojure assertions in AOT compile namespaces?; `(set! *assert* false)` is throwing an exception in that case; and alter-var-root also fails
943,1507647156.000438,Kristen,I would like to have separate names for test and production uberjars compiled from the same project.clj file.  Is that possible?  Can you put an uberjar-name key is a profile and make uberjars with 2 different profiles?
944,1507648425.000129,Grisel,"hi, can I parse a date string with this pattern `Oct 09, 2017` using clj-time?"
944,1507648724.000881,Willow,in `clj-time.format` there's a function called `show-formatters` that will show you all of the built in parse strings and what they can do
944,1507648773.000518,Grisel,"i've looked at those, and there's no such format"
944,1507648992.000434,Kimberely,"<@Grisel> you’re going to want to use a custom formatter e.g. `(f/formatter ""MMM dd, YYYY"")` &lt; might work; see here: <http://www.joda.org/joda-time/key_format.html>; `(f/parse (f/formatter ""MMM dd, YYYY"") ""Oct 09, 2017"")`"
944,1507649154.000226,Willow,<https://github.com/clj-time/clj-time/blob/master/src/clj_time/format.clj#L41>
944,1507649158.000061,Fairy,"I have data from a lisp (common lisp maybe) and I would like to read it in clojure. Any advice? I found this... <https://github.com/clojure/clojure/blob/master/src/jvm/clojure/lang/LispReader.java> 
with examples of its use at the end of the file."
944,1507649196.00014,Grisel,"`Thus, ""MM"" might output ""03"" whereas ""MMM"" might output ""Mar"" (the short form of March) ....`; didn't read until this point; thanks, a lot <@Kimberely>. 3 MMMs work; :slightly_smiling_face:"
944,1507649345.00018,Kimberely,"are you trying to read common lisp code into clojure as data?; LispReader is a clojure reader, similar to tools.reader <https://github.com/clojure/tools.reader#differences-from-lispreaderjava>; it doesn’t read common lisp"
945,1507651805.000276,Giovanna,What does the data look like?
946,1507654835.000293,Aldo,"I often find myself looking for ""something like pipeline-async, but that doesn't care about ordering, but does still deal with signaling 'all of x are finished'"". am I silly? Does that already exist?; like, I'm writing this entirely too much
```
            (async/pipeline-async
              500 ;; some number bigger than our number of tasks
              tasks-finished-for-account
```"
946,1507655261.000187,Ava,"You can do that with climate corp's claypoole library; from the readme:
```
(require '[com.climate.claypoole :as cp])
;; We'll use the with-shutdown! form to guarantee that pools are cleaned up.
(cp/with-shutdown! [net-pool (cp/threadpool 100)
                    cpu-pool (cp/threadpool (cp/ncpus))]
  ;; Unordered pmap doesn't return output in the same order as the input(!),
  ;; but that means we can start using service2 as soon as possible.
  (def service1-resps (cp/upmap net-pool service1-request myinputs))
  (def service2-resps (cp/upmap net-pool service2-request service1-resps))
  (def results (cp/upmap cpu-pool handle-response service2-resps))
  ;; ...eventually...
  ;; Make sure sure the computation is complete before we shutdown the pools.
  (doall results))```"
946,1507655625.00011,Aldo,certainly seems about it. trying to avoid introducing new libs if possible though
947,1507660951.000132,Weston,You can build this on top of async/merge if your ops all return chans/promise-chans
946,1507661976.000126,Sandy,"<@Aldo> nah, it doesn't exist, mostly because it's fairly simple to write.; <@Aldo> basic gist <https://gist.github.com/halgari/a874b5e8e281c3e4afe51c0249b31811>"
946,1507662251.000113,Aldo,"yup, that's what I ended up writing (ish). makes sense, ta; I think you miss that you need to create a channel for each thread though. otherwise you may close! out-c before one of the go-loops has finished its work; yeah I generally build it with async/merge; (starts reading promise-chan docs)"
948,1507663528.000574,Darcel,is it possible to extend hashmaps and arraymaps without repeating the same code  ?
946,1507663587.000159,Aldo,potemkin; <https://github.com/ztellman/potemkin>
946,1507663721.00068,Darcel,hmmm so it's harder than i expected.
946,1507663809.00046,Aldo,"yes. in practice though I've found it's very rarely necessary; what did you mean by ""extend"" though btw? because you could for instance extend them with a protocol with very little code"
946,1507663930.0003,Darcel,I have a protocol and I want to extends them with that protocol. but without repeating my self; I guess the simpler solution would be just to repeat myself.
949,1507665589.000002,Margaret,"don’t extend PersistentHashMap and PersistentArrayMap - those are implementation details, extend java.util.Map or clojure.lang.IPersistentMap, which cover both hash-map and array-map"
949,1507665606.000013,Jeanmarie,I miss clojure; too bad there are not many opportunities in my area…; I never completed learning it fully like I wanted to but it taught me a lot; Happy to see that the community is still thriving :slightly_smiling_face:
949,1507665867.000432,Jodie,<@Jeanmarie> there's always remote work :slightly_smiling_face: Keep an eye open
950,1507667146.000125,Darcel,<@Margaret> good point. thanks
951,1507667149.000191,Jolene,"Hi, I have a quick collections question. I’m doing some stuff with datomic and of course you’re kind of on the hook for your own paging.   I’m trying to implement cursor based paging such that I can give a key value then return that item, plus N items ‘in front’ or ‘behind of it’  So for the following

```
({:id ""A"" :val..} {:id ""B"" :val..} {:id ""C"" :val..}{:id ""D"" :val..} {:id ""E"" :val..})
``` 

If I  have say “C” and ‘2 behind’, I get A,B,C.  Or “C” and ‘one after’ would give me C and D.  and of course, it’d be nice if it was reasonably performant"
949,1507667246.000684,Jeanmarie,<@Jodie> right. I will
951,1507667408.000503,Darcel,<@Margaret> hang on . java.util.Map or clojure.lang.IPersistentMap ? not both ?
951,1507667446.000391,Margaret,there’s no need to extend both - it depends on whether you also want to cover vanilla java hashmaps at the same time
951,1507667548.000192,Darcel,I just want to target clojure hashmaps and arraymaps
951,1507667562.000078,Margaret,then IPersistentMap suffices
951,1507667579.000187,Darcel,"cool, but i'm a little bit confused in here; then what's the point of using a lib like potemkin; i mean for this purpose ofcourse"
951,1507667630.000571,Margaret,"it is for making a new type that acts like a hash-map; if that’s what you are trying to do, then I totally misunderstood you; also, unless you want to change the hash-map behaviors, you can just use defrecord instead of potemkin"
951,1507667688.000012,Darcel,ow; no no I don't want to create a new type; thanks man
952,1507669284.00013,Jeanmarie,<@Jodie> if you know of anything let me know :wink:
952,1507669584.000137,Jodie,/r/clojure had a post right now
952,1507669989.000344,Mia,<@Jeanmarie> check out <#C06B40HMY|remote-jobs>
953,1507672236.000001,Berry,"1. I have a function that is much easier to write recursively than as an iteration / loop. (It has a tree like branching structure.)

2. Realistically, how many stack frames does the jvm/clojure guarantee me?"
953,1507672317.00002,Margaret,<@Berry> it’s a config on java startup - you should be able to find the default pretty quickly
953,1507672363.000099,Berry,"<https://stackoverflow.com/questions/4734108/what-is-the-maximum-depth-of-the-java-call-stack> &lt;-- hmm, default is 7k-8k calls ?"
954,1507686045.0001,Andra,"What’s the easiest way to try out the `clj` script from `brew-install`? <https://github.com/clojure/brew-install>

I `git clone`ed the repo and am not sure where to go from there…"
955,1507689304.000173,Sandy,It’s in brew; So brew install clojure
955,1507689487.000036,Dawne,Are you just trying to get a CLJ environment setup?
956,1507694651.000111,Lovie,"<@Jeanmarie> being able to partipate in this clojurian channel to witness a vibrant, innovative, cooperative, clojure community, is itself a daily blessing :+1: "
954,1507697743.000029,Andra,No. I’m trying to play around w/ <@Sonny>’s work in `brew-install`.
957,1507700977.000244,Bibi,At runtime I believe the recommended way is to make calls to 'conform' or 'valid?'
957,1507709605.000018,Cora,You can use `s/fdef` to wrap your function up with argument and return value checks.
955,1507709624.0002,Cora,"But these aren't run automatically, you have to call `instrement` which is in the spec.test namespace I think?; There may be a nice way to enable the `s/fdef` checks for a single function. <https://clojuredocs.org/clojure.spec/fdef>; (and you can call `s/fdef` before you define your function which reads quite nicely); <@Elwanda> You may want to try <https://github.com/jeaye/orchestra> too, it looks pretty great :slightly_smiling_face:"
955,1507710316.000267,Elwanda,"<@Cora> Thanks! I’ll look into that.; <@Cora> What I was hoping to use spec for, even in production, was to avoid alot of validation of incoming data and just define specs for incoming and outgoing values. But the more I read up on it it seems it is not recommended to have it turned on in production."
955,1507710696.000448,Cora,"It's never so much on or off. How I see it: Use fdef all over the place and instrument during dev / tests. If you want to use it a bit like schema and check things at the network boundaries, then you definitely can. Just check things with `s/valid?`. You can then use `s/explain` and some of your own code to return helpful error messages.; <@Elwanda> During development you can call `instrument` after all of your functions are defined to get checks throughout your system. But I'd recommend only manual checks at the edges in production."
955,1507710900.000205,Elwanda,"Okay. That makes sense. Thanks for taking your time and explaining. What you are saying is exactly what I wanted to do, it just didn’t occur to me that I should create custom validation code with valid?."
955,1507710953.000153,Cora,"Route all of your HTTP in/out through some central namespace, then perform your checks in there. Just a suggestion, it's all very new, so you might find something that works well for you after playing with it :slightly_smiling_face:"
958,1507713225.000089,Tameka,"oh clojure, why are you so awesome :smile:"
959,1507716094.000306,Sherrie,"If there are any danish clojurians in here who are looking for a job, please send me a message :slightly_smiling_face:"
959,1507717354.000135,Ha,<@Sherrie>... and is working remotely an option?
959,1507717608.000296,Sherrie,<@Ha> For the right person it probably is yes
960,1507718582.000351,Anika,"I have two maps `arg` and `val` and two different keys `:id` in arg and `fooid` in val that need to be assigned to the var `id`. Either arg or val can  be empty and hence I have used the below code that works but is there a syntax sugar where I can merge the two maps and then destructure them in such a way if one is nil then the other is assigned

```
(defn query
  [arg val]
  (let [{id :id, track :track} arg
        {id :fooid, :or {id id}} val]
    id))
```

```
lacinia-tut.run=&gt; (query {} {:fooid 1}) # :id is nil and hence :fooid is used 
1
lacinia-tut.run=&gt; (query {:id 1} {}) # :fooid is nil and hence :id is used
1
```

Is there a syntactic sugar to do above in one destructuring call ?"
960,1507719199.000414,Evan,"i would do
```(let [id (or (:id arg) (:fooid val))
      {:keys [track]} arg]
  ...)```"
961,1507720410.000276,Grisel,"hi, i rewrite `new FirebaseOptions.Builder()` to `(new (.-Builder FirebaseOptions))`, but get the error `Unable to resolve classname: (.-Builder FirebaseOptions)`. Tried `FirebaseOptions/Builder`, as well as `FirebaseOptions$Builder` suggested in <#C03S1L9DN|clojurescript> channel. What am I doing wrong here?"
960,1507720481.000072,Anika,<@Evan> It's better compared to using :or . Thanks
961,1507720758.000075,Sonny,"It's in the central tap - just ""brew install clojure"" for 1.8.0 or ""brew install --devel clojure"" for 1.9.0-beta1; <https://clojure.org/guides/deps_and_cli>"
961,1507721843.000133,Grisel,I needed to import `(:import com.google.firebase.FirebaseOptions$Builder)` additionally
962,1507726355.000312,Rafael,"Hello, I'm trying to run this example of annotation interop from ""Clojure Programming"".  But this won't compile for me.  It seems that `gen-class` doesn't create the class, so I get `ClassNotFoundException`.
<https://github.com/clojurebook/ClojureProgramming/blob/master/ch09-annotations/src/main/clojure/com/clojurebook/annotations/junit.clj>
Has something changed since the example was created?; oh, ignore.; I needed to have `:aot :all` in `project.clj`.; Or at least for that namespace..."
963,1507728554.00002,Patti,"I just made a video on how to use Clojure to interact with the StarCraft II AI API
<https://www.youtube.com/watch?v=hcYneRzdWV0>"
963,1507729418.000286,Inocencia,I’m still having trouble adding a custom pretty print writer that has all the features of pprint just for IDeref I want it to print #[object …] instead of #&lt;Atom …&gt;. I’m running code through pprint so checking instances on the fly and calling “print” instead of pprint isn’t an option. This may sound superfluous but it’s for a dev tool and I’ve been stuck on it for a couple days :slightly_smiling_face:
963,1507730117.000273,Jodie,"<@Inocencia> is pprint a multi-method, and you can just override the method for IDeref?; <https://github.com/clojure/clojure/blob/0a6810ab3484b5be0afe4f505cd724eb5c974a09/src/clj/clojure/pprint/dispatch.clj#L147>"
964,1507738857.000295,Joeann,Hi.  Any Specter experts here? I'm hitting a few brick walls and need some assistance.
964,1507738958.000736,Owen,<@Joeann> what's your issue?
964,1507739180.000155,Joeann,"Hi <@Owen> - very kind of you to help! I have a couple of minor problems.  Firstly I'm trying to add a new element to the end of structure but I'm just getting the data added as a value.; e.g. (s/setval [s/ALL :fields :summary s/END] [:zzzz] subResponse); results in -----&gt;  `:fields {:summary Setting up the code for blah blah [:zzzz]`; When I'd like it to be ----&gt; :fields {:summary Setting up the code for ADA &amp; AOA on Local machine, :zzzz etc."
964,1507739272.000308,Owen,"what's the input structure?; use backticks in slack to get it to render code clearly, e.g. `(setval ALL :a data)`"
964,1507739313.000718,Joeann,It's JSON parsed with Cheshire
964,1507739435.000446,Owen,can you paste an example?; I can't tell the type of the value for :summary
964,1507739729.000167,Joeann,Ok here's a sample: <https://pastebin.com/MgtqLCXg>; I want to add another element next to :summary
964,1507739821.000017,Owen,"ah I see, it's a string; when you transform `END` on a string, you need to provide a string; by providing a vector, it just calls `str` on that and appends it to the target; you can do `"", :zzzz""` to get the result you want"
964,1507739950.00018,Joeann,Ah ok.  And that will create a key :zzzz that I can then select later?
964,1507739980.000295,Owen,what do you mean? it just gets added to that string at that subvalue
964,1507740026.000131,Joeann,"I really just want to add a new element after :summary, not append to the existing value.; A new key and val insert into the structure after :summary; *inserted"
964,1507740058.000186,Owen,"ok; so a new key/value in the ""fields"" map?; there's no concept of ""after"" for :summary as its a key in an unordered map"
964,1507740086.000129,Joeann,Yep
964,1507740121.000193,Owen,`(setval [ALL :fields :zzzz] :some-val data)`
964,1507740157.000275,Joeann,"Ok, that makes sense!"
964,1507740162.00007,Owen,"actually in this case it would be `(setval [ALL (keypath ""fields"") :zzzz] :some-val data)` since the keys in your example are strings, not keywords; feel free to drop by the <#C0FVDQLQ5|specter> channel if you have more questions"
964,1507740323.000006,Joeann,Thank you.  I'll switch over now.  I have one more question
965,1507750027.000558,Fairy,"I am considering writing dynamic versions of `import` and `require` based on <https://github.com/clojure/clojure/blob/master/src/jvm/clojure/lang/Reflector.java> .
The idea is to be able to pass the name of the class/method in variables; something like `(import-dyn (class-name :as foo))` and static methods as `(foo / method-name 5 4 3)` or instance methods as `(let [x (foo . 5)] (x . method-name 4 3))` where class-name and method-name are strings [require-dyn would be similar]. Has anyone already done something like this?"
966,1507751828.000285,Margaret,are you sure you need to do anything with require? require is already a function that can take a symbol
966,1507753045.000058,Fairy,"<@Margaret> you are correct, the following works fine: `(let [ans (symbol ""clojure.core"")] (require [ans :as 'foo])  (foo/+ 5 6))`"
966,1507753933.000135,Margaret,"the trick is the part where you call it - since if you do the require inside a function, the compiler will reject a form because the ns is not loaded at the time it is compiled, you can use resolve to work around this though, but it’s clumsy; the same issue comes up with import (or just using a dynamically loaded class and method not known at compile time in general) - you have to use clumsier constructs because the most convenient interop forms need the symbols to be known during compilation; really, the method being dynamic is harder than the class being dynamic (clojure already does implicit type reflection when it is needed for method calls)"
966,1507755464.000264,Fairy,"<@Margaret> I was thinking a macro. Exemplar  `(new-dyn [""Lexer'] ""lexer"" nil)` producing something like `(let [class-loader (DynamicClassLoader.)  lexer-class ^Lexer (.loadClass class-loader ""lexer"")] (Reflector/invokeConstructor lexer-class (into-array CharStream [nil]))`"
966,1507755601.000167,Margaret,there’s a good helper library for using clojure.reflect but I forget the name - anyway you might like clojure.reflect’s features beyond what Reflector has; <@Fairy> this is the library I was thinking of <https://github.com/timmc/handy/blob/master/src/org/timmc/handy/reflect.clj>
966,1507756267.000204,Andra,"Yeah, found it thanks for <@Georgann>. Might be useful to link to it in the `brew-install` README: <https://github.com/clojure/brew-install/blob/master/README.md>"
966,1507756432.000141,Fairy,I had read the documentation for `clojure.reflect`. It exposes information about the properties of a class but it is not clear how to use it to invoke methods short of invoking `eval`. It was this <https://groups.google.com/d/msg/clojure/YJNRnGXLr2I/jfRCjJOLVHMJ> thread that lead me to clojure.lang.Reflector in the first place.
966,1507760209.000241,Margaret,"Oh, interesting"
967,1507761579.00028,Berry,"is there a nicer way to write ((fn [x y z] [x z]) ...) // I feel like there should be a nicer way o say ""drop middle elem"""
967,1507761693.00019,Shamika,"```user=&gt; ((juxt first last) [1 2 3])
[1 3]
user=&gt; ((juxt first last) [1 2 3 4])
[1 4]```; not sure if that’s any nicer :laughing:"
967,1507761744.000098,Berry,I guess I'm after a builtin named take101 where the 101 binary encodes which elems I want :slightly_smiling_face:
967,1507761749.000104,Margaret,"also, it’s too bad last is O(n), while peek is O(1) but only gets the last item if the arg is a vector"
967,1507761919.000292,Willow,"i think `(fn [[a _ b]] [a b])` is the nicest so far; ie, your original version"
967,1507762291.000277,Margaret,"```=&gt; (reduce (fn [v [n el]] (if (zero? (bit-and 5 (bit-shift-left 1 n))) v (conj v el))) [] (map-indexed vector [:a :b :c :d :e]))
[:a :c]```; that uses 5 as a bit mask to build its collection; should probably use (take 64 coll) since that’s your max with a reasonable bit mask"
967,1507762423.000259,Berry,<@Margaret>: lol you win
967,1507762513.000003,Margaret,"(I guess you could use a byte-array as a bit mask for larger inputs, that makes the logic a bit messier)"
967,1507762672.000284,Berry,"(defn mt [mask lst]
  (keep (fn [[x y]] (if (= x 1) y)) (map vector mask lst)))

(mt [1 0 1] [:a :stuck_out_tongue: :c]); mt stands for ""masked take"""
967,1507762861.000395,Margaret,"```user=&gt; (mapcat #(when-not (zero? %) [%2]) [1 0 1] [:a :b :c])
(:a :c)```"
967,1507762865.000186,Berry,"in sider, is there a cmd for ""eval last sexp AND INSERT result as text in current buffer"" ?; that is neat, usikng [] vs [%2] to encode selection of element"
967,1507762979.000042,Margaret,"yeah, mapcat is more general than typically assumed - it’s really “zero or more outputs for each input item, in order”"
968,1507768109.000067,Sonny,done!
967,1507769488.000096,Willow,<@Berry> there's `cider-eval-print-last-sexp` which should do what you were asking
967,1507769602.000023,Berry,<@Willow>: precisely what I wanted; thanks!
969,1507787987.000052,Marilee,"Hi, im currently using cljs for react-native app and having some issue in the interop of HighOrderComponent. The library i want to use is : <https://github.com/okgrow/react-native-joyride>
This the the js code i wanna interop:

```import { joyride } from 'react-native-joyride';

class HomeScreen extends Component { /* ... */ }

export default joyride()(HomeScreen);```


I have a function that has the homescreen page component,im facing difficulty in export statement. 
Any help would be appreciated :smiley:"
967,1507797653.00024,Berry,are there any benchmarks of mow much more expensive exceptions are than returning nil ?
967,1507798024.000241,Noella,<@Berry> <https://shipilev.net/blog/2014/exceptional-performance/>
967,1507798088.000381,Evan,there's no equivalent to `export default` in cljs; i suppose you could do `(def default ...)`
969,1507800659.000095,Marilee,<@Evan> i have used `(def ^:export filename)` but yes i cannot find a way to export it as default
969,1507800723.000035,Evan,`^:export` just means it will retain its full path in the final js (e.g `some.namespace.foo()`); it is not possible to export something as default in cljs
969,1507801288.000348,Marilee,"<@Evan> okay cause i seem to be getting the following issue:
```
[Invariant Violation: Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: undefined. You likely forgot to export your component from the file it's defined in.]```

I googled this and it normally happens with incorrect import/export. Dont know what to do :disappointed:; <@Evan> This is the only library i found that gives me a tourguide/ walkthough for new users, do you know any similar library that does that?"
969,1507801864.000229,Evan,"looking at that readme, there's nothing that says you must export as default; so the error is in the code that's importing your component namespace"
969,1507802231.000239,Marilee,"<@Evan> this is my updated code for which i am getting the above error:
```(def joy (.joyride JoyRide))
(def JoyrideStep  (r/adapt-react-class (.-JoyrideStep JoyRide)))
(def JoyrideText (r/adapt-react-class (.joyridable JoyRide (r/reactify-component (.-Text ReactNative)))) )

(defn ^:export joyride-page []
  [view
   [JoyrideStep (clj-&gt;js {:text  ""Hey! This is the first step of the tour!""
                          :order 1
                          :name ""openApp""})
    [JoyrideText ""Welcome to the demo of joyride library""]])

(defn m-joyride-page []
  (let [m (-&gt; joyride-page
              r/reactify-component
              joy
              r/adapt-react-class)]
    [m]))```

The flow is going till joyride-page but it seems JoyRideStep is causing the error."
969,1507802473.000105,Evan,"if `view` is defined, and `JoyRideStep` is undefined, then that means that `(def JoyrideStep  (r/adapt-react-class (.-JoyrideStep JoyRide)))` is not doing what you expect; (i am not familiar with whatever that cljs React wrapper is)"
969,1507802790.000119,Marilee,<@Evan> `(def JoyrideStep  (r/adapt-react-class (.-JoyrideStep JoyRide))` is taking joyride step and converting into react component wrapper; <@Evan> i have defined view in similar way `(def view (r/adapt-react-class (.-View ReactNative)))` and it seems to be working
969,1507802829.00019,Evan,"i figured, but if it's undefined (as per the error you got), then there must be something wrong with it, right?"
969,1507802871.000204,Marilee,"<@Evan> I agree, im stuck on that because it should work as it is supposed to but it isnt, i thought it a js&lt;-&gt;clj interop issue but i doubt that too"
969,1507802970.000181,Evan,how are you requiring `JoyRide`? it might be `(.-JoyrideStep js/JoyRide)` or `JoyRide/JoyrideStep` instead
969,1507803104.000111,Marilee,"This is how im requiring JoyRide `(def JoyRide (js/require ""react-native-joyride""))`; `JoyRide/JoyrideStep` I dont think so this works in cljs"
969,1507803217.000196,Evan,"hmm, in that case i think it should work, perhaps you need to `(.log js/console JoyRide)` and validate your assumptions"
969,1507803241.00041,Marilee,<@Evan> i tried replacing it to `(def JoyrideStep  (r/adapt-react-class JoyRide/JoyrideStep))` but i get this issue ```[TypeError: undefined is not an object (evaluating 'expo_demo.core.JoyRide.joyride')]```
969,1507803281.000144,Evan,that must mean `JoyRide` is undefined?
969,1507803306.000109,Marilee,I guess `joyride` is undefined
969,1507803467.000004,Evan,so the `js/require` is not working i guess
969,1507803534.000263,Marilee,<@Evan> sorry you were right it was a js/require silly issue i made . This is the error i get `[ReferenceError: Can't find variable: JoyRide]`
969,1507803580.000049,Evan,right
969,1507803602.00026,Marilee,"using log on joyride gives me this ```Object {
  ""JoyrideStep"": [Function JoyrideStep],
  ""joyridable"": [Function joyridable],
  ""joyride"": [Function joyride],
}```"
969,1507803644.000445,Evan,"then `.-JoyrideStep` on that should work, right?"
969,1507803688.000432,Marilee,"<@Evan> im getting the following Object only after changing it to `.-JoyrideStep`; log on JoyrideStep gives me ```
{
  ""class"": null,
  ""id"": null,
  ""name"": [Function JoyrideStep],
}```; It seems im getting null on JoyrideStep; and log on JoyrideText gives ```{
  ""class"": null,
  ""id"": null,
  ""name"": [Function anonymous],
}```"
969,1507803890.000185,Evan,then i suppose you might need to do `(def JoyrideStep (.-name (.-JoyrideStep Joyride))`; and the same for JoyrideText
969,1507803937.000305,Marilee,i dont have to convert it by `(r/adapt-react-class)`?
969,1507803957.000211,Evan,"i don't know about that, sorry; looks like a Reagent thing - you might try <#C0620C0C8|reagent>"
969,1507804202.00036,Marilee,"<@Evan> using ```(def JoyrideStep  (.-name (.-JoyrideStep JoyRide)))
(def JoyrideText (.-name (.joyridable JoyRide (r/reactify-component (.-Text ReactNative)))))
``` gives the following issue : ```Error rendering component (in env.main.reloader &gt; expo_demo.core.app_root &gt; m-joyride-page &gt;  &gt; expo_demo.core.joyride_page)
15:58:40
[Error: Assert failed: Invalid tag: '' (in env.main.reloader &gt; expo_demo.core.app_root &gt; m-joyride-page &gt;  &gt; expo_demo.core.joyride_page)
tag]```; So i need to use `(r/adapt-react-class)`"
969,1507804233.000024,Evan,"ok, right"
969,1507804369.000099,Marilee,"using ```(def JoyrideStep  (r/adapt-react-class (.-name (.-JoyrideStep JoyRide))))
(def JoyrideText  (r/adapt-react-class (.-name (.joyridable JoyRide (r/reactify-component (.-Text ReactNative))))))
``` gives me the following error : ```[Invariant Violation: Expected a component class, got [object Object].]``` and log of JoyrideStep and JoyrideText of the same is ```{
  ""class"": null,
  ""id"": null,
  ""name"": ""JoyrideStep"",
}  {
  ""class"": null,
  ""id"": null,
  ""name"": """",
}```"
969,1507804409.000117,Evan,"guess that's wrong too then, sorry :disappointed:"
969,1507804560.000325,Marilee,<@Evan> np btw could you explain me why (.-name) had to be used? i dont know js actually
969,1507804607.000183,Evan,"i just figured that you needed the component function, which seemed to be under the `name` property of that object. was a complete guess :stuck_out_tongue:"
969,1507804850.000327,Marilee,<@Evan> oh so when are the cases in which we need to use (.-name). I have used many libraries but never need to use this
969,1507804917.00005,Evan,"that object you posted had the property `name`, which had a function value. the others were both `null`, so i guessed that you needed the function. to get the `name` property of a js object you use the `.-name` interop syntax"
969,1507805240.000286,Marilee,"<@Evan> i understood for JoyrideStep but for JoyrideText has name earlier as [anonymous function] so how to access this?; and after using (.-name) on JoyrideText the name is """""
970,1507805334.000163,Hien,Is it possible to mark messages as spam in slack? can't seem to find it
969,1507805364.000216,Evan,"the `name` property of an anonymous function is `""""`; so that's what's happening there; JoyrideText must already be a function"
969,1507805425.000217,Mallie,"I do not believe so. I mean, Slack is designed as an invite-only system isn't it, although there are some automated tools people have written around that to allow anyone to sign up; But I suspect the expectation is if you get spammed you just uninvite/ban the user from your Slack workspace"
969,1507805484.000156,Marilee,<@Evan> `JoyrideText must already be a function` means?
969,1507805538.000194,Evan,"if it was the object it would `.-name` would return a function, not a string; `(.-name some-anonymous-fn)` returns `""""`"
969,1507805590.000157,Marilee,so you mean to say JoyrideText is a function and not object?
969,1507805603.000096,Evan,yes
969,1507805796.000247,Marilee,<@Evan> so i cannot use (.-name) in JoyrideText
969,1507805835.000089,Evan,.-name didn't work anyway right
969,1507805907.000006,Marilee,"true but it did change my error from ```[Invariant Violation: Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: undefined. You likely forgot to export your component from the file it's defined in.]``` to ```[Invariant Violation: Expected a component class, got [object Object].]```; so i think that was the correct direction"
969,1507805963.000278,Evan,perhaps
969,1507806219.00009,Marilee,<@Evan> thanks alot for your help
969,1507806259.000213,Evan,no worries! pity we couldn't figure it out :slightly_smiling_face:
969,1507806539.000317,Marilee,<@Evan> i just found out there is a dedicated channel <#C0E1SN0NM|cljsrn>  for react native using cljs ill try posting it there
969,1507806551.000337,Evan,good luck!
971,1507807670.000208,Hien,that makes sense
971,1507814948.000331,Jodie,"<@Hien> the recent slack @everyone disabling was evidence of how slack views ""open"" systems"
972,1507815569.000218,Georgann,Never seen it so quiet in here. I guess everyone is having their minds :boom: at the conj.
973,1507818957.000345,Ava,is this conj this week? I thought it's normally in november. edit: yes it is this week.
973,1507819519.000399,Weston,<https://twitter.com/hashtag/clojure_conj?f=tweets&amp;vertical=default&amp;src=hash>
974,1507824001.000551,Weston,that was fast: <https://www.youtube.com/watch?v=2V1FtfBDsLU> (conj rh keynote)
974,1507824456.00051,Lovie,thank you!  <@Weston> I really missed his talks :slightly_smiling_face:
975,1507831483.000044,Georgianne,Is there a trick for (in constant time) turning a LazySeq that’s already fully realized into an IPersistentList? I’m assuming there’s nothing smarter than reify.
976,1507833051.00043,Margaret,why are you targeting that specific interface?
977,1507840424.00012,Ava,"unsure who runs ClojureTV on Youtube, but this talk is mislabled: <https://www.youtube.com/watch?v=B_ubbbm9cRg>. The title claims it is ""Homoiconicity : It Is What It Is"" by Stuart Sierra but the video is ""Learning Clojure and Clojurescript by playing a card game"" by Gijs Stuurman"
978,1507841449.000306,Laurette,“It’s hard enough to drive a car. If you’ve got to understand monads too …“ :smile:
977,1507842972.000419,Daniell,"That’s been fixed. BTW, Stuart’s talk had a technical issue with audio, so he will re-do the audio and it’ll get posted in a day or so. "
976,1507892772.00002,Anika,"How do I sort by the list of lists to make sure they are in sorted order ? I have `'((1) (2) (3) (2 1) (1 2) (3 1) (1 3) (3 2) (2 3) (3 2 1) (2 3 1))` and I want it to be `((1) (2) (3) (1 2) (1 3) (2 1) (2 3) (3 1) (3 2) (2 3 1) (3 2 1))` . Is there an idiomatic way to do this ? `sort` doesn't help. In `sort-by` how can I compare two lists. `(juxt first second)` doesn't help. It can have any number of elements for every sub-list. Expecting something like Python's sorted `sorted([[1], [2, 1], [1, 2]]) # [[1], [1, 2], [2, 1]]`"
976,1507892981.00015,Randee,"<@Anika> Vectorize your inner lists, then the sort be like you want"
976,1507893139.000191,Anika,<@Randee> Thanks a lot
978,1507894193.000085,Lovie,"neat, repl-driven clojure slack :slightly_smiling_face:"
979,1507904299.00046,Elvin,"hey, does anyone know where clojure.contrib.duck-streams went?"
979,1507904610.00002,Daniell,<@Elvin> I don't see it listed here <https://dev.clojure.org/display/community/Where+Did+Clojure.Contrib+Go> so maybe it disappeared from Contrib before 1.3 appeared?
979,1507904639.000258,Elvin,hrm.  must be something that it got folded into or something though right?
979,1507904688.000025,Ava,"<https://github.com/clojure/clojure-contrib/blob/1.2.x/src/main/clojure/clojure/contrib/duck_streams.clj>; `July 23, 2010: DEPRECATED in 1.2. Use <http://clojure.java.io|clojure.java.io> instead.`"
979,1507904744.000754,Elvin,"oh, how about that; I only actually need slurp* from there; so that's perfect; just assembling this really neat pattern from an article back in 2009; string interpolation/super templating; <https://cemerick.com/2009/12/04/string-interpolation-in-clojure/>; really nice for dev tooling/scripting against a ring server running in a docker environment.  just set up all my things using some constants i defined up at the top, etc; like the new `f'{variable} strings'` in python"
979,1507905279.000033,Daniell,"What does `duck-streams/slurp*` give you that the built-in `slurp` does not?; (it says it's ""like slurp but opens f with reader"" -- but `slurp` also seems to call `reader` on `f`...)"
979,1507905575.000078,Elvin,"it actually seems to define its own reader, which is possibly obsolete now.  I'm going to be honest, I just kind of wanted to make it work blackbox without inspecting the internals.  And I'm getting what I deserve :joy:"
979,1507905817.000054,Daniell,It's telling that duck-streams was deprecated even before the break-up of monolithic contrib that came with Clojure 1.3 :slightly_smiling_face:
979,1507905827.000175,Elvin,yeah for real
979,1507906243.000159,Daniell,"Looks like you can just use the built-in `slurp` (based on limited playing in the REPL).; ```boot.user=&gt; ((juxt read slurp) (-&gt; ""Hello, World!"" java.io.StringReader. java.io.PushbackReader.))
[Hello "", World!""]``` (that's basically `silent-read` without the `try`/`catch`)"
979,1507909655.000595,Lovie,<@Daniell> could you elaborate `silent-read` without the `try`/`catch`?
979,1507909881.000171,Daniell,"<@Lovie> Based on the code in the blog that <@Elvin> linked to. The blog uses old, outdated libraries but has a function that takes a string and tries to return a pair of the first readable (Clojure) form from the string and the rest of the (unread) string.; The full function (using built-in `slurp`) would be ```(defn silent-read
  [s]
  (try
    ((juxt read slurp) (-&gt; s java.io.StringReader. java.io.PushbackReader.))
    (catch Exception _)))``` So it returns `nil` if it can't read a form from the string.; <@Elvin> Did you get that interpolation example working?"
979,1507910027.000663,Elvin,"Oh, yeah I did!  It's real neat."
979,1507910117.000014,Daniell,"And did you also see that the functionality is part of <https://github.com/clojure/core.incubator/blob/master/src/main/clojure/clojure/core/strint.clj> ?; So you can just depend on `[org.clojure/core.incubator ""0.1.4""]` and then require `[clojure.core.strint :refer [&lt;&lt;]]` and use that?"
979,1507910245.000065,Elvin,"whaat, oh man; I did not see that!; that's great!  thanks!"
979,1507910330.000297,Lovie,"thank you <@Daniell>!  `strint.clj`: _""originally proposed/published at <http://cemerick.com/2009%22_|http://cemerick.com/2009""_>, you just got to love Hickey :slightly_smiling_face:"
979,1507910379.000028,Daniell,"```sean@sean-xps:~$ boot -d org.clojure/core.incubator repl
nREPL server started on port 64540 on host 127.0.0.1 - <nrepl://127.0.0.1:64540>
...
boot.user=&gt; (require '[clojure.core.strint :refer [&lt;&lt;]])
nil
boot.user=&gt; (&lt;&lt; ""It is ~(java.util.Date.) right now!"")
""It is Fri Oct 13 15:58:41 GMT 2017 right now!""
boot.user=&gt;``` (edited to remove the `{` `}` since they aren't needed)"
979,1507910468.000086,Lovie,"man, it just gets better and better :slightly_smiling_face:"
979,1507910516.000017,Elvin,"man, this is so slick; feels like cheating"
979,1507910528.000064,Daniell,(I love that Boot lets me just pull in an arbitrary library without needing to create a project etc)
979,1507910651.000148,Lovie,thanks for the great tips <@Daniell>!
979,1507910965.00026,Daniell,_Now I must go grab lunch before the sessions start back up in 50 minutes!_
980,1507911139.000139,Lovie,Conj?
979,1507911203.00026,Lovie,no wonder clojurians channels been quite these couple of days... :slightly_smiling_face:
981,1507911765.000617,Detra,Hey is there a map with a stable key order?
981,1507911800.000081,Margaret,sorted-map and sorted-map-by - there’s also one from a github project that preserves insertion order
981,1507911812.000307,Detra,The insertion order is what I'm looking for.
981,1507911813.000254,Margaret,you can also use the various java mutable hash-maps of course
981,1507911836.00018,Detra,Do you remember anything about the github project?
981,1507911847.000268,Margaret,"<@Detra> I have a lot of respect for the author, but haven’t tried this code <https://github.com/amalloy/ordered>"
981,1507911910.00019,Detra,"<@Margaret> Wow, thanks!"
981,1507913328.000055,Lester,<@Sommer> Watching your talk about Guildsman right now. Super interesting but pleeease start thinking about writing readmes! :smile:
982,1507913421.000099,Sommer,<@Lester> ha! Thanks. I promise there'll be docs and examples once this is ready for the public. Missing README is not remotely the biggest problem 
982,1507913477.000155,Lester,<@Sommer> some would argue that having a readme could attract more hands or heads to help you out :slightly_smiling_face:
982,1507913556.000416,Sommer,"@nooga Those hands/heads will be critical to success. But, I don't think anyone can help yet. Ex. there's no tests; I promise there will be a readme :relaxed:"
982,1507913623.000023,Lester,google could help by fixing their C api :wink:
982,1507913657.000204,Sommer,"<@Lester> that's very true. Actually, people can help, just not via the guildsman code yet; Maybe the readme (for now) could just explain what contributions to focus on in TF; I like that"
982,1507913853.000105,Lester,yeah!
982,1507913881.000364,Sommer,Ok. I'll do that soon; Thanks for reaching out
982,1507914216.000199,Lester,my pleasure :slightly_smiling_face:
983,1507918316.000312,Manie,Does anyone know of a forum for asking Cider specific questions? Or perhaps this is the right place..?
983,1507918438.000198,Jodie,<#C0617A8PQ|cider> <@Manie> 
983,1507918456.000408,Manie,oh there’s a dedicated IRC channel? that’s lovely
983,1507919349.000202,Jodie,<@Manie> slack channel :slightly_smiling_face:
983,1507919456.000251,Manie,<@Jodie> thank you for clarifying … the IRC channel had 3 members haha
984,1507925469.000135,Berry,"does clojure have a builtin whee I provide:

state
f :: state -&gt; state
still-run :: state -&gt; bool

and it iteratively call 'f' on 'state' until (still-run state) becomes false ?"
984,1507925526.000326,Margaret,would `(take-while still-run (iterate f state))` count?
984,1507925677.000225,Berry,does this keep around all the old states ?
984,1507925688.000116,Margaret,"only if you capture them; if you don’t bind them, they are gcd"
984,1507925720.000145,Berry,"I guess I'll just do a loop
```
(loop [state state]
  (if (still-run state) (recur (f state)) state)))"
984,1507925765.000242,Willow,`(reduce (fn [prevoius-states current-state] (if (still-run current-state) (conj previous-states (f current-state)) (reduced previous-states)))`; something like that
984,1507925786.000212,Margaret,but there’s nothing to reduce over
984,1507925795.000294,Berry,(range) :slightly_smiling_face:
984,1507925878.000076,Margaret,"that does a lot of extra work and a lot of extra syntax to do something like the take-while / iterate except it’s not lazy and always holds all states in memory whether you need them or not, I don’t see any advantage; <@Berry> if range was the input current state would always be a number; (yes you could fix that by changing the binding vector to `[previous-states _]` but that doesn’t really make things much better)"
984,1507926451.000272,Willow,yeah his suggestion is way better
984,1507926522.000188,Margaret,"now, if f took a second arg, eg. one that delivers an event or message (a common design for me at least) `(reduce f state (repeatedly get-event))` can be a decent way to do that (reductions instead of reduce if you need all the values in a sequence as they are produced); this is a good setup if you have an external data source because it means you can unit test by passing in a lazy-seq of events that provoke the behavior you care about"
985,1507929283.000454,Tameka,is there a good read about web app security for Clojure?; Almost every tutorial explains basic routes using compojure and they don’t really go into details of middlewares and such; and actually connecting to the database
985,1507929337.000077,Jodie,<@Tameka> what sort of thing are you looking for?
985,1507929406.000194,Tameka,"I’m trying to build a SPA and I have an SQL database. And basically was wondering what’s the best approach to creating RESTful apis and working with databases?; for example, let’s say `Laravel` offers its own `ORM`, which I understand is for OOP programming but perhaps there’s something similar approach in Clojure too?"
985,1507929683.000061,Shamika,"<#C077KDE3A|luminus> is a good way to get started <http://www.luminusweb.net>; You can use the options for ClojureScript, Re-frame, Reagent, etc. for the SPA stuff, and I believe there’s some DB stuff too"
985,1507930198.000228,Tameka,"just what I needed, thank you :slightly_smiling_face:"
986,1507932922.00006,Lester,Will clojure compiler optimize stuff like `(let [a (-&gt; foo :x :y :z) b (-&gt; foo :x :y :q)] ...)` by noticing common expression?
986,1507932946.000143,Kareen,no
986,1507932977.00024,Lester,"<@Kareen> funny thing, I’m actually watching your talk from conj right now :smile:"
986,1507932981.000139,Kareen,hah; hope you like it :)
986,1507933084.000193,Lester,"<@Kareen> I sure do! :heart: compiler tech.
About the common expression. I wonder is that something that JVM could optimize later on…"
986,1507933143.000036,Kareen,"mhh, i don't know, that would require some hardcore purity analysis which I don't think hotspot does; hotspot never ceases to amaze me but i'd be *really* surprised if it did this"
986,1507933176.000213,Lester,"yeah, that is what I’d expect; good to know, I need to refactor several fns now :smile:"
986,1507933446.000066,Aldo,"if those expressions are actually like what you're doing then the cost of it not being ""optimised"" is likely close enough to zero; function indirection is *cheap*"
986,1507933561.000165,Lester,"okay, so roughly what does `(:x y)` compile into?"
986,1507933561.000334,Aldo,"```
(let [thing {:a {:b {:c 3}}}]
  (time (dotimes [_ 10000000] (-&gt; thing :a :b :c))))
""Elapsed time: 282.271115 msecs""
```; (:x y) compiles to xsingletonobject.invoke(y); which might even be inlined by the jit"
986,1507933625.000097,Margaret,"<@Lester> the best way to find the answer to a question like that is to use no.disassemble <https://github.com/gtrak/no.disassemble>; <@Aldo> oh, cool"
986,1507933690.000126,Kareen,<@Aldo> not quite; clojure emits inline caches for `(:foo &lt;whatever&gt;)`
986,1507933797.000277,Aldo,"ah, so even better than I thought"
986,1507933821.00028,Kareen,"yeah but they're only useful for records :); the inline caches are there so that if you're doing keyword access on a record, it'll get optimized into a direct field access; no difference for maps other than some extra indirection"
986,1507933865.00003,Lester,"that I heard of, smart move"
986,1507933887.000147,Kareen,i'm actually not 100% sure those inline caches make an actual difference in real life
986,1507933896.00019,Lester,I know V8 does a lot to optimize field lookups away
986,1507933908.000085,Kareen,but i've honestly never benchmarked that
986,1507933909.000122,Lester,"but that’s a bit different; ok, be back in 6 months, started reading clojure compiler’s src :smile:"
986,1507934537.000019,Kareen,there be monsters
987,1507934558.00006,Margaret,no.disassemble helps too :smile:
986,1507934596.000141,Lester,"I contributed to pixie-lang once so I’m sorta prepared :joy:; heh, I have to admit that I almost never care about optimizing anything when writing clojure because everything runs fast enough “out of box” - even stuff like async proxy that parses megabytes/s of binary from the wire, grinds huge maps and unparses them to other wire. It just warms up and does its job."
988,1507936042.000165,Bernard,Are there any good libraries to create CLI applications?
988,1507936393.000238,Shamika,Do you need to do anything special besides parse CLI args?
988,1507936556.000119,Alix,Is there a boot channel?; Is there a way to change the font colors of the boot repl on windows 10?
988,1507936596.000009,Shamika,<https://github.com/clojure/tools.cli/>
989,1507939380.000032,Giovanna,"And tools.cli is cljc, so you can use it with lumo, which I recommend."
990,1507943147.000032,Berry,<#C053K90BR|boot>; There's quite a few clojure tensorflow/deep-learning libs floating around lately. Anyone using any of them in production?; is there a shorthand for (into [] (for .... )) ?
990,1507967478.000035,Danyel,"Nope, I think I made my own forv for that"
990,1507967622.000025,Berry,can you share/paste it?
991,1507970000.000018,Danyel,(defmacro forv [&amp; args] `(vec (for ~@args)))
990,1507972194.000063,Berry,"lol, I can't believe it's that simple; thanks!"
992,1507980611.000034,Lovie,thank you <@Edwin> for going great lengths to revisit `homoiconicity` for us <https://www.youtube.com/watch?v=o7zyGMcav3c>
990,1507990944.000039,Sommer,<@Berry> re: tensorflow : not that I know of 
993,1507993169.000074,Aldo,"`vec` takes a collection and returns a vector; ```
(vec (for [a [1 2 3] b [4 5 6]] [a b]))
=&gt; [[1 4] [1 5] [1 6] [2 4] [2 5] [2 6] [3 4] [3 5] [3 6]]
```"
990,1508015374.000038,Berry,"<@Sommer>: whoa! you're here!! I was just watching your clojure conj talk; <@Sommer>: one thing I don't get -- if you wrote a bunch of gradient code in clojure, why did you have to also write c++ stub code ?"
990,1508015481.000086,Sommer,@qqq Can't talk right now. But I'll get back to you 
990,1508015720.000063,Berry,<@Sommer>: I'm holding you to that after you recover from clojure conj
990,1508015952.000066,Sommer,@qqq deal. :relaxed: The current distraction is getting the kids to eat dinner ; Just in case anyone was wondering: the conversation between <@Berry> and I about guildsman gradients happened in <#C568QPDLH|tensorflow>
990,1508067573.000022,Berry,"what does the ^:portkey/no-sync in
```
(ns ^:portkey/no-sync portkey.ouroboros
  ""The JVM that instruments itself.""
  (:refer-clojure :exclude [descendants])
  (:require [<http://clojure.java.io|clojure.java.io> :as io]))

```
mean ?"
994,1508068797.000015,Susie,"I haven't seen it used often for namespace, but it's shorthand for metadata: <https://clojure.org/guides/weird_characters#__code_code_and_code_code_metadata>; I imagine that portkey uses the information internally for something.; Essentially it attaches the metadata map: `{:portkey/no-sync true}` to the namespace.; Some code operating on the namespace itself could then look up the metadata and do something depending on the value of that key in the metadata.; <@Berry>"
995,1508069983.000048,Lovie,"*Clojure, the first 10 years*
```What did we think we were getting (10 years ago)? A programming tool.
What did we get (10 years later)? A lens for viewing program construction and systems design.
The next 10 years?  It's all to you```
I suppose this talk would go into one of clojure classics
<https://www.youtube.com/watch?v=9N7xM40fio0>"
996,1508072444.000124,Berry,"operating inside boot, I get:

```

(clojure.core/require 'portkey.ouroboros) ;; =&gt; nil

(clojure.core/use 'portkey.ouroboros) ;; =&gt; namespace 'portkey.ouroboros' not found
```

this confuses me, as the nil implies the require succeeded, but for whatever reason, I can't 'use' the namespace"
994,1508072914.00003,Marla,<@Susie>’s answer is correct but It’s vestigial code inherited from powderkeg
996,1508073092.000014,Marla,<@Berry> It seems that boot’s classloaders shenanigans and portkey’s ones are not mixing up well
996,1508073109.000045,Berry,"yeah, I got a slightly more helpful error, 1 moment please; <https://github.com/portkey-cloud/portkey/blob/master/src/main/clojure/portkey/ouroboros.clj#L173>


        java.lang.IllegalStateException: This class is expected to be loaded by the system classloader.
  java.lang.ExceptionInInitializerError: 
clojure.lang.Compiler$CompilerException: java.lang.ExceptionInInitializerError, compiling:(portkey/ouroboros.clj:173:37)
                    

^^-- that's the silent error when I try to (require 'portkey.ouroboros); so the namesapce portkey.ouroboros is not loading, and it's complaininga bout that line 173 -- as for how to fix that, I don't know how; <@Marla>: ^ <@Jodie> recommended pinging you :slightly_smiling_face:; (from <#C053K90BR|boot>)"
996,1508073362.000077,Marla,Actually the source of the exception is <https://github.com/portkey-cloud/portkey/blob/master/src/main/java/portkey/Agent.java#L8>
996,1508073434.000015,Berry,"okay, so <https://github.com/portkey-cloud/portkey/blob/master/src/main/clojure/portkey/ouroboros.clj#L173>
wants to look at portkey.Agent/instrumentaion

which then causes the class to be loaded .. and runs the static functions to initialize it"
996,1508073571.000023,Marla,"Can’t fix it right now, would you mind opening an issue? I’ll try to take care of it once at the airport."
996,1508074579.000054,Berry,<@Marla>: I'm not used to filing github issues. Here's my attempt at <https://github.com/portkey-cloud/portkey/issues/36> -- please let me know if there is more info I should add.
996,1508074771.000018,Marla,"<@Berry> that’s perfect thanks; (this is not an issue coming out the blue, we have discussed it so the issue as a summary of the current analysis is the right thing to write down)"
996,1508075309.000026,Berry,glad to make an epsilon contribution; looking forward to resolution :slightly_smiling_face:
996,1508076576.00006,Marla,"It’s not an epsilon resolution, portkey needs people like you and <@Verena> that are brave enough to try it and find limitations and edge cases. :thumbsup:"
997,1508077382.000001,Brande,"I think that tactic has been successful and has gotten us this far, so continuing it will get us further :) "
998,1508077697.00002,Lucio,"Hi! Is there some sort of “mentoring” program/website/else for Clojurians who would like to get paired with an experienced Clojure dev for feedback on a project and/or questions?; By that I mean not “one-off” pairing (like coming here to ask a question), but over a longer period of time; Maybe this belong in <#C03RZGPG3|off-topic>…"
996,1508077878.000076,Berry,"<@Marla>:
documenting the error = epsilon 'contribution'
resolution / fixing the error = lots of work = won't be done by me :slightly_smiling_face:
btw, <https://www.youtube.com/watch?v=qJXqQATJNTk> was an excellent talk -- basically what got me to try portkey"
998,1508134167.00015,Hedwig,<@Lucio> Check out <http://www.clojureconsultants.org/>
996,1508156835.000539,Berry,"<https://mxnet.incubator.apache.org/api/scala/index.html> &lt;-- this shows mxnet (Amazon's deep learning library) has an Scala API.

I know how to call Java from Clojure. Is there a way to call Scala from Clojure ? If not, any suggestions on how to test this from Clojure ?"
999,1508157490.000304,Mallie,"Is there a nice easy way to pretty-print XML without dropping down to Java calls? We're using clojure.data.xml to build an XML doc with `xml/element` calls, and it's all coming out on one line"
996,1508157885.000204,Berry,"the answer to my own question appears to be ""it's possible""
<https://github.com/grandbora/clojure-scala-cantrips#clojure-scala-cantrips>; I'm trying to call:
<https://github.com/apache/incubator-mxnet/blob/master/scala-package/core/src/main/scala/ml/dmlc/mxnet/NDArray.scala#L239>
from clojure

I have already done
(:import [ml.dmlc.mxnet NDArray])

which works

I can eval 'NDArray' ==&gt; this works

when I try to call ""NDArray/ones"" ==&gt; it complains about not having the static method

How do I get the boot repl to list for me all the static members of class NDArray ?; self answer ==&gt; (clojure.reflect/show NDArray)"
1000,1508160876.00006,Elwanda,"Hello! I have a part of my application where I sort values by inserting them in a map. The key creation process is automatic and generates keys from combinations of dates. This results in calls like this: `(keyword ""201701-201702"")`. What is best practices in this scenario? Should I prepend the date string with a character: `(keyword ""_201701-201702"")` or should I use the date string value as is as key? All look up in the map is done through `(get m my-custom-key)` where the same function that created the key is used to generate the key for lookup."
1000,1508164267.000094,Willow,"what problem are you trying to solve?; and ""sort values by inserting them in a map"" sounds like a weird thing to do as maps are not inherently sorted. although there is a `sorted-map`"
996,1508165040.000662,Berry,I'm doing a new ubuntu install. Will anything bad happen if I use openjdk-9 instead of openjdk-8 ?
996,1508165474.000179,Bibi,<@Berry> install both?
1000,1508165488.000314,Bibi,setup alternatives to switch between which one you want.
996,1508165504.000281,Berry,"wait wait, does openjdk-9 == java 9?; I thought there were some java 9 vs clojure conflicts"
996,1508165512.00011,Myles,yes
1001,1508166028.000582,Guillermo,there are no java 9 conflicts with clojure -- it was `leiningen`
996,1508166384.000021,Alix,I am having a problem with boot.   After I call boot repl watch system I lose the ability to use the REPL.  I made a short video of the problem here. Any help with this is much appreciated.  Here is the short video: <https://www.youtube.com/watch?v=TQsqkzzR-8g&amp;feature=youtu.be&amp;hd=1>
1002,1508167777.000124,Elwanda,"<@Willow> i shouldnt have used the word sorted, it is more like I use the map and it's keys as buckets and collect values in lists associated with the keys. My concern is more if it is nescessary to prepend the keyword with a character to avoid them starting with a number? "
1002,1508167883.000347,Willow,you're turning strings into keywords and you're worried about the keywords being legal. why not just leave the keys to your map as the strings themselves and never worry about that at all?; but it looks like `:3` is against the spec although it works now. So I think your instinct to move away from this is correct but I dno't see a need to introduce a bigger workaround than using the original strings as the keys to your map.
1002,1508168340.000011,Elwanda,Exactly! I will do that! Thanks for taking your time answering me. Am I correct in assuming that the only functionality I will miss out on is that I can't use the strings as functions in for example threading macros?
1002,1508168439.000567,Willow,"that's for sure a worry. but in your example earlier you were using `(get map key)` which should work just fine. If you need some more control over threading, you could swich to `as-&gt;` which lets you introduce an alias for the threaded value so you can vary between first position and last"
1002,1508168576.000705,Elwanda,"I see! I'll look through my code and decide on what to do. Again, thank you."
1002,1508171282.000319,Margaret,"<@Elwanda> my strong preference is that if the identifier isn’t something I could ever use as a literal in my code (eg. your case where it’s generated at runtime so it will never be a code literal), I use strings instead of keywords, even when a keyword is passed in as an argument (and is meant to be a thing to look up and not generically a function to call) I still prefer the form where the map comes first (either calling the map, or explicitly calling get) - do remember that `(map key)` works, regardless of the type of key"
1003,1508174922.000243,Terra,"Right, the last time I tried it it didn't work even when I used the runscript from the latest lein version. There was problem in bootclasspath (which could be solved by turning bootclasspath off) but other than that there was also some dynapath issue.
After that I eventually gave up and reverted to java 8, since without leiningen my tooling is essentially useless.
However, I'm able to run plain clojure repl with java 9:
```
clojure-repl-1.9: aliased to rlwrap java -cp /Users/jumar/.m2/repository/org/clojure/core.specs.alpha/0.1.24/core.specs.alpha-0.1.24.jar:/Users/jumar/.m2/repository/org/clojure/spec.alpha/0.1.123/spec.alpha-0.1.123.jar:/Users/jumar/.m2/repository/org/clojure/clojure/1.9.0-beta1/clojure-1.9.0-beta1.jar clojure.main
```"
1003,1508175013.000186,Guillermo,"yeah if you use leiningen 2.8.0 when it's out, you'll be set :ok_hand::skin-tone-4:; I just making sure that the blame/attribution is not clojure :slightly_smiling_face:"
1002,1508178494.000105,Elwanda,Thanks for reminding me about `(map key)` and thanks for answering. I think I will go with your approach. 
1002,1508178544.000133,Detra,"I strongly suspect that Go is a fad, and that once people have experience maintaining Go codebases, it will be suddenly uninteresting.; I'm also surprised that Haskell isn't above Scala :smile:"
1002,1508178658.000723,Merri,"I don't think it's a fad. Simply for the fact that google is pushing it. That being said, I have been hacking some go in my spare time and get frustrated that it's not as expressive as clojure."
1002,1508178715.000426,Elvin,"I wish I could get into Go, I love the idea.  But languages that don't have functions as first class values... I don't know, I just don't think its worth it to me.; I'd have to remember how to program."
1002,1508178749.000419,Detra,"It could have staying power, the way Java has staying power.  It could essentially replace 70% of greenfield C even.  But I don't think it's going to stay on the developer ""most loved"" list."
1002,1508178772.000069,Merri,"yes, it definitely feels like a step backward to me. Goroutines are nice, but it is still easy to have race conditions."
1002,1508178887.000225,Detra,:nods:
1002,1508179065.000416,Daniell,A discussion for <#C16LEKSLT|other-languages> perhaps?
1002,1508179373.000051,Elvin,"good move, thanks for keeping things clean!"
1004,1508180486.000238,Alix,"I get the following error when I run ""boot repl"" on Windows 10 command line:  [WARNING] No nREPL middleware descriptor in metadata of boot.repl$disable_exception_colors@4c415a68, see clojure.tools.middleware/set-descriptor!
Any idea how to fix it?"
1004,1508180530.000067,Daniell,<@Alix> I get that too but haven't dug into why. I suggest you ask in <#C053K90BR|boot>
1004,1508180746.000321,Alix,<@Daniell> Are you running boot on Windows in the windows commandline?; I am asking because I wonder if the problem is windows specific or not
1004,1508180795.000408,Daniell,"It is not Windows-specific. I get it on all platforms with Boot, starting a REPL."
1004,1508180838.000688,Alix,"okay, good to know.; Hey,  another question,  I started a repl server with ""boot repl -s""; I can reload clojure code in the reple server but my REPL clients don't see the code changes.  Just asking,  do you have any idea why?"
1004,1508181116.000079,Daniell,I'd take that question to the <#C053K90BR|boot> channel too.
1004,1508181125.000433,Alix,okay
1005,1508226390.000134,Anika,Is there a way to get basic autocompletion without nrepl using just `rlwrap java -cp ~/.m2/repository/org/clojure/clojure/1.8.0/clojure-1.8.0.jar:src clojure.main` . Any lightweight jars I can load to get the feature instead using `lein repl` ?
1005,1508226914.000393,Terra,"<@Anika> I'm afraid there's no easy way. At least no one I'm aware of.
I use `lein repl` (mostly with Cider) most of the time and pure clojure repl only very occasionally"
1005,1508227680.000281,Anika,I too use Cider and Emacs. However since I am from Python background I got used to starting and closing REPL instantly to start from a clean scratch of the state and deps. Sure I can connect to the REPL using the port but I was just curious about some other lightweight workflow.
1005,1508229012.000221,Terra,"why is `lein-repl` a problem in the first place?; If you want to get rid of dependencies from your profiles.clj, you can use `lein with-profile base repl`; (sorry I thought that but that's probably not how this works - need to dig a bit deeper...); so yes and no: I still have a couple of dependencies defined in `:repl` profile in ~/.lein/profiles.clj and these are loaded. However, the `:user` profile should be ignored."
1006,1508230006.000031,Ayesha,Is datomic.client is just an async counterpart of datomic.api ?
1005,1508230264.000266,Terra,"<@Ayesha> datomic.client is for ""Clients"" and datomic.api for ""Peers"" 
(at least that's my understanding)
see 
* <http://docs.datomic.com/clients-and-peers.html>
* <http://docs.datomic.com/project-setup.html>
* <http://docs.datomic.com/getting-started/connect-to-a-database.html>
* <http://docs.datomic.com/peer-getting-started.html>
However, better to ask in <#C03RZMDSH|datomic>"
1006,1508230356.000044,Ayesha,Thanks!
1005,1508231943.000081,Anika,<@Terra> I don't see it much of a problem except that I was thinking if I was missing some lightweight REPL. Thanks for the info about deps and profiles.
1005,1508238077.000065,Terra,"Where is the automatic import of ""java.lang."" classes handled in clojure?; I'm just wondering why `StackWalker` class cannot be found but `java.lang.StackWalker` can:
```
user=&gt; (StackWalker/getInstance)
CompilerException java.lang.RuntimeException: No such namespace: StackWalker, compiling:(NO_SOURCE_PATH:1:1)
user=&gt; (java.lang.StackWalker/getInstance)
#object[java.lang.StackWalker 0x28cb9120 ""java.lang.StackWalker@28cb9120""]
```; Note: StackWalker was added in Java 9"
1007,1508240647.000045,Eliana,DEFAULT_IMPORTS <https://github.com/clojure/clojure/blob/master/src/jvm/clojure/lang/RT.java#L39>; You can still fully qualify that to work: `java.lang.StackWalker`; (you saw that already)
1008,1508244944.000514,Misti,"Hey Guys, I’ve open sourced Clojurecademy :tada::tada::tada: <https://github.com/clojurecademy/clojurecademy>"
1008,1508246333.00016,Berry,"is there a way to tell java ""just use all the resources on the machine; it's all yours"" ?"
1008,1508246710.000325,Jerry,just run java :troll:
1008,1508246804.000088,Berry,"java -Xms -Xmx  specifies memory usage; it appears to take all processors by default; boot is hanging on: Retrieving scala-xml_2.11-1.0.4.jar from <https://repo1.maven.org/maven2/> (633k); which is weird, as I have a 24 core machine with 96 GB of RAM; how long can processing scala-xml.jar take? [I'm calling a scala lib from clojure, so it's apparently pulling in the entire scala compiler chain]"
1008,1508246905.000224,Jerry,"well, anyway getting 0.5mb file should not take long on most networks"
1008,1508246928.000149,Berry,"so I nuked ~/.m2 ; then I ran boot, and boot has spent 9 minutes pullingin all the jar dependencies so far; it's pulled in much larger ones with no problem:
```
k)
Retrieving scala-library-2.11.8.jar from <https://repo1.maven.org/maven2/> (5610k)
Retrieving scala-reflect-2.11.8.jar from <https://repo1.maven.org/maven2/> (4467k)
Retrieving log4j-1.2.17.jar from <https://repo1.maven.org/maven2/> (478k)
Retrieving slf4j-api-1.7.5.jar from <https://repo1.maven.org/maven2/> (25k)
Retrieving slf4j-log4j12-1.7.7.jar from <https://repo1.maven.org/maven2/> (9k)
Retrieving args4j-2.0.29.jar from <https://repo1.maven.org/maven2/> (83k)
Retrieving scala-parser-combinators_2.11-1.0.4.jar from <https://repo1.maven.org/maven2/> (414k)
Retrieving scala-compiler-2.11.8.jar from <https://repo1.maven.org/maven2/> (15124k)
Retrieving scala-xml_2.11-1.0.4.jar from <https://repo1.maven.org/maven2/> (633k)


```; so I think it has something to do with processing whatever scala-xml.jar contains ?; [ I have no idea and am guessing ]"
1009,1508250944.000202,Guillermo,"<https://clojurians.slack.com/archives/C03S1KBA2/p1508226390000134>
I use a bare non-lein non-boot REPL. To be honest I haven't missed autocomplete as much as I thought I would"
1010,1508252322.000298,Linnie,"hi, I'm trying to use clojure to create a Burp extension, basically a jar with a java class burp.BurpExtender that implements some interface; however, when it clojure calls the init method, it throws a notfound exception for clojure/core.clj"
1008,1508252339.000441,Berry,"for atom, is there a function for ""set value of atom to FOO, and return old value"" ?"
1010,1508252342.000502,Linnie,there is also another class that defines a main function and that runs fine when called with java -jar X; the jar is an uberjar created with lein; not sure how to debug this issue
1008,1508252665.000571,Adele,<@Berry> it was recently implemented: <https://dev.clojure.org/jira/browse/CLJ-1454>
1008,1508252977.000314,Berry,"<@Adele>: awesome! I get to delete
```
(defn swapr! [atm f]
  (let [ans (atom nil)]
    (swap! atm
           (fn [old]
             (swap! ans (fn [_] old))
             (f old)))
    @ans))
```; I don't know what swap-vals! is implemented, but I suspect it's much more elegant."
1011,1508254624.0007,Nita,I have a function with an overloaded parameter say (defn f1 [foo bar-dt] ...) where bar-dt can be either a clj.DateTime or a java.util.Date. So I have an if statement in the function which converts the Date to a clj.DateTime. Switching on a type like this feels wrong (oop leftovers I guess). And a multimethod is too heavyweight for this kind of thing IMHO. Is there some better way to handle this type of overloading?
1011,1508255159.000558,Tequila,"<@Nita> you can use a protocol. Something like:

```
(defprotocol ILikeDates
  (f1 [this foo]))

(extend-protocol
  clj.DateTime
  (f1 [this foo] this)
  java.util.Date
  (f1 [this foo] (.toCljDate this)))
```; <https://clojure.org/reference/protocols>
<https://clojuredocs.org/clojure.core/defprotocol>"
1011,1508255492.000126,Hugo,You could also piggypack on the new `Inst` protocol
1012,1508258643.000162,Sandy,"Probably a good idea, that code has a bug anyways :stuck_out_tongue:; oh wait...maybe not, I didn't notice the double swap; But yeah, read up on <https://clojuredocs.org/clojure.core/compare-and-set>! it'd make that function a lot cleaner.; bleh need the ! at the end of that url, just google for `comapre-and-set!`"
1012,1508259508.000663,Adelina,Are there any Twitch streamers out there that broadcast them working on Clojure related things? Channel links?
1013,1508261310.000433,Terra,"<@Eliana> great, thanks!"
1014,1508266131.000358,Kimberely,"can someone tell me how to read a clojure source file without evaluating it? I just want to parse it as clojure data structures and manipulate those.; since edn is a subset of clojure, do I have to use `read`? `read` seems to want to validate that the symbols in the file I’m reading are resolvable (which they aren’t) EDIT: `read` is not validating symbols, I was incorrect"
1014,1508266229.000115,Guillermo,"you can also use the org.clojure/tools.reader project, which gives you a few more knobs <@Kimberely>"
1014,1508266245.000041,Kimberely,"you’re the best, thanks!"
1015,1508270361.000022,Lori,"I have some name spaces that I'd like to extract (along with tests and dependencies)
into their own repo
my env is cider and emacs
are there any tools in there to make this quick'n'painless?"
1016,1508271050.00011,Giovanna,"That's the idea with <#C73F06KPE|mob-programming> although not necessarily via twitch. It's been kinda quiet lately, but we did get a couple sessions going about two weeks back. (Using twitch and teamspeak)"
1015,1508271058.000449,Margaret,<@Lori> clj-refactor.el might help <https://github.com/clojure-emacs/clj-refactor.el/wiki>
1015,1508271111.000145,Lori,checking it out now thanks
1016,1508271437.000264,Johana,"in clojure, when I have a function like `(let [a [1 2 3]] (fn [x] (contains? (set a) x))`, will the function create the set at every invocation, or is this optimized?"
1016,1508271492.000154,Margaret,I don’t think it can be - since clojure doesn’t exiplicitly track side effects so can’t prove set isn’t doing something useful on each run
1016,1508271516.000192,Willow,would the jvm jit do something like that after a while? my fundamental jvm knowledge is lacking; i'm assuming you're talking about the clojure compiler
1016,1508271546.000301,Margaret,"I almost suggested changing set to println to see if it gets optimized, but I think we both know what it would do :smile:"
1016,1508271549.000419,Guillermo,it's hard to say re: JVM JIT.   But [1 2 3] is created only once by clojure :slightly_smiling_face:; collections that only have constants are hoisted
1016,1508271576.000122,Margaret,"right, the easy workaround there is to move the set call into the let block (but of course real code might be trickier)"
1016,1508271604.000555,Willow,so even if it was `(fn [x] (let [a [1 2 3]] (contains (set a) x))`? I assumed it would only be made once because of the closure
1016,1508271620.000488,Guillermo,it being what?
1016,1508271647.000248,Margaret,"<@Willow> but clojure doesn’t know that set is without side effects as far as I know; if it would break if that was a println call, I don’t think clojure can automatically hoist it"
1016,1508271682.000485,Willow,"""collections that only have constants are hoisted"". his example had the collection defined outside the fn body so it was already hoisted. I was asking if it was defined inside of the function body would it still only be created once"
1016,1508271692.000214,Raul,"Way to prove this:
```(let [a (transient [1 2 3])
      my-fn (fn [x] (contains? (set (persistent! a)) x))]
  (println (my-fn 5))
  (conj! a 5)
  (println (my-fn 5)))```

The 2nd my-fn throws an error ```IllegalAccessError Transient used after persistent! call  clojure.lang.PersistentVector$TransientVector.ensureEditable (PersistentVector.java:548)```; (there's probably a better way to prove that the `(set (persistent! ...))` runs, and it's not apples to apples, but it kind of proves the point)"
1016,1508271750.000507,Guillermo,"constant expressions are generally hoisted and created once statically, whether the expression is scalar or a collection; the `(set foo)` is not a constant expression"
1016,1508271773.000308,Margaret,"yeah, that looks like empirical proof that the optimization doesn’t happen, (though you are right <@Willow> that a clever compiler probably *could* do that)"
1016,1508271777.000516,Guillermo,"it's an invocation, even if it's to a pure function"
1016,1508271798.000393,Raul,"and if it were a clever compiler, it would realize not to do it in the case there's a known side effect, like what I introduced there...."
1016,1508271801.000141,Margaret,"then again, set is a var, so to be fully consistent we can’t make assumptions about its redefinition without opting in…; it would be dumb to redefine clojure.core/set at runtime, but the language says its allowed"
1016,1508272277.000021,Guillermo,<@Raul> aside: make sure you use the result of `(conj!...)`
1017,1508272281.000109,Jodie,Curious thought: What is a _good_ use-case for metadata?
1016,1508272478.000471,Raul,"in this case, we don't really need to. `conj!`, while returning the original coll, also works just as a side effect.

```(let [coll (transient [])]
                      (run! #(conj! coll %) (range 5))
                      (persistent! coll))
;; [0 1 2 3 4]```; i.e. don't use transients in your code unless you know what you're doing and really need to :slightly_smiling_face:"
1016,1508272917.000202,Johana,"ok, so I should be conscious about defining sets outside my functions then"
1016,1508273405.000345,Sandy,"<@Johana> the Clojure compile does very few optimizations, I see this as somewhat of a good thing. It's easier to predict performance when there's fewer optimizations, but this set example is one I've seen quite a few times."
1017,1508273438.000628,Sandy,"(contains? (set a)) is going to be slow-ish depending on the size of `a`. But for smaller sets, it may not matter"
1016,1508273524.000382,Sandy,"And performance wise, there's little difference between `(filter #{a b} coll)` and `(filter #(or (= % a)  (= % b)) coll)`"
1016,1508273578.000574,Guillermo,you're missing the point; conj! is not valid if you call it on the same collection over and over. and your simple example will not reveal the bug I'm referring to.  need to call conj! on the result of calling conj!
1016,1508273709.000353,Johana,"haha, I was frowned upon once when I used that idiom of set contains in Scala, because I didn’t want to type my `||` expressions out, was so used to doing this in Clojure"
1016,1508274079.00009,Raul,"I think you might be confusing `conj` and `conj!` ? Or, if I'm wrong on that, can you please provide an example where the bug you're talking to comes into play?"
1016,1508274178.000298,Guillermo,"you are wrong -- they both work the same way; there is an open ticket to clarify the docstring; it's a misconception that conj! bashes in place, sometimes it returns a new container; it just _appears_ to works on small collections; <https://dev.clojure.org/jira/browse/CLJ-1385>"
1016,1508274358.000546,Raul,"cool, thanks. I do seem to have had that wrong"
1016,1508274414.00038,Guillermo,"n.p. -- i forget where exactly the change happens, it's not at 32 elements because I just tried that; but you have to reduce conj! instead of run! conj!; <https://clojurians.slack.com/archives/C03S1KBA2/p1508272917000202>
if the sets are constant it doesn't matter; constant collection ~= are only filled with _literals_ (numbers, keywords, ...); clojure also lifts regex literals -- only compiles them once"
1018,1508280865.000241,Berry,"<@Sandy>: iirc, months ago, we had this same discussion over this same problem; I'd like to think my complaints made an epsilon push towards this being implemented :slightly_smiling_face:; clojure has double? why is there no long? how do I test if a number is a long ?; how do I test is a number is a *java long* ? (some java functions want java ints, and I need to coerce longs to ints)"
1018,1508282143.000081,Sandy,<@Berry> can always check the class: `(instance? Long x)`
1018,1508282588.000038,Margaret,"<@Berry> I was under the impression that when clojure sees that a method takes int, it accepts a long and implicitly converts - is that not working?"
1019,1508282632.000014,Kareen,"that is correct <@Margaret>, unless the method also has a long overload and he explicitely wants the int one"
1018,1508282651.000076,Margaret,"ahh, that would be a gotcha; but also a rare case"
1019,1508282664.000078,Kareen,yeah
1018,1508284111.000344,Margaret,"but even then you wouldn’t need to check for longs, you can explicitly call `int`"
1019,1508284310.000238,Kareen,true
1018,1508287504.000056,Berry,"<@Margaret> , <@Kareen>: thanks for clarifying this, I misunderstood my compiler error; so I'm calling scala from clojure, and I have a functino clj-seq-&gt;scala-seq ... and this scala function expects a scala-seq-of-ints and I'm passing it a scala-seq-of-longs (since clojure integers default to longs)"
1020,1508288133.000209,Tamra,I have a hashmap `{:a 1 :b 2 :c 3}` and a vector with a new key order `[:b :a :c]` how do I reorder the hashmap?
1020,1508288156.000163,Willow,hashmaps are unordered in general; although in general they are based on insertion order for 7 elements or fewer; but if you have a vector of keys then you have an ordering so you could `(map #(get collection %) [:b :a :c])` to get a lazy seq of them in the order you gave
1020,1508288348.000003,Tamra,hmmm maybe i’ll have to rethink this a bit
1020,1508288391.000018,Willow,yeah this is probably a situation where you can change the data structure a stack frame or two higher
1020,1508288406.000154,Tamra,"well the hashmap comes from the db; and generates a form, but the elements are in a different order each time; i’d like to force the order"
1020,1508288446.000142,Willow,not sure what your db is but rows and columns are not considered ordered in theory despite what may happen in practice
1020,1508288507.000134,Tamra,"right, thats why I thought there would be an easy way to reorder the hashmap"
1020,1508288566.00008,Willow,that puts you right back at my earlier suggestion. you don't care about the order of the hashmap but the order you access the values in the hashmap
1020,1508288600.000008,Tamra,"right, ok makes sense"
1021,1508289397.000042,Berry,"I realize this is terrible and never should be done, but I have good reason to do this.

Is there a way, from Clojure, to call a *private* static function of a scala class ?

I realize calling private functions is bad -- but in this case, I'm wrapping an API in a clojure-ic manner, and I really need to call this particular private function.; There is only one particular private function I need. so I'm willing to do an expensive reflection of sorts upfront to grab this function."
1021,1508290601.000092,Valorie,"<@Berry> I've never tried that with a scala class... but, long as a SecurityManager isn't present, you may be able to use reflection to get ahold of the Method, and modify it's accessibility (via `java.lang.reflect.AccessibleObject#setAccessible`); I've used that trick in the past for auto-marshalling in Java"
1022,1508291222.000166,Valorie,"Probably something like `(-&gt; (.getMethod TheClass ""theFnName"" ...) (.setAccessible true) (.invoke nil args))` but specifying the parameter types to getMethod. You could also use `getMethods` and then filter to the one you want, if there's some problem specifying the parameter types."
1021,1508293070.000114,Berry,"<@Valorie>: interesting, I didn't know that one could *change accessibility at runtime* (I thought maybe private functions were hidden, and there was a way to reference them, but not that one could actually toggle the accessibility bit)"
1023,1508293409.000095,Cecile,"When using `clojure.core.server/repl`, is there an easy way to get a client that has backspace support, up-arrow for history, ctrl-c basic functionality?"
1024,1508293411.000071,Margaret,"where this really would break down is for stuff scala doesn't reify into the running code (it just uses the type system to establish what's what and puts an undocumented / non-self-describing structure into the class file); I'm not certain it does that, but I heard a rumor some things were like this; <@Cecile> there's a CLI program called rlwrap that you can wrap around your telnet process talking to the socket repl; other than that, you just want an nrepl client, and to use nrepl in your code"
1023,1508319360.000143,Fe,<@Cecile> also worth checking out unravel: <https://github.com/pesterhazy/unravel>; but even `rlwrap nc` will be a-ok
1025,1508320781.000311,Lily,"what's the best lib for exporting clojure test output, there is to say, I'm testing someting that has many failed assertions, instead of getting number of fails, I'd like to get some sort of checklist, name of the test, maybe the text from the ""testing"" macro, in nicely formatted text document."
1026,1508320820.000301,Cris,"Hi guys, Ive got a general question about Clojure... Ive got a bit of experience with Clojure, and love it, and Ive touched on Haskell. I was thinking of learning Haskell properly, but what do you Clojureists think of Haskell?"
1025,1508321068.000179,Lily,"what I described is exacly here, I should be more thorough with my friend google before asking here.
<https://github.com/pjstadig/humane-test-output>"
1026,1508321409.000397,Cristi,"<@Cris> don't need a huge type system when your code is simple and readable; That, and type errors are easy to find. Errors in logic usually bypass type errors"
1026,1508321935.000086,Cris,<@Cristi> Very good point. Some on the web dislike the dynamic typing of Clojure but this is a excellent counter argument.
1026,1508323278.000181,Shameka,i would like static checking <@Cris> - i currently have a lang-crush on <https://github.com/LuxLang/lux>
1026,1508324544.000319,Cris,"<@Shameka> Actually looks nice, ahhh, so many languages to learn, so little time."
1027,1508329432.000017,James,"I also have the same doubts constantly :stuck_out_tongue:
Clojure is awesome and probably the best experience I've had developing, but I often miss types. 

But I don't agree with people who minimize what benefits types bring... The mistakes caught by type systems aren't always trivial to prevent/find; maybe if you have a lot of experience with the language, a very nicely crafted code with the correct abstractions. But that's not always the case.

And preventing those kind of errors is only one part of what type systems bring."
1027,1508332121.00054,Marx,I see Clojure and Haskell as both valid but very different approaches to similar problems. My recommendation would be to learn both and then use the one that best fits the problem you’re working on and the “style” you’re most comfortable with.
1028,1508334568.000536,Beulah,"I'm reading some code which seems to be using `when` where `cond` would do - I thought `when` was for side-effects, am I missing something ?"
1028,1508334794.000175,Arlean,"<@Beulah> (when 1 2 3) =&gt; (if 1 (do 2 3)); so 2 would be side-effectful. if you don't have 2, might as well use (if 1 3)"
1028,1508334850.000553,Beulah,hmm I don't like using `if` with only 1 branch; `cond` is for that
1028,1508334938.00077,Arlean,"Coming from common lisp, i'd use `if`, but there is another level of parenthesis in common lisp's cond - `(cond (1 2))`, so perhaps I'm biased towards using `if`"
1028,1508335062.000472,Evan,`cond` is for multiple branches; it's the equivalent of other languages' `if ... else if .... else`
1028,1508335106.000078,Beulah,including one branch right ?
1028,1508335115.000299,Evan,"sure, but you can just use an `if` for that too"
1028,1508335148.000625,Beulah,say you had 2 branches - `if` or `cond` ?
1028,1508335187.000452,Evan,"if just an `if` and an `else` then `if`, otherwise `cond`"
1028,1508335209.000195,Beulah,but what are the trade-offs besides style ?
1028,1508335250.000383,Arlean,`(cond (&lt; x 5) 6 :else 7)` vs `(if (&lt; x 5) 6 7)` - less repetition in this case?
1028,1508335306.000053,Beulah,and what about `when` vs `cond` or `if` ? `when` is only for side-effects right ?
1028,1508335323.000008,Arlean,"when is only useful for side effects, since it has an implicit do"
1028,1508335331.000559,Beulah,thought so
1028,1508335374.000463,Evan,`when` is often more clear if there's only a single condition
1028,1508335408.000124,Beulah,eh maybe `if` with one branch isn't so bad...but whenever I read `if` I expect 2 branches
1028,1508335421.00069,Evan,indeed
1028,1508335458.000086,Beulah,"using `cond` seems to signal ""this is not a standard 2-branch `if`""; which helps me scan for single-branches"
1028,1508335490.000243,Kareen,`(cond (&lt; x 5) 6 :else 7)`
1028,1508335554.000159,Evan,`when` is often used to signal that there's only a single branch
1028,1508335558.000854,Kareen,"people sometimes use `when` even when side-effects are not used, to avoid single-branched ifs; it's a matter of preference; `cond` is just a generalization of nested `if`s; so `(if a b (if c d e))` becomes `(cond a b c d :else e)`; no need for repeating the first test with negation as in the snippet above; `:else` is just by convention, any truthy value will do"
1028,1508335820.000348,Arlean,":slightly_smiling_face: whoops, nice catch, thanks"
1028,1508335821.000617,Beulah,"i'd prefer not to use `when` in non-side-effecty cases, because it signals ""side-effect here"""
1028,1508335884.00007,Kareen,"not really, some people use it for that but `(when foo bar)` is a perfectably acceptable alternative to `(if foo bar)` or `(if foo bar nil)`"
1028,1508335899.000557,Beulah,only insofaras it works
1028,1508335920.000098,Kareen,"the docstring never argues that `when` should be used in side-effecty behaviour, some people have randomly decided that that's what its only use-case should be"
1028,1508335932.000397,Beulah,well they're wrong.
1028,1508335935.000782,Kareen,no
1028,1508335936.000523,Beulah,:slightly_smiling_face:
1028,1508335938.000013,Arlean,"Yeah, by 'useful for side effects', really I was saying it doesn't give you any more semantic power"
1028,1508335938.000131,Kareen,it's a matter of taste; it reads better; it's more explicit in the fact that the else branch will and should be nil
1028,1508335993.000734,Arlean,rather than parinfer ate your code :slightly_smiling_face:
1028,1508336015.000666,Kareen,arguing about personal preferences as if they were fact is not very useful IMO
1028,1508336060.000061,Beulah,wouldn't there be a small cost in speed ? (because of the implict `do`) ?
1028,1508336081.000269,Kareen,no
1028,1508336081.000283,Arlean,the compiler shouldn't add any overhead
1028,1508336089.000794,Beulah,ok
1028,1508336092.000286,Kareen,do have absolutely no bytecode overhead; it's just a synctactic operator
1028,1508336106.000559,Beulah,right
1028,1508336114.000492,Arlean,overhead is 2 bytes on your source file :slightly_smiling_face:
1028,1508336400.000019,Beulah,"ok the results are in: ```(use 'criterium.core)
=&gt; nil
(quick-bench (cond (== 1 2) 3))
Evaluation count : 194420304 in 6 samples of 32403384 calls.
             Execution time mean : 1.151155 ns
    Execution time std-deviation : 0.094268 ns
   Execution time lower quantile : 1.026327 ns ( 2.5%)
   Execution time upper quantile : 1.260197 ns (97.5%)
                   Overhead used : 2.091214 ns
=&gt; nil
(quick-bench (when (== 1 2) 3))
Evaluation count : 93839238 in 6 samples of 15639873 calls.
             Execution time mean : 4.354806 ns
    Execution time std-deviation : 0.199131 ns
   Execution time lower quantile : 4.087070 ns ( 2.5%)
   Execution time upper quantile : 4.584328 ns (97.5%)
                   Overhead used : 2.091214 ns
=&gt; nil
(quick-bench (if (== 1 2) 3))
Evaluation count : 94100316 in 6 samples of 15683386 calls.
             Execution time mean : 4.421143 ns
    Execution time std-deviation : 0.387452 ns
   Execution time lower quantile : 4.082193 ns ( 2.5%)
   Execution time upper quantile : 5.040878 ns (97.5%)
                   Overhead used : 2.091214 ns
```"
1028,1508336432.000283,Kareen,that's just random variations; the emitted bytecode is exactly the same in all 3 cases
1028,1508336464.000208,Beulah,probably...trying bench...
1028,1508336474.000218,Kareen,no need; just macroexpand; it makes no sense to benchmark this
1028,1508336662.000026,Beulah,ok yep same code
1029,1508336973.000701,Berry,"<https://github.com/apache/incubator-mxnet/blob/0.11.0/scala-package/core/src/main/scala/ml/dmlc/mxnet/Context.scala#L51> &lt;== how do I convert this from Scala to Clojure ?; it's a function which sets a ""dynamic context"" and then executes a body"
1028,1508337018.000606,Kareen,find how to invoke that from java; if it's just a regular `new Context(..).withScope(..)` then just do that in clojure `(.withScope body myContext)`
1029,1508337104.000424,Berry,"so when I try:
```
(let [ctx (Context/gpu 0)]
  (. ctx withScope
     (fn []
       20)))
```

I get this error:; 1. Unhandled java.lang.ClassCastException
   server.snip.mxnet$eval7691$fn__7692 cannot be cast to
   scala.Function0"
1028,1508337123.000175,Berry,"It seems like I need a wa to ""convert a clojure function to a scala function"""
1029,1508337130.000331,Kareen,¯\_(ツ)_/¯
1029,1508337145.000616,Arlean,looks like you can do it with a let
1028,1508337147.000077,Kareen,"again, find how to do that in java and then convert it to clojure"
1029,1508337155.000915,Arlean,without calling withScope directly; bash on Context with set!
1029,1508337181.000626,Kareen,clojure IFns implement Runnable and Callable
1028,1508337212.000353,Kareen,"or you can try using <https://github.com/t6/from-scala>, first google result for `scala clojure interop` ;); often asking google or the repl first is way faster than asking people here"
1028,1508337312.00024,Berry,"<@Kareen>: I'm aware of that project, but have been trying to bind this library 'from scratch' to understand what's going on."
1028,1508337345.000061,Kareen,"just study that library then; there's no magic solution, clojure and scala use different interfaces to represent their functions, you need to convert one to the other if you want to interop"
1028,1508337427.00034,Berry,"<@Kareen>: yeah, <https://github.com/t6/from-scala/blob/master/src/t6/from_scala/internal.clj#L369-L400> appears to be what I need; <@Kareen>: thanks for the tip
```
(let [ctx (Context/gpu 0)]
  (. ctx withScope
     (reify scala.Function0
       (apply [this]
         20))))
```
appears to have worked"
1030,1508341061.000108,Kimberely,"I’m trying to use tools.analyzer.jvm to `analyze+eval` each form in a seq of forms that I read with `tools.reader/read` and I get a `FileNotFoundException` because, I think, the `ns` macro is one of those forms and it’s requiring another namespace. If I switch to `analyze` instead of +eval then I get a `no such namespace` error I think because the ns aliases don’t exist since there was no eval. All I want is to parse the analyzed forms and pull out some :binding keys. Anyone know what I’m missing?"
1030,1508341624.000768,Kareen,"<@Kimberely> hi, your analysis of the problem is correct,  why aren't your ns dependencies on the classpath?"
1030,1508341640.000071,Kimberely,"so I’m writing a lein plugin; and testing it in my repl, so I’m wondering, if I run this `lein &lt;my plugin&gt;` on the project then the classpath with have the deps loaded right?"
1030,1508341708.000585,Kareen,"I have no idea how lein plug-ins work, sorry "
1030,1508341725.000277,Kimberely,no problem <@Kareen> but I will update here if I get it working. Thanks!
1030,1508342333.000848,Rebeca,"plugins run in the lein jvm, not the project jvm(they will sometimes inject things in to the project jvm)"
1030,1508342393.000122,Kimberely,thanks — I have to dive into that documentation
1031,1508344385.00068,Anneliese,how to execute procedure with out parameters with jdbc
1031,1508344700.000247,Cherlyn,I received this comment today `[code is not idiomatic because] it's using when for the return value instead of side-effects.`; Is it a faux-pas to use `when` for the return value? I used it to replace a single-branch `if`
1031,1508344742.000569,Willow,i think people were talking about that above; i think it's totally fine
1031,1508344815.000627,Cherlyn,"<@Willow> what a coincidence, I wonder if my feedback was inspired by that conversation :slightly_smiling_face:"
1031,1508344833.000142,Willow,hahah that would be a great circle.; is this the person code reviewing?
1031,1508344895.000556,Cherlyn,I just wondered that myself!; Don't think so though; <https://github.com/technomancy/leiningen/pull/2324>
1031,1508345593.000419,Evan,"<@Cherlyn> one thing to note is that there are plenty of places in clojure.core that use `when` that way, e.g.: ```(defn not-empty
  ""If coll is empty, returns nil, else coll""
  {:added ""1.0""
   :static true}
  [coll] (when (seq coll) coll))``` though, naturally, it's simply a matter of preference"
1032,1508345625.000005,Jodie,but the one true way (dictated by me) is to use `when` for side effects or not
1031,1508345705.000343,Jeremy,"there is apparently history to `when` usage coming from the lisp world too, which is at least worth considering: <https://lobste.rs/s/aqzj0f/robust_clojure_best_way_handle_nil#c_qejrpi>; I always find it hard to navigate this stuff in Clojure, as many users are _not_ coming from the lisp world, and Clojure itself is a mix of lisp and other languages in terms of influences"
1031,1508345819.000548,Willow,yeah. when project maintainer has a style that wins over any other argument; and consistent codebase &gt; arguments about local style
1031,1508345852.000128,Jodie,there's a few lisp idioms that aren't applied conventionally in clojure.
1031,1508346024.000463,Willow,i was thinking i would argue with boss / coworker. not with open source maintainer
1033,1508347514.000393,Daniell,I've never heard of decisions around `when` being tied to side-effects. <@Jodie> can you elaborate?
1033,1508347548.000004,Jodie,<@Daniell> I hadn't until just now in the above github pull request; <@Daniell> <@Jeremy> linked to <https://lobste.rs/s/aqzj0f/robust_clojure_best_way_handle_nil#c_qejrpi> which seems to suggest it's idiomatic lisp
1033,1508347619.000015,Daniell,_reading_
1033,1508347633.000717,Rebeca,"this common-lisp guy one time said on mailing list that when is for side-effects, and some clojure people thought it made sense (because of the implicit do in a when) and have been pushing it ever since"
1033,1508347703.000359,Jeremy,"yeah to be clear, I wasn’t trying to suggest any one thing is correct--I just thought it was a relevant bit of historical data. Personally I don’t think of `when` in this way, generally speaking."
1033,1508347709.000222,Rebeca,its why lein has code like <https://github.com/technomancy/leiningen/blob/52980074e8476725c97c5bea4e7f1c59c78ce147/src/leiningen/repl.clj#L36>; phil happens to be one of the pushers
1033,1508347747.000172,Jeremy,"yeah, in fact he was the one that brought it up in that thread--I just found the second explanation more clear"
1033,1508347754.000087,Daniell,<https://github.com/bbatsov/clojure-style-guide#when-instead-of-single-branch-if>
1033,1508347756.000372,Rebeca,(and it is silly and that should clearly be a when-let)
1033,1508347890.00031,Daniell,I'm fairly sure at least one of the linting tools complains about single branch `if` and suggests `when`.; (I thought it was Eastwood but I don't see it documented)
1033,1508347916.000692,Margaret,I think it’s kibit or bikeshed that does that
1033,1508347918.000752,Jodie,<@Daniell> kibit I think
1033,1508347926.000709,Rebeca,I had a pr on bbatsov's style guide several years ago to delete the whole thing and replace it with a bruce lee quote; <https://github.com/bbatsov/clojure-style-guide/pull/31/files>
1034,1508350157.000088,Ferdinand,<@Beulah> Tell that to Rich: <https://github.com/clojure/clojure/commit/95e04a8d55631a9e83f44f94a95a2ed527741faa#diff-ab81158458e8756a4dd92527cef9e9ecR348>; This has come up at the office before. This was how it was settled :slightly_smiling_face:
1034,1508351196.000235,Daniell,The perfect appeal-to-authority :slightly_smiling_face:
1034,1508351217.000484,Ferdinand,:smile:
1034,1508351239.000328,Sandy,perhaps proof that even logical fallacies aren't always to be avoided?
1034,1508351288.000703,Beulah,ok I'm convinced!; well not really
1034,1508351313.000445,Ferdinand,haha
1034,1508351332.000216,Beulah,i still don't see the point of using an implicit `do` if it's not needed
1034,1508351342.000207,Ferdinand,"Literal same thing happened w/ my coworker. He let it go, but maintains single branch `if` is better."
1034,1508351355.000774,Beulah,even if it costs nothing and compiles to the same as `if` or `cond`
1034,1508351356.000067,Sandy,"personally I dislike the dogmatic nature of ""X should only be used for Y"""
1034,1508351361.000587,Beulah,yes
1034,1508351406.000194,Ferdinand,My argument: it's a nicety that can be provided with basically no cost
1034,1508351409.000332,Sandy,"For me, it's about readability it's hard to hunt down the other expr in a single-legged if"
1034,1508351417.00052,Ferdinand,Now you _can_ use it for side effects.; I agree <@Sandy>.
1034,1508351466.000226,Sandy,"Code reading for me is a pattern matching thing. It's easier for me to match on `when` and know it returns a nil or a value. Vs a `if` which involves hunting down both legs of the branch to figure out what each one does. If I can't find the second leg, am I missing it? or does it not exist?"
1034,1508351509.000323,Daniell,It's all a bit of a ridiculous argument since you can have `(if some-expr (run-process a) (run-process b))` where `run-process` both has side effects and returns a value :slightly_smiling_face:; (consider `clojure.java.jdbc/insert!` which is very side-effect-y _and_ returns useful information)
1034,1508351570.000103,Beulah,when I see `if` i expect to see 2 branches too
1034,1508351590.000655,Ferdinand,Naw yeah. The whole thing is a colossal waste of time.
1034,1508351602.000273,Beulah,if there's one i get worried the other one was left out by mistake
1034,1508351610.000611,Ferdinand,"Doesn't change the fact that I'm right, and someone else is wrong."
1034,1508351612.000608,Daniell,"So, for me, because ""side effects"" is a red herring, I expect two branches for `if`, one branch for `when` (and it signals clearly that I can get `nil` back) and for `cond` I expect more than two branches."
1034,1508351720.000287,Willow,i love bbatsov's reaction to the PR to replace the whole style guide
1034,1508351727.0005,Daniell,"Besides, in real-world code you're also going to see stuff like `(if some-expr (do (side-effect-y a) (compute b)) (compute c))` -- again, the presence or absence of side-effects is a red herring here."
1034,1508351920.000004,Beulah,I propose a new conditional (name to be suggested) that's like `when` but without the implicit `do`
1034,1508352015.000286,Ferdinand,It's like watching a movie all over again. The exact. same. conversation.
1034,1508352296.000597,Sandy,but why? <@Beulah> it's exactly the same thing
1034,1508352406.000456,Rebeca,"fn's have an implicit do, you should only use them for side-effects yo"
1034,1508352723.00027,Beulah,<@Sandy> (joke!) - I'm persuaded; 3 ways to say the same thing; and no shades of meaning at all ?
1034,1508353621.000124,Monet,"With all the talk of AI/ML/TensorFlow/DeepLearning going on at Clojure/conj and the general observation that Python is ahead of the pack in terms of existing efforts, I was wondering if one approach that might leverage those efforts would be a Clojure hosted on Python. I see that <@Sandy> has done some efforts with <https://github.com/halgari/clojure-py-redux> and <https://github.com/halgari/clj-pypy>. What kind of effort would it take to get either of those (or a newer, better solution) rolling again or anew? I'd potentially be interested in taking it on depending on some of the factors (is there an interest, what woluld it take to get there, etc.).; Just exploring the idea for now, but wanting to get some thoughts from the experts."
1035,1508353851.00018,Sommer,"<@Monet> I heard a lot of talk about clj/python interop via different mechanisms, but this one is new to me. Mind blown."
1034,1508353869.000098,Margaret,"<@Monet> for what it’s worth both of those were superseded by pixie, which is no longer in active development - the second, like pixie, can’t use python directly, it only bootstraps via python’s vm generator; for using python in a clojure like language, the most mature and featureful thing is likely hy <https://github.com/hylang/hy>; it’s also the only active one I know of"
1034,1508354196.000132,Monet,"I'll have to check those out.; It seemed like there were some bring ""Python Libraries to Clojure"" thoughts in the conj talks (just from what I saw on the videos - Sadly, I wasn't able to attend) and I was just speculating to myself whether it'd be easier to do that or bring Clojure to Python."
1034,1508354509.000456,Sandy,"Hy is the way to go for now, but it's mostly sexprs for Python.; I'm currently working on reviving Clojure-py, but it's quite a few months out, and will be only from Python(and PyPy) 3. Supporting Python2 these days is just too much work.; Hy even has mutable closures like Python, which is a bit icky, but it may work for awhile."
1034,1508354665.000629,Daniell,There was mention of Grawl(?) at Conj as a possible way to run Clojure and Python in the same VM -- any experience reports on that?
1034,1508354681.000666,Ming,Graal; <http://www.oracle.com/technetwork/oracle-labs/program-languages/overview/index.html>
1034,1508354709.000364,Sandy,"That's a bit different, they're compiling the C VM to Java and then running that via Graal, it would work about as well as someone would expect (which is mostly, kindof, not really); Would have the same problems as PyPy: a lot of python libs depend on both reference counting and memory layouts of Python objects. PyPy breaks both of those, and Graal would probably break at least one."
1034,1508354791.000637,Monet,"Yeah, that was what I was referring to when I was thinking ""bringing Python to us,"" just couldn't remember the name."
1034,1508354863.000519,Ming,"I would love to be able to somehow magically get to CPython stuff from Clojure, geospatial stuff that wouldn’t work in PyPy.  But that seems quite difficult."
1034,1508355016.000722,Daniell,Searching for `graal python` is not very helpful :laughing:
1034,1508355041.000134,Ming,It’s a general problem well beyond just TensorFlow.  I’m sure there’s other cool Python stuff that would be awesome to somehow squish into Clojure.; <https://github.com/graalvm>; I’m not sure where the Python stuff is :neutral_face:
1034,1508355328.000196,Sandy,"<@Jess> has had some discussions with them, it seems the python interop stuff is yet to be fully designed; and sadly that's what kills most alternative python VMs"
1034,1508355367.000529,Daniell,"Oracle's page say they have Python running on Graal but I couldn't find any links to it publicly -- so maybe ""running"" is subjective at this point. On the subject of Tensorflow, I haven't yet watched the Conj video (which I assume will link to Guildsman) but a quick search did not find Guildsman so if someone has a link, that would save me a bit of time :slightly_smiling_face:"
1034,1508355385.000519,Sommer,I have it handy; <https://github.com/bpiel/guildsman>
1034,1508355400.00009,Sandy,"So the better view, IMO, is to bring Clojure to Python which is rather easier considering clojure is designed to be hosted from the start."
1034,1508355457.000664,Sommer,<@Sandy> would that just mean reviving your previous work linked above?
1034,1508355469.00059,Sandy,"more like rewriting, but yes :slightly_smiling_face:"
1034,1508355487.000567,Sommer,<@Daniell> Let me know if you have any questions. We've (not many of us) have been hanging out in <#C568QPDLH|tensorflow>
1034,1508355530.00022,Sandy,and making that work well involves working with Cython. that' part has recently gotten much nicer due to Cython adding support for Python type hinting.
1034,1508355816.000093,Sommer,<@Sandy> why cython?
1034,1508355942.000797,Sandy,"There are some performance critical bits in Clojure. Collections, protocols to name a few. What are the other options besides Cython or mandating PyPy?"
1034,1508356094.000685,Sommer,<@Sandy> I don't know much about that aspect of python (implementations and differences). I was just wondering.
1034,1508356267.000281,Daniell,Thanks Bill... I have absolutely no idea why I couldn't find it! I swear I even looked at your GitHub account. Must have needed more coffee!
1034,1508356395.000634,Sommer,<@Daniell> It definitely isn't showing up on google (yet?)
1034,1508356524.000459,Guillermo,"<@Daniell> the python stuff is included with the Graal OTN download, if I remember correctly.  That's how the TruffleJS is/was; <https://clojurians.slack.com/archives/C03S1KBA2/p1508354709000364>; it doesn't work like that...  moving to <#C16LEKSLT|other-languages>"
1034,1508357389.000573,Monet,<@Sandy> - Is there an existing JIRA/task list/etc. you have for the clojure-py-redux-redux effort? Or are you thinking of diving in yourself before soliciting help from the community at large?
1034,1508358601.000078,Sandy,"I'll move this to <#C16LEKSLT|other-languages> after this, but it's mostly the latter. There's a lot of foundational interop stuff I want to get done first before looking for porting help"
1036,1508370863.00018,Shira,"Bit late to the if/when debate, but there is also <https://github.com/jonase/kibit/issues/2>"
1036,1508372200.000256,Daniell,"I see Phil is quite the evangelist for that position -- running counter to many others in the Clojure community, including Rich :slightly_smiling_face:; (and that is from three years ago -- with no action taken in Kibit I believe? :slightly_smiling_face: )"
1036,1508372686.000201,Shira,More because of laziness than anything else :stuck_out_tongue:; and 5.5 years ago
1036,1508373234.000026,Shamika,"that Kibit warning is actually what introduced me to the notion that `when` might be preferable to an `if` with no _else_ clause, because the codebases I was working on *never* used `when`"
1036,1508373290.000163,Daniell,"Ah yes, the last comment -- yours -- came two years after the previous one!; Interesting. I'd always used `when` for a single branch, instead of `if`, and until today (yesterday?) I'd never heard the argument that there was any connection between `when` and side-effects.; Maybe I just followed the lead of the code in `clojure.core`?"
1037,1508376618.000311,Shamika,"I learned Clojure on a job where the prevailing style was a little different than what I’ve seen in the wild. Tools like Kibit, Eastwood, clj-format, etc. are very valuable for discovering “better” practices. I’ve learned a ton from static analysis tools in other langs too."
1038,1508386416.00014,Berry,"Question: How do I invoke a java method when I have it's hame as a clojure symbol ?

1. I have java class Foo

2. I do (:members (clojure.reflect/reflect Foo)) -- I get a list of members.

3. I do (:name (first (:members (clojure.reflect/reflect Foo))))) -- I now have the name of one of the functions, as a clojure symbol.

4. How do I invoke this?

5. Normally, I would do (.memberFunc Foo ... ) -- but right now, I have a var in clojure, whose value is memberFunc -- how do I invoke it ?"
1038,1508388140.000108,Randee,<@Berry> ^^
1036,1508389522.000132,Leonida,"G'day!  I've been trying to pull a text file from S3 using `clojure.core/slurp`, passing in a URL that contains a username &amp; password element (e.g. `<https://username:password@hostname.domain/path/to/file.txt>` ).  It looks like `slurp` drops the username and password though, as I'm getting back 401s.

Hitting the same URL from the command line (via `wget`) works fine, so it's not an issue with the URL.  Any pointers?"
1038,1508389618.000027,Berry,<@Randee>: that worked; thanks!
1036,1508390071.00019,Daine,"Very true in java also, hooking up some code analysis to my hobby project just got a higher priority."
1036,1508397713.000132,Virgil,"<@Leonida>: java problem :disappointed:; `slurp` seems to expand into code like; ```(.openStream (.toURL (java.net.URI. ""<https://username:passwd@hostname.domain/path/to/file.txt>"")))```; <https://stackoverflow.com/questions/496651/connecting-to-remote-url-which-requires-authentication-using-java>"
1039,1508399606.000066,Terra,<@Leonida> for anything more serious including authentication you should use something like <https://github.com/dakrone/clj-http>
1036,1508400062.000256,Virgil,"<#C0Y3CSPHQ|planck> will do this out of the box as well:; ```Planck 2.8.1
ClojureScript 1.9.946
    Docs: (doc function-name-here)
          (find-doc ""part-of-name-here"")
  Source: (source function-name-here)
    Exit: Control+D or :cljs/quit or exit or quit
 Results: Stored in vars *1, *2, *3, an exception in *e

cljs.user=&gt; (require '[planck.core :refer [slurp]])
nil
cljs.user=&gt; (slurp ""<https://username:password@hostname.domain/path/to/file.txt>"")```"
1040,1508406572.000442,Anika,Is there a way I can connect to a running JAR. Is socket server repl the way to do it? I want to run a JAR and then connect to it using a REPL and then be able to redefine some function or debug something in the function
1041,1508407608.000181,Francene,"Hi, some one know good stack for work with reactive (choreography) architecture in clojure?"
1042,1508410392.000349,Fe,"<@Delisa>29, yes the socket server is built for that. Also check out <https://github.com/Unrepl/unravel>"
1040,1508412184.00002,Anika,<@Fe> Thanks :thumbsup:
1043,1508415403.000161,Jutta,`(merge (when x {:x x}) (when x {:y y}))` isnt idiomaic?
1043,1508415459.000015,Jodie,"I do it. But some people advocate that it isn't. I think they're wrong, clojure.core uses this style."
1044,1508418438.000124,Berry,"this is a sanity check, as something is not working as expected:
(.field-name SomeClass)

should also work if field-name is a field name of a Superclass of Someclass right ?"
1044,1508418611.000404,Kareen,"yes; if it's public, that is; and if SomeClass is actually some-class-instance; otherwise for static field use SomeClass/field instead"
1044,1508418694.00022,Olen,Is there any company owner here ? Company that is using clojure for production ?
1044,1508418911.000395,Danyel,yes
1045,1508419283.000459,Olen,"What is your company aiming ? Web, Mobile or ?"
1045,1508420079.000108,Corazon,how would you run clojure app with nginx ? (proxy_pass and supervisor)
1045,1508420530.000507,Danyel,Mostly web
1045,1508420707.000651,Leonida,"Thanks.  Yeah I’m well aware of clj-http (I use it elsewhere), but in this case preferred slurp’s flexibility around supporting local file paths or URLs."
1044,1508420856.000523,Danyel,same as Java I guess? There must be a lot of material for Java out there
1045,1508420882.000235,Gisele,"<@Berry> <@Randee> Hmm, so `Reflector` is bad... Alright, there you go
```
(let [s ""String""
      m 'getBytes]
  (eval `(. ~s ~m)))
```
:sob:"
1044,1508420920.000048,Leonida,"Sigh. Java can be so lame at times. Given some of the simple solutions described there, that don’t add new dependencies, is it worth submitting a patch for slurp?"
1045,1508420971.000023,Berry,"<@Gisele>: I don't have the names upfront, I have to query the JVM to get the names :slightly_smiling_face: // I guess this can be done at macro expansion time, but I'd prefer to avoid amcros if possible."
1044,1508421076.000324,Kareen,<@Gisele> why would you do that
1045,1508421110.000096,Gisele,<@Berry> You definitely want to avoid macros there... I should have put more :sob: 's at the end!
1044,1508421120.000708,Kareen,"using reflection is a much better solution if you actually need this, which you shouldn't"
1044,1508421502.000392,Gisele,:smiling_imp:
1044,1508421546.000549,Olen,"Can you tell me about your expriences ? I think, I am going to create my own company. In four weeks. But I am scared. I have strong abstract background. But less practice."
1046,1508422872.000368,Corazon,"ok, cool"
1046,1508423283.000454,Berry,"```

(r/reflect Stream$StreamCanBuildFrom)

{:bases #{scala.collection.generic.GenTraversableFactory$GenericCanBuildFrom}, :flags #{:public}, :members #{#clojure.reflect.Constructor{:name scala.collection.immutable.Stream$StreamCanBuildFrom, :declaring-class scala.collection.immutable.Stream$StreamCanBuildFrom, :parameter-types [], :exception-types [], :flags #{:public}}}}

```

How do I call the constructor on the above? Please give me the exact line, as I have been getting errors."
1046,1508423950.00049,Sandy,"<@Berry> don't think you're going to get a good answer to that. Scala mucks with Java types a *lot*. Probably better to write this interop code in Java, or to call Clojure from Scala.; The latter probably being the cleanest way. Clojure's java API is much cleaner than Scala's"
1046,1508424174.000086,Brunilda,"What’s the best way to get Rails-style db migrations in clojure?; I’m starting a new Luminus project this morning, it comes with a lot of great stuff out of the box but I don’t want to write all my `CREATE TABLE` statements by hand"
1046,1508424233.000172,Marx,"Luminus uses migratus, I believe; but I don’t think it reverse-engineers your db/model for you"
1046,1508424410.000532,Sandy,Don’t be afraid of writing them by hand. Less can go wrong if you do semi manual dB management
1046,1508424436.00037,Brunilda,"right, migratus doesn’t quite have what I want. It will generate an empty `.up.sql` and `.down.sql` for me but doesn’t have a dsl for column definitions etc."
1046,1508424439.00042,Sandy,"Auto migrators always do something wrong it seems; Best system I've had with devs and DBAs is one where you have a base DB via a .sql text file, then incremental changes via commented .sql files, all named via a incrementing number."
1046,1508424557.000077,Danyel,"<@Olen> well the question is a bit vague :slightly_smiling_face: are you afraid of starting a company, or just of choosing Clojure for it?"
1046,1508424562.000181,Sandy,Kindof like git for a DB.
1046,1508424800.000216,Shameka,"there's also ragtime &amp; joplin  <@Brunilda>, but they don't have column def dsls either - but then they aren't tied to sql stores either, so column def dsls don't make much sense in their context"
1046,1508424876.000881,Marx,"I always cheat: use a GUI SQL tool to lay out my db schema, then select “Copy CREATE TABLE Script…” or whatever."
1046,1508424903.00032,Sandy,"DB diffing tools are also really nice for that; MS SQL had a ""export diff as script"" that was super helpful"
1046,1508424946.000882,Marx,Also console logs that capture your changes real-time as you edit columns/tables in the GUI.
1046,1508424996.000118,Willow,"and if you're working with MS SQL in production, the red gate tools are worthwhile. for data diffing and schema diffing"
1046,1508424998.000004,Olen,Clojure is unique. But I can choose a lot of platform and technologies for my company. Quick answer is: I am not sure what I’ll be faced with clojure ? It’s a rabbit hole. I think I need real world expriences for that choice. What is your opinion ? What are your expriences ?
1046,1508425000.000239,Sandy,"The big thing is at some point you need to take the changes to prod, and as a former DBA I really really hate using tools for that. So much can go wrong."
1046,1508425007.000387,Brunilda,I guess I’m surprised the clj community hasn’t come up with a lib that matches what you get from rails or django
1046,1508425036.000181,Sandy,"I'd more say that some of us consider what those frameworks do to be ""the wrong way"" :slightly_smiling_face:"
1046,1508425080.000467,Marx,Though there are projects like <http://sqlkorma.com|sqlkorma.com>; though I prefer HugSQL myself.
1046,1508425133.000286,Brunilda,"I was looking at Korma, and it doesn’t have ddl"
1046,1508425148.000108,Sandy,"Dropping a bunch of indicies and FKs and then re-adding them may be fine for smaller databases, but I've seen SQL servers crash on stuff like that when you get 100M+ rows in a table. In those places you need surgical edits that are sympathetic to the underlying server design."
1046,1508425154.000008,Brunilda,"so even if I wanted to add it (not sure if I want an ORM), I couldn’t use it in the migrations anyway"
1046,1508425162.000477,Fe,I've used this homegrown minimalist migration framework: <https://gist.github.com/pesterhazy/9f7c0a7a9edd002759779c1732e0ac43>; PostgreSQL only ^^
1046,1508425251.000667,Sandy,"Yeah, as far as the ORM stuff goes HugSQL is pretty awesome. SQL is a powerful tool, leverage it don't hide it behind a DSL. And no need for a ORM when you have hashmaps; (what was that thing from Rich's talk? ORM = OMG :stuck_out_tongue: )"
1046,1508425291.000265,Brunilda,<@Fe> Not quite what I’m looking for - I want to write my migrations in clj code and not write any sql; <@Sandy> but I’m lazyyyy
1046,1508425335.000578,Fe,<@Brunilda> honestly I'd reconsider the approach - SQL is the root DSL for this
1046,1508425346.000188,Efrain,<@Brunilda> <https://github.com/jkk/honeysql> check out HoneySQL
1046,1508425347.000565,Danyel,"Migrating to Clojure was a tremendous success for us, after migrating to it from Node.js we gained huge and predictable productivity and quality, resulting in much more focus on business and a competitivity advantage. Some of our customers once told us ""wow, you guys must gave at least 12 developers"", when there was only 2 of us."
1046,1508425361.000755,Brunilda,All I want is a cheeseburger and you guys keep handing me broccoli
1046,1508425367.000181,Sandy,"But SQL gives you power :slightly_smiling_face: the more you understand your datastore the more you can leverage.; Sorry, we want you to be healthy :stuck_out_tongue:"
1046,1508425377.000283,Fe,writing code in a db-independent fashion is ultimately a fool's errant
1046,1508425397.000718,Mallie,We're using honeySQL :heart:
1046,1508425403.000248,Danyel,"<@Olen> For us, most of the benefits came from REPL based development, access to Datomic, and general expressivity of the language."
1046,1508425442.000829,Fe,"""we want to be able to switch out the db"" is understandable but usually overengineering"
1046,1508425448.000576,Shameka,honeySQL is nice when you want to generate queries from data... though there were some limitations when i last tried it
1046,1508425452.000315,Brunilda,<https://github.com/jkk/honeysql#todo> :upside_down_face:
1046,1508425578.000862,Shameka,"i've never worked on a bigger-than-trivial project which didn't come to depend on particular features of the underlying db, making switching out the db an arduous task"
1046,1508425628.000676,Danyel,"One thing I have not experienced yet is hiring, but I take it as a good sign, as I have not needed to hire at all. Most  of the feedback I got from more experienced Clojure CTOs was that the hiring situation is pretty good, as you don't need to hire a lot of people, the candidates you get tend to be skilled, and Clojure provides a good argument for retention. So I would not worry too much about that.; I don't think that Clojure is the best choice for any startup though. Here are some ideas to help you decide:"
1046,1508425718.000412,Olen,"Omg. So cool. But. What about hiring ? I am living in Turkey and I think, I’ll be all alone for a long time. Maybe a few small projects. Just waiting and lookin for clojure developer. And also, what about your library selections ? Your company relay on community based libraries, right ?"
1046,1508425741.000028,Danyel,"1. Clojure shines for making custom solutions, not for following conventions. Only use Clojure if you have enough 'architectural initiative'."
1046,1508425763.000065,Efrain,")) I never scroll to this section ) thуn, sorry for noise )"
1046,1508425790.00077,Danyel,"<@Olen> see my previous comment. Also, don't count on hiring experienced Clojure, just plan on teaching them on the job. It will be fine, Clojure is easy to learn."
1046,1508425823.000499,Brunilda,"Alright, I guess broccoli it is :upside_down_face:"
1046,1508425871.000532,Verna,"In our project, we are using HugSQL. It’s a library to generate clojure functions from raw sql queries."
1046,1508425873.000095,Danyel,"2. The more difficult the technical problems you solve, the more likely Clojure is to be relevant. (Modern web apps with non-trivial UX count as hard problems)"
1046,1508425939.00041,Verna,"With yesql and its analogies, you may face a situation when you need some extra syntax that was not designed to be used with data structures.; Say, Postgres carries lots of stuff you cannot express with vectors/maps"
1046,1508426018.000027,Kristy,"- embed JRuby
- use Rails migrations
- profit!

:troll:"
1046,1508426133.000419,Danyel,"Re libraries, mostly Datomic, http-kit, Ring, compojure, prismatic/schema, manifold, and scope-capture for tooling (disclaimer: I'm the author of that last one). If I had to start over though, I'd probably change to use Yada, Aleph, and Lacinia.; maybe <@Delana> or <@Stanford> will want to pitch in :slightly_smiling_face:"
1047,1508428065.000164,Olen,Thank you. I am waiting thier opinions. :blush:
1047,1508428207.000188,Merrie,"what is the default method/library for solving systems of equations or sets of constraints?; I have several dimensions: some are defined scalars, some are defined ranges, and I need to solve for possible (say int ranges) combinations of undefined dimensions."
1047,1508428412.000627,Delana,"what val said :slightly_smiling_face: <https://www.infoq.com/presentations/Clojure-powered-Startups> is relevant for you, <@Olen>. it’s 5 years old, and (like much of Clojure that’s 5 years old) _totally_ relevant."
1047,1508428478.000029,Merrie,"it is sort of knapsack problem, but I don't need to solve for the most optimal values; rather I'd like to get range of viable solutions; core.logic somehow feels overkill, can't explain why :opieop:; datomic's or datascript's datalog?"
1047,1508429067.000662,Danyel,<@Merrie> I'd go for core.logic; or maybe loco <https://github.com/aengelberg/loco>
1047,1508429266.000752,Merrie,"loco looks easy; oh noes, it is 2 years stale, looks like it is abandonware! :kappa:; [off topic] given that we are in lisp, why libs such as `loco` introduce their own symbols rather then reusing clojure's `or`, `and`, `let`, `range`, etc?; loco - clojure only :("
1047,1508429937.000301,Willow,its wraps a java constraint solver
1047,1508429987.00058,Merrie,"yeah, I see that, thanks, <@Willow> 
should have mentioned I need it to run on clients too"
1047,1508430001.000139,Willow,sorry. i didn't mean to point out the obvious :slightly_smiling_face:
1047,1508430259.000323,Sandy,"It's a pain to code that way, you have to remove the syms from the namespace via :exclude, and then quote everything `clj/and`. It's not hard, but it is a pain."
1047,1508430309.000014,Danyel,or maybe it's just stable. A lot of Clojure libs that work fine don't get a lot of new contributions because they're simple and don't have a lot of bugs.
1047,1508430567.000531,Merrie,"I was thinking about quoting entire expression, and butcher it with macros under the hood.; ```
(def model
  [($in :x 1 6)
   ($in :y 3 7)
   ($= ($+ :x :y) 10)])

=&gt; (solutions model)
```
would become something like
```
(def model
  '(let [x (range 1 6)
         y (range 3 7)]
     (= (+ x y) 10)))```"
1048,1508430845.000503,Merrie,"that's why "":kappa:"" is there :)"
1049,1508432450.00025,Alix,Anybody know of a clojure library for manipulating jar files?; Anybody know of a clojure library for making custom jar files?
1047,1508432518.000464,Merrie,"is there anything builtin for updating values across entire map?
```(update-vals {:a 1 :b 2} (partial + 3)) ;;=&gt; {:a 4, :b 5}```"
1047,1508432581.000199,Daniell,<@Merrie> I bet Specter offers something...
1049,1508432620.000239,Daniell,...otherwise I'd probably do `(reduce-kv (fn [m k v] (assoc m k (+ 3 v))) {} {:a 1 :b 2})`
1049,1508432626.000124,Merrie,"I did it with reduce-kv, but feels like I can compose something existing"
1049,1508432733.000036,Daniell,"I can think of a way with `zipmap`, `juxt`, and `map` but I think `reduce-kv` is much cleaner... :slightly_smiling_face:"
1049,1508432804.000574,Jodie,"<@Merrie> `map-vals` is in most utility libraries. My go-to one for this is medley, which is very light."
1049,1508432821.000321,Kimberely,anyone else encountered broken leiningen plugins with 2.8 release? Eastwood and bikeshed fail for me now
1049,1508433011.000018,Myles,"yep, this is a known issue <https://github.com/technomancy/leiningen/issues/2328>"
1049,1508433075.000243,Merrie,<@Daniell> agree. <@Jodie> thanks
1047,1508433122.000328,Noella,<@Merrie> Specter solution: `(transform MAP-VALS (partial + 3) m)`
1047,1508433304.000299,Merrie,<@Noella> for some reason I am still caution of using specter
1049,1508433427.000076,Noella,"don’t be, it’s a great library! :smile:; at least give a try and see if it works for you :slightly_smiling_face:"
1049,1508433485.000275,Merrie,"I think it tends to be sort of all or nothing: either you use it all over the place, or don't use it at all"
1049,1508433568.000627,Noella,"yeah, it’s no fun to add a dependency just to use it in one place; but you tend to see use-cases for specter that aren’t obvious at first when you start using it"
1049,1508434129.000189,Sonny,that’s built into the JDK: <http://docs.oracle.com/javase/8/docs/api/java/util/jar/package-frame.html>
1050,1508435305.000271,Olen,"These are gold informations for me. So do you guys have anything to tell me under any other topics ? Like Dev-Ops, Design Patterns ?; I have books but I really value your expriences."
1051,1508437955.000542,Kathie,i kinda wish there was a more concise way of merging two maps in clj; something like JS's spread operator
1051,1508438116.000771,Margaret,<@Kathie> what kind of merge do you want?; I’m lacking imagination and have no idea how spread would help you merge maps
1051,1508438344.000496,Kathie,"so instead of something like this
```
(merge props
       {:key1 somethign
        :key2 something-else})```
you'd have
```
{:key1 something
 :key2 something-else
 #...props}```"
1051,1508438358.000286,Margaret,assoc
1051,1508438360.000252,Kathie,which isn't that much more concise heh
1051,1508438380.000233,Margaret,(assoc props :key1 somethign :key2 somthing-else)
1051,1508438425.000376,Kathie,right; my main issue i think is just the extra indentation of having the `(merge)` or `(assoc)` call; which becomes an issue when writing hiccup code
1051,1508438474.000086,Margaret,"```(assoc
 props
 :thing1 something
 :thing2 something-else)```"
1051,1508438484.000279,Daniell,I still can't get over the (ugly) upper case names :sob:
1051,1508438529.000443,Margaret,any decent editor should indent like that as long as the first arg is on the next line
1051,1508438543.000079,Kathie,"yea i guess that'd be fine, just the extra line because you have the assoc call; it's a pretty silly thing for me to want tbh; but that kinda spread operator would make the code ever so slightly more concise"
1051,1508438632.000718,Margaret,"could it be a macro or reader literal instead of an operator?; `#spread[props :thing1 somethign :thing2 something2]`; can’t use {} because of reader rules, but it looks decent"
1051,1508438713.000232,Guillermo,this is a bizarre question
1051,1508438714.000041,Margaret,you could even name it `#…` if you really want to; <@Guillermo> it seems like a syntax request to me really
1051,1508438746.000407,Guillermo,yup: why send syntax in to do a function call's job?
1051,1508438767.000328,Kathie,heh yea  `#_` could be cool
1051,1508438775.000317,Willow,`#{:reasons}`
1051,1508438821.000278,Margaret,<@Kathie> or just `(def … assoc)` and call it a day?
1051,1508438830.00066,Willow,`(set (vector :i-can-understand))`
1051,1508438864.000536,Margaret,"oh, reader macros mean you can define that but not call it directly, too bad"
1052,1508443413.000677,Larissa,anyone experienced using kafka? I’m setting it up and wondering what the experience is using java APIs vs wrappers like franzy <https://github.com/ymilky/franzy>
1052,1508443573.000407,Margaret,"I have had decent luck with a very thin clj-kafka wrapper for the basics plus raw interop whenever I need a non-default option, YMMV"
1051,1508446367.000288,Willow,PSA: don't shadow core functions with variable names. especially `meta`
1053,1508446518.000042,Margaret,"haha, those bugs are fun"
1053,1508446567.000162,Ava,still bitter about using a library whose api was implemented in terms of proxy and thus shadowed my `this` in method definitions
1051,1508452163.000006,Sonny,I think that is the only anaphoric macro in core :)
1051,1508473244.000105,Ava,"<@Sonny> I've seen that elsewhere (on HN or Reddit, perhaps from you?) and it only bit me because I didn't realize that metrics-clojure macros (codahale metrics wrapper) has a `time!` that proxies java.util.concurrent.Callable; actually, looking at the code in question right now, I can't see a reason to not write a PR using reify"
1051,1508475003.000178,Rebeca,fns are Callable; (no need to reify or proxy anything)
1054,1508479175.000028,Laurette,"```
user=&gt; (= Double/NaN Double/NaN)
false
user=&gt; (def a Double/NaN)
#'user/a
user=&gt; (def b a)
#'user/b
user=&gt; (= a b)
true
```
Is this the correct behaviour, ie that `=` compares identity instead of value?"
1055,1508480149.000078,Randee,"<@Laurette> Always use `==` for number comparison.; 1. Why this is happening: `=` first checks for `identical?` and gives true if it's the same object.
2. The top level `def` converts the *Primitive* `Double/NaN` to an object. You could avoid that by using `^:const` on the var.; Fun fact:; Here it's false, since the local binding `a` is a primitive and Clojure will properly call `clojure.lang.Util.equiv(double, double)` which returns `false` for the primitives. As expected."
1055,1508480477.000072,Anika,"Sorry if it has been a repetitive question what are the benefits of namespaced keys ? I get that one namespace might modify other namespace keys so is it only useful for cases where we use refs as in <https://stackoverflow.com/a/2482098/2610955> ? Is it used just to have different keys separated by namespace to avoid collision?; I also see it is recommended a lot in spec. The docs say 
&gt; The use of namespaces ensures that we can define reusable non-conflicting specs across libraries or applications.
Any example of the same will be helpful and why we need to have same key names separated by namespace since by definition a map must have unique keys."
1055,1508483630.000162,Laurette,<@Randee> Thanks for the explanation. Why is a converted to two different objects? Is it a kind of “lazy” object creation?
1055,1508484022.000195,Randee,"<@Laurette> Sorry that was wrong what I said, I'll edit it. Correct is: `(let [a Double/NaN) (identical? a a))` is false since `identical` is only defined for `Object` so they get boxed by `clojure.lang.Number.num()` to two different objects and returns false. However for `(let [a Double/NaN] (= a a))` it's false since the inline version `=` is `clojure.lang.Util/equiv` which is defined for the signature `double, double` and returns false since the two primitves are not equal.; The thing with using `def` is that it'll always be an `Object` unless you `^:const` it."
1055,1508484390.000223,Laurette,"<@Randee> Yes, that makes sense. And as expected, this also returns `true`:
```
user=&gt; (let [a [Double/NaN]] (= a a))
true
```; I guess I would have to implement my own `=` for collections with numbers to get the above to return false"
1055,1508484749.000153,Randee,"<@Laurette> Yeah, i'm pretty sure all the equal fns/methods will first check for `identical`"
1055,1508484764.000265,Laurette,yeah
1055,1508485078.000247,Terra,"<@Randee> <@Laurette> don't use `==` unless you understand the consequences.
Most of the time, `=` is the right thing to use:
```
user=&gt; (= 17 17.0)
false
user=&gt; (== 17 17.0)
true
user=&gt; (== 17 17.0000000000000001)
true
```"
1055,1508485124.000111,Randee,Good point!
1055,1508485231.000187,Laurette,"<@Terra> Thanks for the example, didn’t know that!"
1055,1508485351.000345,Danyel,"I've found ""Web Development with Clojure"" to be very instructive for practical matters, although I disagree with the author about several technological choices."
1056,1508488280.000412,Danyel,Ah sorry didnt get that :)
1056,1508488465.0002,Francene,Somebody use clojure with vert.x?
1056,1508488520.000257,Jackeline,"curious on why would you want that, since clojure has a fair amount of very good tools to handle concurrency on its own"
1056,1508488665.000322,Francene,"<@Jackeline> not for concurrency, but for use event bus.I can't find event bus, or somthing like this in clojure. Are you develop react architecture (microservices + event etc)?"
1056,1508488895.000023,Jackeline,"I suggest you take a look at <https://github.com/Yuppiechef/cqrs-server>, might be a good start; <http://yuppiechef.github.io/cqrs-server/>"
1056,1508489247.000131,Francene,"hmm, maybe. I've interesting how implement are choreography patter in microservices. Point `Lower coupling because of choreography`
<https://specify.io/concepts/microservices>"
1057,1508499096.000095,Lily,"how do I write this java statement in clojure
```
ImmutableList.of(""--log=fatal"")
```
where the class ImmutableList is imported from `com.google.common.collect.ImmutableList`"
1056,1508499788.000201,Jonnie,"Something like
```
(import '[com.google.common.collect ImmutableList])
(ImmutableList/of ""--log=fatal"")
```"
1056,1508499792.00019,Efrain,"`(ImmutableList/of ""--log=fatal"")`
if you have import in ns"
1057,1508499900.000283,Lily,"thanks <@Efrain> and <@Jonnie>, that was simple. I thought I had to instanciate the class before useing methods."
1056,1508499916.000154,Jonnie,this is a static method so you don’t have to
1056,1508499963.000148,Lily,"ah ok, I learned clojure before any object oriented language, so I get confused of basic oo stuff."
1056,1508500572.00021,Jonnie,"Otherwise it would have looked like 
```
(.of (ImmutableList.) ""--log=fatal"")
```"
1056,1508500601.000049,Sonny,That's not the right inference. = compares values but checks for identity as a shortcut special case. This is the rare case where you're seeing an object that is identical but not equals. (I think function instances also fall into this category). In some sense I'd say these examples show that the assumption of identical means equal is wrong.
1056,1508500729.000166,Lily,"I tried that one too, it fails `CompilerException java.lang.IllegalArgumentException: No matching ctor found for class com.google.common.collect.ImmutableList`; ah otherwise as in non-static method, sorry"
1058,1508502750.000066,Grisel,"hi, im using `[com.google.firebase/firebase-admin ""5.3.1""]` and doing uberjar I get an error. When using gradle in java project that same error can be fixed adding `apply plugin: 'com.google.gms.google-services' `. Can I do something similar in project.clj?"
1059,1508503633.000041,Deneen,"I'm trying to define a handler that for all methods and paths responds with http-ok:
```
(def web-handler 
  (-&gt; (compojure/routes
       (ANY ""*"" _ {:status 200})
       (route/not-found ""Page not found""))))
```
but the path matching seems to work only for <http://domain/foo> and not <http://domain/foo/bar> ?"
1059,1508503964.000203,Lily,"<@Deneen> another ""\*/\*"" ?"
1059,1508504147.000176,Adele,"I'm not sure, but try `""/*""` instead of `""*""`"
1059,1508504531.000201,Deneen,"I think ""/*"" is equivalent to what I have - the problem is it's a ring handler for a figwheel build, and trying = restarting build. Not the REPL but still slow."
1059,1508504788.000062,Lily,"<@Deneen> this is how my figwheel handler looks like, always fetches index.html
```
(defroutes main-routes
  (route/files ""/"" {:root ""public""})
  (route/resources ""/"")
  (GET ""<http://localhost>*"" []  (resource-response ""index.html"" {:root ""public""}))
  (route/not-found ""404 Page not found!""))
```"
1059,1508505912.000388,Deneen,"no luck, well whatever I guess, it's just a dev server, important thing is in production they are resolved"
1059,1508506031.000086,Fe,"<@Deneen> it should work: <https://github.com/mhuebert/figwheel-pushstate-server/blob/master/src/figwheel_server/core.clj#L12>; <@Deneen> actually I use this `(c/ANY ""/:path{app($|/.*)}"" [path] ...)` to match `/app` and `/app/bla/blubb` but not `/apple`; check @muebert's repo though for a more complete example - maybe your issue is with something else in the clj file"
1059,1508506328.000121,Deneen,"this could work, it's exactly for this use case, pushstate URLs :slightly_smiling_face:"
1059,1508506376.000396,Fe,yeah everyone runs into that; maybe figwheel would accept a patch?
1059,1508507200.000176,Berry,<http://2017.clojure-conj.org/datomic-in-cloud/> &lt;-- is this available yet ?
1059,1508507226.000674,Weston,"nope; ""q4 2017"""
1059,1508507280.000453,Berry,I don't see that on the webpage -- is this from the talk ?
1060,1508507483.000121,Weston,yep
1061,1508515209.000795,Daniell,"Namespace-qualifiers let you ensure that keywords are globally unique. Suppose you have an person name and a car name in different parts of your application -- rather than calling them both `:name`, you would call them `:person/name` and `:car/name` so that you can tell what type of name you have in any given map. `clojure.spec` has made namespace-qualified keywords more visible but they've always been good practice. Spec also lets you handle unqualified keys in maps while using qualified names in order to keep the specs separate.; Nothing to do with refs, despite that StackOverflow example."
1060,1508521607.000212,Olen,"Me too. OMG. I am sure you have another opinions about that book. Also I have. But I agree with you.; What are the most valueable libraries in this very moment ? What do you think guys ? What is your companies’ selection on every type (Db, Auth, etc…); Every words you will said, really important for me. Thank you guys."
1062,1508529376.000338,Jeanmarie,hi all; hows everything
1062,1508530338.000089,Shamika,weather’s nice
1062,1508530513.000372,Jeanmarie,<@Shamika> where you located
1062,1508532872.000032,Daniell,(there's an <#C03RZGPG3|off-topic> channel for non-Clojure chit-chat BTW) /cc <@Jeanmarie> <@Shamika>
1062,1508532923.000052,Jeanmarie,<@Daniell> that’s where the conversation continued
1063,1508541488.000247,Ayesha,"Question here, not like HTTP REST where you return a specific HTTP status for a specific condition, there's no definite rule for error handling in Websocket right? I could just return a map like `{:error :conflict}` to indicate there's a db conflict."
1064,1508551973.000092,Shavonda,"Interesting note is that in CL I believe they suggest using `when` for situations where the body has side effects, preferring an `if` that returns a value in the else case.; explicit &gt; implicit rides again ; Though I suppose you could make the argument they’re equivalently implicit and tribal"
1065,1508565770.000041,Catharine,"i'm trying to find a library that provides some higher-level constructs on top of `core.test` that allows me to work with collections. a bit like midje's utilities, but without midje and preferably macro-free.

is there anything like that out there ?"
1065,1508568922.00001,Jodie,<@Catharine> expectations has some things that sound like what you're after.
1065,1508568944.000037,Catharine,"<@Jodie> thanks, let me check!"
1065,1508568965.000059,Jodie,There's also <https://github.com/metosin/testit> which I found a little while ago
1065,1508568985.000046,Catharine,expectations is exactly what i'm looking for!; thanks :slightly_smiling_face:; so many things in there i didn't even know i needed
1066,1508594509.000097,Olen,<@Delana> 
1066,1508595160.00001,Danyel,"<@Olen> there's no generic good answer for this question; some libraries are more conventional (luminus, pedestal), some are more «cutting-edge» (lacinia, yada, fulcro, duct, spec...). We cant help without more knowledge of your use case. Get some inspiration by installing project templates (luminus, chesnut, ...); be careful about maintaining a productive workflow (REPL-friendliness) and testability when architecting your project."
1066,1508597527.000074,Delana,"<@Olen> what val said. also, there is no substitute for experience :wink:"
1066,1508597562.000031,Olen,Can you suggest me any production cycling guide or book ? <@Danyel> 
1066,1508597719.00001,Danyel,"Haven't read it, but I guess Applied Clojure was written for this very purpose.; And like Robert said, get your hands dirty right away. For instance, write yourself a little app (e-comme site, twitter clone, ...) to gain some experience."
1067,1508604231.000061,Corazon,"Any advice on setting different profiles, debug logging profile and production environement profile in project.clj"
1066,1508604975.000032,Danyel,Project templates are good for learning this sort of stuff
1067,1508605218.000072,Corazon,"Ok, great; Could clojure work with postgres pgbouncer connection pool?"
1067,1508605407.000048,Danuta,"I don’t see why not, it speaks the pg binary protocol?"
1067,1508605419.000055,Corazon,Sweet
1067,1508605419.000068,Danuta,if the JDBC driver works
1067,1508605493.000125,Corazon,"Could a clojure app if written optimally and with right hardware handle 100,000 requests per second?"
1067,1508605505.00006,Margaret,"ideally project.clj should have no effect on production (aside from how it gets compiled); it's much more reliable (and better performing...) to create an uberjar for production and run that via java; when you do that project.clj has no effect at runtime, it just decides how things are compiled"
1067,1508605597.00001,Danuta,what’s a “request” in this context?
1067,1508605610.000042,Corazon,"How would you separate the two, cause i still need to catch errors in dev; api json type"
1067,1508605658.000006,Danuta,"that’s a pretty vague description, “right hardware” can mean anything from a single machine to a whole datacenter :slightly_smiling_face:"
1067,1508605689.000021,Corazon,"ok, one machine in this case, with raid10 12 core xeon and ssd drive"
1067,1508605704.000001,Margaret,"project.clj can provide development time configuration, and your choice is either to make the default behavior when config is missing be appropriate for production, or give the production config via the command line or server environment"
1067,1508605706.000017,Corazon,"scratch raid10, just ssd drive"
1067,1508605731.000115,Danuta,"this isn’t specifically about 100k requests per second, but relevant to http api <http://www.http-kit.org/600k-concurrent-connection-http-kit.html>"
1067,1508605778.00004,Corazon,"Ok, cool. I was wondering of tcp socket limit that a server can have, from reading. the ephemeral port range on linux server is 28000; Wondering if socket or network layer would be the bottleneck"
1067,1508605849.000023,Margaret,"I'd suspect that no garbage collected language, clojure included, can do anything interesting at a reliable 100k per second requests"
1067,1508605876.000114,Corazon,"Ok, cool. so i'l load balance to 4 servers , hehe"
1067,1508605879.000054,Margaret,"unless 100kps average is sufficient - gc is going to make some seconds do less than 100k eventually; and to do that kind of throughput that means your request handlers can't be using a db (unless it's in memory) and can't be accessing other apis, or the disk; or, if it is using the disk, it has to be in a very specific way (eg. the way kafka always consumes data in write order)"
1067,1508605961.00006,Corazon,"Ok, so memcached and split db reads to 2 slave db servers?"
1067,1508606025.000034,Margaret,"you might be interested in the talks soren macbeth made about using clojure for yieldbot; honestly we've probably reached close to the limit of my expertise on these questions here, sorry"
1067,1508606064.000033,Corazon,"I will have a look, was stressing, hehe. Boss wants to run campaign of 100k requests/s didn't know what to tell"
1067,1508606072.000001,Danuta,"just throw more machines at the problem, you wouldn’t want your 100k rps handled by a single point of failure?"
1067,1508606115.000055,Corazon,"Thanks for advice. Don't know who to ask, since don't know many people that have dealt with scalability; I'm a sysadmin/dba by day. So, its kind of crazy to have 5 web servers do load balancing, just for a peak of 600 users per minute on google analytics; That 5 web server load balancing is for django app, haha"
1067,1508607032.00012,Margaret,yeah sorry the stuff I was saying was as if 100kps was all from one server haha; with multiple machines and load balancing it's totally doable if you use your db smartly etc.
1067,1508607091.000067,Corazon,Ok. cool. So a smart programmer that optimize code and profile frequently
1068,1508609973.000075,Shandi,"Question: As part of a project I’m working on I’d like to expose an API to users of 
a service, that allows them to define their own rules as clojure functions 
(pure functions defined as EDN data).

It’s unlikely users will require the full set of functions clojure provides, and
there are some functions that I wouldn’t want people having access to 
(io etc), but I also don’t want to have to define a new DSL, only to discover
it’s not fit for purpose. 

Given clojure is homoiconic, one option I was considering was to up front define
the set of functions (symbols) that are allowed and then parse the user input to
confirm only allowed functions (symbols) are used. This is means I don’t have to 
design a new DSL, but also gives better control over the functions that can 
be used. Does anyone have any thoughts on this approach or see any potential issues? Thanks in advance for any replies."
1068,1508610152.00002,Margaret,what about clojure.walk/pre-walk with a function that throws a validation error if anything outside your whitelist is in the input form? you could look at how clojure bots do validation / jailing of execution context / etc.
1067,1508614080.000095,Shandi,"<@Margaret> I’m using pre-walk exactly as you describe currently. I’ll take a look at clojure bots, and jailing of execution context. I was thinking that a lot of the interactive clojure tutorials must do something like this. E.g. <http://www.tryclj.com/>. Thanks for the reply."
1067,1508614127.000043,Margaret,"specific github things to check out would be clojurebot, lazybot, and clojail"
1067,1508614143.00004,Shandi,"Thanks. I’ll take a look.; In fact, clojail is used in try clojure!"
1069,1508615685.000006,Araceli,"<@Shandi> If you are looking to do whitelist-based validation for syntax and symbols, you have to be extremely careful what you allow into the whitelist. For example, see Swearjure (<http://hypirion.com/musings/swearjure>).; The advantage of having a separate DSL and a separate interpreter is that you explicitly constrain the bounds of the DSL up front, and it's harder to get surprised by something in the language that you weren't aware of or didn't anticipate before."
1069,1508616257.000022,Brande,Have seen success with clj-kafka for 0.8 version of Kafka (<https://github.com/pingles/clj-kafka>) and with gregor for current versions of Kafka (<https://github.com/weftio/gregor>)
1067,1508624716.000022,Shandi,"<@Araceli> - Thanks for linking the swearjure article. I can see it’s possible to build up a large number of complex functions from simple building blocks. However, I don’t think I would whitelist any functions that actually have side effects. Assuming this was stuck to I think we would be ok. Your point is entirely valid however as the introduction of a function that actually changes things could open the door to a range of other functions. Thanks for the reply."
1070,1508637780.000025,Berry,"1. I'm looking for a Clojure database/persistent/storage solution.
2. I know about Datomic. I don't think Datomic is the correct answer.
3. It needs to support the following ops
[:assoc-in path value] ==&gt; returns nil
[:delete-in path] ==&gt; returns nil
[:get-in path] ==&gt; returns part of submap
[:get-in-keys path] ==&gt; returns just the keys instead of entire submap

4. so my storage is a giant clojure atom/map, and those 4 ops are available via rest

is there any clojure storage solution that is structured like this?"
1071,1508647090.000037,Karey,"hey folks. I've been away from the clojure universe for a few years and am working on getting back into it. I'm looking for guidance from the masses on what the current state of the art is vis-a-vis packages for microservices authentication. Previously I've used Chas Emerick's friend - but I'm seeing in the project readme on github that he's been looking for a new maintainer, and I'm not seeing alot of activity in the repo at all. Which, all adds up to a general unease I have with using it on a new project. Any tips, guidance, etc is much appreciated!"
1071,1508648262.000002,Bibi,"<@Karey> did you have issues with it before? If not, and if it worked for you, then that should count for something. I'm just playing devil's advocate here :wink:"
1071,1508648385.000017,Karey,just trying to avoid the trap of using it if the rest of the community has moved onto something that's better supported
1070,1508656798.000052,Berry,"I'm looking at amazon cognito, but I've largely accepted aws cloud"
1071,1508663577.000016,Shira,<@Karey> not sure what the breakdown is but Buddy is another relatively well-known security library
1070,1508670412.00005,Marnie,"at a repl, why would functions like get, get-in be available to me, but not `int?` where I get `CompilerException java.lang.RuntimeException: Unable to resolve symbol: int? in this context` -- very strange? I'm using Clojure 1.9"
1070,1508670840.000005,Jodie,<@Marnie> do you mean `integer?`
1070,1508670881.000081,Marnie,"<@Jodie> no, the clojure.core function `int?`; <https://clojuredocs.org/clojure.core/int_q>; i have odd? inc int but weird that int? is unavailable; i think i found the issue. clojure repls are just too reliable and this one was running for weeks without a restart, even after changing the clojure version to 1.9, and this fn was the only one from 1.9 that is now in the code, so the lack of a restart was not discovered yet."
1070,1508680770.00006,Noella,"I just typed this in the REPL and got a very unexpected result :smile:
```
````(vector 123)
```"
1072,1508680803.000048,Noella,can someone explain what goes on when you nest syntax quotes like this?
1072,1508681761.000045,Kareen,"syntax-quote sets up a context so that unquote will work, to do so it must wrap all its sequential elements in lists and series of concats; so every time you nest syntax quote it will wrap the transformed body and flatten everything into wrapped lists etc"
1072,1508681901.000011,Noella,"ahh, ok!; where in the clojure compiler can I find the implementation of syntax quote? :slightly_smiling_face:; ah, here right? <https://github.com/clojure/clojure/blob/master/src/jvm/clojure/lang/LispReader.java#L977-L1147>"
1072,1508682010.000066,Kareen,yes it''s read time not compile time
1072,1508682075.000022,Noella,".; what is the difference, if any, between these two macros?
```(defmacro a [&amp; body]
  (eval (cons 'do body)))

(defmacro b [&amp; body]
  `(do ~@body))
```"
1073,1508689275.000018,Berry,"I'm using http-kit for web-server + web-socket-server. I have created a self signed SSL certificate. What is the easiest way to ""wrap"" my http/ws as https/wss ?"
1073,1508689384.00005,Fe,<@Berry> for production or development?
1073,1508689409.000089,Berry,"It's self signed, so for dev.; <@Fe> ^"
1073,1508689429.000036,Fe,I use the simple way out
1073,1508689439.000008,Berry,"prod = aws, and they handle ssl for me; <@Fe>: what's the simple way out ?"
1073,1508689531.000008,Fe,"use <https://github.com/indexzero/http-server> with arg `--proxy <http://localhost:3448>`; simply provide the certs as command line args, run the proxy server in a separate terminal, done"
1073,1508689584.000041,Berry,"lol, the instructions I was reading on setting up self signed certificates suggested that very package; but then I saw npm, and decided to ask around instead"
1073,1508689600.000057,Fe,`http-server` is solid
1073,1508689611.000081,Berry,"alright, I'll give it a try; <https://certsimple.com/blog/localhost-ssl-fix> is the tutorial I'm reading"
1073,1508689632.000057,Fe,I think I followed the same
1073,1508689633.000154,Berry,"http-server --ssl --cert /path/to/cert.pem --key /path/to/key.pem 
is the cmd"
1073,1508689639.00002,Fe,pretty much; there was a problem with Chrome I remember; you need to set the alt-name or something like that when creating the cert; but it was reasonably simple
1073,1508689687.000001,Berry,may I direct message you when I run into that issue ?
1073,1508689694.000051,Fe,sure
1073,1508689793.000005,Berry,"```
http-server -ssl --cert ~/.localhost-ssl/cert.pem --key ~/.localhost-ssl/key.pem 
/usr/bin/env: ‘node’: No such file or directory
```
do I now install node via ""npm"" or via ""sudo apt-get install nodejs-legacy"" ?"
1073,1508689839.000064,Fe,"install node on ubuntu the normal way, whichever that is; preferably not legacy :slightly_smiling_face:"
1073,1508689871.000194,Berry,"<https://www.godaddy.com/help/install-nodejs-ubuntu-17395>; <https://www.godaddy.com/help/install-nodejs-ubuntu-17395>; e: To avoid conflicts, the executable from the Ubuntu repositories is titled nodejs instead of node. Keep this in mind as you are executing applications.; It appears that team Ubuntu renadce 'node' to 'nodejs' just for kicks."
1073,1508689910.000047,Fe,haha lol
1073,1508689920.000021,Berry,"so I think I will install via ""sudo ln -s nodejs node"" :slightly_smiling_face:"
1073,1508689927.000114,Fe,`ln -s /usr/bin/nodejs /usr/bin/node`; right :slightly_smiling_face:
1073,1508689976.00003,Berry,"the really poor design there is that tyoing ""node"" in bash leads apt-get recommending ""nodejs-legacy"" (sinde that's the apckage that provides the binary 'node'); so I'm running:
```
http-server -ssl --cert ~/.localhost-ssl/cert.pem --key ~/.localhost-ssl/key.pem
```

and then I can access <http://localhost:8080> , but I can't access <https://localhost:8080>

then I do a ""netstat -ln"" ... and besides 8080, I don't see any other ports opened; where is the -ssl port running on?; For anyone curious, the resolution is
(credit for all this goes to <@Fe> , resolved in <#C03RZGPG3|off-topic> )

1. the command is
```
http-server --ssl --cert ~/.localhost-ssl/cert.pem --key ~/.localhost-ssl/key.pem -p 8443
```

2. osx / chrome has some weird ssl issue // there are complicated instructions at <https://alexanderzeitler.com/articles/Fixing-Chrome-missing_subjectAltName-selfsigned-cert-openssl/>

3. first comment suggest alternative solution of
```
defaults write com.google.Chrome EnableCommonNameFallbackForLocalAnchors -bool true
```

I'm not sure the security implications of that -- but it made things work on my machine."
1074,1508692614.000025,Dannette,"for java interop if I import a java inner class I need seem to need to use the full name since `Foo$Bar/xyz ` doesn't work? Any way around that? (nvm, I was importing incorrectly)"
1073,1508693536.000069,Berry,"<@Dannette>: one of the most useful things I found is

(clojure.reflect/reflect JAVA-CLASS-NAME)

and looking over that, it shows all the members / inner classes / etc ...; basically, seeing ""how things are named"" makes it easier to figure out how to call it"
1073,1508693596.000071,Dannette,"yeah, I was trying to import `com.abc.Foo$Bar`, or `com.abc.Foo$ Bar`, etc. When I should have been using `com.abc Foo$Bar` :weary:"
1075,1508696889.000035,Annabel,"Hi! I read quite a bit about spec and am really fascinated by the concept, but I am _still_ wondering how Clojurians are actually integrating it into their development workflow. Do you just `(instrument)` your REPL? Or integrate it with your test suite somehow? I would be super interested in experience reports!"
1076,1508697658.000079,Brittaney,is anybody using lein ultra plugin?; can’t seem to make it work - lein repl is just default stuff in every project
1077,1508702076.00004,Virgil,"Sorry if this is a total n00b question, but why does; ```Clojure 1.8.0
Java HotSpot(TM) 64-Bit Server VM 1.8.0_144-b01
    Docs: (doc function-name-here)
          (find-doc ""part-of-name-here"")
  Source: (source function-name-here)
 Javadoc: (javadoc java-object-or-class-here)
    Exit: Control+D or (exit) or (quit)
 Results: Stored in vars *1, *2, *3, an exception in *e

user=&gt; (java.util.HashMap.)
{}
user=&gt;```; work without doing an `(import java.util.HashMap)`"
1077,1508702105.000131,Kareen,importing just adds an alias
1077,1508702131.000066,Virgil,"ok, so they're all there, but only by the long name?"
1077,1508702136.000016,Kareen,yes
1077,1508702158.000008,Virgil,and all `java.lang` is then imported by default.
1077,1508702163.000061,Kareen,"""loading"" of a java class happens on first use/reference, import is not necessary if you refer by the fully qualified name; not all of `java.lang`. i believe there are some new addition missing"
1077,1508702185.000056,Virgil,ok; thanks!
1077,1508702233.000016,Kareen,<https://github.com/clojure/clojure/blob/master/src/jvm/clojure/lang/RT.java#L39-L167>; here's the list of the classes interned by default
1077,1508702247.000064,Virgil,Nice!
1077,1508702262.000044,Kareen,one weird one is `clojure.lang.Compiler` :)
1078,1508703715.000058,Jacob,"is there a pattern used for sending functions onto a channel for completion? something like this ```(defn expensive-call [number]
  (let [sleep-count (rand-int 5000)]
    (Thread/sleep sleep-count)
    [number sleep-count]))

(defn executor [buff-size]
  (let [in-ch  (async/chan buff-size)
        out-ch (async/chan buff-size)]
    (async/thread
      (loop []
        (let [pending (async/&lt;!! in-ch)]
          (when (instance? clojure.lang.Delay pending)
            (async/thread
              (async/&gt;!! out-ch (force pending)))
            (recur)))))
    {:input-ch in-ch :output-ch out-ch}))

(defn test [buff-size send-count]
  (let [{:keys [input-ch output-ch]} (executor buff-size)]
    (doseq [n (range send-count)]
      (async/&gt;!! input-ch (delay (expensive-call n))))
    (dotimes [n send-count]
      (let [result (async/&lt;!! output-ch)]
        (println ""got result:"" result)))))
```; ```&gt; (time (test 1 10))
got result: [5 766]
got result: [0 795]
got result: [9 991]
got result: [1 1034]
got result: [4 1524]
got result: [3 1708]
got result: [7 2148]
got result: [2 2486]
got result: [8 3531]
got result: [6 3682]
""Elapsed time: 3690.147902 msecs""
nil```"
1078,1508705436.000129,Brittaney,<@Jacob> pipelines? <https://clojuredocs.org/clojure.core.async/pipeline#example-57f58bd2e4b0709b524f0521>; (def executor [] (let [in … out …] (pipeline 4 out deref in))) or something
1078,1508705631.000005,Jacob,"<@Brittaney> yeah, I think the pipeline-async might be even closer <https://clojuredocs.org/clojure.core.async/pipeline-async>"
1079,1508712991.000034,Anneliese,how to configure ring adapter for async usage?
1080,1508717366.000103,Jacob,"any ideas on why I get errors creating a ThreadPoolExecutor? ``` (def t-pool (new ThreadPoolExecutor (int 8) (int 2) (long 60) TimeUnit/SECONDS (new LinkedBlockingQueue 100)))``` I just get ```3. Unhandled clojure.lang.Compiler$CompilerException
   Error compiling form-init7780702103892101766.clj at (36:13)
2. Caused by java.lang.reflect.InvocationTargetException
   (No message)
1. Caused by java.lang.IllegalArgumentException
   (No message)```
```; <https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ThreadPoolExecutor.html>"
1080,1508726753.000102,Daniell,<@Jacob> The second argument is `maximumPoolSize` so it must be at least as large as the `corePoolSize` (the first argument).
1081,1508726776.000061,Daniell,I suspect you wanted `(int 2) (int 8)` instead?
1082,1508728915.000095,Araceli,Hello <#C03S1KBA2|clojure>. I'm curious for your opinion on something. What thing(s) in Clojure would you choose to show someone without prior exposure to the language to demonstrate as much upfront practical value as possible?; Supposing your audience are experienced programmers familiar mostly with traditional imperative and object-oriented programming.
1082,1508729157.000178,Bibi,<@Araceli> I think the first thing I would show would be REPL based development.
1082,1508729205.000064,Daniell,"Aye, the REPL can be very compelling -- especially if you show a live, running process and connect a REPL into it and explore and modify it while it's running.; Depending on the background of your programming audience <@Araceli> I think a demonstration of how easy it is to manipulate collections of data with map/filter/reduce. `reducible-query` in `clojure.java.jdbc` with a transducer pipeline, for example. Depending on the database and the configuration, you can stream very large record sets (that won't fit into memory) and still process them with transducers."
1083,1508730970.000038,Prince,"FWIW: What seemed to bowl over some devs I once knew was a single block of routes from compojure. The brevity got them interested.; Kind of a nice use case. Brevity. But also request/response as maps, thus highlighting the ""it's all just data"" idea."
1083,1508731981.000072,Shamika,agree with showing something very practical. A lot of the really cool ideas in Clojure will likely be foreign at first and it might be hard to see the immediate value i.e. they don’t know what they’re missing. But everyone loves the “here’s how much boilerplate it takes to do the same thing in your lang” comparisons :slightly_smiling_face:
1084,1508732405.000114,Ava,"For the working programmer, I usually demo the way clojure.java.jdbc allows integration of the Postgres geospatial and json queries and then add operators for json/geoquery using honeysql. I show ""here's how you register serialization of these types to postgres, deserialization from postgres to my types, and this is how easy it is to query it with my custom operators. Put that together with compojure-api and I have a nice rest api console, validation for my endpoints, and arbitrarily complex SQL generated with very straight-forward functions (including demoing how easy transforms are when you have functions working with data). You can put it together on a couple pages and it's a real example that can be extended out in a useful way immediately.; I've mentioned this elsewhere, but I haven't found any language/ecosystem that is even close to as good at letting me clean data, generate complex SQL, and rapidly prototype well-documented apis. A lot of languages can let you build routes quickly, some even with beautiful documentation (django rest framework comes to mind with python). Almost every other solution gets insanely complex the minute I want to use database-specific features that invariably lead to string bashing."
1083,1508732836.000043,Prince,"A good exercise is to show the routes (say) and ask, 'Tell me what this code does' and see if they can get close.; The problem with a lot of Java frameworks (or even Django/Rails) is that it's super hard to figure things out without visiting dozens of files.; I imagine it's the same with SQL stuff (I just use the straight JDBC and strings).; In other words, it's not so much language nerd stuff, but all the get-it-done-fast so you can leave early stuff. And being able to figure out what others have done without also having to take anger management classes."
1084,1508738584.00011,Araceli,"Thanks all. Appreciate the ideas, and will give it some more thought."
1085,1508739162.000045,Kurt,"Hi, All.
I'm fiddling with macros and and stumble with some behaviour which i think is strange.

```
(defmacro m1 [] (let [x (java.util.ArrayList.)] `~x))
(m1) ;; []
(type (m1)) ;; java.util.ArrayList

(defmacro m2 [] (let [x (org.joda.time.DateTime.)] `~x))
(m2) ;; #object[org.joda.time.DateTime 0x4011f484 ""2017-10-23T13:05:15.179+07:00""]
(type (m2)) ;; CompilerException java.lang.RuntimeException: Can't embed object in code, maybe print-dup not defined: ...
```

Is it something related with `reader` take place in there?"
1085,1508747350.000027,Brittaney,<@Kurt> i think the problem is that there is no literal representation of DateTime; (macroexpand-1 (m1)) &lt;- this is the actual *code* that compiler is going to compile; i really don’t know what should (macroexpand-1 (m2)) look like; maybe you wanted your macro to spit out the actual (org.joda.time.DateTime.) ?
1085,1508747880.000143,Anika,Thanks
1085,1508750138.000282,Kurt,"<@Brittaney> actually i'm working with larger macro to provide some inlining, above is minimalist example in that i guess some `reader` take place with the above macro expansion"
1086,1508750236.000299,Kurt,It seems macro expanded values is serialized and then later need to be read again by reader
1085,1508750316.0004,Brittaney,"yes, and org.joda.time.DateTime is missing the kind of serialization that makes reader understand it’s reading a literal for that class"
1085,1508750465.000283,Kurt,"so, if it is something with reader, i wonder how `[]` can be brought back to `java.util.ArrayList`; `(type (read-string ""[]""))` ;; =&gt; clojure.lang.PersistentVector"
1085,1508750792.000259,Brittaney,that is a good question
1085,1508750899.000321,Kareen,"<@Kurt> the problem is that you are embedding java objects in code, which is kind of a bad idea"
1085,1508751036.000235,Kurt,<@Kareen> actually it came from the clj-time.core/*
1085,1508751088.000282,Kareen,still kind of a bad idea :)
1087,1508751994.000452,Adah,Can anyone point me in the direction of a good example of best practice for implementing migrations on top of DynamoDB?
1088,1508752973.000182,Kurt,"Regarding my question on macro above, actually the macro i'm trying to build is some thing like this:

```
(defmacro mk-route-check
  [routes]
  (let [dynamic-clauses
        (-&gt;&gt; routes
             (mapcat
              (fn [{route :route
                    dows :dows}]
                [[
                  route
                  (if (= ""DLY"" dows)
                    '_
                    `(~'_ :guard
                      ~(-&gt;&gt;
                        (clojure.string/replace-first dows #""^D"" """")
                        (map (comp #(Long/parseLong %) str))
                        (into #{}))))
                  ]
                 true
                 ]
                )))]
    `(fn [route# dows#]
       (clojure.core.match/match
        [route# dows#]
        ~@dynamic-clauses
        :else false))))
```; This is okay, inlining the routes
```(mk-route-check
 [{:route ""CGK-DPS"" :dows ""DLY""}
  {:route ""CKG-MDC"" :dows ""D123""}])```; But i can not get it work if i want to load routes dynamically from somewhere, e.g.
```(let [routes [{:route ""CGK-DPS"" :dows ""DLY""}
              {:route ""CKG-MDC"" :dows ""D123""}]]
  (mk-route-check routes))```"
1088,1508753151.000131,Kareen,you can't access run time values at compile time
1088,1508753217.000182,Kurt,"So, its means there is now way to make it works?; I means, it can be made to work if i store the routes to root binding, and create macro based on that var"
1088,1508753449.000305,Mallie,How does `mk-route-check` get called?
1088,1508753462.000237,Kurt,"But then i can not make seamless reloading mechanism by providing only function; <@Mallie> some thing like:
```(def __route-check nil)

(alter-var-root #'__route-check
                (constantly (mk-route-check
                             [{:route ""CGK-DPS"" :dows ""DLY""}
                              {:route ""CKG-MDC"" :dows ""D123""}])))```"
1088,1508753996.000243,Mallie,"Macros run at compile time, so if you want to do something based on run-time variables your macro has to output forms which will do the right thing at run time; At which point the question may well be - why can't you just write a function instead of a macro?"
1088,1508754132.000171,Kurt,I need macro so that i can make core.match clauses from some external data; I think like so :slightly_smiling_face:
1088,1508754402.000316,Mallie,"And that external data isn't available at runtime, it's only on the compile host? Can't it be in resources or something?"
1088,1508754498.000055,Kurt,"Yes, it is actually some edn got read from resources"
1088,1508754619.000411,Mallie,So why can't that be done at runtime?
1088,1508754701.000261,Kurt,"I want to achieve to e.g. provide simple function that could be used to reload the resource; e.g. `(reload-route-check ""resource-file"")`; then `__route-check` will refreshed with newest data; implementation below doesn't work:
```
(defn reload-route-check [resource-file]
  (let [routes
        (-&gt; resource-file
            <http://clojure.java.io/resource|clojure.java.io/resource>
            <http://clojure.java.io/reader|clojure.java.io/reader>
            (java.io.PushbackReader.)
            clojure.edn/read)]
    (alter-var-root #'__route-check
                    (constantly (mk-route-check routes)))))
```"
1088,1508755441.000182,Lesia,Is it bad form to query a db inside a map function if I need extra data for each item in collection? What are the alternatives?
1088,1508755578.000258,Kurt,"<@Lesia> yes, one alternative is to change the query with JOIN clause if possible"
1089,1508757642.000154,Elwanda,<@Adah> Have you had a look at migratus? <https://github.com/yogthos/migratus>
1089,1508757766.000237,Adah,"I have, yes. And Ragtime and Joplin. I'm quite sure that all of these *could* work, but all of the examples are very SQL-focussed. I was hoping for some concrete experience/recommendations/best practice around DynamoDB :slightly_smiling_face:"
1088,1508758559.000062,Lesia,<@Kurt> What if my api is against some service that only answers one by one? Which iteration fn is appropriate when each item requires out-of-process data and might fail?; Maybe `for`?
1088,1508759038.000366,Kurt,"<@Lesia> for that case, i will prefer to use `mapv`"
1088,1508759419.000237,Lesia,<@Kurt> Thanks!
1090,1508761189.000422,Jacob,"<@Daniell> :+1:; a little bit of macro help? trying to construct a function that has the form `(f xs (g (f xs (g (f xs ...)))))` I have the following ```(defmacro m1 [pool n]
  (if (= n 1)
    `(ft ~pool ""did not block"")
    `(ft ~pool (ft-deref (m1 ~pool (dec ~n))))))
``` for `1` its ok, but for `n&gt;1` I can't get the recursion to work"
1090,1508762364.000466,Berry,"for writing complicated macros, I like to first write FUNCTIONS that do ""list of symbols"" -&gt; ""list of symbols"" ... and then afterwards, have the macro call the function; also, this particular macro looks like it can be written as a function of arguments f, g, xs"
1091,1508762769.0004,Danyel,"```
(defmacro m1 [pool n]
  (if (= n 1)
    `(ft ~pool ""did not block"")
    `(ft ~pool (ft-deref (m1 ~pool ~(dec n))))))
```; <@Jacob> last line ^; Curious to know why you'd want a macro for that though"
1091,1508763318.000038,Jacob,"<@Danyel> I am playing with thread pools of (including ones of fixed sized)... if there are n threads and n+1 calls to deref then it will block. If I wrote it like this ```(defn block-test [n pool]
  (loop [n n
         expr (ft pool ""did not block"")]
    (if (zero? n)
      expr
      (recur (dec n) (ft pool (ft-deref expr))))))``` then each future is put on the thread pool straight away- so it does not block. I needed to construct an expression so that the calls weren't evaluated (perhaps I could just write the function the other way round?); <@Danyel> yeah I didn't need a macro"
1091,1508763547.000322,Danyel,<@Jacob> good to know :slightly_smiling_face:
1092,1508769180.000822,Emmett,Hi. Ihave this: `[:a :b :c]`. How do i convert it into this: `[[:a] [:b] [:c]]`? Thank you!
1092,1508769236.000702,Willow,for each argument of your collection you want to call vector on the argument
1092,1508769266.000759,Emmett,So I have to use `reduce`? No simpler way?
1092,1508769271.000391,Shamika,"`(mapv vector [:a :b :c])`; if you don’t need vector output, you could use `map` instead of `mapv`"
1093,1508771471.000082,Erlinda,does Clojure not :import `public static final` fields from Java?
1094,1508771552.000191,Kareen,what do you mean
1093,1508771561.000123,Erlinda,nvm. figured it out; actually I didn’t. is there a way to  pull `static final` constants from a Java class into a Clojure namespace?
1093,1508771755.000156,Kareen,no; `(def foo Klass/foo)`
1093,1508772309.00063,Lavenia,"<@Kareen> that's a bit confusing -- there's _not_ a way, or `(def foo Klass/foo)` is the way?"
1093,1508772397.000466,Wendolyn,"you can’t pull static field directly in `:import`, you have to import class and then use `(def foo Klass/foo)`"
1093,1508772402.000384,Lavenia,"NM, it was a colleague of mine looking for an answer, looks like he solved it."
1093,1508772452.000283,Kareen,"<@Lavenia> there's no way, but you can easily alias a static class field as a var using the above"
1093,1508772469.000499,Lavenia,"Gotcha, that makes sense now. Thanks!"
1095,1508773311.000329,Mallie,"I have a question about sorted sequences - We have a large sequence/vector/set (multiple thousands of entries). We need it to be ordered, and we need to add to and remove from it. When we add we know the value of the thing we'd be sorting on (obviously), but when we remove we do not; How would you go about doing that :wink:; Our initial naive version of a vector is hugely slow when we reconstruct it because we have to sort everything; A sorted set looked like it would work, but that converts to a regular set when we remove things from it"
1095,1508773548.000227,Willow,"&gt; When we add we know the value of the thing we'd be sorting on (obviously), but when we remove we do not
can you explain this more?"
1095,1508773815.000456,Mallie,"Basically, we're sorting on a timestamp; Each item also has an id; When we remove, we want to remove all things with id XXX (matching the thing we're about to insert) regardless of the timestamp they have"
1095,1508773889.000322,Willow,oh i see
1095,1508774015.000149,Mallie,"Or actually, we're sorting on timestamp *and* ID, because it is possible for 2 items with different IDs to have the same timestamp"
1095,1508774047.000392,Willow,"is it onerous to keep two copies of the collection?; one hashed on ID, the other a binary tree by timestamp with collections of things at timestamp?"
1095,1508774083.000606,Mallie,Hmm
1095,1508774090.000039,Willow,"look up by id , get timestamp, and then remove from binary tree?"
1095,1508774133.000293,Mallie,"That could work. It feels a bit nasty, but could work"
1095,1508774138.000367,Willow,"there's clojure.data.avl or something similar that would keep it balanced for you, not have to reinvint the wheel"
1095,1508774953.000598,Zola,storing transit data as jsonb in postgres - has anyone been burned by this?
1096,1508775036.000058,Emmett,"How do I create a map, in which the order is retained like in `java.util.LinkedHashMap`? I need `vals` to return the values in the order in which they were assoc'ed to the map..."
1095,1508775089.000113,Danuta,“… it should not yet be used for storing data durably over time…” says on the transit-format readme
1095,1508775093.000332,Zola,you could add a timestamp to the values and use a sorted map? <https://clojuredocs.org/clojure.core/sorted-map-by>
1095,1508775118.000559,Danuta,I’ve always heeded that warning
1095,1508775236.000205,Evan,<https://github.com/amalloy/ordered#maps>
1096,1508775394.000614,Danyel,"<@Zola> why use jsonb in this case? Once you have transit-encoded it, it seems to me the JSONB features of Postgres become useless (unless you rely on impl details of Transit), you might as well use a fressian-encoded BLOB"
1096,1508775410.000533,Emmett,I need it as .cljc; :disappointed:
1095,1508775469.000249,Randee,<@Mallie> Do you need fast `nth` support on the sorted set? Or you just want to iterate it sorted by your values?
1096,1508775526.000422,Zola,"ah, good and valid point. thanks for being the voice of reason, <@Danyel>; (and tatut!)"
1096,1508775579.000691,Mallie,"Well, we want to be able to periodically (like, every second) pull from it all events with timestamp &lt; 'now', and push them onto our job queue"
1096,1508775588.000215,Zola,still figuring out slack Threads....
1096,1508775629.000637,Randee,So that means you'll be taking from the beginning until somewhere.
1096,1508775635.000417,Mallie,Yeah
1096,1508775659.00062,Randee,Then this should fulfil your requirements: <https://github.com/clojure/data.priority-map>
1097,1508776145.000067,Jacob,"A question about `ref`s. Assuming that I have a data structure that I wish to share between multiple threads, but I want to both read and update in one single atomic action, do either of the following two examples capture this? I am unsure of the scope of `dosync`. As far as I am aware this (and refs in general) are used for atomic transactions using more than one *state*: ```(def mah-data (ref [1 2 3 4 5]))

(defn mah-update-1 [data-ref]
  (dosync
   (when-let [a-value-that-no-other-thread-can-have (-&gt; data-ref deref peek)]
     (alter data-ref pop)
     (println ""value is"" a-value-that-no-other-thread-can-have))))

(defn mah-update-1 [data-ref]
  (dosync
   (when-let [a-value-that-no-other-thread-can-have (-&gt; data-ref deref peek)]
     (alter data-ref #(if (empty? %)
                        identity
                        (pop %)))
     (println ""value is"" a-value-that-no-other-thread-can-have))))
```"
1096,1508776274.000695,Jacob,"Intuitively I feel that I need to be requiring the lock before the deref, but I am not sure if this is the case using dosync"
1096,1508776782.000126,Daniell,If you only have one piece of state <@Jacob> you should be able to use `atom` and avoid `dosync` etc.
1097,1508776806.000449,Daniell,"`ref` is useful when you have _two separate stateful things_ that you want to update _together_.; (and, thus, `ref` is rarely needed or used)"
1097,1508776863.000397,Randee,"<@Jacob> You can use a ""trick"" like this
```
(let [state (atom [1 2 3])
      x (meta (swap! state
                     (fn [x]
                       (let [removed (peek x)]
                         (with-meta (pop x) {:rem removed})))))]
  [x @state])
```"
1097,1508777042.000078,Evan,"ah, sorry :disappointed:"
1096,1508777117.000338,Jacob,"<@Randee> is there any info on he trick? Is this the only way? If so, I am guessing that this must be an operation that is not considered idiomatic :smile:"
1096,1508777201.000039,Randee,"<@Jacob> You don't have to, you can also avoid `meta` and just keep your ""last removed item"" in the state, but then whenever you want to use state you have to first get rid of the ""last removed item"""
1097,1508777204.000306,Randee,"```
(let [state (atom [nil [1 2 3]])
      [lr] (swap! state (fn [[_ x]] [(peek x) (pop x)]))]
  [lr (second @state)])
```"
1096,1508777365.000392,Jacob,"would ```(defn mah-update-3 [data-atom]
  (let [p (promise)]
    (swap! data-atom (fn [x] (deliver p (peek x)) (pop x)))
    (println ""value is"" @p)))``` be considered a side effect?"
1096,1508777416.000786,Randee,<@Jacob> That's not going to work
1096,1508777438.000344,Jacob,yeah i see; cant call it multiple times
1096,1508777461.000145,Randee,"If `swap!` decides to re-run your fn, then your promise will still have the first (wrong) value"
1096,1508777469.000116,Jacob,exactly
1096,1508777481.000051,Randee,You could certainly use another atom and reset that one. That'd work
1096,1508777761.000221,Jacob,<@Randee> :+1:
1098,1508791354.000407,Alix,hello; the require function is not working within the proxy function. Does anybody know why?
1098,1508791467.000389,Guillermo,gonna need a little more info to help <@Alix>
1098,1508791502.000386,Alix,<@Guillermo> thanks for your help.  I am calling require to include a library within a function used by proxy
1098,1508791526.000138,Guillermo,"keep in mind `require` executes at runtime, not compile time... Stuff like this cannot work:
```
(let [...]
  (require 'foo.bar)
  (foo.bar/something...))
```"
1098,1508791531.000211,Alix,"<@Guillermo> here is a code snippet:; (proxy
    [VisionWindowListener] []
    (windowOpened [win]
      (require '[clojuretest.windows.main-window :as script]); When I do that the library is not found"
1098,1508791578.000322,Guillermo,try to find a smaller error. Does running ` (require '[clojuretest.windows.main-window :as script])` work in your REPL?
1098,1508791592.000354,Alix,"I am wondering if it is because VisionWindowListener is using a different classloader than the library that I am trying to load; Yes; calling require right above proxy works.  For example:; (proxy
   [VisionWindowListener] []
   (windowOpened [win]
     (require '[clojuretest.windows.main-window :as script]); (require '[clojuretest.windows.main-window :as script]); (require '[clojuretest.windows.main-window :as script])
  (proxy
    [VisionWindowListener] []
    (windowOpened [win]; but I want to call require within a function defined in proxy"
1098,1508791694.000409,Guillermo,"You only need to call `require` once at the top of your namespace, unless you are dynamically loading code"
1098,1508791724.000216,Alix,"I understand. I am dynamically loading code, which is why I am calling it within a function that is within proxy"
1098,1508791729.000505,Guillermo,the example you're providing is not dynamic.
1098,1508791750.000084,Alix,"That is true,   first I am trying to get a non-dynamic version working before I make it dynamic"
1098,1508791784.000283,Guillermo,So what are you going to do after you require the dynamic namespace?
1098,1508791815.000141,Alix,then I am going to call function from the dynamic namespace; Does functions defined in proxy use the class loader of the interface that is being extended or is the classloader used the same one that clojure uses?; Because the interface I am implementing with proxy uses a different classloader than my clojure code; So I am wondering if that is the issue ---  wondering if my proxy uses a different classloader than my regular code
1098,1508791918.00005,Guillermo,what error are you getting
1098,1508791928.000293,Alix,"Is it legal to use require inside proxy function definitions?    because everywhere else I use require, it works; I will get the error message"
1098,1508791959.000237,Guillermo,the problem is the scenario i described above; <https://clojurians.slack.com/archives/C03S1KBA2/p1508791526000138>; That will not compile ^
1098,1508792003.000287,Alix,"This is my error:; java.io.FileNotFoundException: Could not locate clojuretest/windows/main_window__init.class or clojuretest/windows/main_window.clj on classpath. Please check that namespaces with dashes use underscores in the Clojure file name.
	at clojure.lang.RT.load(RT.java:456)
	at clojure.lang.RT.load(RT.java:419)
	at clojure.core$load$fn__5677.invoke(core.clj:5893)
	at clojure.core$load.invokeStatic(core.clj:5892)
	at clojure.core$load.doInvoke(core.clj:5876)
	at clojure.lang.RestFn.invoke(RestFn.java:408)
	at clojure.core$load_one.invokeStatic(core.clj:5697)
	at clojure.core$load_one.invoke(core.clj:5692)
	at clojure.core$load_lib$fn__5626.invoke(core.clj:5737)
	at clojure.core$load_lib.invokeStatic(core.clj:5736)
	at clojure.core$load_lib.doInvoke(core.clj:5717)
	at clojure.lang.RestFn.applyTo(RestFn.java:142)
	at clojure.core$apply.invokeStatic(core.clj:648)
	at clojure.core$load_libs.invokeStatic(core.clj:5774)
	at clojure.core$load_libs.doInvoke(core.clj:5758)
	at clojure.lang.RestFn.applyTo(RestFn.java:137)
	at clojure.core$apply.invokeStatic(core.clj:648)
	at clojure.core$require.invokeStatic(core.clj:5796)
	at clojure.core$require.doInvoke(core.clj:5796)
	at clojure.lang.RestFn.invoke(RestFn.java:408)
	at clojuretest.core$create_window_listener$fn__13.invoke(core.clj:22)
	at clojuretest.core.proxy$java.lang.Object$VisionWindowListener$9dcff2dc.windowOpened(Unknown Source)
	at com.inductiveautomation.factorypmi.application.runtime.ClientContextImpl$1.windowOpened(ClientContextImpl.java:166)
	at com.inductiveautomation.factorypmi.application.FPMIApp.fireWindowEvent(FPMIApp.java:1197)
	at com.inductiveautomation.factorypmi.application.FPMIApp$InternalFrameEventRelay.internalFrameOpened(FPMIApp.java:1319)
	at javax.swing.JInternalFrame.fireInternalFrameEvent(Unknown Source)
	at javax.swing.JInternalFrame.show(Unknown Source)
	at java.awt.Component.show(Unknown Source)
	at java.awt.Component.setVisible(Unknown Source)
	at javax.swing.JComponent.setVisible(Unknown Source)
	at com.inductiveautomation.factorypmi.application.FPMIApp$RuntimeWindowOpener.openWindow(FPMIApp.java:1774)
	at com.inductiveautomation.factorypmi.application.FPMIApp.openWindow(FPMIApp.java:1014)
	at com.inductiveautomation.factorypmi.application.script.builtin.SecurityUtilities._tempReOpen(SecurityUtilities.java:230)
	at com.inductiveautomation.factorypmi.application.runtime.UpdateProjectPane.uninstall(UpdateProjectPane.java:103)
	at com.inductiveautomation.factorypmi.application.runtime.UpdateProjectPane$1.stepsFinished(UpdateProjectPane.java:91)
	at com.inductiveautomation.ignition.client.launch.AbstractStepRunner$1.run(AbstractStepRunner.java:40)
	at java.awt.event.InvocationEvent.dispatch(Unknown Source)
	at java.awt.EventQueue.dispatchEventImpl(Unknown Source)
	at java.awt.EventQueue.access$500(Unknown Source)
	at java.awt.EventQueue$3.run(Unknown Source)
	at java.awt.EventQueue$3.run(Unknown Source)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(Unknown Source)
	at java.awt.EventQueue.dispatchEvent(Unknown Source)
	at java.awt.EventDispatchThread.pumpOneEventForFilters(Unknown Source)
	at java.awt.EventDispatchThread.pumpEventsForFilter(Unknown Source)
	at java.awt.EventDispatchThread.pumpEventsForHierarchy(Unknown Source)
	at java.awt.EventDispatchThread.pumpEvents(Unknown Source)
	at java.awt.EventDispatchThread.pumpEvents(Unknown Source)
	at java.awt.EventDispatchThread.run(Unknown Source)"
1098,1508792004.000215,Guillermo,because the compiler doesn't know what foo.bar/something is until the function runs...; `(require 'clojuretest.windows.main-window :reload)` does that work in a REPL?
1098,1508792115.000119,Alix,"I just tried it, yes"
1098,1508792125.00062,Guillermo,"if you want to eliminate proxy from suspicion, you can move the body of the proxy method to an ordinary `defn` and try it there"
1098,1508792152.000154,Alix,"I did that,   it works in a regular defn; It just doesn't work under proxy; Also does not work under reify; I looked at your example:; (let [...]
  (require 'foo.bar)
  (foo.bar/something...)); Why can't that run at runtime and work?"
1098,1508792262.000183,Margaret,because the compiler errors if it can’t find foo.bar - you need a layer of indirection (eg. `resolve`) around the lookup of `something` to make that work
1098,1508792292.000125,Alix,oh so if foo.bar is there then it will work
1098,1508792303.000371,Margaret,"if it’s required in your ns form; or, if you already ran the code once so it already loaded it earlier…"
1098,1508792364.000642,Guillermo,"this is affectionately called the ""gilardi scenario""; <https://technomancy.us/143>; a small example of require works fine in `reify` ... I'm wondering if something else is at play; ```
(defn bar [] (reify clojure.lang.IReduceInit (reduce [_ f init] (require 'foo))))

;;; foo.clj
(ns foo)
(println ""hey"")
```"
1098,1508792545.000313,Alix,What if you try to reify an interface that uses a different classloader than clojure; In that code example you just gave does require use clojures classloader or does it use the interfaces classloader?
1098,1508793682.000279,Guillermo,clojure's classloader -- sorry I can't work up a larger classloader example at the moment
1098,1508795717.000063,Alix,"<@Guillermo> thanks; <@Guillermo> yes,    but if clojure's class loader delegates to its parent class loader and if the parent class loader has the class then the parent class loader will then be used to load the classes in the class,  and not clojure's class loader. I'm thinking that might be the problem. I am doing an experiment to find out."
1099,1508798281.00009,Jonnie,"I know we have <https://github.com/clojure/test.check> in clojure, which is great.
Does the reverse exists?

For example:
I was trying to isolate an error in a biggish generated EDN/JSON structure. I have a unit test that fails with said structure with a given error.

Would there be a way to remove parts of the structure to make is smaller to read, while keeping the *same* error? It seems it is a general debugging process I follow quite often (remove parts until it is small enough to understand it)."
1099,1508800533.000018,Pearlene,"<@Jonnie> I haven't seen such a thing.

I suppose it'd be theoretically possible to reuse test.check's shrink-loop if you wrote the code for doing the shrinking.

but that's most of the work anyhow."
1098,1508802567.000079,Alix,<@Guillermo> I solved the problem with using require in proxy and reify; <@Guillermo> The code that created the proxy object runs in a different thread than the code that calls the methods on the proxy.   In the thread that calls the proxy methods the context classloader was not set to the classloader that has clojure.   So simply setting the context classloader to clojure on the thread that calls the  proxy methods fixed the problem. Thanks for looking into this with me.
1099,1508802949.000294,Raul,"<@Jonnie> <https://github.com/pjstadig/humane-test-output> _*might*_ be what you're looking for, but I don't have enough information about your particular situation to say for sure? If you have that loaded and try to compare to maps, then it will produce a diff if they don't equal each other."
1100,1508816538.000111,Fabiola,"Hello All, has anyone faced/solved the problem of serializing Clojure classes using `java.io.Serializable`? What’s the idiomatic way of using `serialVersionUID`? (if there is one)"
1098,1508818919.000018,Alix,"Don't laugh at me when I ask this:  How can I get the name of an anonymous function function when it has a name?; For example: `(fn cool [] (println ""hi""))`; how can I get the name ""cool"" from the function?"
1101,1508821530.000043,Kurt,"`(.toString (fn cool [] (println ""hi"")))`"
1100,1508826756.000171,Aldo,"<@Fabiola> what do you mean by clojure classes? records and deftypes? to be honest, the best answer is use something other than Serializable. Which is also the answer even if you're using pure java"
1098,1508835049.000188,Kareen,<@Alix> what do you need that for
1102,1508835319.000208,Mallory,hello guys; i have played with core.async a bit; <https://gist.github.com/aibrahim/85af843ef94c6cda544e596f4ba8b50a>; this a code which pass lists of numbers to each process linearly then each process try to remove multipliers of one number and pass result to other process; the code works fine for example till 10000 odds; when i tried to increase more for example 100000 it's broken; anybody can help in this?
1103,1508837795.000006,Jonnie,"thanks <@Pearlene> and <@Raul> 
 test.check’s shrink-loop looks like what I want :slightly_smiling_face:"
1104,1508839228.000273,Corazon,"On database, Is it bad idea to enforce row level lock on a row, to avoid duplication in data?"
1104,1508839383.000224,Danuta,"what do you mean? that’s the job of the database, a unique constraint will handle it"
1104,1508839525.000055,Corazon,"Yes, i also thought that from database admin point of view, but php programmer wants to enforce in code"
1104,1508839880.00034,Cecilia,do NOT do that on code level
1104,1508839918.000257,Corazon,And some people wonder why i get annoyed at php devs that silly statements. hehe
1104,1508839958.000503,Cecilia,"just ask your PHP devs how well that would work when you have like, two processes (which happens pretty much instantly with PHP) doing that stuff concurrently?"
1104,1508839980.00034,Corazon,cool. will do; We have 200 processes running concurrently
1104,1508839998.000336,Cecilia,"I’ll answer: it won’t work; since if it is in memory, then it works only for that single process; if it is on disk then one needs to take care of concurrency issues on I/O, meaning implementing transactions or something similar; and boom, you’ve done a database all by yourself, congratulations"
1104,1508840064.00008,Corazon,"postgres is acid complaint, so dont know why someone would consider it to be honest"
1104,1508840094.000032,Cecilia,most likely the person suggesting that hates databases in general and wants to keep everything at his hands and refuses to learn new stuff; always a fine combination
1104,1508840117.000351,Corazon,"refuses to learn new stuff sounds like it, hates anything thats not mysql and php"
1104,1508840136.000117,Cecilia,"see, almost a full match :slightly_smiling_face:; and postgresql is actually much better than mysql when it comes to ensuring database integrity"
1104,1508840196.000118,Corazon,"Yes, i've learned that the hard way, hehe, been administering mysql for 5 years; So i replied to the dude suggestion with a link to postgresql unique constraint index; <@Cecilia> so what could happen if someone were to enfoce row level locks, lead to issues with integrity?; s/enforce/enforce/g"
1104,1508840386.000287,Cecilia,"you mean if you do it on code level, in this case with PHP?"
1104,1508840391.000154,Corazon,yes; Just out of curiousity
1104,1508840398.000317,Cecilia,"oh god, so many things; I take it you have apache or nginx there spawning your PHP stuff, right?"
1104,1508840437.000205,Corazon,no we use django and 5 web load balancers with nginx; he is not contributing to django codebase at the moment
1104,1508840465.00006,Cecilia,"right, doesn’t change things. Something somewhere is anyway spawning a PHP process per request; now, imagine two concurrent requests coming in, both of which try to do that row locking. If this row locking logic is kept in memory these two processes won’t see the locking defined by the other process since they are separate processes; if you’d have something sensible like Clojure then you could do that relatively safely - as long as you’d have only one server serving all the traffic; when you add another server then it’s the same problem all over again: different processes, different memoryspaces"
1104,1508840585.000011,Corazon,So non-deterministic output?
1104,1508840597.000131,Cecilia,it depends on completely what is being row locked and why; if row locking is done for writes then most likely this will fuck up your database; stuff that’s supposed to be unique is not
1104,1508840627.000285,Corazon,"fuck up how, load average?"
1104,1508840653.000076,Cecilia,"process A writes “foo”, process B tries to write “foo”, manages to do it since it doesn’t see the row locking stuff"
1104,1508840660.000413,Corazon,"Sorry i'm asking so many questions, but this guy will interogate and second guess what i know. So i need ammunition"
1104,1508840706.000242,Cecilia,in addition you’ll end up writing a lot of code which you could handle with single statement in your schema definitions for postgre; code which won’t work unless you create a mechanism to handle concurrency which is ACID compliant; that guy should write nginx too while he’s at it
1104,1508840830.000238,Corazon,"Ok. thanks, I will just say no it wont work. Don't have energy to argue with know-it-alls"
1104,1508840878.000373,Cecilia,"no, you can say that he can get it to work if he writes a fully fleged ACID compliant concurrency handling; good luck with that; especially with PHP :smile:"
1104,1508840909.000274,Corazon,"roflol, but phalcan is a c implementation and is fast as hell"
1104,1508840927.000118,Cecilia,"it’s not about speed, it’s about what you have at language level; PHP doesn’t have concurrency primitives"
1104,1508840994.000153,Corazon,"I know, you can write bad code in any language, most people write bad code in php, hehe; Is there a way to avoid a know-it-all outlandish ideas?"
1104,1508841175.000179,Cecilia,"yes, get experience on multiple things, realize you know jack shit and get humble"
1104,1508841212.000334,Corazon,"I know, but i dont want to have to defend my position and knowledge all the time, its energy draining; I know my limitations, so i wont talk about stuff i dont know"
1104,1508841228.000105,Cecilia,"been there done that. Changed jobs.; or to be more exact: client, not job; when I was a consultant"
1104,1508841293.000263,Corazon,"I really like this job, don't want to work for a corporate again"
1104,1508841331.000237,Cecilia,then deal with the ugly parts of it and be happy :slightly_smiling_face:
1104,1508841345.000368,Corazon,"Ok, good point; I think i'd be happy if i can get paid writing clojure code all day; but south africa is behind :disappointed:"
1104,1508841788.000043,Cecilia,"I’m actually writing scala these days, not exactly happy about that"
1104,1508841809.000052,Corazon,"Why, whats wrong with scala?"
1104,1508841833.000055,Cecilia,"well, my main issue with it is the `implicit` and what it brings"
1104,1508841854.000083,Corazon,"Well, dont know any scala, so i can't say i understand :slightly_smiling_face:"
1104,1508841866.000142,Cecilia,"and also the ideology that “writing code is a bad thing, minimize the amount of code you need to write even if it makes your code unreadable”; which actually is part of why `implicit` exists in the language; but that “writability over readibility” is more of a design choice than a feature of the language; and still most stuff written in scala takes more code than equivalent clojure :stuck_out_tongue:"
1104,1508841983.000036,Corazon,"oh, can you migrate to clojure?"
1104,1508842089.000292,Cecilia,"company is using clojure, team isn’t; trying to educate them :slightly_smiling_face:; so we’ll see; the absurdity of it is that we are actually using datomic but not clojure…"
1104,1508842179.000078,Weston,odd
1104,1508842215.000327,Mallie,"Heh, we have the opposite opinion in this team; Make it readable, even if it makes it a bit longer"
1104,1508842237.000042,Cecilia,"yeah, I agree with that. But Scala peeps do not apparently"
1104,1508842248.000215,Mallie,"Makes it easier to onboard new team members, and easier to understand and bugfix when you come back to code you've not touched in mnths :wink:"
1105,1508842624.000261,Corazon,anyone tried kubernetes?
1105,1508843416.000291,Cecilia,we use it at work
1105,1508843475.000303,Corazon,very expensive?
1105,1508843484.000148,Cecilia,in what regard?
1105,1508843498.000207,Corazon,lets say i need 100 instances?
1105,1508843510.000301,Cecilia,"kubernetes is opensource, no licensing fees; so, it’s up to the price of your servers"
1105,1508843533.000296,Corazon,"So, how many instances can you have on decent server?"
1105,1508843549.000002,Cecilia,there is no clear answer to that since it totally depends on your containers; create distroless containers which contain just a hello world written in C: then the answer would be “millions” I think
1105,1508843596.000016,Corazon,"ah, like alpine; alpine linux"
1105,1508843602.000087,Cecilia,"no, distroless"
1105,1508843606.000025,Corazon,oh
1105,1508843608.000071,Cecilia,alpine linux is a distro; <https://github.com/GoogleCloudPlatform/distroless>
1105,1508843635.00027,Corazon,Very interesting
1105,1508843697.000425,Cecilia,"I think “millions” is a bit over the board, but “thousands” easily; but create a ubuntu container with weblogic behemoth inside and you can put your server to it’s knees pretty easily with just one container"
1105,1508843818.000128,Corazon,I still need to learn kubernetes :slightly_smiling_face:. Have to plan a project where a basic html page can handle 100k concurrent sessions
1105,1508843855.000024,Cecilia,you do not need kubernetes for that: <http://www.http-kit.org/600k-concurrent-connection-http-kit.html>
1105,1508843868.000352,Jena,i would not recommend http-kit
1105,1508843889.000011,Cecilia,"yeah, well most of the stuff there is about other stuff than http-kit; I guess you’d suggest aleph instead?"
1105,1508843922.000421,Jena,yes
1105,1508843925.000237,Corazon,"Ok, just concertned about socket limit on servers and bottleneck on databases then"
1105,1508843947.000115,Cecilia,if it’s serving just html page you do not need a database; of course if you add databases into the mix it gets way more complicated; then kubernetes isn’t such a bad idea
1105,1508843975.000107,Corazon,"Hmm, think they need databases, since it does api calls; ok"
1105,1508843985.000153,Cecilia,"ok, so it’s not just a basic html page then :slightly_smiling_face:"
1105,1508844858.000387,Corazon,"yeah, sorry, got ahead of myself; a side-effect of multi-tasking, hehe"
1105,1508845000.000074,Cecilia,"but anyway, Kubernetes is a container orchestration platform like Docker Swarm or Apache Mesos (although that is actually more than just container platform); so basically all it costs you is the servers where Kubernetes itself is running; rest is just your normal containers on top of VMs stuff, it’s just being managed by Kubernetes"
1106,1508845065.000267,Lily,"I have yet another interop question, I'm pretty sure that the method `.addExtensions` exists for my imported `org.openqa.selenium.chrome.ChromeOptions` class.
```
(user/all-methods (new ChromeOptions))
(.addArguments .addEncodedExtensions .addExtensions .amendHashCode .asMap .getExperimentalOption .lambda$asMap$0 .setBinary .setExperimentalOption .setHeadless .setPageLoadStrategy .setUnhandledPromptBehaviour .toCapabilities)
```
but when useing it, I get a strange error
```
(doto (new ChromeOptions)
        (.addExtensions (java.io.File. ""chrome/my-extension.xpi"")))
;; =&gt; CompilerException java.lang.IllegalArgumentException: No matching method found: addExtensions for class org.openqa.selenium.chrome.ChromeOptions
```
<https://seleniumhq.github.io/selenium/docs/api/java/org/openqa/selenium/chrome/ChromeOptions.html>"
1107,1508845066.000423,Berry,what feature are you using that makes aws lambda / google compute functions inadequate ?
1105,1508845122.000236,Cecilia,<@Berry> asking me?
1105,1508845176.000158,Berry,"<@Cecilia>: yes, I'm recently moved from EC2 + Elastic Bean Stalk to AWS Lambda + CloudFront + API Gateway + DynamoDb ... and am loving serverless."
1105,1508845200.000278,Cecilia,"well, we are talking about a huge microservice ecosystem here, hundreds of engineering teams; on top of kubernetes; we are doing whole bunch of stuff where AWS lambda wouldn’t be enough, especially performancewise; and long lived stuff which isn’t possible with that etc"
1105,1508845333.000249,Berry,"I agree, lambda does not sound like the right use case for your project; good luck!"
1105,1508845352.000101,Cecilia,"“project” :slightly_smiling_face:; and FYI, it’s Zalando.; and all the other stuff under the hood which isn’t the fashion store; and lambda could definitely be used in some parts of the system; as it is now it’s not being used due to unpredictable costs at this scale"
1105,1508845508.000282,Berry,"yeah; if you are running a huge shopping site, you should probably go the Amazon route and build Zalando Web Services"
1105,1508845527.00009,Cecilia,"well, currently everything is on top of AWS; but I can see the company slowly building abstraction layer between AWS and Zalando stuff; like the Kubernetes change from EC2 instances"
1108,1508848606.000244,Lily,"```
(doto (new ChromeOptions)
       (.addExtensions (list (java.io.File. ""chrome/my-extension.xpi""))))
```
to answer my own question, list was needed around the extensions. Undescriptive error message and strange documentation."
1109,1508850220.000351,Virgil,"So, given a honey-sql statement as; ```[""UPDATE my_table SET foo = ? where id = ?"", ""bar"", 1]```; is there a function in java.jdbc or honeysql which gives me; ```""UPDATE my_table SET foo = 'bar' where id = 1""```; eg, a function from prepared-statement to string."
1109,1508850342.000452,Corazon,<@Cecilia> how much of a learning curve is kubernetes
1109,1508850373.000062,Cecilia,"well it has some, but it depends on which side you are looking at: user of kubernetes as a dev or ops guy keeping it up; no experience on the latter"
1109,1508850397.000023,Corazon,ok
1109,1508851353.000357,Fe,"<@Virgil> probably not, given that most db drivers don't actually do any escaping in prepared statements - they pass the values directly to the db"
1109,1508852239.000808,Virgil,"<@Fe> yeah, I figured as much after a while…"
1110,1508853704.000502,Mallory,hi guys; nobody can help me
1110,1508853759.000339,Sharlene,What are you looking for help with <@Mallory>?
1110,1508853788.000105,Mallory,"hello guys


[11:00] 
i have played with core.async a bit


[11:00] 
<https://gist.github.com/aibrahim/85af843ef94c6cda544e596f4ba8b50a>


[11:01] 
this a code which pass lists of numbers to each process linearly then each process try to remove multipliers of one number and pass result to other process


[11:02] 
the code works fine for example till 10000 odds


[11:02] 
when i tried to increase more for example 100000 it's broken


[11:02] 
anybody can help in this?"
1110,1508853840.000462,Sharlene,How does it break?
1110,1508854212.000352,Mallory,<@Sharlene> (def odds (rest (filter odd? (range 1000000))))
1110,1508854251.000057,Sharlene,"<@Mallory>, excuse me, I should be more clear. What error message do you get? Or do you not get any error message at all? :slightly_smiling_face:"
1110,1508855084.000307,Mallory,<@Sharlene> <https://gist.github.com/aibrahim/85af843ef94c6cda544e596f4ba8b50a>
1110,1508855143.000238,Sharlene,"This doesn’t look like the entirety of the error output, what this everything that printed out?"
1110,1508855328.000053,Mallory,how can i dump full trace error to file ?
1111,1508859627.000483,Berry,"what is the builtin for ""pprint but out to string rather than stdout"" ?"
1111,1508859660.000264,Guillermo,`(with-out-str .... (pprint...))`
1111,1508859679.000378,Berry,<@Guillermo>: thanks
1112,1508864388.000068,Daniell,"<@Virgil> That's an oft-requested feature for `clojure.java.jdbc` but as <@Fe> notes, there's no easy way to get that from a JDBC driver under the hood, unfortunately. I guess my question would be: Why do you need/want this?"
1112,1508864582.000057,Virgil,"<@Daniell> Yeah, I saw some discussion about it on the mailing list. My use case was the following. Given a csv file, I wanted to generate update statements.  I wanted to have the actual statements so I could 1) have it reviewed by a teammate, and 2) add it to a migration script. ; I ended up just running the honeysql statements through jdbc. ; I realize that there are other ways of achieving this, but I had a nail and honeysql looked like a hammer at the time. "
1112,1508864928.000496,Daniell,"HoneySQL is a good way to compose query fragments, and producing vectors of `[""sql statement"" param1 param2 .. paramN]` is a reasonable representation for review/debugging...?"
1112,1508865021.000682,Virgil,"True, and it’s what I ended up using for review. Doesn’t fit so great in a migration script though. "
1113,1508867805.000201,Francene,How can i read batch messages from channel?
1113,1508868178.000298,Ferdinand,<@Francene> xform w/ `partition`?
1113,1508868407.000279,Margaret,another option is a debouncer that pushes all values read after a timeout (time based batching rather than count based)
1113,1508868410.000516,Francene,"<@Ferdinand> ok, but how i can set timer to not wait when channel fill to get me full partition?"
1113,1508868438.000304,Margaret,"<@Francene> that’s where you want a debounce loop and not a partition; I bet there’s a good library with a debounce in it out there, but there’s definitely gists showing how to do one in core.async"
1113,1508868494.000455,Francene,like this <https://gist.github.com/scttnlsn/9744501>
1113,1508868499.000051,Margaret,"this isn’t exactly a standard debounce (since you want to collect all the messages over some timespan, and send all together), but the logic is very similar"
1113,1508868526.000286,Francene,"ok, thanks"
1113,1508868546.000455,Margaret,"yeah- the modification to that would be to attach the new-val to the last-val, and make sure last-val starts as an empty coll; should be easy enough to make and unit test though"
1113,1508869298.000433,Jacob,"is it possible given a `async/chan` that returns maps say `{:foo 2 :bar xs}` where xs is a vector, to flatten transform the channel into one that yields elements of `xs`. `(async/map&lt; #(get :bar []) ch)` gets me the vectors, but ideally I would like the flatten the whole channel (I know that `map&lt;` is depreciated..."
1114,1508869354.000722,Jacob,so if `xs` was a vec of ints `(&lt;!! ch)` would yield an int
1113,1508869383.000392,Aldo,<@Jacob> a transducer should do that
1113,1508869404.000057,Jerry,<https://clojuredocs.org/clojure.core/mapcat> ?
1113,1508869424.00016,Aldo,(async/chan buf-size (mapcat :bar))
1114,1508869516.000072,Jacob,"if I am given the chan (i.e I dont control its creation, should I create a pipe?)"
1113,1508869516.000386,Raul,"^^^ Example of this being used
```(let [c (async/chan 10 (mapcat :bar))]
                          (async/put! c {:foo 2 :bar [1 2 3]})
                          (async/close! c)
                          (async/&lt;!! (async/into [] c)))```
returns: ```[1 2 3]```"
1114,1508869561.000418,Raul,"<@Jacob> yes, you can pipe from the channel you have with the maps onto a channel with that reducer, or just `async/pipeline` to accomplish the same thing without the transducer directly on the channel"
1113,1508869579.00004,Jacob,:+1:
1113,1508869599.000165,Aldo,yeah pipe seems like the simplest solution there; or pipeline
1113,1508870382.000187,Jacob,"is there a way to ""perculate"" the closing of the channel? can `a/close?` be made to close the channel that I have created a pipeline from?"
1113,1508870472.000168,Rebeca,"it tends to go in the other direction, most things in the channel library have an option to close the destination channel if the source channel is closed"
1114,1508870574.000349,Rebeca,(the docstring for pipe describes exactly this)
1114,1508870585.000234,Jacob,hmm... I guess I will run some tests - just don't want dangling channels
1113,1508870626.000555,Aldo,pipe or pipeline will both propagate the close on the source channel. closing the destination channel doesn't make much sense as what do you do with the undelivered messages
1114,1508870660.000424,Jacob,flush the channel?
1114,1508870680.000022,Aldo,to where?
1114,1508870690.00005,Jacob,(loop [] ...); to the ether
1114,1508870697.00016,Aldo,but...; seems bad man; the docs for `pipe` says it'll just stop consuming anyway
1114,1508870836.000329,Jacob,"so does this look reasonable `s/scroll-chan` is out of my control. it just returns a channel. ```
(defn get-hits [response]
  (get-in response [:body :hits :hits] []))

(defn search-channel
  ([cli index type query-map] (search-channel cli index type query-map {}))
  ([cli index type query-map params]
   (let [ch (a/chan)]
     (a/thread
       (-&gt;&gt; (s/scroll-chan cli {:url [index type ""_search""]
                                :query-string (select-keys params [:search_type :request_cache])
                                :body (merge {:query query-map}
                                             (dissoc params :search_type :request_cache))
                                :exception-handler exception-handler})
            (a/pipeline 1 ch (mapcat get-hits))))
     ch)))
```; sorry for the extra crud"
1114,1508870929.000239,Aldo,the a/thread seems strange there
1114,1508870957.000699,Jacob,"as far as I am aware g/blocks are a bit iffy...; thread pool of 8; and not great with ""long running"" requests"
1114,1508871019.000524,Aldo,I don't think you need either thread or go. the function scroll-chan returns a channel so is presumably asynchronous/fast. a/pipeline starts its own asynchronous operations so returns immediately. so you're creating a new thread that does 2 tiny operations then ends
1114,1508871065.000279,Jacob,shit... good point.
1114,1508871130.000665,Aldo,"I do kinda think `pipe` would've made more sense than pipeline here.
```
(async/pipe
  (s/scroll-chan ...)
  (async/chan 1 (mapcat get-hits)))
```"
1114,1508871218.000191,Jacob,yeah - makes more sense
1114,1508871416.000505,Aldo,`pipe` returns the to-chan btw. though it's not documented
1115,1508874407.00018,Weston,"scroll-chan has a ch optional arg that is the ouput chan. You can pass a ch with an xform for instance; I think all of spandex async functions allow to pass custom chans; And yes, scroll-chan is safe in go blocks it returns immediately, under the hood it s all async io"
1115,1508875081.000343,Jerry,is that ok to use let instead of do for else block?
1115,1508875557.000023,Aldo,"yes, let is a single expression, and it contains an implicit do block"
1116,1508877230.000114,Carline,"Hi all, I'm preparing a Clojure talk at a local meetup (yay!) and re-watching this talk <https://www.infoq.com/presentations/Are-We-There-Yet-Rich-Hickey> in order to *explain* Clojure.
At 52:34 Rich says ""actors definitely do not"" support ""Point-in-time value perception"", contrary to agents.
I do not understand this statement, can someone try to explain it to me?"
1116,1508877450.000339,Rebeca,the way to get a value from an actor is by sending it a message and then it will send you message back. agents can be derefed
1116,1508877510.000311,Carline,"so it's the fact that ""value perception"" is deferred in the case of actors?"
1116,1508877518.000555,Fritz,hola - does the latest leiningen force release/deployments to https?  coworker complaining that it seems to be ( our nexus isn’t on https currently ).
1116,1508877578.000028,Rebeca,"you can't just read the sate of an actor right now, you have to effectively put your request in the actor's queue, and the actor will get to it when it gets to it"
1116,1508877586.000086,Virgil,"<@Carline> Unless you're specifically wanting to bring up agents, eg doing a talk about the Clojure STM, I'd leave them out of the talk."
1116,1508877592.000433,Rebeca,the point-in-time is the key part there
1116,1508877596.000179,Shira,Yep that sounds familiar <@Fritz>
1116,1508877652.000719,Carline,"<@Rebeca> got it, thanks
<@Virgil> I just didn't want to follow through the talk and not understand this :slightly_smiling_face: I'll keep it simple this will be an introductory talk"
1116,1508877672.000231,Virgil,"As discussed in <https://www.youtube.com/watch?v=9N7xM40fio0&amp;list=PLZdCLR02grLqCR8EKuil8NrffZuTl0kwL&amp;index=32> ""nobody"" ever uses agents :slightly_smiling_face:; A talk very much worth watching though.; I think a more interesting thing, if you want to contrast actors with the clojure eco-system, is to contrast them to core.async."
1116,1508877738.000431,Carline,"Ah! Haven't seen that one yet, it's definitely on my list."
1116,1508877793.000149,Shira,<@Fritz> <https://github.com/technomancy/leiningen/commit/809c7d33ea5ef2ffefa1dc31ace839155955600d>
1116,1508877803.00037,Carline,"Sure, I know for a fact that I'll have a few actors fans in the audience so..."
1116,1508877872.000235,Virgil,<http://www.dalnefre.com/wp/2010/06/actors-in-clojure-why-not/>
1116,1508877948.00029,Fritz,<@Shira> kinda arse when its a 100% internal repo tho
1116,1508877989.000606,Carline,"I remember reading this one a few months back and not understanding every bits of the follow up discussion in comments with ""Jeff Rose"" is really interesting."
1117,1508878806.000731,Shira,"Well there is a workaround, in the FAQ. What's the alternative if you want to help people avoid talking to HTTP repos in the general case?"
1116,1508879148.000315,Sandy,"<@Carline> <http://Clojure.org|Clojure.org> has a rather good overview on actors and ""why not""; <https://clojure.org/about/state#actors>; And btw, <http://dalnefre.com|dalnefre.com> is a fantastic site, some really mind-blowing stuff on there. Not stuff I'd use at work everyday, but cool from a geek perspective"
1116,1508879630.000218,Carline,I've read that page on <http://clojure.org|clojure.org> a few times already and must admit I haven't fully made my mind up about this... :sweat_smile:; I just don't use there concepts enough to get a good picture that is based on experience and not on theory and acquiescence bias
1116,1508879883.000298,Fritz,I suppose you could run a local HTTPS proxy..
1118,1508880979.000278,Leota,"hi! I’m having problems with ring/compojure since upgrading leiningen. If I create a new app with 
&gt; Lein new compojure testapp
it creates the app like it should. But if I try to run it with 
&gt; lein ring server
 I get this error “java.lang.RuntimeException: No reader function for tag object”; any idea how to fix this?"
1119,1508883924.000229,Daniele,"Is there a built-in ""`split-around`"" function? Sort of the opposite of `split-at`...I'm trying to say ""keep the closest X values around Y in the given seq"""
1120,1508885846.000001,Kathie,"hey all, i ran into an issue with this foor loop ```(for [gender     performer-genders
                               name       performer-names
                               instrument instrument-names
                               mood       moods]
  (do stuff))```; basically, if any of those lists are empty, then the loop won't iterate over anything, which is expected behavior; the looping behavior im looking for is if one of the list are empty, instead of not looping over anything, do the iteration over the other 3 lists, just ignoring the empty list (binding the value in each iteration to `nil` or something); does anyone know of a good way to accomplish that; oh wait; i guess i could just check to see if those lists are empty, and if so just bind the variables to `[nil]` seems like that should work"
1120,1508886068.000175,Margaret,"for isn't a loop, it's a list comprehension; if you want a loop, use loop; in particular where you say `(do stuff)` - if your intention is to do anything with a side effect rather than generating data, for is the wrong construct"
1120,1508886188.000126,Kathie,nah that's just aggregating data within a reduce function; i guess `loop` would be better though since it'd have more explicit semantics then `for`
1121,1508891315.000044,Clementina,"can someone help me. I'm trying to generate csv file on the fly. using `<http://ring.util.io/piped-input-stream|ring.util.io/piped-input-stream>`. and it works when I'm doing it with `get` request. In my case though I have to do it with post request (because data gets composed via om.next/parser). So this, kinda works:
```
(defn download-csv [req]
  (let [result (run-om-query (:body req) (:user req))
        query-k (-&gt; req :body ffirst)
        data (get-in result [query-k :data])]
    {:status 200
     :headers {""Content-Type"" ""text/csv""
               ""Content-disposition"" ""attachment; filename=filename.csv""}
     :body  (ring-io/piped-input-stream
              (fn [out]
                (let [columns (-&gt; data first keys)]
                  (with-open [wtr (io/writer out)]
                    (csv/write-csv wtr [columns])
                    (doseq [row data]
                      (csv/write-csv wtr [(map row columns)]))))))}))
```
but browser doesn't ""recognize it"". no ""dowload to"" popup comes up, etc.; what's missing?; I have a feeling that this might be not possible in the same request ;(; if it's ""post"""
1121,1508891557.000192,Shavonda,If you just drop a valid csv string in there does it work?
1121,1508891596.000007,Clementina,"the content it returns from server is fine - it is correct csv. but browser doesn't recognize it as ""file download""; as I said - if I ignore the om.parser part, and generate just random csv and use `get`, instead of `post` it works just fine - I don't even have to set the correct content-type and other headers; but I need to use post"
1121,1508893711.000037,Blair,<@Clementina> have you tried setting the content-type to application/download
1121,1508895289.000076,Clementina,I did. it's still didn't work
1122,1508903358.00014,Donella,"i use <https://github.com/eligrey/FileSaver.js> but that is browser side, don't know if that helps; has a cljsjs wrapper"
1123,1508922070.000011,Corazon,"I like using emacs for clojure, is there a way to do code autocompletion, i'm using inferior-clojure module"
1124,1508922672.000046,Danuta,"yes, by using CIDER :wink:"
1124,1508923594.000176,Corazon,"ok, cool. Will check"
1125,1508926782.000363,Wendi,How about treating vars like ns alias so we can use shorthand for creating keywords associated with a fn like ::myfn/props
1124,1508927880.000078,Zola,does anyone have any experience with hugsql (<https://www.hugsql.org/>)? i'm trying to debug some tricky sql statements and i'd like to see what sql statement hugsql is generating under the hood.
1125,1508927982.000054,Efrain,"```
;; For most HugSQL usage, you will not need the sqlvec functions.
;; However, sqlvec versions are useful during development and
;; for advanced usage with database functions.
(hugsql/def-sqlvec-fns ""princess_bride/db/sql/characters.sql"")
```
take a look at def-sqlvec-fns; For myself I found it very useful"
1125,1508928178.000275,Zola,cheers!
1126,1508931414.000141,Candace,did you end up resolving this?; I ran into this issue the other day and I think I had to downgrade back to 2.6.* to fix it
1125,1508933345.00023,Verna,"<@Zola> the best option would be to check your DB logs. Configure your database to log all the queries into a file. Or you may run the database not as a service but as process. So you’ll see all the queries in the console. For postgres, start it with
`postgres -E -D /usr/local/var/postgres` (on Mac)"
1125,1508933499.000144,Zola,elegant solution! thanks
1127,1508937705.000199,Berry,what is the clojure equiv of C's __FILE__ ?; I want some debug msgs to dump __FILE__ so it's easy to figure out where they are coming from
1128,1508939070.000383,Efrain,"You can use `(meta #'any-function-or-variable) ;; =&gt; {:line 13, :column 1, :file ""path/to/file.clj"", :name var-name, :ns #namespace[namespace-where-var-defined]}`
:file is related to your classpath; <https://clojure.org/reference/metadata> there are more information about this"
1127,1508941514.000898,Jodie,<@Berry> you mean like how tools.logging does?
1127,1508945512.000164,Berry,"<@Jodie>: not quite tools.logging: it's ... I'm looking at this cljs app, I see this div, whose body says ""todo"" -- I want to kow where this ""todo"" is coming from -- so I grep for ""todo"" in my source tree -- and I get many matches, 

so I'd really prefer is that div said ""todo: foobart.clj: line 74"" instead of just ""todo"""
1127,1508945550.000144,Jodie,"<@Berry> you need a macro which looks at `*ns*`, which is how this is done in tools logging"
1127,1508945867.000375,Berry,"<@Jodie>, <@Efrain>: going with <@Efrain>’s meta solution :slightly_smiling_face:"
1127,1508946305.000913,Jodie,"That means they need a reference to the function they are in, no?"
1127,1508955587.000231,Berry,"I know what I ca ndo (io/copy in out) -- however, is there a nice way to inject a ""gunzip"" in the middle of it?; so the input is a *.gz stream, and for the output, I want an uncompressed stream"
1127,1508955855.000837,Margaret,<@Berry> GZIPInputStream <https://docs.oracle.com/javase/7/docs/api/java/util/zip/GZIPInputStream.html>; very easy to use in my experience
1127,1508955945.00013,Marx,I was just doing this and found a cookbook recipe: <https://github.com/clojure-cookbook/clojure-cookbook/blob/master/04_local-io/4-21_read-write-gzip.asciidoc>
1127,1508956826.000472,Berry,"nice, I did not reailze you could just 'wrap' java.util.zip.GZIPInputStream.
and have it take care of the rest"
1129,1508959618.000486,Lisha,"I am looking for advice to connect to a Mysql Database. I am using jbdc and mysql/mysql-connector-java plugin to run a simple query to my database. however, the connection does not seem to connect (to a my local environment) and not able to pull any data. Does anyone know any helpful tutoriasl or walk-throughs to help me connect to a db. 

error messages: 
1. {user=******, password=******}, propertyCycle -&gt; 0, testConnectionOnCheckin -&gt; false, testConnectionOnCheckout -&gt; false, unreturnedConnectionTimeout -&gt; 0, usesTraditionalReflectiveProxies -&gt; false ]

2. Cannot JSON encode object of class: class [B: [B@2466ff66"
1129,1508960766.000054,Rebeca,"I would look at the stacktrace for 2, my bet is you have other library loaded that globally extends jdbc to automatically json encode things; 1 looks like something from a connection pooling library, which again leads me to believe you are dealing with a much larger pile of code then your question suggests"
1130,1508964423.000116,Bibi,Does anyone know if there's a 'Storm' channel? Specifically using Clojure spouts/bolts with Storm.
1129,1508966332.000053,Daniell,There is not. You might as well ask questions here and see if anyone responds...
1131,1508971291.00003,Sharlene,"Hey guys, I’m looking for some resources/examples of speccing and unit testing database transactions in Clojure w/ clojure.java.jdbc (for now). Does anyone have a project or resource they can point me to for testing functions for reads, writes, and deletes?"
1131,1508971350.000151,Daniell,"<@Sharlene> Perhaps start with `clojure.java.jdbc`'s own test suite? Your question is a bit vague so I'm not sure what you're really asking.; (I would also say that ""unit testing"" and ""database transactions"" don't really go together -- that's more of an ""integration test"")"
1131,1508971540.000233,Sharlene,"So I have a bunch of functions like `(fetch-from-db ...)`, `(insert-into-db! ...)`, `(delete-from-db! ...), and `(update-in-db!)` that I need to test in order to pass my companies ‘code coverage’ standards and I’m not quite sure how to go about it. Like you said, ‘unit testing’ and ‘database transactions’ don’t really go together. I’m absolutely open to another approach given I’m very new to unit/integration testing as long as they’re automated. The automation is non-negotiable as per company standards."
1131,1508971840.000212,Margaret,"if you separate all logic into functional data to data transforms without side effects, the part where you talk to the db can be a very small stub that should already be tested by the library you are using; if they ask you to test interaction with the db lib, then you need integration testing instead of unit testing, and someone needs to hook up a db for that testing environment"
1131,1508971923.000128,Daniell,"This also highlights the disadvantage of writing wrappers for things that `clojure.java.jdbc` already does since you are now creating extra code that you need to ""test"" to pass an arbitrary code coverage rule :slightly_smiling_face:"
1131,1508971967.000253,Margaret,(as well as actually creating a layer of logic where regressions can occur)
1131,1508972057.000042,Daniell,"In order to test that `insert-into-db!` ""does the right thing"" you'd need to read the data back in and assert it matches your expectations -- which means that your tests rely on `fetch-from-db` which is a bit circular. And how would you test that `fetch-from-db` is doing the right thing? (would you `insert-into-db!` and then `fetch-from-db` and compare the result? Again, circular)"
1132,1508978514.000213,Sharlene,"Woah, alright, that’s a lot to take in and process, haha! Thanks for all the input guys! I think I know how I’m going to approach the testing/refactoring for this!"
1133,1508980276.000023,Clementina,"what's the right way of dealing with clojure.edn/read-string reading strings as symbols? e.g.:
```
(type (clojure.edn/read-string ""f8f2b6b3-39b8-4e76-a9f0-fa4a65ee225a"")) -&gt; clojure.lang.Symbol
; and I want it to be read as a string
```"
1133,1508980335.000183,Rebeca,it is a string; you passed it as a string in to read-string
1133,1508980435.000229,Clementina,"no, because this works differently `(type (clojure.edn/read-string ""\""foo\""""))`"
1133,1508980442.000132,Rebeca,sure
1133,1508980460.000154,Clementina,this time it's `java.lang.string`
1133,1508980464.000094,Rebeca,"because in edn notation a `""foo""` is a string, but `foo` is a symbol; reading `foo` as a string is not edn, so trying to get a library for parsing edn to do it is a fools errand"
1133,1508980573.000217,Clementina,"so that's what I'm saying, I have no way to know that this ""{}"" is a map until until it's ""read""; I want: ""{}"" to be read as map; ""[]"" to be read as vector; ""foo"" to be read as ""foo"" -&gt; string"
1133,1508980655.000097,Rebeca,"you will have other problem as well, because not all uuids are going to be valid symbols; likely whatever file you are trying to read is invalid edn; my guess would be whoever produced it used println instead of prn"
1133,1508980718.0002,Clementina,that's my point - I don't care about symbols - I want to parse maps and vectors and take everything else as strings
1133,1508980742.000299,Rebeca,write your own parser then; <https://github.com/Engelberg/instaparse>
1133,1508980899.000028,Clementina,"look, the request wraps params like this, 
```
{""customer-account-id"" ""f8f2b6b3-39b8-4e76-a9f0-fa4a65ee225a"",
 ""filter""              ""{:date {:from nil, :to nil}, :search nil}"",
 ""sort""                ""[:settled-at :desc]""}
```
on the server side I need to turn it into ""normal' hash map
a) need to keywordize keys - that's easy
b) need to uwrap maps and vectors - what's the easiest way of doing that?"
1133,1508981010.000101,Daniell,I suspect you could `(try (let [v (edn/read-string s)] (if (or (vector? v) (map? v)) v s)) (catch Throwable _ s))`; That would leave you with maps/vectors where the strings actually were EDN maps/vectors and leave you with the raw string everywhere else.
1133,1508981053.000109,Rebeca,"yeah, that is entirely different then what you first described; that is well formed edn, strings are quoted, you can process it with edn/read-string then walk it making whatever changes you want"
1134,1508981982.000009,Judy,"anyone have a go-to way of debouncing? in cljs i just use the google closure debounce fn, but i can't find anything for clj"
1134,1508982770.000103,Clementina,"I think I got slightly better idea.
```
(defn read-string*
  ""reads-string by parsing only maps, vectors, keywords and leaving everything else as-is.
  Because `(type (clojure.edn/read-string \""foo\""))` =&gt; clojure.lang.Symbol""
  [v]
  (let [r (s/conform (s/or :r map? :r vector? :r keyword?) (read-string v))]
    (if (= r ::s/invalid) v (second r))))
```"
1133,1508984081.000144,Daniell,"Bear in mind that if `read-string` throws an exception, you won't get back the original string -- in case `v` is not valid EDN."
1133,1508984147.000025,Clementina,daammmn...
1135,1508993242.00003,Leota,Never got a fix unfortunately :disappointed:
1136,1509024330.000651,Candace,even after downgrading leiningen?
1136,1509025262.000154,Leota,haven’t tried that yet
1136,1509025356.000771,Candace,i recommend trying it… `lein downgrade 2.6.1` i think works; that solved the leing ring issue for me at least
1136,1509026041.000477,Leota,"Yeah, problem is I have lein instlled through brew; and have no idea how to downgrade then :smile:; yeah, downgrading fixed the issue; thanks :slightly_smiling_face:"
1137,1509030902.000648,Berry,"is it an unofficial law in clojure that the first argument, if possible, be a collection? in order that things work nicely with swap!, update, update-in"
1137,1509031315.000263,Myles,"first in some contexts, last in others; map/filter et al have it last"
1137,1509031556.000153,Evan,<@Berry> Rich answered this here <https://groups.google.com/forum/#!topic/clojure/iyyNyWs53dc>
1137,1509031825.000044,Berry,"ah, so it's ""seq functions take seq last; collection funcs take collection first"" ?; that'd explain the filter/map case too"
1137,1509031869.000336,Hugo,I tend to almost always order my arguments from least to most variable
1137,1509031925.000042,Berry,"why does that make sense given: 1. clojure doesn't have nice partial application and 2. ppl generally optimzie for -&gt;, -&gt;&gt;, update, swap, ..."
1137,1509031939.000554,Willow,i `partial` a lot
1137,1509031957.000605,Hugo,I’m that weirdo that really like `partial` but mostly it’s just because I can keep track of my args cognitively easily with that heuristic
1137,1509031993.000183,Berry,"weird; I don't think there's a single partial code in my code, I tend to use #(... %1 ... ), maybe I need to learn how to use 'partial' in clojure"
1137,1509032091.000792,Hugo,For whatever reason my visual parser hangs on that literal lambda syntax. I’ll always either reach for partial or fn unless I’m writing throwaway
1137,1509032471.000074,Willow,"```
          update-display (partial display-error-in-zone errorzone)
          show-user (comp update-display alert-box auth/unify-response)
```
from a let binding. Then i can just call `show-user` on all of the callbacks. I unify the repsonses, turn them into the alert box map required and then update-display"
1138,1509035616.000481,Jon,Did anyone bring `re-natal` with hot reloading to run? It all seems to work except the hot reloading
1138,1509037052.000604,Fe,<@Jon> you need to disable the hot reloading feature in the react-native devtools; figwheel comes with its own hot reloading; all the RN packager sees is a stub that includes the JS requires; figwheel does the rest
1138,1509037142.000266,Jon,"<@Fe> ah alright, i’ll give it a try, thanks! I’m using intellij now and i’m not quite sure with what command i best start it. With the `react-native` task? Thats the only one which opens the app in my simulator."
1138,1509037184.000073,Fe,<https://github.com/drapanjanas/re-natal#development-with-figwheel>; `lein figwheel` and `react-native run-ios` or `... run-android` should do the job
1138,1509037237.000644,Jon,Hmm since i’m working with intellij tasks and not the command line - i guess i’ll have to run both tasks - a leiningen task and a react-native one
1138,1509037241.000576,Fe,don't forget to run `re-natal use-figwheel` once before that; forget about intellij for a minute and do it from the command line; you can build shortcuts for your IDE when you know it works; an IDE is only sugar for the command line
1138,1509037324.000393,Jon,"<@Fe> That i know, i’m usually more of a command line guy :slightly_smiling_face:; I’ll give it a try"
1138,1509037422.00054,Fe,intellij will work fine as an editor though
1138,1509037527.000476,Olen,You should look at Spacemacs. <http://spacemacs.org> — Terminal based or GUI. But powerfull. --end of commercials--
1138,1509037752.000242,Jon,<@Olen> I just moved to intellij from spacemacs - for the good for that everyone working on the coming project can use the same environment; We will have people which are not able to handle emacs right; But thanks for the ad :smile:
1138,1509037783.00023,Olen,"No problem. :sunglasses:; Sorry for these guys, BTW."
1138,1509037860.000154,Jon,"Well, older people have a hard time to learn a very new environment with less GUI than they are used to :smile: but yea, emacs is great"
1138,1509037947.000073,Candace,awesome!!!; great news :slightly_smiling_face:
1138,1509037982.000119,Olen,"Emacs is older than me. Maybe, older than you too. March 20, 1985 It’s birtdate. But, no problem if you return us back. Your real home. :joy:; Good luck with your project."
1138,1509038033.000606,Jon,<@Olen> Thanks :slightly_smiling_face:
1138,1509038084.000357,Fe,&gt;&gt;&gt; The original EMACS was written in 1976 by David A. Moon and Guy L. Steele Jr. as a set of Editor MACroS for the TECO editor.
1138,1509038089.000245,Jon,"I’m very new to the clojure environment, so i hope i won’t struggle too much. I want to take a go with react-native and fulcro. Hope I won’t run into too many problems :smile:"
1138,1509038103.000632,Olen,"OMG. Sorry, my fault."
1138,1509038324.00013,Jon,"Hey, hot-reload works! :smile: bit slow, but it works!; <@Fe> thank you :slightly_smiling_face:"
1138,1509038363.000501,Fe,np
1139,1509040031.000238,Margaret,emacs was the first real program to use windows - which is why emacs terminology for windows and frames and such is totally different from all the apps that came later (and closer to how windows actually work in the real world)
1140,1509040718.000623,Mia,<#C099W16KZ|emacs> is probably a better place for this discussion
1141,1509042077.000683,Berry,"I have a piece of clojure data, representing hiccup.

I need to go through the hiccup, andechange every ocurance of:

:on-click :foo1 ==&gt; :on-click (get kw-&gt;func-map :foo1)
:on-click :handler2 ==&gt; :on-click (get kw-func-map :handler2)

Is there a standard way to do this ?"
1142,1509042627.000359,Berry,"this is the best I have so far:
```

(def kw-&gt;func {})


(def sample-data 
  [:div
   [:svg {:on-click :foobar}]])

(defn conv-function [x]
  (if (and (map? x)
           (:on-click x))
    (assoc x :on-click [:lookup (:on-click x)])
    x))

(clojure.walk/postwalk conv-function sample-data)

```"
1142,1509044013.00047,Margaret,"<@Berry> I understand if the `map?` check is there for clarity, but it’s redundant - `:on-click` will only return non-nil if it can be looked up (I guess there’s a corner case of sets, but there’s nothing in hiccup that knows what to do with a set containing a keyword that I know of)"
1139,1509044106.000374,Margaret,"also, for that general flavor of thing I have when-pred `(defn when-pred [p? x] (when (p? x) x))`; (:on-click (when-pred map? x))"
1142,1509044172.00043,Berry,"good call on the map? // I may keep it for stylistic reasons as a ""type sig"" of ""this is a map"", but I agree with you that it's redundant"
1142,1509044413.000822,Owen,<@Berry> you can do that transformation much more precisely and efficiently with specter
1142,1509044510.000674,Berry,"<@Owen>: I agree. The problem I have with specter is that: 1. I can implement postwalk from scratch [so I understand it] 2. to this day, I haven't managed to implement a mini-specter from scratch, so it's still very magical to me"
1142,1509044586.000495,Owen,<@Berry> did you look at <https://github.com/nathanmarz/basic-specter> ?; that's basically the original implementation without any of the optimizations that came later
1142,1509044642.000414,Berry,<@Owen>: not until now; 30 lines is impressive; will look into it
1142,1509044653.000141,Owen,"essentially still how it works, especially transformation"
1142,1509044692.00014,Berry,what are the complex transforms that makes it faster (and this version slower) ?
1142,1509044731.000546,Owen,"the transform implementations are still the same for the most part; `ALL` uses protocols to dispatch on each type, and esp. for maps uses a different implementation per map type; and then there's the inline compilation / caching system that removes most of the navigator composition overhead; that stuff doesn't matter when it comes to what's actually going on when you do transform – basic-specter captures that aspect"
1142,1509044947.000657,Berry,"right, I realize it doesn't change semnatics, I'm just curious what issues you ran into and how you overcame them"
1142,1509045048.000274,Owen,"the inline compilation / caching stuff was extremely hard, optimizing the individual navigators was just a lot of digging into esoteric details of Clojure; `ALL`, `MAP-VALS`, `MAP-KEYS` were the most work to optimize; when specter outperforms idiomatic clojure code it's usually due to those navigators"
1143,1509048135.000124,Shaunda,"I'm seeing a weird problem with reading the new namespaced maps in a repl. I get this error in both a bare `lein repl` and `boot repl`:
```
user=&gt; (defn foo []
         #:a{:b 1})
  #_=&gt; #'user/foo
user=&gt; (defn foo []
         #:a{:b 1}
         )
  #_=&gt; 
user=&gt;              java.lang.RuntimeException: EOF while reading, starting at line 1
clojure.lang.LispReader$ReaderException: java.lang.RuntimeException: EOF while reading, starting at line 1

             java.lang.RuntimeException: Unmatched delimiter: )
clojure.lang.LispReader$ReaderException: java.lang.RuntimeException: Unmatched delimiter: )
```; it's the same exact code except the second version has a newline after the namespaced map. Can I bother someone else to try this code in their repl and see what they get? I'm on clojure 1.9.0-beta3; I would like to try it in a bare (non lein/boot) clojure repl, but I'm on ubuntu and the installer only works for macos right now; ok, so I tracked ^this down to being a problem with how the text is being read from the terminal"
1144,1509051646.000137,Margaret,"it’s in the reply / nrepl layer right?; you can use a bare repl by downloading the jar and running it with java, you don’t need deps to reproduce; (oh - wait - the latest jars need deps, never mind)"
1144,1509051739.000117,Shaunda,"yeah <@Margaret> I just followed the new instructions to get a bare clojure repl on linux and I do not see the problem there, only in lein/boot"
1144,1509051745.000386,Margaret,"you can also make a project with only clojure.core as a dep and no code, and make and run an uberjar; or `lein trampoline repl`"
1144,1509051814.000123,Shaunda,so either in the reply/nrepl layer or it's a terminal thing?
1144,1509051825.000149,Margaret,definitely not a terminal thing
1144,1509051832.000366,Shaunda,ok
1144,1509051836.000462,Margaret,it’s a known thing in reply
1144,1509051864.00065,Shaunda,oh really?
1144,1509051873.000226,Margaret,(unless coincidentally something else is causing the same error)
1144,1509051922.000288,Shaunda,is it this issue? <https://github.com/trptcolin/reply/issues/168>
1144,1509051962.000178,Margaret,"I’m not certain, but it certainly looks like the issue, yes"
1144,1509052487.000409,Shaunda,"and for anyone following along it looks like the real issue isn't in reply, but actually one more dependency level down in sjacket: <https://github.com/cgrand/sjacket/issues/25>"
1145,1509056152.000087,Berry,"Is there a way to simplify:
```
(and (map? x)
                  (get x [:rewrite :on-click]))
```
There is no guarantee that x is a map."
1144,1509056678.000395,Margaret,"so that means you want false instead of nil?; ```user=&gt; (get ""pretty much anything"" [:rewrite :on-click])
nil```"
1146,1509057556.00014,Bibi,"I've run into an interesting bug at work with an Apache Storm topology in Clojure.

One of the bolts takes, as a :param, some seed data from a dB. This data, consisting of two queries, is done inside a pvalues expression, returning a map with two key/value pairs - one for each query essentially.

Now, pvalues is implemented as a future if I'm not mistaken, and as such will cache its value for subsequent derefencing. The behavior I'm seeing is that upon a Storm restart we're getting old, stale data from this pvalues. It seems to be under circumstances when the topology is restarted round-robin with individual nodes restarted in a rolling fashion (hence the topology is never 100% off). So, could the pvalues 'state' be passed from a supervisor to another one? 

Curious if anyone else has run into a similar issue. We have a work-around, consisting of a complete take down of Storm and then a restart but... I guess that's SOP :slightly_smiling_face:"
1146,1509058128.000062,Margaret,"it uses zookeeper, zookeeper is for sharing small values between processes for IPC; typically one will create “ephemeral nodes” that disappear if nobody is using them; there’s a program called `zkCli` that lets you explore the data in zookeeper as if it were a file system; <https://www.tutorialspoint.com/apache_storm/apache_storm_cluster_architecture.htm>"
1146,1509058281.000177,Bibi,"<@Margaret> thanks, I'll check that out. It's easy enough to reproduce :slightly_smiling_face:"
1146,1509058499.00038,Margaret,I wouldn’t be surprised if there was a command of workflow to clean-slate the Storm state
1147,1509060669.000279,Dannette,"can I print the address of a variable, or something which I can easily use to compare it with another instance later?"
1146,1509061369.000301,Margaret,"<@Dannette> if you var quote an argument, it’s the container and not the thing in the container. This only works for vars (usually owned by namespaces) and does not work for local bindings, which are immutable; `+` is the function bound to `clojure.core/+`, `#'+` is the var that currently holds that value; a convenient thing is that if you call a var, the var looks up it’s own contents and calls that for you; for values that aren’t being called you can use `deref`, the shorthand `@`, or `var-get`; you can also look up a var by symbol via `resolve`, or look it up using the bindings set up in a specific namespace with `ns-resolve` - a tricky point is that ns-resolve doesn’t look up a var in a specific ns, it looks up a var using the rules that would be used in that ns, which includes bindings created by require, refer, use, etc."
1146,1509061949.000009,Dannette,thanks!
1147,1509061987.000277,Geneva,any sha1/sha256 lib recommendation?
1146,1509062005.00013,Margaret,"it’s like 3 lines of interop, max, you don’t need a lib"
1146,1509062062.000086,Aldo,"ya, this is our sha1 framework:
```
(DigestUtils/sha1Hex
                (str ""classic_""
                     pcoll-name
                     ""_""
                     (pr-str key-obj)))
```"
1146,1509062062.000192,Margaret,<https://gist.github.com/kubek2k/8446062>
1146,1509062087.000154,Geneva,"I see, thanks"
1146,1509062101.000303,Aldo,(assuming you're in a project that already pulls in apache commons for one of the million reasons that you might)
1146,1509062116.000077,Geneva,"No, I don’t use apache common"
1146,1509062125.000309,Aldo,"well, that would be an option!"
1146,1509062127.00008,Margaret,"yeah - that github gist works if you aren’t using commons, but most apps probably have commons already"
1146,1509062147.000085,Aldo,"it has loooots of really useful stuff if you don't care about jar size, and it's well maintained"
1148,1509072397.000045,Ray,"Hello, How do I write a function/macro where I can call another function (not mine) with a quoted structure as an argument. For example: 
```
(another-fun '[:someconfig :val :anotherkey :constkey :myvalue :dynamicvalue])
```
Where I get the value for `:myvalue` through some var. I have to construct this quoted expression with most of them as is, but one value evaluated.; I tried something like:
```
(defn my-fn [mval] (another-fun `[:someconfig :val :anotherkey :constkey :myvalue ~mval]))
```
but the syntax quote qualifies those keywords!"
1148,1509072819.000106,Daniell,<@Ray> Why does `another-fun` need a _quoted_ value and not just a regular value?
1148,1509072867.000121,Ray,<@Daniell> it is what the function takes as argument
1148,1509072873.00013,Daniell,Are you _sure_?; A quoted vector evaluates to just the vector so this ought to work: ```(defn my-fn [mval] (another-fun [:someconfig :val :anotherkey :constkey :myvalue mval]))```; Unless `another-fun` is doing something _very weird and non-idiomatic_...?
1148,1509073022.000051,Ray,"<@Daniell> hmm, I never thought of checking without the quotes.. I will try it and see how it goes"
1148,1509073120.000074,Daniell,"```boot.user=&gt; (defn another-fun [v] (reduce + 0 v))
#'boot.user/another-fun
boot.user=&gt; (another-fun [1 2 3 4])
10
boot.user=&gt; (another-fun '[1 2 3 4])
10
boot.user=&gt; (defn my-fun [my-val] (another-fun [1 2 3 my-val]))
#'boot.user/my-fun
boot.user=&gt; (my-fun 4)
10
boot.user=&gt; (my-fun '4)
10
```; See how `'4` evaluates to just `4` and how quoting the vector (in the second call) makes no difference.; On the other hand, you _do_ need a quote for a _list_ but you can construct it dynamically with `list`: ```boot.user=&gt; (another-fun (1 2 3 4))

java.lang.ClassCastException: java.lang.Long cannot be cast to clojure.lang.IFn
boot.user=&gt; (another-fun '(1 2 3 4))
10
boot.user=&gt; (defn my-fun [my-val] (another-fun (list 1 2 3 my-val)))
#'boot.user/my-fun
boot.user=&gt; (my-fun 4)
10
boot.user=&gt; (my-fun '4)
10
```; Hope that helps <@Ray>"
1148,1509073430.000092,Ray,"<@Daniell> actually using it directly did not work. let me try to write an actual similar function. I think I may be approaching the problem in wrong way!; I am writing a small function which can query datomic db for entities using various attributes; ```
(defn find-user-by[conn attrkw value]
  (let [user (d/q '[:find ?e
                    :in $ ?attr
                    :where [?e attrkw ?attr]]
               (d/db conn) value)]
    (touch conn user)))
```; <@Daniell> my function looks something like above; Instead of writing a different function for querying user entity using `:user/first-name` or `:email` etc, I thought of writing one and passing `:user/first-name` dynamically to the datomic `q` function"
1148,1509073715.000042,Daniell,"Ah, and you need the `?e` to not resolve, right?"
1148,1509073722.000136,Ray,yes
1148,1509073740.000175,Daniell,"```(defn find-user-by[conn attrkw value]
  (let [user (d/q [:find '?e
                    :in '$ '?attr
                    :where ['?e attrkw '?attr]]
               (d/db conn) value)]
    (touch conn user)))```; Quote the symbols you don't want evaluated instead of the whole vector."
1148,1509073796.000045,Ray,"Thanks let me try it :slightly_smiling_face:; <@Daniell> Thanks a lot, it worked! I was trying it wrong :stuck_out_tongue: Instead of quoting the ones that should be quoted, I was tyring to quote the whole thing and unquote only the attrkw"
1148,1509073968.000116,Daniell,"If it gets too frustrating, to keep quoting bits of it, remember that you can do stuff like ```
(conj '[:find ?e
        :in $ ?attr
        :where] (assoc '[?e _ ?attr] 1 attrkw))```; (a vector is associative on its indices so you can just swap in a new value for the `_`)"
1148,1509074121.000112,Ray,"Awesome, I was wondering if I can construct expressions like this. I was not sure if it works when I need everything quoted"
1148,1509074145.000131,Daniell,"""It's just data"" :slightly_smiling_face:"
1148,1509074206.000009,Ray,Thanks again <@Daniell> I am calling it a day now
1148,1509074230.000067,Daniell,"```boot.user=&gt; (let [query '[:find ?e
       #_=&gt;               :in $ ?attr
       #_=&gt;               :where [?e _ ?attr]]]
       #_=&gt;   (assoc-in query [(dec (count query)) 1] :user/name))
[:find ?e :in $ ?attr :where [?e :user/name ?attr]]
``` ^ <@Ray>; (although that's a bit horrible really)"
1149,1509078117.000165,Isabelle,Are there any known issues with `clojure.string/replace` acting funny?
1148,1509078243.000095,Daniell,"You'll need to be a bit more specific, otherwise the answer will just be ""no""...; Do you have an example of it ""acting funny"" <@Isabelle>?"
1148,1509078508.000029,Isabelle,"Sorry....   shot in the dark.   Have gotten some null pointer exceptions randomly when I'm definitely just feeding it a string and the function is working just fine in the repl.   `(clojure.string/replace ""123-456-asdf"" #""[^0-9]+"" """")`"
1148,1509078736.000033,Daniell,I think you'll only get NPEs from it if you pass it a `nil` as the string argument...
1148,1509079822.000137,Isabelle,Thanks <@Daniell> I just can't seem to replicate that so thought i'd check in the remote chance there was some known issue.   There never is but it makes me hopeful none the less.
1148,1509079896.000074,Daniell,"<@Isabelle> I bet if you add an assert on the value you're passing to `replace` you'll get an assertion failure; If you're on Clojure 1.9, you could `spec` (with `s/fdef`) the function that calls `replace` and `instrument` it and see if you can trap the `nil` value going in..."
1148,1509080028.000137,Isabelle,"Yes, thx! think I will try that"
1150,1509084189.000036,Willow,i see clojure.java.time has used ztellman's import vars macro from potemkin so you don't have to remember all of the sub namespaces
1150,1509084324.000187,Rebeca,"also a single segment namespace, terrible"
1150,1509084377.000162,Willow,why don't you like that. i haven't run into any pain from that so i'm wondering what to be on the lookout for
1150,1509084439.000088,Rebeca,"alex had a nice comment on a github issue I saw recently, but I don't recall were"
1150,1509084486.000055,Willow,ah i'd like to see it. he's a thoughtful commenter
1150,1509084504.00013,Rebeca,"it is bad technically because then the aot compiled clojure code would end up in the default package, and it is unneighborly because you are inviting name clashes; <https://github.com/bbatsov/clojure-style-guide/pull/100>; unsurpisingly, the people with ""contributor"" and ""owner"" badges for that style guide are in the wrong"
1150,1509084762.000051,Willow,awesome. thanks for digging it up; was it you that sent the PR with the bruce lee replacement?
1150,1509084802.000048,Rebeca,yes
1150,1509084839.000072,Willow,haha that was great. oh well. i just learned something from the discussion there; thanks for bringing it up
1151,1509090805.000134,Isabell,"Hi, I've got some core.logic question, i've posted it in core.logic chan but no responses, so I'm trying here:

i'm doing something wrong here but cannot find what:
```
(defn zipwitho [rel l1 l2 l3]
  (conde
    [(== () l1) (== () l2) (== () l3) l/succeed]
    [(fresh [fl1 rl1 fl2 rl2 fl3 rl3]
       (l/conso fl1 rl1 l1)
       (l/conso fl2 rl2 l2)
       (l/conso fl3 rl3 l3)
       (rel fl1 fl2 fl3)
       (zipwitho rel rl1 rl2 rl3))]))

(run 1000 [q]
  (fresh [a b]
    (== q [a b])
    (zipwitho 
      (fn [x y z]
           (l/all
               (fd/in x y z (fd/interval 10))
               (fd/+ x y z)))
       a
       b
       [10 10])))

;=&gt;
([(0 0) (10 10)]
[(1 0) (9 10)]
[(2 0) (8 10)]
[(3 0) (7 10)]
[(4 0) (6 10)]
[(5 0) (5 10)]
[(6 0) (4 10)]
[(7 0) (3 10)]
[(8 0) (2 10)]
[(9 0) (1 10)]
[(10 0) (0 10)])
```"
1152,1509111790.0004,Dannette,with java interop when instantiating a templated java class is it necessary to pass the template type?
1152,1509111821.000559,Sonny,no; Java erases generics at the JVM level to raw collection types and that’s what you’re using via Clojure’s java interop
1152,1509111929.000417,Dannette,"so I end up with the following error then which I cannot interpret:
```
java.lang.NoSuchMethodError: com.badlogic.gdx.graphics.g2d.Animation.getKeyFrame(FZ)Lcom/badlogic/gdx/graphics/g2d/TextureRegion;
	at play_clj.g2d$animation__GT_texture.invoke(g2d.clj:257)
```

With libgdx 1.9.4 this code worked. With 1.9.5 change it no longer does and the API change was:

&gt; - API Change: g2d.Animation is now generic so it can support Drawables, PolygonRegions, NinePatches, etc. To fix existing code, specify the TextureRegion type in animation declarations (and instantiations in Java 6), i.e. Animation&lt;TextureRegion&gt; myAnimation = new Animation&lt;TextureRegion&gt;(...);

That API I believe changed from `TextureRegion getKeyFrame(float x, b boolean)` to `T getKeyFrame(float x, b boolean)` so its not clear what is causing this error."
1152,1509111951.00011,Milissa,"why ""unsurprisingly""? Generally I've found the style guide to be a good rough description of Clojure idiom."
1152,1509113206.000316,Sonny,"that generic is on the return type, which is not even used when selecting an arity for interop (that’s all on the arguments); what is the call you’re making?"
1152,1509113246.000227,Dannette,"<https://github.com/oakes/play-clj/blob/master/src/play_clj/g2d.clj#L257>; I filed the stack trace here if that helps.
<https://github.com/oakes/play-clj/issues/112>"
1152,1509113622.000479,Sonny,I don’t understand why anything there is different or shouldn’t work
1152,1509113667.000045,Kareen,well the difference is that the signature is now `getKeyFramw(FZ)Ljava/lang/Object`; so AOT code will not link with new versions
1152,1509113691.000151,Sonny,"yeah, it doesn’t make sense to me why it’s looking for the old one - didn’t look like play-clj was aot’ed; <@Dannette> is *your* project AOT’ed? and if so, have you cleaned?"
1152,1509113731.000406,Kareen,i guess he's AOTing his project
1152,1509113748.000087,Dannette,"ah! yes, that was it. Didn't occur to me that AOT could cause this problem :disappointed:"
1152,1509114138.000164,Kareen,"<@Dannette> usually when you're seeing LinkageError/NoSuchMethodError/VerifyError in clojure, it's caused by AOT compilation"
1153,1509118811.000633,Jon,"Short, probably stupid question:
`(partition 5 5 [\space] ""cseerntiofarmit on"")`
Why does this not fill the last partition up to 5 elements? Wouldn’t it be supposed to do that when given a pad?"
1153,1509118947.000356,Evan,"&gt;&gt;&gt;In case there are not enough padding elements, return a partition with less than n items."
1153,1509119003.000416,Jon,Must have overseen that. Thanks. Is there no simple way to always keep exactly 5 elements and fill the rest with a given pad?
1153,1509119015.000656,Guillermo,"`(partition 5 5 (repeat \space) ""cseerntiofarmit on"")`"
1153,1509119060.000626,Jon,<@Guillermo> there we go :smile: thanks! i forgot about that :confused: still new :smile:
1154,1509121524.000611,Zola,"this might be a silly question, but is there a way to wipe clean all unknown derivations? something like an `(underive)` that takes no parameters?"
1154,1509121645.000212,Margaret,<@Zola> there’s global-heirarchy
1154,1509121652.000264,Zola,"or maybe i should be working with a hierarchy object, store it somewhere, and wipe it when necessary"
1154,1509121664.000756,Margaret,yeah - that’s much cleaner
1154,1509121674.00052,Zola,"okay, thanks :slightly_smiling_face:"
1154,1509121700.000136,Rebeca,actually using hierarchies isn't exactly well trodden ground
1154,1509121730.000061,Margaret,"<@Rebeca> derive, underive, and defmulti all use them - they just default to the global"
1154,1509121738.000187,Rebeca,right; but even derive and underive on the global hierarchy are not very common
1154,1509121853.000458,Kareen,"i think in my 7 years of writing clojure i've used derive twice, never underive"
1154,1509121911.0001,Rebeca,"so I am just saying, advice and best practices on using hierarchies(born out from experience) is going to be thin on the ground"
1154,1509122171.000605,Zola,"in my scenario i've built a mock file system in the browser from a tabular data source where each row only knows its parent id. when i read in the rows i derive its id with its parent id, and then i can easily grab all descendants without having to mapify or recursively iterate through the rows.; it felt quicker and more performant, but i guess it's somewhat stateful as well?"
1154,1509122232.000361,Rebeca,"sure, definitely; you are using a hierarchy to get a mutable map"
1154,1509122264.000182,Zola,what could go wrong!
1154,1509122277.000025,Rebeca,"you could just use a map in an atom; (a hierarchy is just a map in a ref, so not all that different implementation wise, but semantics I guess)"
1154,1509122404.000549,Zola,"gotcha. it was just an experiment / lazy way to not build and manage a tree myself. in that regards, success. :wink:; thanks for the advice guys"
1154,1509122473.000367,Lizabeth,Is there a way for us to override a protocol implementation on a type coming from a transitive library namespace?. Lets say I am consuming a library and it defined to look at a specific field on a Avro type and I want myself to override that lookup for my own usecase.
1155,1509125536.000487,Jonas,"`extend-protocol` is just a macro around `extend` which is just a function; so if you have the protocol, the type you would like to override, and the implementation, you should be able to just pass that to extend at runtime"
1155,1509126816.000497,Lizabeth,<@Jonas> The library already has a extend protocol on the type and I want to make sure for my project my own extend protocol on the same type overrides the implementation coming from the library and moreover the protocol itself is defined in the library.
1155,1509126952.000375,Jonas,"when you say for your own project, does that mean your code will use one implementation and in the same program, the library’s code will use a different implementation for the same protocol?"
1155,1509127308.000631,Margaret,"protocols are not locally bindable like that - there’s only one implementation possible per concrete class; if your implementation is defined later, it replaces a previous definition for that specific class (if it existed)"
1155,1509127438.000449,Lizabeth,I want to completely replace the definition. how do I ensure that my implementation is the one that is picked up at runtime?
1155,1509127442.000484,Jonas,"I just tried a dummy example and it looks like you get `IllegalArgumentException class MyType already directly implements interface MyProtocol for protocol`; when you try to replace the implementation; ```
(defprotocol MyProtocol
  (f1 [_]))


(defrecord MyType []
  MyProtocol
  (f1 [_]
    1))

(clojure.core/extend MyType
  MyProtocol
  {:f1 (fn [_]
         2)})
```; but ```(defprotocol MyProtocol
  (f1 [_]))


(defrecord MyType []
)

(clojure.core/extend MyType
  MyProtocol
  {:f1 (fn [_]
         1)})

(clojure.core/extend MyType
  MyProtocol
  {:f1 (fn [_]
         2)})```; works"
1155,1509127783.000179,Lizabeth,"yea, in the above example, lets say the first extend is in namespace1 and second extend(override) is in namespace2 and a third namespace uses namespace1, namespace2. I don't know if I can guarantee that namespace2 extend is always picked over namespace1. May be there is nothing I can do here but want some input for my usecase."
1155,1509128014.000026,Jonas,"if you wrap your extend in a function, then you can just call it at the top of your `-main`; ```;; namespace 2
(defn do-my-extend! []
  (extend MyType
    MyProtocol
    {:f1 (fn [_]
           2)}))


;; main namespace
(defn -main [&amp; args]
  (do-my-extend!))```; the -main will probably run after all the top level code; alternatively, if you have access to the source of the library you’re consuming, it might be worth considering just creating your own fork"
1155,1509128169.000433,Lizabeth,Thanks. I will try with the first approach.
1156,1509131106.000377,Berry,EDIT: question moved to <#C073DKH9P|re-frame>
1157,1509133582.000211,Kyra,"I want to read and write XML but I see there are `clojure.xml`, `clojure.data.xml` and `clojure.data.zip` to choose from. Does anyone have experience with these? Do they complement each other?"
1157,1509134502.000144,Jonas,I had to do some xml parsing at some point and ended up using clojure.data.xml. clojure.data.xml can parse lazily. I’m not sure if clojure.xml can also parse lazily and without loading the xml document into memory; seems like clojure.data.xml is a better than clojure.xml option unless you really only need very basic xml parsing functionality
1157,1509139489.000012,Kyra,"<@Jonas> thanks, I’ll give that a spin :sunglasses:"
1158,1509141794.000152,Lucia,"Does programming shape the way you think? A research project: <https://twitter.com/leraboroditsky/status/924006274852892672> Comments to <#C03RZGPG3|off-topic> , please."
1159,1509206177.000048,Isabell,anyone with core.logic experience here?; in particular core.logic.fd; i'm stuck with a relation i'm trying to implement; (map + a b) -&gt; c  (where a b and c are lists of ints)
1159,1509206411.00003,Anneliese,what does it mean by Returns a new coll consisting of to-coll with all of the items of from-coll conjoined? does it iterate over the whole collection or just joining them together?
1159,1509207860.000072,Bibi,"<@Anneliese> remember values are immutable, so you'll receive a new collection with all items conjoined.; There's more detail ""under the covers"" but you can think of this as a ""copy"" of the to-coll and from-coll conj'ed into a 3rd collection.; Well, conj of course doesn't join 2 collections, so excuse that part of my explanation.; Still you'll have a copy, and the original from-coll is still the same.; What explanation are you referring to in your original question?"
1159,1509210961.000054,Evan,"<@Anneliese>if i'm not mistaken you're asking about `into`, which does `(reduce conj to from)`, so it does iterate"
1160,1509215202.000069,Lesia,Is anyone using dire error handling? How does it work with multimethods?
1161,1509227279.000007,Mina,Which library do you use to connect a Clojure app to a relational database?
1161,1509227350.000071,Margaret,"I'm surprised when I see anything other than clojure.java.jdbc used to connect / communicate, but there are many options for DSLs that construct queries"
1161,1509227500.000067,Elwanda,I like hugsql together with conman.; <https://www.hugsql.org/>; <https://github.com/luminus-framework/conman>
1161,1509227692.000069,Mina,<@Margaret> do you write strings for your queries?
1161,1509227735.000036,Margaret,"no, but I'm 100% certain you shouldn't use the query generating library I use"
1161,1509227850.000057,Mina,"I don't get it, from your answer I realized you are using `jdbc`"
1161,1509227870.000031,Margaret,"jdbc is not a query generator, it's a connection library, which is what your question asked for"
1161,1509227993.000079,Mina,"Any preferences for a library to manage and handle queries and transactions? From the OOP world, something like an ORM?"
1161,1509233809.000077,Daniell,"<@Mina> Since there are no ""objects"" in Clojure, there's no need for ORM. `clojure.java.jdbc` is the ""standard"" contrib library for JDBC work -- `[org.clojure/java.jdbc ""0.7.3""]` is the latest version -- <https://github.com/clojure/java.jdbc/> -- community documentation <http://clojure-doc.org/articles/ecosystem/java_jdbc/home.html>; (disclaimer: I maintain this library); That library ""handles queries and transactions"". You have a hash map you want stored in a table? `(jdbc/insert! db-spec :table my-hash-map)` Simple as that.; If you want transactions over multiple operations: ```(jdbc/with-db-transaction [conn db-spec]
  (jdbc/insert! conn :table my-data)
  (jdbc/insert! conn :other-table more-data))```; If you want a DSL for composing SQL queries, I highly recommend `honey-sql` (linked from the community documentation above).; <@Mina> If you really want something ORM-like in Clojure, check out Korma (also linked from the community documentation above). I thought it had stopped being maintained a long time ago but it appears to have a new maintainer... My experience has been that people quickly run into limitations with Korma and end up dropping it. YMMV."
1162,1509239420.000014,Araceli,"For small and specifically performance-sensitive sections in a program, is it possible to write ""imperative with local mutable variables"" style code using Clojure? In other words, is it possible to ""write Java in Clojure""? The closest thing I could find were volatiles, and those are still one extra layer of boxing, right?; For what it's worth, I understand this goes heavily against the idioms of Clojure in the standard case."
1162,1509240421.000006,Bibi,"<@Araceli>, if you're thinking of writing ""Java in Clojure"", why not just write the Java code and call that? What I mean is, Java's a very good Java, if that's what you want :slightly_smiling_face:"
1162,1509240488.000046,Jonas,you can write “java in clojure”
1162,1509240498.000001,Araceli,"<@Bibi> Yes, that's the other option. Mainly, the benefit from a theoretical ""Java in Clojure"" would be locality/organization of the source files, for whatever that's worth."
1162,1509240528.000032,Jonas,depending on how much performance you need to eek out; most of the code I’ve seen that focuses on performance talks about type hints to avoid reflection which is one of the slower parts
1162,1509240600.000062,Araceli,"<@Jonas> I'm looking for on-par with writing regular imperative Java. Which is to say, I need mutable locals in an unboxed form."
1162,1509240616.000018,Jonas,are you creating lots of volatiles?
1162,1509240636.000005,Bibi,"Yes, and using things like transient collections, as long as they don't leak outside the function."
1162,1509240637.000004,Jonas,"you may be able to create them once and reuse them, depending on the context"
1162,1509240644.000045,Araceli,"For now, it's purely hypothetical. I want to know if I have this option available before I get into it.; Because, whether I do or don't have this option available will probably change what I do."
1162,1509240678.000001,Jonas,"because other than creation, I think it’s the same as just regular java mutation"
1162,1509240747.000082,Bibi,"Can you be more clear by what you mean with ""write Java in Clojure"" though? There's a wide scope of what it *could* mean."
1162,1509240853.000044,Araceli,"<@Bibi> Say I take a generic computer algorithms textbook. It has well-known algorithms in a form that can be translated near-verbatim into Java, same as any other traditional imperative language. If I wanted to do the same for Clojure, and maintain Java-level performance, my (admittedly limited) understanding is that I would need mutable locals."
1162,1509241079.000062,Bibi,"I see. I haven't tried (at least on purpose) to program imperatively in Clojure having spent so much energy to leave Java behind :slightly_smiling_face: I can't think of anything beyond mutability you'd need, it seems all flow control mechanisms are there."
1162,1509241145.00004,Araceli,"For the most part, I try to learn and write idiomatic Clojure. But for that low-single-digit percent of code that needs it, I'm exploring options for getting Java-level performance."
1162,1509241176.00006,Bibi,I'd just use Java for that.
1162,1509241215.000016,Araceli,"Yea, that makes sense."
1162,1509241234.000009,Margaret,"yeah - particularly because of the issues with boxed numerics, it's just easier to write a bit of java once you know which code has to be that fast"
1162,1509241305.000048,Araceli,"<@Margaret> True. Although, it seems like (from what I can tell from <http://insideclojure.org/2014/12/15/warn-on-boxed/>), unboxed math is possible in Clojure."
1162,1509241397.000022,Margaret,"it's possible, it's a pain to get right"
1162,1509241403.000001,Araceli,"<@Bibi> <@Jonas> <@Margaret> Well, thank you for your responses. I think I should go reconsider what I am doing and why, as it sounds like I may be entering ""when all you have is a hammer"" territory."
1162,1509241446.0001,Jonas,"I think one of the nice things for clojure is that if you do want to use some of the great work in the jvm ecosystem, you can use it as needed"
1162,1509241662.000084,Araceli,"So, I just went to look at the Benchmarks Game to see how they micro-optimized algorithms in Clojure. Unfortunately, it looks like, at some point recently, they removed Clojure from their languages list."
1163,1509245641.000049,Sonny,"Wat?; Looks like it was removed from the web site on sept 20th, along with scala?"
1164,1509247925.000045,Lovie,32-bit core is available <http://benchmarksgame.alioth.debian.org/u32/>
1164,1509249108.000046,Araceli,"<@Lovie> Looks like that one's full of dead links, unfortunately. I can click into the language pages, but not the implementation source code pages. It just returns 404 Not Found."
1164,1509258282.000026,Lovie,"2016 clojure removed?  Guess we'll have to wait until 2032...  ""abandoned in 2002...restarted in 2004...continued from 2008...Everything has changed; several times.""  <https://benchmarksgame.alioth.debian.org/sometimes-people-just-make-up-stuff.html>"
1165,1509267795.000064,Kristy,"anyone know a handy way to detect circular dependencies in graphs?; I took a look at ubergraph and loom, no luck"
1165,1509267953.000045,Hedwig,<https://en.wikipedia.org/wiki/Tarjan%27s_strongly_connected_components_algorithm>; should be translated to clojure very quickly
1165,1509268005.000043,Kristy,"can eventually try out, thanks!

meanwhile checking if I can steal something off `stuartsierra/component `; <https://github.com/stuartsierra/dependency/blob/master/src/com/stuartsierra/dependency.cljc#L89>"
1165,1509269300.000038,Rosia,@vemv isn't <http://aysy.lu/loom/loom.alg.html#var-dag.3F> what you need ?
1166,1509270515.000005,Kristy,guess so! `(def has-circular-dependencies? (complement dag?))` ?
1166,1509271482.000022,Rosia,"yes, a dag has no cycle by definition; this function won't give you the culprit however"
1166,1509271686.000049,Jermaine,Does anyone know how to add accents or diacritical marks to characters? As in add ¨ to a to make ä?
1167,1509272636.00008,Jermaine,"Found that you can do ""e\u0305""."
1168,1509278376.000001,Adele,"<https://github.com/funcool/clojure.jdbc>

Comparing to *java.jdbc* I like clearer docs and simpler API, especially that there's a difference between connections/dbspecs and how transactions are implemented. Other advantages are pointed out in the FAQ: <http://funcool.github.io/clojure.jdbc/latest/#why-another-jdbc-wrapper>"
1169,1509293778.000067,Adelaida,"By chance I happened across this yesterday:
<http://clj-me.cgrand.net/2013/03/18/tarjans-strongly-connected-components-algorithm/>

It sounds like it's maybe not what you need, <@Kristy>, but FYI just in case it's useful to you."
1166,1509317737.00011,Sherryl,"I'm not having much luck trying to write a pmap-like function that times-out after a specified number of milliseconds. I tried two implementations: one with futures and one with core.async. The more complicated futures one passes tests but doesn't stop processes when running in my project. The core.async one is even worse in that regard. I'm new to core.async. If you care to take a look, the code is here: <https://github.com/pdenno/utils4pmap/blob/master/src/pdenno/utils4pmap.clj> There are tests in utils4pmap_test.clj"
1170,1509330240.000119,Berry,"`(re-find #""[0-9]+(\.[0-9]*)?"" ""29482asdf"")`

this returns a vector [complete-match ... groups ... ]

is there a way to have it just return the full-match, and not all the intermediate groups ?

(I know that I can call first, but I'm trying to get an interface to re-find where it just returns compete string, instead of all groups)"
1170,1509330766.000035,Jonas,"you can use non capturing groups, `(re-find #""[0-9]+(?:\.[0-9]*)?"" ""29482asdf"")`; by adding the `?:` at the start of the group"
1170,1509337583.000076,Berry,"<@Jonas>: that is much nicer than my current solution of:
```
(defn re-find0 [pat s]
  (let [ans (re-find pat s)]
    (if (vector? ans)
      (first ans)
      ans)))
```"
1171,1509344083.000032,Margaret,"future-cancel is unreliable, if you want something to be cancellable you need to ensure it regularly calls some cancellable method (the list is relatively short) <https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/Future.html#cancel(boolean)>"
1172,1509349357.000168,Hermelinda,"<@Marla> <@Herminia> Around the time, you are visiting the meetup in prague on December, 6th, are you able to visit or speak on another meetup nearby?"
1173,1509356224.000278,Lesia,How do you pass data from `clojure.test` fixtures to tests (e.g a db connection where you don't know the port at write time)?
1174,1509361070.000199,Berry,"how do I create a regex that only ma5ches +-*/

`[+-*/]` ==&gt; invalid character range"
1174,1509361137.000213,Weston,you need to escape the -
1174,1509361169.000454,Berry,"oh, it's looking for a range of '+' to ""*/"" ?; I can see that being an invalid range; `#""[+\-*/]""` worked; thanks"
1175,1509364493.000061,Dane,"Guys Hi, Is there a problem with clojars? I can not download any dependencies, getting a protol version error?"
1174,1509365305.000039,Fe,"<@Berry>, I think alternatively you can move the dash to the end of the character group"
1175,1509365556.000414,Candi,<@Dane> clojars is working for me. Can you gist the output you see?
1175,1509369312.000132,Dane,<@Candi> <https://gist.github.com/anonymous/4bd2d48f05502968313e8b0cdc656826> here is the output
1175,1509369398.000215,Candi,What is the output of `lein version`?
1175,1509369440.000362,Dane,Leiningen 2.8.1 on Java 1.7.0_51 Java HotSpot(TM) 64-Bit Server VM
1175,1509369607.000133,Candi,"Did you just recently update lein? 2.8.0 changed the clojars url to point to the CDN instead of the server, and it's possible that old version of java doesn't have the proper TLS features to work with the CDN"
1175,1509369666.000537,Cecilia,you definitely should update java; 1.7 reached it’s end of life ages ago
1175,1509369709.000412,Dane,yes i updated lein it 4-5 hours ago
1175,1509369738.000194,Cecilia,"java 7 supports SNI which would be the most obvious reason for it to not work; but then again, it might be the CDN is using very strict crypto algorithms for it’s TLS support which might not be supported by java 7"
1175,1509369800.000179,Geneva,"I’m still with java 8, I haven’t updated to 9 because of clojure and lein"
1175,1509369823.000032,Cecilia,leiningen now works with java 9 with the latest update but one cannot say the same about all libraries
1175,1509369823.000083,Geneva,"It gives error on 9, at least it gave it to me, I don’t remember the error"
1175,1509369840.000379,Cecilia,and clojure 1.9-beta3 at least works with java 9
1175,1509369863.000097,Dane,i am now updating java then
1175,1509369863.000461,Geneva,"I saw some ppl saying to use clojure 1.9 with java 9, well, stable things should be with stable clojure for now (1.8)"
1175,1509369866.000357,Candi,"We tested the CDN with the latest java 6 when we were setting it up, and it worked, but it's possible that was due to a patch release, and maybe there is a patch to java 7 that provides the same support"
1175,1509369877.00009,Cecilia,<@Dane> stick with java 8 for now; not everything is up to speed with java 9 which brought the module mechanism which is partly backwards incompatible
1175,1509369901.000461,Guillermo,"(Clojure has always worked on Java 9, it was Lein and Boot that were late to the party.  Both are fixed now)"
1175,1509369921.000004,Geneva,<@Guillermo> but clojure 1.8?
1175,1509369930.000342,Candi,"if you can't update java, you can add the following to your `:user` profile in `~/.lein/profiles.clj`:
```
:repositories [[""clojars"" {:url ""<https://clojars.org/repo>""}]]
:plugin-repositories [[""clojars"" {:url ""<https://clojars.org/repo>""}]]
```"
1175,1509369941.000137,Guillermo,"Yup, that worked too <@Geneva> "
1175,1509369961.000084,Geneva,"Hmm, I will try again with lein latest version"
1175,1509369986.000329,Candi,That will point you back at the server-based repo instead of the CDN; which is what you were using before lein 2.8.0
1176,1509373521.00022,Dane,btw updating java solved the problem. Thanks all
1177,1509381388.00023,Guillermo,#lazyweb Has anyone here done performance comparisons of crypto from Java security providers (built-in or Bouncy Castle) vs. binding to a C library?
1177,1509381535.000404,Fairy,"I am working on a wrapper for a Java library (<https://github.com/ajoberstar/ike.cljj>) The library has a lot of varargs in it which can frequently be wrapped with clojure variadics. This requires a bit of arity overloading. The problem is that the original java has typed arguments in addition to differences in arity. What is the recommended way of dealing with this?
Here is an example <https://docs.oracle.com/javase/7/docs/api/java/nio/file/Files.html#createTempDirectory(java.nio.file.Path,%20java.lang.String,%20java.nio.file.attribute.FileAttribute...)>
I have three ideas: 1) in the implementation for the particular arity, check the type of the object dynamically. 2) treat it like a multimethod, let the dispatch function decide. 3) create separate function names for the wrapping function."
1177,1509381968.000191,Guillermo,<@Fairy> a lot of the wrappers libs turn FileAttribute... into a set of keywords.  I would not force varargs on the caller.; I wouldn't mind if a library _only_ helped me create a set of FileAttributes.  I have no issues with calling interop code directly. A lot of times it's clearer.  `(Files/createTempDirectory p s (make-a-set-of-attrs))`
1177,1509382389.000291,Fairy,"<@Guillermo> I see your point. The ugly bit is the java-vararg, if that were simpler then the wrapper is not doing much."
1177,1509382627.000371,Guillermo,"Varargs in java are just syntactic, it's still fixed arity under the hood.  The overloads for createTempDirectory are 2-arity and 3-arity, the clojure ones could be the same thing."
1177,1509383451.000271,Fairy,"<@Guillermo> I think the point here is that a java-varargs list of options such as FileAttribute is better treated in clojure as a collection, probably a hashmap. In that case the 2-arity can check if the second arg is a map and make the right call. Another way would be to provide a function for constructing the options array from a hashmap and using the java interop directly."
1177,1509383477.000772,Guillermo,"sounds good.; hashmap or simple keyword set `#{:read :write}`, since the attrs are only boolean flags"
1178,1509383613.000156,Alice,"Hi, Clojure intermediate here. What is the best way to read big endian binary file?"
1178,1509383982.00008,Margaret,"<@Alice> do you need to make something that parses the binary contents, does it suffice to just get the bytes in an array?"
1178,1509384028.000068,Alice,Yes.
1178,1509384040.000169,Margaret,which one?
1178,1509384150.000707,Alice,"Sorry, what exactly do you mean?"
1178,1509384160.000076,Margaret,"for bytes, java.io.FileInputStream will set you up, for more complex parsing, gloss is a good clojure option <https://github.com/ztellman/gloss>; I mean - if you need bytes, that’s much simpler. If you need to parse a specific format, there’s libraries that help"
1178,1509384223.000779,Alice,"Oh, I just need bytes. This library would just be overkill."
1178,1509384341.000188,Margaret,"<@Alice> simple example ```Clojure 1.9.0-beta3
(ins)user=&gt; (java.io.FileInputStream. ""/etc/passwd"")
#object[java.io.FileInputStream 0x41709512 ""java.io.FileInputStream@41709512""]
(ins)user=&gt; (def input *1)
#'user/input
(ins)user=&gt; (.available input)
5253
(ins)user=&gt; (def contents (byte-array *1))
#'user/contents
(ins)user=&gt; (.read input contents)
5253
(ins)user=&gt; (into [] contents)
[35 35 10 35 32 85 115 101 114 32 68 97 116 97 98 97 115 101 10 35 32 10 35 32 7
8 111 116 101 32 116 104 97 116 32 116 104 105 115 32 102 105 108 101 32 105 115
 32 99 111 110 115 117 108 116 101 100 32 100 105 114 101 99 116 108 121 32 111
110 108 121 32 119 104 101 110 32 116 104 101 32 115 121 115 116 101 109 32 105
115 32 114 117 110 110 ... ]```; <@Alice> one gotcha with java in general is bytes are always signed, but there’s simple bitwise math tricks that allow all the operations you would expect despite the signedness"
1178,1509384483.000325,Alice,Thank you very much. I just found `with-open` and `input-stream` functions. Does they do the same job?
1178,1509384524.000513,Margaret,input-stream doesn’t help much there since FileInputStream just gives you the thing - but with-open does help if you want to have it automatically close when exiting a specific scope; FileInputStream is already an InputStream - though I guess you can use input-stream if you want a BufferedInputStream instead?
1178,1509384768.000425,Alice,"Yep, I'll work with big files, so BufferedInputStream is probably a better choice. Anyway, I think I've got it. Thanks again."
1178,1509384791.000646,Margaret,"I don’t think that’s what the buffer on BufferedInputStream is about at all; it adds mark and reset support for streams that don’t implement those methods, but FileInputStream already gives you those methods; it’s not a file buffer for performance, it’s a software buffer for replay; if file usage needs to be optimized, there are things in java.nio for mmaping where supported"
1179,1509386036.000732,Jonnie,"Would someone know why the following works in Java:
```
 KafkaMetricsReporter$.MODULE$.startReporters(new VerifiableProperties(props))
```
But  cannot seem to reach `$.MODULE$.startReporters` from Clojure?

(from <https://stackoverflow.com/a/47012396/1327651> )"
1178,1509386136.000545,Margaret,"$ is part of the name, it’s not it’s own thing; it would be `(-&gt; KafkaMetricsReporter$ (.MODULE$) (.startReporters (VerifiableProperties. props)))`"
1179,1509386675.00078,Raul,"Anyone know if there's an already built solution to logging slow tests with leiningen? (i.e. when running `lein test`, if a `deftest` block takes longer than some specified (or assumed) amount of time, it prints a warning)?"
1178,1509389681.000167,Jonnie,"<@Margaret> that looks like an explanation!
However I get 
```
Caused by java.lang.RuntimeException
   Unable to resolve symbol: KafkaMetricsReporter$ in this context
```
I checked as well I can compile the Java code in the answer just fine

I tried `(-&gt; KafkaMetricsReporter (.MODULE$) (.startReporters (VerifiableProperties. {})))`

but then I get 
```
Unhandled java.lang.IllegalArgumentException
   No matching field found: MODULE$ for class java.lang.Class
```"
1180,1509389880.000483,Jonnie,"Sorry, disregard the first point, I was missing an import for `KafkaMetricsReporter$`; This worked! `(.startReporters (KafkaMetricsReporter$/MODULE$) (VerifiableProperties. props))`; Thanks a lot!"
1180,1509390306.000249,Margaret,You have unnecessary parens around the access of the static MODULE$ value - they are accepted but not needed (see (Math/PI) for a more obvious version of what that is doing)
1178,1509390600.00052,Margaret,"```user=&gt; (Math/PI)
3.141592653589793
user=&gt; Math/PI
3.141592653589793```"
1181,1509392046.000439,Lavenia,"Hey folks, I've been working on a single-purpose lib for exploring complex data structures from the REPL as rapidly as possible, with minimum keystrokes. If that's something you spend time doing, I'd love for you to try it out &amp; let me know how it goes. I'll eventually post it in <#C06MAR553|announcements>, but I'm hoping to get feedback from a few more people first. Thanks!
<https://github.com/eggsyntax/datawalk>"
1178,1509392200.000203,Margaret,it also accepts `(. MATH PI)` - which is pretty much only useful for writing macros
1182,1509394610.000013,Douglass,"I know about core/bean but does any other lib/function exist that would also allow customizing what to read and include public members as well, not just bean methods?"
1182,1509394690.000658,Rebeca,<https://github.com/arohner/clj-wallhack> might be a good start
1182,1509394866.00009,Douglass,oh that's specifically for reading specific protected members; seems like obj-&gt;map from <https://dzone.com/articles/clojure-converting-java-object> is close to what I need
1182,1509395941.000253,Rebeca,it reflectively reads members private or otherwise; what you want is to reflectively read members
1183,1509400360.000368,Wendi,"There's a gotcha hiding in using a keyword dispatch on multimethods with two args... can you see it?; ```user=&gt; (defmulti m :type)
#'user/m
user=&gt; (defmethod m :t1 [a b] a)
#object[clojure.lang.MultiFn 0x3eb5ed75 ""clojure.lang.MultiFn@3eb5ed75""]
user=&gt; (m {} :t1)
{}```"
1184,1509401265.000019,Kareen,heh
1184,1509406872.000229,Berry,"I'm doing lexing via regex. Is there a re-find which takes an index as an argument? I want to say (search for this regex, but pretend the start of the string is at index i). This is to avoid constant calls to substring."
1185,1509407248.000171,Berry,is there a clojure builtin for `(when x (f x))` ? it seems like the type of thing someone has assigned a word to
1184,1509407383.000131,Margaret,`(some-&gt; x (f))`
1184,1509407426.000122,Jonas,"for your lexer, do you plan on support laziness? ie. being able to parse a stream without consuming the whole stream?; there’s several options for readers in java as well as things like `java.util.Scanner`; that may makes things easier; for eg, <https://docs.oracle.com/javase/1.5.0/docs/api/java/util/Scanner.html#next(java.util.regex.Pattern)>"
1184,1509407515.000187,Margaret,"<@Berry> regarding regex with settable input position, I bet Scanner would help <https://docs.oracle.com/javase/7/docs/api/java/util/Scanner.html>; oh, haha"
1184,1509407528.000202,Jonas,:stuck_out_tongue:; your link is much better. not sure why the first result that came up for me was for java 1.5
1184,1509408029.00015,Berry,"<@Margaret> <@Jonas>: I forgot to mention, this is a *.cljc file, so I need jvm + js // I guess I should now look into js regex libraries :slightly_smiling_face:; re-find has been great so far in that it works in both"
1184,1509408124.00006,Margaret,looks like this has a similar api <http://sstephenson.github.io/strscan-js/>; <@Berry> also double check if subs is actually a problem - it should be cheap (on the jvm at least) since java strings are immutable
1184,1509408811.000048,Berry,<@Margaret>: some-&gt; is precisely what I need -- thanks; though it appears that example can besimplified to (some-&gt; x f)
1184,1509408900.000204,Margaret,"I like to use parens with arrow macros, it's a personal style preference"
1186,1509410096.000113,Wendi,<@Sonny> I can't see this would ever be desirable behaviour but could be surprising.  Do you think a patch would be considered?  Something which did (k arg1) instead of (apply k args) for the keyword case.
1184,1509414041.000095,Sonny,There are other variadic cases where I don’t think this would work
1186,1509416716.000225,Wendi,Fair enough.; It'd seem a shame to make a special case check for keyword? of the dispatch method
1186,1509417627.000003,Sonny,I don’t understand why you have [a b] in that method - that just seems wrong
1186,1509418089.000245,Wendi,"Yes, the code works but is surprising.; Say we have a multi-method which takes two args and we want to dispatch on a keyword from the first arg.; The code does that.  The dispatch keyword is called as a function (get) which can take one or two args.; When get doesn't find the keyword the second arg is returned.; That's the oddness.  We expect the dispatch-fn to return nil but it returns `:t1`.; To avoid this we need something like 
```(defmulti m (fn [a b] (:type a)))```"
1187,1509421239.000054,Sonny,That’s what you should have. The prior example is wrong
1186,1509424015.000068,Wendi,Fair enough.  Thanks.
1188,1509443625.00046,Rosia,"Hi, is there a name for the common design pattern of letting an HOF accept extra arguments that will be applied to the given function, e.g `swap!` or `update` ?"
1189,1509448297.000287,Fe,The succession model is a term I've heard
1189,1509448819.000325,Kareen,that has more to do with describing behaviour than api
1190,1509452076.000029,Jacob,"if I have a local jar file, how can I include it in a project? i.e where should the jar be located and what do I need to add to the project file? (lein 2)"
1191,1509455184.000036,Cecilia,Maybe this helps <https://www.pgrs.net/2011/10/30/using-local-jars-with-leiningen/>
1191,1509455895.000176,Jacob,"Yeah, I just wasnt sure if 2011 was out of date..."
1191,1509456492.000009,Virgil,"Playing around with `clj`, so I needed to figure out how it works, so I did; ```14:27 $ clj --help
Usage: java -cp clojure.jar clojure.main [init-opt*] [main-opt] [arg*]
```; I might understand why `clj --help` mentions java, but I'd expect it to have a more specific help message?"
1191,1509457000.000312,Jacob,Is it really so convoluted to add a local jar to a project?
1192,1509459222.000227,Billye,"Does anyone familiar with the salesforce API, know what would happen if I have push topic's set up to sync salesforce data to a standalone db, then a user's permissions change and the user is now long has access to a specific record, would the push topic send a `delete` update for the request that the user can no longer view?"
1192,1509459368.000416,Joette,A noob question: is it possible to make a http HEAD request in clojure without reverting to javaland (HttpURLConnection) or pulling in a third party dependency?
1192,1509459502.000297,Weston,"clojure.core has no http client unless you count slurp as one, and slurp doesn't support http methods options; so yeah, interop or clj-http&amp;co"
1192,1509460004.000406,Berry,"I find myself writing a lot of code of the form
`{:tag kw kw data ... other attribs ... }`
for ecample
`{:tag :pat :pat .... :name .... }`
thi seems a bit redundant"
1193,1509466264.00046,Jesusa,"Good morning :slightly_smiling_face: Is anyone here familiar with Neanderthal? I'm trying to find some missing constants that are required in order to run the hello-world example. `(require '[uncomplicate.clojurecl.core :as uc])`  from a repl in the example project gives me a `CompilerException java.lang.Exception: No namespace: uncomplicate.clojurecl.constants, compiling:(uncomplicate/clojurecl/core.clj:1:1)`. There is no `constants` namespace defined anywhere in the Neanderthal repo, and I can't find a repo in the Uncomplicate org that looks like it might have those constants."
1193,1509467467.000836,Lovie,Obviously <@Jesusa> you haven't got the correct setup to use `neanderthal` <http://neanderthal.uncomplicate.org/articles/getting_started.html#installation>  `ClojureCL` (OpenCL) not installed correct; you might like to try <#C08PLCRGT|uncomplicate>
1193,1509470129.00086,Jesusa,"Maybe I should go over the opencl install again via the Neandertal instructions. I already have webcl working in Firefox, and opencl working from Python.; Thanks for the room link, I almost missed that"
1194,1509471533.000695,Berry,"is there a good word for 'compute a bunch of auxiliary / derived data for caching purposes' ? (informatically theoretically, it adds nothing new, but it precomputes a bunch of lookup tables / caches)"
1194,1509471576.000177,Margaret,"it’s similar to how dynamic programming works, right? - organizing things so you can save and reuse partial calculations"
1194,1509471671.00072,Berry,"'dynamic programming' is a very specific class of algorithms; where you save computation by remembering it

in my case, I'm pre-building lookup tables -- it's not quite the same; best word I have so far, is 'prep'"
1194,1509471898.00036,Margaret,any reason you aren’t using memoize?
1194,1509472487.000148,Berry,"err, so I have this structure which represents the 'precedence of each operator'; so it's something like:
[[:right ""^""]
 [:left ""*"" ""/""]
 [:left ""+"" ""-""]]; now, given two ops, I want to know which has a higher precedence .. so I need to 'invert' the above vector of vectors, and cache the results, to get something like:
^ -&gt; 3
* -&gt; 2
/ -&gt; 2
+ -&gt; 1
- -&gt; 1; so I'm literally precomputing a map; I'm not particularly happy with 'prep', but it's the best word I can think of"
1194,1509472817.00093,Margaret,"why generalize it, why not just call it “build-precedence-map” or something mundane like that; do you anticipate this being a common type of task?"
1194,1509472908.000006,Berry,"1. why do you believe i'm trying to 'generalize' it?

2. 'build-inverse-precedence-map' is perfectly valid, but I was hoping for a shorter word; I'm not trying to 'write a more general function', I'm literally looking for a shorter func name."
1194,1509473309.000173,Willow,"tough if we don't know exactly what it returns and how you'll use it. If it just returns -1,0,1, `compare-by-precedence`. If it returns the lower of the two `lower-precedence`, if it returns a vector of the two ops sorted, `sort-be-precedence`. If it returns a map that allows you to lookup by operator token then `make-precedence-map`"
1194,1509474010.000041,Berry,"ah, I see, I should have been clearer on input/output
```
input:
{:tag :grammar
...
:precs [[:right ""^""] [:left ""*"" ""/""] [:left ""+"" ""-""]]
}

output
add a field
:inv-precs { ""^"" [3 :right] ""*"" [2 :left] ""/"" [2 :left] ""+"" [1 :left] ""-"" [1 :left]]
```"
1195,1509475284.000129,Zola,"i'm getting a compilation error in 1.9.0-beta3: `Caused by: java.lang.ClassNotFoundException: clojure.pprint` i definitely see it in the source/tests, and it's basically a new/empty project. any idea what i'm doing wrong?"
1195,1509475597.000439,Daniell,<@Zola> How did you create the project? Have you edited it at all? What command are you using that produces that error? What does the source look like that it is complaining about?
1195,1509475958.000379,Zola,i used the lein-re-frame template and added just a few deps. you have a good point though... i'll start with a barebones project and rule out any weird dependency problems first.
1195,1509475985.000213,Margaret,sounds like some code was assuming clojure.pprint is loaded on startup (a bad assumption)
1195,1509476194.000723,Zola,"dumb question i know, but why is that a bad assumption?"
1195,1509476218.000401,Margaret,"there’s some tooling which requires clojure.pprint, that often runs on startup, but it’s not something you can count on; if you use a namespace, you should explicitly require it, even if it comes with clojure.core"
1195,1509476245.00017,Zola,"ahh okay, thank you"
1195,1509476344.000024,Margaret,"even for namespaces like <http://clojure.java.io|clojure.java.io> that are loaded by clojure.core itself, there’s no explicit promise that will be the case with the next clojure release, so it’s better to require it if you access it"
1195,1509476826.000326,Zola,"got it :slightly_smiling_face:; (by the way, that was exactly the problem)"
1196,1509517943.00011,Corazon,is a lambda function the same as a closure?
1197,1509527374.000194,Dimple,"hey all - I'm having super slow compile times on my clojure app - I remember there being a way to report on which namespace the compiler is busy working on, but can't find it anywhere now?; I suspect one or two namespaces to be culprits, so would like to identify them and then see what I can do"
1196,1509527708.000219,Eliana,"<@Corazon> They are not the same. A lambda is a function as a value (you can assign it, pass it around, execute etc). A closure is an implementation detail. It has to do with visibility of symbols when the function is created inside another function (think of it as an implicit map). The inner function ""closes over"" the context of the outer function, thus creating a closure. This allows the inner fn to refer to symbols that are not declared locally to it. The wikipedia entry does a decent job describing it: <https://en.wikipedia.org/wiki/Closure_(computer_programming)>"
1196,1509531617.000151,Corazon,Cool; are there people that set clojure to strict type checking?
1196,1509531752.000123,Cecilia,you mean typed clojure?
1197,1509537108.000085,Julee,"excellent comparison. by the way, your avatar is incredible. always glad to meet a fellow Dead head, especially a developer Dead head :metal:"
1198,1509542934.000068,Eliana,"Apart from repainting with clj colors, I've just stolen a logo with long history :slightly_smiling_face: <http://xahlee.info/UnixResource_dir/lambda_logo.html>"
1198,1509543870.000324,Roscoe,I'm trying to scrape the slack logs here `<https://clojurians-log.clojureverse.org>` for a quick analysis thing but am getting a `javax.net.ssl.SSLHandshakeException: Received fatal alert: handshake_failure` with slurp/http-kit/clj-http. anyone know a solution for this?
1198,1509544085.000191,Berry,"in clojure, is it possible to use , in large numbers, like entering 1e9 as 1,000,000,000 ?"
1198,1509544331.000052,Roscoe,"<@Berry> no, commas are equal to whitespace so they would be read as separate numbers"
1198,1509544394.000461,Berry,<@Roscoe>: thanks for concise explaination
1198,1509544913.000404,Terra,"<@Roscoe> `slurp` works for me:
```
(slurp ""<https://clojurians-log.clojureverse.org/>"")
&lt;!DOCTYPE html&gt;
&lt;html&gt;
,,,
```"
1199,1509547779.00028,Sonny,that doesn’t ring any bells for me other than the :verbose flag in require. Getting that set at the right place in your code might help. There is a particularly bad exponential problem in compilation that was fixed in the 1.9 alphas - curious if you’re using a 1.9.0 beta or 1.8.0 etc?
1199,1509547842.000146,Jena,is there a tool to detect unused functions in a clojure project?
1199,1509548223.000595,Sonny,Cursive colors them a gray color by default; not sure if that’s reusing something public or not; kibit or eastwood would be good places to look
1199,1509548828.000515,Cecilia,<@Sonny> I think Cursive uses it’s own static analysis to do that
1199,1509548841.000099,Sonny,that would be my suspicion too
1199,1509548845.000521,Mallie,"It can be harder than that too. Cursive colours them grey, but if you have a unit test exercising that function then it is 'used', even if it's only the test and nothing in the 'actual' codebase that uses it; i.e. Cursive won't colour a fn grey if there is a test for it"
1199,1509548885.000113,Sonny,more incentive not to test :)
1199,1509548897.000535,Cecilia,one could theoretically write relatively easily a tool which goes through the code and finds which parts are used and which aren’t; that is effectively very close to tree shaking; I think cgrand did some work on this; as part of this <https://github.com/portkey-cloud/portkey>
1200,1509550606.000416,Sonny,"I’ve done some stuff with tools.analyzer that could answer these questions, but it’s not in a consumable form atm"
1200,1509550659.000489,Milissa,"<@Jena> As I recall from some months ago, I didn't see unused-function checking in kibit or eastwood. This extremely simple bash script was enough for me at the time: <https://gist.github.com/joelittlejohn/4729776>"
1201,1509554670.000536,Jen,"hey guys,
what’s the idiomatic clojure way to handle accessing a data source from multiple disparate points? say you had some data `db` and “features” `a` and `b` that needed to get into that data. on one hand it feels wrong to just use direct interactions like `get get-in` etc. we should be programming to an interface, no? on the other hand, an interface feels clunky if mostly all it’s doing is using `get get-in` itself. am I thinking about this incorrectly?"
1201,1509554720.000542,Margaret,"<@Jen> the data type is made of a number of interfaces; it's considered idiomatic to put things in plain data, and access it as plain data, and not hide things with private values or accessor functions"
1201,1509554814.000434,Jen,i see. and the “interface” to which you are programming is just stricter rules on schema mutations? such as accretion instead of deletion?
1201,1509554828.000492,Margaret,"unless you made something mutable and have to prevent invalid operations... then you probably want to just do it the way you would in java, but seriously second guess whether it actually needs to be mutable; the data structure itself, eg. hash-map, implements a number of interfaces. We use those to manage the data in the map.; on a more abstract level  there are things like spec and schema if you want to make assertions about the content and shape of the data, but honestly clojure isn't designed for making these sorts of restrictions; it's possible, but a bit clunky, and it's easy to make a mess if you try to program with that mindset in a clojure codebase"
1201,1509554989.00034,Jen,"I think I understand. it’s a whole new world, coming from a different paradigm. I just can’t help but think about some sort of data access layer, or a (spooky) data access object. it allows you to aggregate things like logging/monitoring, and provides a “single door” through which everyone has to walk. leaving that behind feels uncomfortable"
1201,1509555059.000121,Margaret,"if you think giving up controlling data access is scary, just try using clojure for a while then trying to go back and write code with mutable objects again - that stuff is horrifying; there are other languages where you both have strictness about access and types, and immutability, but they have their own trade offs too (typically clumsy and complex language design, and spending a large amount of your time trying to make the compiler happy instead of solving your problem directly)"
1201,1509555154.000548,Sherrie,"<https://news.ycombinator.com/item?id=15603023> &lt;--- For those interested, we're also looking for more developers"
1202,1509560196.000317,Berry,"on vectors, is last guaranteed to be O(1) time and pop guaranteed to be O(log_32 n) time ?"
1202,1509560259.000239,Rebeca,no; last is a seq function and is O(n)
1202,1509560511.000278,Guillermo,"and that is a feature, not a bug ^"
1202,1509561120.000588,Kareen,use peek for O(1) on vectors
1202,1509561612.000548,Berry,"changed last to peek. Can someone please explain why, on vectors, it's O(n) on purpose ?"
1202,1509561667.000146,Myles,because using a seq is generic
1202,1509561915.000331,Guillermo,you don't want polymorphic performance
1203,1509568171.000039,Detra,"Hey, Alex's tweeting has reminded me of a particular case that I find difficult to deal with in Clojure.  I wonder if there's an interesting way to deal with it.; The recent example was turning nested maps which would work for transacting to Datomic except for having reverse attributes in them, into a sequence of maps which do work because they have entities broken out with forward references.; The part of it that's difficult (for me) to handle in Clojure is the recursion on a tree structure /and/ collecting multiple values."
1202,1509568383.000026,Rebeca,use for
1203,1509568398.000076,Detra,How would one use for?
1203,1509568415.000146,Rebeca,lemme see if I have a good gist
1203,1509568455.000204,Raul,"<@Detra>anything that involves ""complex thing on nested data structure"" generally has me reaching for <#C0FVDQLQ5|specter> ; it'll probably still be somewhat complex though"
1203,1509568612.000206,Rebeca,"```
((fn map-paths [path m]
   (if (map? m)
     (for [[k v] m
           i (map-paths (conj path k) v)]
       i)
     [[path m]]))
 []
   {:a {:b 1
        :c [3]}
    :w {:x 1}})
([[:a :b] 1] [[:a :c] [3]] [[:w :x] 1])
```; something in that style"
1203,1509568935.000662,Delois,<@Mallie> Good point: <https://github.com/cursive-ide/cursive/issues/1877>
1204,1509572885.000453,Alayna,"Hi all, I was looking for a shortcut to see whether a key in a map was present, and was mildly surprised that  this didn't work:
```
(def s [{:a 1} {:a 2} {:a 1} {:a 0}])          ; I want to filter for {:a 1}
```
Using an anonymous function is trivial:
```
user=&gt; (filter #(= (:a %) 1) s)
({:a 1} {:a 1})
```
But I sort of expected this to work just as well, and it doesn't seem to:
```
user=&gt; (filter (comp :a #{1}) s)
()
```"
1204,1509572998.00034,Willow,`(filter (comp #{1} :a) s) =&gt; ({:a 1} {:a 1})`; compose applies right to left
1204,1509573021.000124,Alayna,"Oh, darn it! Got the order backwards"
1204,1509573026.000206,Willow,`(comp fn ... f2 f1)`; simple bugs are the best bugs :slightly_smiling_face:
1204,1509573044.000461,Alayna,Awesome. Thanks <@Willow>!
1204,1509573081.000352,Willow,just think of compose as smashing its functions into the argument provided
1205,1509581813.000261,Berry,"1. imagine I'm editing `foo.clj`
I can define a macro, and use it later in the same file

2. now, imagine I'm editing `foo.cljc`
and I define a macro, say via
`#?(:cljs (defmacro ...))`
now, I should be able to use this macro in `foo.cljc` on the clojure side -- but is there anyway to also use it from the cljs side?

or does cljs absolutely require macros come from other namespaces, that are pure *.clj files ?"
1205,1509582499.000072,Kristy,"`(binding [*out* /dev/null])`

Obviously /dev/null isn't a thing in Clojure, but how to supress stdout? Forgot"
1205,1509582790.000044,Berry,will the output overwhelm `with-out-string ` ?
1205,1509582843.000219,Kristy,"possibly not. resulting string wouln't be colossal, still I'd like to learn the cleanest pattern"
1205,1509582889.000039,Torie,"implement your own `PrintWriter` class, which does nothing"
1205,1509582915.000078,Wenona,"`(<http://clojure.java.io/writer|clojure.java.io/writer> ""/dev/null"")` too"
1205,1509582929.000098,Margaret,"```=&gt; (binding [*out* (proxy [java.io.Writer] [] (append [&amp; _]) (close []) (flush []) (write [&amp; _]))] (println ""hello, black hole""))
nil
```"
1206,1509588667.000056,Berry,<https://stackoverflow.com/questions/29914967/can-cljc-single-file-macro-definitions-to-work-with-clojurescript> &lt;-- does this trick still work ? I'm getting 'macro not found from my cljs compilation'
1207,1509589819.000076,Deloras,"I’m trying to find an article I read a while ago, told as a parable about a guy named Rich in the land of boxes, about how complex objects were and how simple composable tools could be more enjoyable; and my google-fu is failing me… so, does anyone know this piece and can remember the title?"
1207,1509597179.000011,Aldo,<@Deloras> not referring to kingdom of nouns are you?
1208,1509597474.000075,Daniell,That was one of Steve Yegge's big ol' rants... <http://steve-yegge.blogspot.com/2006/03/execution-in-kingdom-of-nouns.html>
1207,1509598604.000069,Deloras,"no, I very specifically remember it referring to objects as some kind of blocks or boxes, and a shout-out to Rich"
1207,1509598886.00006,Aldo,ah yeah that does sound different
1209,1509602952.000027,Brande,"hmm, is there a plan to have <https://github.com/clojure/brew-install> in a apt/yum repository?; seeing great potential for JVM/Clojure command line scripting :slightly_smiling_face:; ah, missed this: <https://clojure.org/guides/deps_and_cli#_installation_on_linux>"
1210,1509603898.000091,Else,"hey folks - veteran c++ game engine programmer here, emacs hacker / elisp user, getting into clojure; I was thinking about trying to do some kind of music visualizer (think g-force / milkdrop / etc) - what's the best approach to get framebuffer access and / or shader access in clojure? thanks in advance!"
1210,1509604497.000104,Cecilia,<@Else> making a brower UI or desktop?
1210,1509604498.000052,Brande,replacing ruby with sed from install.sh and nearly there :) ; framebuffer/shader sounds like native interop 
1210,1509604549.000048,Cecilia,for ClojureScript you can use <https://github.com/thi-ng/shadergraph> to get easy GLSL access; <@Brande> GLSL is shader access
1210,1509604592.000089,Else,<@Cecilia> I'm just doing this for fun to learn the language - I love Lisp and its derivatives :slightly_smiling_face:
1210,1509604624.000043,Cecilia,"yeah, well for ClojureScript and browsers there are several options out there, less so for Clojure; maybe quil?"
1210,1509604644.000088,Else,I'll take a look - I mostly wondered if Clojure would even be capable of something like this given its immutable state
1210,1509604669.000194,Cecilia,"yes it can do anything, you can ask though if Clojure is the right tool for the job"
1210,1509604737.000227,Else,"In this particular case I'm just doing it for fun / learning - I build game engines for a living, it's definitely not the right language for graphics, but we'll see what it can do :wink:"
1210,1509604738.000144,Cecilia,for the performance intensive mutable data stuff your code will end up looking an awful lot like java
1210,1509604762.000064,Else,"I remember John Carmack rewrote Wolfenstein 3D in Haskell, it was pure madness"
1210,1509604795.000184,Cecilia,one could write a very efficient 3d engine with immutable data structures but only if the hardware drivers and APIs supported that properly; opengl etc have been written to handle this mutable state machine
1210,1509604817.000236,Jonas,you can also check out <https://github.com/ztellman/penumbra>; which is no longer developed; but maybe as a way to get started
1210,1509604853.000149,Else,"Thanks guys, I'll take a look - I have to run to a meeting, bbs; For this toy example I'm wondering if I can just modify a framebuffer directly and blit it to the screen"
1210,1509604926.000137,Tessie,for the browser just use some Canvas wrapper or WebGL wrapper or interop
1210,1509604964.000045,Cecilia,"I think you can do that stuff with GLSL, accessing framebuffer that is. Been a while since I last did any GPU level coding :slightly_smiling_face:"
1210,1509606485.000174,Brande,"<@Cecilia> yeah, getting to shaders through the browser may help, don’t need to write the interop yourself since there’s stuff in the browser already :slightly_smiling_face:"
1211,1509606524.000028,Brande,"Quil might be the best option here; if the idea was to learn the language while doing something graphical; too much to ask for to “go write some JNI” while learning Clojure the language :slightly_smiling_face:; results in “wtf” moments; on other GPU related, but not graphics, Dragan Djuric has done great work on getting the compute side of GPU’s available to Clojure with <http://uncomplicate.org/>; totally unrelated to graphics though"
1212,1509609835.000197,Terra,"I'd like to parse clojure source file. What's the good way to do this?
Using `clojure.tools.reader/read-string` gives me only the first namespace form:
```
(r/read-string (slurp ""src/clojure_repl_experiments/experiments.clj""))
;;=&gt; (ns
 clojure-repl-experiments.experiments
 (:require [clojure.set :as set] [criterium.core :as c] [seesaw.core :as see]))
```
What I'd like to get is the list of all forms in that source file"
1213,1509615118.000245,Evan,you wouldn't happen to mean <https://feierabendprojekte.wordpress.com/2017/04/13/a-parable/> would you?
1213,1509615847.000386,Georgann,You could just use a loop to read the whole file. What's the context?
1213,1509616031.000218,Kareen,"<@Terra> because of clojure's evaluation model it's not generally possible to read a whole namespace w/o compiling each form as you go; altho since 1.9.0-alpha&lt;something&gt; (or by using tools.reader) there's ways to make this work, but it's still tricky"
1213,1509616439.000297,Terra,<@Georgann> let's say I want to analyze which clojure functions are called  in that code
1213,1509616631.000433,Kareen,take a look at <https://github.com/clojure/tools.analyzer.jvm>
1213,1509616717.000255,Terra,"will do, thanks!"
1214,1509626604.00009,Candice,You guys might appreciate this <https://cacm.acm.org/magazines/2017/10/221326-a-large-scale-study-of-programming-languages-and-code-quality-in-github/fulltext>
1214,1509631094.000786,Arlean,that's odd. their data suggests typescript is more likely to contain bugs than unadorned js.
1215,1509633112.000118,Lanora,"Yeah, real data has a way of messing up 'intuition' and theorizing..."
1215,1509633597.000112,Danuta,"IIRC, the .ts extensions would also match C++ projects as they are Qt translation files; there was a long twitter thread with critique about that study, but I’m failing to find it now"
1215,1509633700.000334,Carter,"yeah, I have my issues with a study like this too. It misses lots of context; for example, I’m working on TS project at the moment, and we ran into an issue that was not TS’s fault, but the JS library that did not have a type file.; and because I commit often, I committed the buggy code, but fixed it later, before the PR was made. So in a study like this, that would appear as a bug.; while it misses the context; Especially for languages that compile to JS, it won’t catch the edge cases when you try to interact with JS libraries"
1215,1509633935.000005,Deloras,yes! this is it. Thanks!
1215,1509633953.000572,Evan,glad i could help :slightly_smiling_face:
1215,1509633965.000057,Lanora,Of course there are issues with it - any such study is going to have issues. But at least it is actual _data_ and not just sitting around making goofy claims
1215,1509633990.00062,Danuta,"agreed, it’s better than just claiming things based on anecdotes"
1215,1509634034.000512,Krystina,what would be a good/easy way to disable logging when running tests?; (using leiningen); well also setting the level to WARN is enough (probably better); in Python for example pytest captures all the logs during tests and only display the relevant logs in case of failure
1215,1509634089.000478,Jodie,"<@Krystina> depends how you're logging, logback supports a logback_test.xml for example."
1215,1509634089.000511,Krystina,which is quite handy; just using tools.logging at the moment
1215,1509634170.000161,Jodie,I'm not sure what that uses by default
1215,1509634261.000789,Bibi,"<@Else> take a look at <https://github.com/oakes/play-clj>, it's got bindings to OpenGL etc through libgdx. I've been using it for making arcade games."
1215,1509634339.000651,Jodie,<@Krystina> apparently the fallback is java.util.logging if nothing else is found :slightly_smiling_face: so you'll have to figure out how to configure that for testing.
1215,1509634470.000342,Krystina,well in theory I just need `(.setLevel (Logger/getRootLogger) Level/WARN)`; the only question is where to hook that up
1215,1509634486.000808,Jodie,there are hooks in clojure.test
1215,1509634491.000604,Krystina,I have something like this for `lein run`; mm not sure I find anything useful there; unless I make a fixture for each test namespace that does that?; which is not very convenient
1216,1509635782.000538,Felecia,"I'm trying to recreate an aot behavior I've accidentally seen before, I'd like to capture a couple of environment variables at build time, so I can use version data automatically. I'm on 1.9.0-beta3, perhaps aot capture changed a bit? I've just got ```(def DESCRIBE (System/getenv ""GIT_DESCRIBE""))``` in a file that's in the :aot lein config for the uberjar profile (and is being aot compiled, going by the output. That value is interpreted at runtime, though; whoops, dropped this: )"
1216,1509635936.000601,Daniell,"Top-level `def`s are run at namespace _load_ time (so, essentially, runtime)."
1216,1509636143.000838,Jodie,"<@Daniell> correct me if I'm wrong, but if you AOT, doesn't that make the load time earlier?  (which is why you shouldn't `(launch-missiles)` at the top level)"
1216,1509636208.00056,Felecia,"it certainly does sometimes, because it's been a pretty common confusing deployment issue. that's where I've encountered it in the past"
1216,1509636592.000495,Daniell,"It loads namespaces for AOT and for running -- so it will execute _both_ times: ```(! 510)-&gt; lein uberjar
Compiling aotit.core
I'm a top-level form
Created /Users/sean/clojure/aotit/target/uberjar/aotit-0.1.0-SNAPSHOT.jar
Created /Users/sean/clojure/aotit/target/uberjar/aotit-0.1.0-SNAPSHOT-standalone.jar

Thu Nov 02 08:28:52
(sean)-(jobs:0)-(~/clojure/aotit)
(! 511)-&gt; java -jar target/uberjar/aotit-0.1.0-SNAPSHOT-standalone.jar 
I'm a top-level form
Hello, World!
```; That's with `(def foo (println ""I'm a top-level form""))`"
1216,1509636627.00046,Jodie,"oh interesting, I thought it stored the ""result"" in some way. Cool."
1217,1509641624.000284,Babette,"Am i misunderstanding `spec?` It should return whether something is a spec, correct?"
1217,1509641840.000783,Lorenza,"2nd arg to `s/valid?` should be a spec; so: `(s/valid? ::first-name ""mgrbyte"") -&gt; true`; `(s/spec? ::first-name) -&gt; true`"
1217,1509641928.000396,Babette,I get `(s/spec? ::first-name) -&gt; nil`; on 1.9.0-beta2
1217,1509641988.000127,Lorenza,"ignore me, I'm wrong; `string?` returns a spec-predicate, not a spec i think"
1217,1509642053.000104,Babette,from <https://clojure.org/guides/spec>: Any existing Clojure function that takes a single argument and returns a truthy value is a valid predicate spec
1217,1509642064.000622,Aldo,"`string?` is a predicate, `(s/spec string?)` is a spec that conforms to the `string?` predicate; specs and predicates are interchangeable in lots of places but not all; and ::first-name is a keyword, not a spec"
1217,1509642176.000698,Babette,ah. `(s/spec? (s/spec int?))` returns an obj
1217,1509642219.000629,Aldo,"you can use keywords that represent spec definitions in lots of places that you can use specs and predicates, but not all (and specifically it seems not in s/spec?); you can get the spec object from the registry using (s/get-spec ::first-name); so (s/spec? (s/get-spec ::first-name)) should return true; or... truthy"
1217,1509642286.000023,Babette,got it; thx for the insight
1217,1509642334.000004,Aldo,no worries
1218,1509645603.000396,Katelin,"I'm hitting an anti-pattern often, and wonder if there is a better approach...

I write a function, `fn-a`, that takes a map of parameters and does nothing with them but pass on to `fn-b`.
It could be written as `(defn fn-a [options] (fn-b options) ...)`

But, I want to supply useful arglist info, so I write `(defn fn-a [{:keys [param1 params2 params3] :as options}] (fn-b options) ...)`; But, later, fn-b gains a few more parameters. My code continues to work, but my arglist is out of date.; I'd love some way to declare that arglist info should be taken from another function."
1218,1509645743.000598,Margaret,"sounds like a job for spec, or prismatic/schema; also, as Rich Hickey eloquently argues, it's good to have an open information model - specify the keys you need, but it should be OK if other things end up in there too"
1218,1509645803.000368,Katelin,"<@Margaret> How? I see how I could use them for checking, but I'm looking for arglist as documentation."
1218,1509645836.000365,Margaret,"the fact that the check passed in dev mode (even if turned off in prod) is more useful than pure documentation that isn't executable; if all you need is documentation, we have doc strings too; I can write (defn foo [{:keys [a b c d]}] ...) and pass it an empty map - clojure doesn't care; the a b c d there isn't any more informative than text in the doc string would be, nor is it more enforcible"
1218,1509645932.000189,Katelin,"That just begs the issue.  I would still see the doc string of fn-a. But, really, the caller of fn-a needs to know the parameters of fn-b in order to effectively use the fn-a wrapper."
1218,1509645963.000616,Margaret,which is why an executable validation that can optionally be turned off is more useful
1218,1509645966.000159,Katelin,"I'm not lookinf for enforcement in the question, I'm looking for, if you will, enlightenment."
1218,1509645992.000236,Margaret,why would a name that isn't enforced in an arg map be more enlightening than a string that isn't enforced in a doc string?
1218,1509646003.000172,Katelin,"When I'm writing code in emacs, I want to do a quick `C-c d d` to see what parameters to type.; But, that forces me to keep the doc-string or the parameters of fn-a in lockstep with fn-b."
1218,1509646029.000654,Margaret,sounds like an emacs problem - a doc string can give you a lot more nuance and information than names in a destructure can; and an optional validation verifies that the code you are using actually works that way
1218,1509646068.000023,Katelin,"When, really, fn-a's mandate is, rightly ""take whatever I get and pass it to fn-b, because I have no right to care""; I would much rather spend one second when I'm typing my code, rather than one minute later, when a runtime check finds a problem.  (and that's even assuming that someone did the unlikely task of writing a run-time checker for misspelled parameters in a map)."
1218,1509646259.000465,Margaret,"spec and prismatic/schema can both warn you about such things, and can be turned off in production"
1218,1509646312.000288,Katelin,"Spec can, but not naturally. As you pointed out above ""specify the keys you need, but it should be OK if other things end up in there too"".; But, even that is not the point. I want auto-maintained arglist documentation that I can see when I'm writing code.; Emacs, and all other sane tools give this naturally for most functions.; But, there is just one missing case, which is pretty common in my code.; So, let me restate my question:"
1218,1509646389.000213,Else,emacs 4 lyfe
1218,1509646469.000303,Katelin,"What is a tasteful way to document a function whose mandate is to pass a map of parameters to deeper code? The user typically knows only about this function, but needs to see an accurate list of the parameters that it expects."
1218,1509646522.000206,Weston,A spec?
1218,1509646542.000291,Margaret,he already explicitly turned down using spec or schema for this
1218,1509646542.000314,Weston,Not to mention a docstring. 
1218,1509646548.000597,Margaret,and doc string :smile:
1218,1509646563.000366,Katelin,:slightly_smiling_face:; doc string requires repeating myself in both functions.
1218,1509646580.000311,Margaret,I feel like I've made my cases so won't belabor them here
1218,1509646595.000291,Katelin,"Spec is really the right answer, but I don't think the tooling is quite right yet."
1218,1509646598.000686,Weston,You could abuse destructuring {:as foo :keys [...]} but that d be odd if you dont use them
1218,1509646629.00012,Evan,"```(def ^{:arglists (-&gt; (var map) (meta) (:arglists))} my-map (fn [f coll] (map f coll)))
#'boot.user/my-map

(doc my-map)
-------------------------
boot.user/my-map
([f] [f coll] [f c1 c2] [f c1 c2 c3] [f c1 c2 c3 &amp; colls])
nil``` something like this could work?"
1218,1509646638.000292,Katelin,"<@Weston>. Yes, that was my original anti-pattern in my initial quesiton."
1218,1509646638.000472,Weston,"Or use a record but even then, they re quite open"
1218,1509646724.000183,Aldo,spec is really really the right answer seeing as it shows up in docstrings
1218,1509646747.000541,Katelin,Does spec show up in docstrings?  I'd not realized that.
1218,1509646828.000099,Margaret,"<@Katelin> this is also true for prismatic.schema/defn btw; ```+user=&gt; (s/defn foo :- s/Num [] 42)
#'user/foo
+user=&gt; (doc foo)
-------------------------
user/foo
([])
  Inputs: []
  Returns: s/Num
nil
````"
1218,1509646859.00063,Katelin,"<@Evan> Nice idea. But, currently, does not quite work in ClojureScript because there is an open bug in the handling of some arglists."
1218,1509646901.000593,Margaret,"these tools are imperfect, but they really are designed with these issues in mind"
1218,1509646915.000557,Evan,"ah, unfortunate"
1218,1509646939.00039,Katelin,"Re spec, one problem is that this forces creating a name to describe this map.  For a simple set of parameters used in only a few functions, this is a bit heavy."
1218,1509646964.000244,Margaret,if it's worth describing it's worth giving a name IMHO
1218,1509646981.000197,Weston,Some people wrote macros to work around this. But ultimately you ll grow to like this (I did)
1218,1509647001.000664,Katelin,"But, agreed, spec does the heavy lifting nicely for ""big"" cases. And, arglist spoofing covers the remaining cases, I guess."
1218,1509647016.00045,Aldo,why does it force you to create a name? (s/fdef my-fun :args (s/cat :the-arg-map (s/keys :req-un [::foo ::bar ::bash]))) is fine
1218,1509647049.000659,Katelin,"Because I need to use it twice.  (in `fn-a` and `fn-b` in my original example); And, of course, I still need to list the parameters in the definition of fn-b."
1218,1509647089.000731,Aldo,how could you use it twice without assigning it to some sort of name for any solution? 0_o
1218,1509647131.000253,Katelin,"In the code, I only need to use it once. fn-b requires me to list the parameters. fn-a only needs `(defn fn-a [options] (fn-b options))`"
1218,1509647131.000289,Aldo,"you do need to list the parameters twice, that's true"
1218,1509647203.000065,Katelin,"Right. I'm trying to avoid any need to list the options in or near fn-a, which may well be in a different file than fn-b."
1218,1509647204.00013,Weston,You can combine the groups of keys with s/and
1219,1509647217.000482,Demarcus,Is there a way to add annotations to an interface when using `gen-interface`?
1218,1509647221.000587,Katelin,Which groups of keys?
1218,1509647264.00043,Weston,So your fist takes a spec with (s/and ::mapfoo ::mapbar etc); And rest of fns just the precise submap; Thats one way
1218,1509647310.000381,Katelin,I don't think you are answering the same question that I'm asking.
1218,1509647312.000016,Margaret,<@Demarcus> yes <https://github.com/clojure/clojure/blob/master/test/clojure/test_clojure/genclass/examples.clj> - you should be able to adapt this to gen-interface
1218,1509647364.000673,Demarcus,"nice. i saw that example, but figured it would only work for gen-class"
1218,1509647365.000052,Katelin,My functions take exactly the same parameters as each other. Only fn-b cares about them in detail. fn-a is just an exposed surface wrapped around it.
1218,1509647372.000242,Demarcus,"i'll give it a go, thanks!"
1218,1509647394.000512,Margaret,oh - if you keep reading there's a gen-interface example in the same file haha!
1218,1509647492.000477,Demarcus,yep but the example doesn't use annotations :slightly_smiling_face:
1218,1509647536.000506,Aldo,"imo you're working too hard to avoid duplication here. just
```
(s/def ::param-list (s/cat :opts-map (s/keys ...) :other-arg ...))
(s/fdef fn-a :args ::param-list)
(s/fdef fn-b :args ::param-list)
```"
1218,1509647658.000016,Demarcus,"meh, i guess if i dug one level deeper i would have seen the `add-annotations` call"
1218,1509647884.000358,Katelin,"Yes, understood, and not terrible since the duplicated code can sit next to its copy.  But, this still requires:
- Repeating the param list in both the spec and fn-b (admittedly, this is no worse than any other spec, so ok...)
- Creating the name `::param-list` -- Well, more likely `::fn-b-param-list` which, again, is not terrible but adds a bit of weight.

In short. Yes, this is a reasonable answer and about the best that can be done today (with the arguable exception of the meta :arglists hack above).
But, there is still a bit of a smell here that bothers me.  Sorry that I obviously can't pin down my discomfort well enough... I'm clearly in the minority here.  :slightly_smiling_face:"
1219,1509648131.000037,Celina,I am using at-at to schedule some functions and want to persist the schedules (preferably to datomic) - is there anything that can help with that or any pointers ?
1218,1509648215.000444,Earlie,"I have some macros in a clj file (no coresponding cljs file exists). I want to import these from some cljc files. Doing a normal :require in the cljc files fails, because the cljs namespace doesn't exist:
```
No such namespace: common.css, could not locate common/css.cljs, common/css.cljc, or JavaScript source providing ""common.css"" in file src/common/pages/timesheet.cljc
```
I could do them in a cljc file, but the macros require java stuff, so almost everything would be reader conditionaled to clj.

I managed to get it working with `(:require-macros [common.css :as css])`, but I'm very confused, because as far as I know clj files don't recognize require-macros. Could someone explain?"
1218,1509648238.000478,Margaret,<@Celina> I'm sure it's possible (and I've done variations on it myself) but quartzite is made for this purpose <http://clojurequartz.info/>
1219,1509648318.000008,Rebeca,"<@Earlie> cljc files may be compiled as clojurescript or clojure, you are compiling it as clojurescript, so clojurescript features are there"
1220,1509648325.000117,Celina,thanks <@Margaret> looks like thats *the* option
1221,1509648356.000182,Earlie,<@Rebeca> Except it's being compiled as clojure as well without issue.
1219,1509648362.000137,Rebeca,<@Earlie> the error message mentioning JavaScript is the clue; it isn't
1219,1509648384.000741,Earlie,"The error message was with the normal (:require), not the (:require-macros).; There isn't any error with :require-macros."
1219,1509648396.000461,Rebeca,"right; and between those two attempts, are you loading the code the exact same way?"
1219,1509648434.000131,Earlie,"Shouldn't there be? When it's compile to clojure and it can't find the namespace, because it doesn't recognize the require-macros method?; Yeah, same way."
1219,1509648455.000507,Rebeca,"so clojurescript; the error message can only come from compiling clojurescript, if you are loading them the same way then they are being compiled the same way, so both are being compiled as clojurescript ∎"
1219,1509648493.000524,Earlie,"Oh... you're right. It wasn't being compiled to clojure as well.
It thows a ns doesn't comform error now.; So I need a reader conditional to switch between require-macros and require?"
1219,1509648559.000499,Rebeca,yes
1219,1509648572.000195,Willow,"```
(ns hitch.selector
  #?(:cljs (:require-macros hitch.selector))
  (:require [hitch.oldprotocols :as oldproto]
            [hitch.protocol :as proto]
            [hitch.tracking.halt :as halt]
            [hitch.selector-tx-manager]))
```; an example from us ^"
1218,1509648607.000442,Earlie,"<@Willow> Well, the second require would be only for clj, since I don't have a cljs namespace of the macros namespace."
1219,1509648658.000287,Earlie,"```
(ns common.core
  #?(:clj
     (:require [common.css :as css])
     :cljs
     (:require-macros [common.css :as css])))
```

How's that?
Can I have multiple (:require) calls in a ns?"
1222,1509648686.000412,Jonas,"fwiw, I don’t think your crazy. I’ve used libraries that have similar wrapper functions and I wish that they had gone through the trouble you’re going through so I can use my `C-c d d` :slightly_smiling_face:. It seems <@Evan>’s recommendation is a decent fix if it worked with cljs. It looks a lot like <https://docs.python.org/2/library/functools.html#functools.wraps> from python"
1219,1509648801.000067,Earlie,"I suppose that works:
```
(ns common.core
  (:require
   ...
   #?(:clj [common.css :as css]))
  #?(:cljs (:require-macros [common.css :as css])))
```
A bit ugly; What does <https://clojurescript.org/about/differences#_namespaces> mean by ""implicit macro loading"". It's not clear to me how that's accomplished."
1223,1509650238.000035,Ernest,"Hi, can anybody share a pointer on how to provide the preference for a `defrecord` that also implements `IDeref`? I get the error `interface clojure.lang.IDeref and interface clojure.lang.IRecord, and neither is preferred`."
1223,1509650258.000419,Rebeca,"that is just the printer; if you don't try and print the record you won't get that error; or you can fiddle with the print-method multi method; it isn't a defrecord thing, it is a mutimethod thing, because the printer dispatches on type, and it has a method for IRecord and for IDeref, and neither is more specific"
1223,1509650528.000211,Ernest,<@Rebeca> Thanks!
1224,1509658824.000084,Ahmad,Is there anything I use to purposely return nil from a function's tail when there's a call at the tail returning something?
1224,1509658921.000045,Sonny,"yeah, just put nil at the end; :)"
1224,1509658955.000393,Ahmad,"oh, so it's totally ok to do so?"
1224,1509658960.0002,Sonny,sure!; I’ve run into this occasionally and don’t know of any other solution; you could write a function and wrap the validate if that was nicer looking to you
1224,1509658997.000521,Bibi,"Reminds me of actual Java code I saw once, 'if (c==null) return null else return c;'"
1224,1509659000.000103,Ahmad,"nice, thanks alex! i'm still learning, so just looking for best practices"
1224,1509659079.000013,Sonny,"```(defmacro swallow [&amp; body]
  `(do ~@body nil))```; then `(swallow (s/validate …))`"
1224,1509659103.000311,Ahmad,"woah, that's interesting"
1224,1509659113.000167,Sonny,"prob a simpler way to do that; if it’s always wrapping a single expression, you could just do `(def swallow (constantly nil))`"
1224,1509659350.000269,Ahmad,"i guess i prefer this alternative with `constantly`, most of the time it would be used for calls at the function's tail; thanks again alex! i didn't know about `constantly`"
1225,1509660874.000006,Margaret,"I had a hunch that constantly obviates the need for a macro that creates a do form ```+user=&gt; (def foo (constantly :OK))
#'user/foo
+user=&gt; (foo (println :a) (println :b) (println :c))
:a
:b
:c
:OK
```; I wonder if it still works for large arg lists"
1224,1509662712.000251,Ahmad,"oh yeah, constantly creates a functions that accepts any number of arguments. that invalidates my argument to prefer it over the macro form"
1226,1509663833.000016,Aldo,I do not understand what the `n` argument does in practice in `pipeline-async` 0_o
1226,1509663880.000047,Alix,How do I use apply with a Java object?; I want to call a method on a java object using the apply function. Is this possible?; How do I call a java method with potentially different number of arguments?
1226,1509663979.000121,Aldo,<@Alix> afaik not without explicitly using reflection; and even if you could figure out how to do it implicitly... it would still be expensive
1226,1509664021.000095,Alix,How expensive is reflection?
1226,1509664043.000275,Aldo,"quite a few orders of magnitude more expensive than a regular function call; but, if you're in a context where you're doing io... not at all"
1227,1509664592.000005,Rebeca,bfabry: <https://dev.clojure.org/jira/browse/ASYNC-163?focusedCommentId=42480&amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-42480>
1226,1509664966.000328,Aldo,"ta, sounds like what I thought. practically it's only a limit if tasks are completing and sending results"
1228,1509672388.000025,Tammie,"so, let’s say I have used reify on an interface and it closes over on of my Clojure functions. At the REPL, I want to be able to redefine my fn and have the reified object call it. I assume a layer of indirection will do the trick, but what is the best way to achieve this? Use resolve first to get the fn and then invoke it?"
1228,1509673605.000074,Sandy,<@Tammie> call the functions like this `(#'foo x y)` instead of `(foo x y)`; Although vars work that way already
1229,1509674340.000151,Berry,"how do I express the following in clojure:

1. I have a job queue with 1000 items
2. I have 12 worker threads
3. whenever a worker thread finishes a job, it pops off the next job from the queue, and executes it"
1226,1509675607.0001,Sonny,Java has an ExecutorService that is a great match for this but you would use interop for it
1229,1509675611.00005,Kyung,Maybe this? <https://github.com/TheClimateCorporation/claypoole/blob/master/README.md>
1226,1509675618.000055,Sonny,Or use that ^^; Which is a Clojurey wrapper for it
1226,1509675648.000148,Berry,<https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/ExecutorService.html>; I'm using the ExecutorService. How do I call 'sxubmit' on a clojure function? The problem is that it appears to match both Collable and Runnable ... (fn [] ...)
1226,1509675724.000035,Sonny,Add a type hint to disambiguate
1226,1509675726.000011,Berry,"ah, <https://groups.google.com/forum/#!topic/clojure/MDAIeDDq--8>"
1226,1509675736.000043,Sonny,^Runnable
1226,1509675755.000212,Berry,"(def #^Runnable r (proxy [Runnable] [] (run [] (rand)))) 
 &lt;-- does your solution avoid the 'proxy' ?"
1226,1509675808.000114,Sonny,You don’t need a proxy
1226,1509675811.000153,Berry,"```
(.submit service 
               ^Runnable
               (fn [] 
                ...))
```
appears to work"
1226,1509675817.000062,Sonny,Yeah; All Clojure functions are Runnable
1226,1509675890.000066,Berry,everything works now; thanks for help
1230,1509678182.000158,Ahmad,"in The Joy of Clojure there's a passage stating:
&gt; Clojure functions are highly amenable to interoperability. Their underlying classes implement a number of useful interfaces
does it means that the Clojure compiler wraps Clojure functions into Java classes that under the hood implement some interfaces or something like that?; qqq's message reminded me of it"
1230,1509678746.000189,Daniell,"<@Ahmad> Yes, each function is compiled to a class with a number of methods.; <@Ahmad> Here's the ancestors of a function type: ```boot.user=&gt; (defn foo [x] (inc x))
#'boot.user/foo
boot.user=&gt; (class foo)
boot.user$foo
boot.user=&gt; (ancestors *1)
#{java.util.Comparator clojure.lang.AFunction clojure.lang.IMeta java.io.Serializable clojure.lang.Fn java.lang.Runnable java.util.concurrent.Callable clojure.lang.IFn java.lang.Object clojure.lang.AFn clojure.lang.IObj}``` The function compiles to a class called, in this case, `boot.user$foo` (an inner class `foo` in the `boot.user` class which the namespace is compiled to), and it extends/implements all of those listed classes."
1230,1509679191.000116,Ahmad,"<@Daniell> Interesting, so the namespace is also compiled into a class, at least that's what it seems from your example. Does it mean that if I was to create a namespace with `gen-class` its methods would be defined in the `boot.user` class for example and not in an inner class?"
1230,1509679338.000082,Daniell,The methods would be defined in the class of the namespace yes (and `gen-class` lets you specify the class name if you want a different one).; It's why the default application you often see has a `(gen-class)` in `whatever/core.clj` and a `-main` function -- and that's compiled to a `whatever.core` class with a `main` method (the `-` is the default convention for `gen-class`).
1230,1509679525.000071,Ahmad,"Woah, I didn't know that, `-main` makes sense for me now :D; Thanks for your explanations <@Daniell>!"
1230,1509679685.000029,Daniell,"Also note that anonymous functions get compiled to ""unique"" class names ```boot.user=&gt; (defn quux [n] (fn [m] (* m n)))
#'boot.user/quux
boot.user=&gt; (def times2 (quux 2))
#'boot.user/times2
boot.user=&gt; (type times2)
boot.user$quux$fn__1879```; In this case `quux` is compiled to an inner class inside `boot.user`, and the anonymous function is compiled to an inner class called `fn__1879` inside the `quux` inner class."
1230,1509679796.000007,Ahmad,"Nice, it gets deeper and deeper."
1230,1509679803.000128,Daniell,"Functions, all the way down :slightly_smiling_face:"
1230,1509679812.000022,Ahmad,:)
1230,1509719266.000549,Karolyn,"I’m trying to solve an issue we have testing a largish project with `lein test`; occasionally the test run halts with 
`Tests failed.
Error encountered performing task ‘test’ with profile(s): ‘base,system,user,provided,dev,humane-errors’
Tests failed.`; I just cannot get it to be more verbose than that. We’re running this on CircleCI in a docker container and the last test namespace to run seems to be one that contains some clojure.spec generative tests; other than that no clue. Does anyone have any idea on how I can figure out which test in the test namespace was the last one run or any idea on what the problem might be?"
1230,1509723009.000764,Adele,<@Karolyn> you can log test names by redefining `report :begin-test-var` method: <https://gist.github.com/metametadata/c40a5f099814e591cd627b874f9bb595#file-reporter-clj-L14>
1230,1509723484.000194,Karolyn,oh nice thanks!
1231,1509732700.000053,Earlie,"Is there any idiomatic way of getting a map from a sequence of keys (with a value associated with each key based on the key)?; ```
        (into {}
              (map (fn [a]
                     [a (derived-value a)])
                   [:alpha :bravo :charlie :delta :echo]))
```"
1231,1509733034.000253,Shamika,I suppose you could replace that `fn` with `(juxt identity derived-value)` but that’s not necessarily any better
1231,1509733079.000204,Earlie,"Huh, I hadn't thought about that. Thanks"
1231,1509733186.000422,Rebeca,into takes a transducer theses days; `(into {} (map (juxt ...)) ...)`
1231,1509733284.000152,Earlie,"<@Rebeca> Nice, that is pretty concise.
`(into {} (map (juxt identity (partial str :test))) [:a :b :c])`"
1232,1509734454.000515,Sonny,`(zipmap a (map derived-value a))`; ?
1232,1509734549.000352,Earlie,"<@Sonny> That certainly works, though I was looking for something that doesn't repeat a or require binding it."
1232,1509734738.00046,Sonny,`(apply zipmap ((juxt identity #(map derived-value %)) a))`
1232,1509734842.000711,Earlie,<@Sonny> That is quite nice.
1232,1509734849.000363,Sonny,that’s awful :); I’d use zipmap :)
1232,1509734884.000402,Earlie,Which is awful? :stuck_out_tongue:
1232,1509734892.000485,Sonny,the apply / juxt version; the simple zipmap one is far and away the clearest of these imo
1232,1509734940.000118,Earlie,"Yeah, I'd agree.; <@Sonny> Good call; zipmap feels cleaner in my actual use case as well.; (Compared to into/map/juxt)"
1232,1509735201.000333,Sonny,"unfortunately, the implementation of zipmap is not as fast as it could be atm, although in the majority of cases you won’t have enough data for it to make any difference"
1232,1509735221.000187,Earlie,"Yeah, there's only 7 keywords.; Good to know though."
1232,1509735338.000165,Cecile,"I prefer the zipmap, though I want to give lip-service to `medley.core` which has `map-vals` to get rid of the the `(into {} (map...` nastiness, such as ```(map-vals derived-value (zipmap a a))``` It's an extra step, but separating the steps of creating a self-keyed map might be a helpful pattern elsewhere"
1232,1509735368.000595,Sonny,"oh sure, I agree that’s the intent; I wish we had map-keys / map-vals in core"
1233,1509735535.000006,Adelaida,"Out of curiosity, why don't we?"
1232,1509735841.000476,Sonny,b/c we consider new things for core somewhat rarely and I haven’t gathered the evidence to make a compelling case yet :); <https://dev.clojure.org/jira/browse/CLJ-1959>
1233,1509735885.00028,Adelaida,"Fair enough. :simple_smile: Ah, thanks for the link, that was my next question."
1232,1509735951.000277,Sonny,vote away :)
1233,1509736017.000085,Adelaida,Done!
1232,1509736766.000004,Fe,-&gt; <https://twitter.com/pesterhazy/status/926529085458837505>
1232,1509736812.000154,Sonny,I wrote map-keys into tools.deps.alpha this week :)
1232,1509737427.000299,Larissa,"just seeing this, but my 2c — I happened to write map-keys, map-vals, and, just a couple days ago, map-kv in a utils library <@Sonny>; where `map-kv` takes a function of arity-2"
1232,1509737442.000297,Sonny,"oh sure, there are lots of them out there :)"
1232,1509737464.000305,Berry,"```(ImageIO/write (BufferedImage. 10 10 BufferedImage/TYPE_USHORT_GRAY)
               ""jpg""
               (<http://clojure.java.io/file|clojure.java.io/file>  ""test.jpg""))
```
^-- this returns `false` .
How do I debug this ?"
1232,1509737499.000001,Lisette,"I'm attempting to call some Clojure code from a Java project.  It seems that when I attempt to do an ""import clojure.java.api.Clojure;"", it succeeds when I'm pulling org.clojure/clojure 1.7.0 (via Maven), but fails when I pull org.clojure/clojure 1.8.0 since the Clojure class apparently no longer exists.  Has this Clojure class been deprecated/moved?  (or is there a better way to call Clojure code from Java?)"
1232,1509737503.000421,Aldo,specter  also has MAP-VALS and MAP-KEYS navigators
1232,1509737582.000431,Lisette,I suppose I should clarify that my goal is to call code from a library written in Clojure -- so I may be barking up the wrong tree with my approach.
1232,1509737610.00017,Shira,<@Lisette> see <https://clojure.org/reference/java_interop> Calling Clojure From Java
1232,1509737681.000081,Margaret,the docs say you should use clojure.java.api.Clojure - I don’t see why it wouldn’t find that with 1.8 so I suspect something else is wrong; and I can verify I’ve used clojure 1.8 via clojure.java.api.Clojure in java code
1232,1509737725.00046,Lisette,Those are the docs I worked with initially (and then searched around to find some people with the import statements as well); Hmm.  Knowing that it's working for you with 1.8 should be helpful -- maybe I'll just have to wipe my .m2 repo; it is odd that it has only worked for me when I'm pulling 1.7
1234,1509737780.000372,Floretta,"hey all, can I ask a very n00b clojure question?"
1232,1509737820.000212,Margaret,<@Lisette> this repo works <https://github.com/noisesmith/clj-jsvc-adapter/blob/master/src/java/org/noisesmith/Cljsvc.java>
1234,1509737843.00057,Margaret,"<@Floretta> you don’t have to ask to ask, and there’s a <#C053AK3F9|beginners> channel you can use at your discretion"
1232,1509737879.000513,Floretta,coo. thanks
1232,1509737942.00025,Lisette,"<@Margaret> Hmm.  Apparently, Eclipse simply tells me clojure.java.api.Clojure doesn't exist when I'm pulling 1.8.0 (and it results in spurious error indicators everywhere), but it actually works fine.  I don't have that problem when I pull 1.7.0."
1232,1509737948.000144,Floretta,But if I ask in the #beginner room then won't it just be all beginner there and no one to help me? :stuck_out_tongue:
1232,1509737963.000145,Margaret,<@Lisette> well that’s weird
1232,1509738007.000093,Marx,"<@Floretta> Oh no, there’s lots of folks that go there looking for people to help"
1232,1509738011.000199,Lisette,<@Margaret> Actually - I stand corrected.  The error indicators disappeared - seems I rebuilt/ran too fast.  Cleaning my .m2 org/clojure stuff may have been the solution.  Thanks.
1232,1509738121.000012,Margaret,:thumbsup:
1235,1509740938.000097,Sonny,they vary widely in quality and generality though which is why it’s not as obvious as you may think on what to add
1235,1509741307.000484,Senaida,"Does anyone know if there is a website / post that outlines some of the main Clojure libraries (e.g. Ring, Compojure, Yada, http-kit, Aleph, etc), what each one does and how they similar / differ to each other, which are currently preferred, etc.?"
1235,1509741443.000331,Herlinda,if it doesn't exist it would be an interesting project
1235,1509741453.000053,Senaida,Agreed; I know JUXT have the Clojure Radar
1235,1509741541.000243,Herlinda,I tried to write something similar except it took into account the participation in the community of the library author. I got stuck on the calculating library author scores
1235,1509741560.000253,Senaida,"<https://juxt.pro/radar.html>; Actually, that looks like a good overview"
1235,1509741597.00033,Jonas,<https://www.clojure-toolbox.com/>; not sure how up to date it is
1235,1509741657.000054,Senaida,Thanks Adrian :+1: That's a pretty large list of libraries
1236,1509742724.000574,Margaret,"I thought of clojure-toolbox too, but it only categorizes, it doesn’t really compare them"
1237,1509787841.000002,Chang,"Hi, I'm experiencing a strange behaviour with cljs-http, I don't seem to be able to get the response values outside of the go block. Inside the go block everything's fine, but when I return a value outside of it, I get a `#object[cljs.core.async.impl.channels.ManyToManyChannel]`. Does anybody know what I'm doing wrong?"
1237,1509788352.00001,Terra,"<@Chang> <https://clojuredocs.org/clojure.core.async/go>
&gt; Returns a channel which will receive the result of the body when
completed"
1237,1509792070.000025,Chang,"<@Terra> sigh, this means I can't make go return a normal value? If I need to put the value in an atom I'm loosing the decoupling (it's better than using callbacks, but still...)"
1236,1509793843.000021,Karolyn,Go is not blocking so you cannot return a normal value. If you want that just leave out the go macro. ; Or possibly you just want to &lt;!! The returning channel to block the outer thread. 
1238,1509797611.000045,Earlene,"Out of curiosity, does anyone know why `if-some?` isn't part of the language? I found myself writing `(if (some? some-value))` pretty often and ended up writing a macro for it: `if-some?`. Just thinking that maybe I missed something, and that there's already a better way to accomplish the same outcome. Here's how I use it: <https://github.com/pcolliander/api-test/commit/655d1347e085d5c688b8e2a38581ebfe0a2b53e9>"
1238,1509798125.000038,Marnie,"You could make the same case for many predicates, like if-every?, etc. doesn't make sense to bloat the lang API or mix abstractions like that. ; It's simple enough to combine them, your macro literally just adds one hyphen and removes two parens, a net one character change, right?"
1238,1509798631.000012,Earlene,"guess that's true, yeah just did it for readability"
1238,1509799716.000036,Marnie,Is the regular syntax hard to read? Adding macros often makes things harder to read because it's not always clear what the macros are doing. Always prefer the core language to writing new macros until the benefits of a macro are obvious. 
1239,1509801453.000089,Chang,"<@Karolyn> yes, I realized that. my expectation was for go to be a full continuation, I guess that's not true.; i'm in the browser, so no  &lt;!!  :slightly_smiling_face:"
1240,1509818893.000076,Terra,<@Earlene> notice there's also `if-some` which is similar to `if-let`. you can also just use `if` if you can accept both `nil` and `false`
1239,1509819938.000049,Mallory,Hi guys; why this case don't work <https://gist.github.com/aibrahim/f78e6bb6ff1e41bd35883ead380db615> ?
1239,1509820559.000047,Keva,Maybe it’s because the call to `eval` tries to resolve `core/one` and not `foo/one`?
1239,1509821147.000027,Mallory,<@Keva> so what do you think to make this clean in the code?; (def numbers '(foo/one foo/two foo/three)); ?; then eval?
1239,1509821497.000091,Jonas,"it’s not that common to use eval; but when I do, i often explicitly set the ns when calling eval; something like; ```(binding [*ns* (the-ns 'foo)]
                         (eval numbers))```"
1239,1509821966.000084,Mallory,<@Jonas> thanks but can i you try this example at your machine; it's still not working
1239,1509821992.000015,Margaret,that will result in an error if foo/one is not a function; eval on a list calls it; perhaps you want `(map (comp deref resolve) numbers)` but really hte important question is why you are even indirecting things this way
1239,1509822137.000098,Mallory,"<@Jonas> thanks man done now using yours it's my fault; <@Margaret> bad practice, i'm still working on this"
1239,1509822182.000087,Jonas,you can use `(def numbers '(list one two three))`
1239,1509822223.000117,Margaret,"sure, that would get you the right answer, but using clojure's compiler to make your code work at runtime is like using a fork lift to carry your lunch box; eval is a big heavy slow tool, meant for hard weird structural problems"
1239,1509822248.000012,Jonas,sometimes it’s fun to drive around a fork lift :slightly_smiling_face:
1239,1509822249.000063,Margaret,"not for getting some values from symbols; if you want the performance penalty and code that is hard to reason about, go for it I guess; but really at that point just use mutation, it's easier to wrap your head around and performs much better; eval is a great way to get really hard to fix bugs"
1239,1509822317.000136,Jonas,"yea, i’m not suggesting to use it for production projects; but sometimes it’s fun to just tinker with"
1239,1509822360.000011,Mallory,and sometimes it's a very big benefit using it; even in production
1239,1509822367.00007,Margaret,which is?
1239,1509822375.00002,Mallory,eval
1239,1509822379.000093,Margaret,"no, what's the benefit?"
1239,1509822397.000035,Jonas,I’ve used it for a project that is similar to the ipython notebooks
1239,1509822419.00003,Margaret,"sure - you're making a compilation and code evaluation tool, that makes sense"
1239,1509822452.000026,Jonas,yea
1239,1509822480.000022,Mallory,"<@Margaret> well, what is the best practice in my situation above , how can do this ?; <@Margaret> list with other vars in it and maybe i have deeper like this"
1239,1509822567.000052,Jonas,"```(def one 1)
(def two 2)
(def three 3)
(def numbers [one two three])```"
1239,1509822638.000017,Margaret,"<@Mallory> if you need runtime lookup rather than compile time, you can explicitly look up the vars with resolve and dereference them; it's cleaner to actually access the namespace as <@Jonas> shows there"
1239,1509822662.000065,Mallory,ah; that's helpful for me; thanks guys
1239,1509822692.000128,Margaret,"the thing about this is that when eval results in a weird and hard to reproduce behavior in clojure, it's not because your notebook is poorly designed, its because the user fed it bad code; but what I see people trying to do (like in this example here) is use eval to glue things together, and in that case you get a weird hard to weed out runtime error that is your fault, not the user's"
1239,1509822757.000044,Jonas,"agreed. using `eval` is almost never the right tool; there’s a lot of blog articles that talk about how cool lisps are because lisps have `eval` and macros. I think that’s why you sometimes get new folks to clojure trying those things out. on the one hand, using macros or `eval` is probably not the best solution to most problems, but on the other hand it’s a fun part of the language to play with if you’ve come from other languages that don’t make features like `eval` or macros as easy"
1241,1509829393.000022,Lisha,"I cannot reformat the json response (ring response) I am getting after a simple get request to my database. I would like fetch data from my database and formate the data into a map. below is the format I would like to get back from my json resonse in postman. Could someone please help format the response.? does any have an example project i Could look at?
 Below is the code flow.... 
[ {:first-name ""mike"", :last-name ""tall"" :team ""football""},
  {:first-name ""nick"", :last-name ""tall"" :team ""york""},
  {:first-name ""ball"", :last-name ""tall"" :team ""sea""}
]"
1242,1509829741.000014,Lieselotte,"hi! I'm trying to understand how to use ""component"". I've created a component to handle configuration variables. This is then given to the component that manages my MongoDb connection. However, how do I get the Mongo component in that namespace that is actually calling Mongo? I mean of course I could turn that namespace into a component as well, but it a seems too much for me, since this namespace holds no state overwise (it just takes the mongo connection as parameter and returns some data). Of course one way would be to store the system map in some central namespace as a var and in such cases reach out for that.. but that is explicitly discouraged in the component documentation.. so what to do instead?"
1242,1509829797.00002,Margaret,"the component is a value that can be passed to functions; you don't need to store it, your app can pass the components to things that use them; in my production app, the mongo functions are passed a component that contains the mongo connection and db, you might even want to skip the component and just pass the connection, which should be a value in the component, to the functions that use it"
1242,1509830009.000009,Berry,"does 'float-array' return an immutable?
if yes, what does NOT return an immutable
if no, how do I set elements of a float-array ?"
1242,1509830035.000029,Margaret,"there is no such thing as an immutable array, you can use aset; see also amap, areduce, etc. etc."
1242,1509830068.000116,Berry,"```

(def x (float-array (range 1000)))

(aset x 20 0)



```; no matching method found aset"
1242,1509830112.000124,Margaret,"```+user=&gt; (doc aset)
-------------------------
clojure.core/aset
([array idx val] [array idx idx2 &amp; idxv])
  Sets the value at the index/indices. Works on Java arrays of
  reference types. Returns val.
nil
```; 0 isn't a float, that's the non matching method; also why a float array instead of double array?"
1242,1509830157.000028,Berry,"hmm, 0.0 doesn't work either, I need (float 0.0); I'm interfacing with some gpu / ndarray stuff that uses floats"
1242,1509830168.000084,Margaret,"right, 0.0 isn't a float, it's a double"
1242,1509830217.000035,Lieselotte,"<@Margaret> that's OK, but how does *that* code get the component that is calling the mongoDB functions? I mean my call chain is Jetty -&gt; Pedestal -&gt; Some business logic namespace that is pure functions -&gt; MongoDb namespace. Currently I have a component for Jetty, Pedestal and Mongo"
1242,1509830260.000051,Margaret,"your handler should be using the component, your app startup can deliver the component to the handler for example; my component creates the handler function, and passes it to the function that starts the http server (along with some middleware that the component also creates)"
1242,1509830562.000045,Lieselotte,"<@Margaret> ok, so in my case, I should just make Mongo a dependency of the Pedestal component, and any time such a handler is invoked which requires mongo (eg in case of a ""list of products"" JSON REST service), pass in the Mongo connection ?"
1242,1509830617.000103,Margaret,"yeah - and in fact you can pass in a subset of the component map - at some point you might also need a postgres connection, or some initialized resource"
1242,1509830923.000054,Lieselotte,"<@Margaret> hm. two problems with that. 1. In Pedestal, I'm not in a very direct relationship with the handler.. I mean there is a router in between, etc. So simply I don't see how I could pass the connection (or component) down the chain so it finally reaches that method where it is needed. 2. Actually MongoDb is not a dependency of my Pedestal component, but of my business logic. Eg just because Pedestal is restarted for some reason, there is no reason to also restart the MongoDb component"
1242,1509831010.000019,Margaret,I've never seen any reason to restart components piecemeal - it's fast enough that I just restart the whole thing. You can pass values that handlers need by attaching them to the request before it hits the router.; the job of the component system is to ensure that all the states are coherent - starting and stopping as one big system is part of what makes that work
1242,1509831334.000028,Lieselotte,"<@Margaret> ok, then I'll try to make it work this way :slightly_smiling_face: thanks!; <@Margaret> btw I'm also new to Mongo, is actually sharing a connection recommended? or should a connection be built up on every request?; (I mean http request here); hm the <https://github.com/danielsz/system/blob/master/src/system/components/mongo.clj> creates a connection on component start, so I guess this is intended to be shared accross all users/requests (I was just wondering if there is sort of a similar thing like that's connection pooling to RDBMSs); ah ok, according to <http://clojuremongodb.info/articles/connecting.html> monger does connection pooling inside, so I can just use my single ""connection"" and this will get pooled by the library itself"
1243,1509833724.000019,Berry,"I need help optimizing this numeric clojure code.

input: float array of size n
output: float array of size (- n 1)
where each output[i] = input[i] + input[i+1]

```
(def n 1000000)

(def x (float-array (range n)))

(def y (float-array (- n 1)))

(doseq [i (range (- n 1))]
  (aset y i (float  (+ (aget x i)
                       (aget x (+ i 1))))))


```

I'm on a GHz machine. loading + adding + storing 1M numbers should not take 10s of seconds

how do I type hint / unbox / all types of crazy things ot make this fast ?"
1242,1509833834.000076,Lieselotte,"<@Berry> no idea, but this benchmarking library is probably useful <https://github.com/hugoduncan/criterium>"
1243,1509834273.000021,Jonas,"```(doseq [i (range (- n 1))]
  (aset-float y i  (+ (aget ^floats x i)
                      (aget ^floats x (+ i 1)))))```; that’s a lot faster; there’s probably still room for improvement; <@Berry>; as an aside,```(float-array
 (map (fn [a b]
        (+ a b))
      x (rest x)))```"
1243,1509835155.000107,Berry,<@Jonas>: that reduced runtime by about 99%
1243,1509835157.000046,Jonas,seems to work pretty well
1243,1509835171.000045,Berry,"(the aset-float, ^floats solution)"
1243,1509835193.000079,Jonas,"the `map` version I think is a little more straightforward; albeit, slightly slower; but not nearly as as slow as the initial `doseq` version; ```(def y (float-array
         (map (fn [a b]
                (+ a b))
              x (rest x))))```"
1243,1509835301.000131,Berry,"this is my fault for not clarifying this upfront, but I really have to modify an existing float-array (the 'posed problem' was a 'minimal case' of my 'actual problem'), so (float-array ... (map ... )) won't work; the best so far is your solution of:
```
(doseq [i (range (- n 1))]
  (aset-float y i  (+ (aget ^floats x i)
                      (aget ^floats x (+ i 1)))))
```; I wonder if there is a way to know of the + has boxing/unboxing involved"
1243,1509835415.00008,Willow,<@Berry> some info straight from alex miller: <http://insideclojure.org/2014/12/15/warn-on-boxed/>
1243,1509835585.000091,Berry,"so now we're at:

```

(set! *unchecked-math* :warn-on-boxed)

(def n 100000000)

(def x (float-array n))

(def y (float-array (- ^long n 1)))

(doseq [i (range (- ^long n 1))]
  (aset-float y i (+ (aget ^floats x i)
                     (aget ^floats x (+ ^long i 1)))))


```

and the remaining thing to do is to call disassemble and see what's goingon there; unfortunately, disassemble is throwing an exception right now"
1243,1509836242.000004,Araceli,"<@Berry> As an alternative, you could also consider writing this performance-critical section in Java and calling it via interop. (Passing on a suggestion from this channel not too long ago.)"
1244,1509838766.000001,Ahmad,"I'm getting an error in my Datomic setup that I'm not being able to get around. Here's what I have, a transactor running, a console connected to this transactor and a peer server connected to the same transactor. Whenever I try to connect to the peer server from the bin/repl found in the Datomic installation directory it works fine, here's an example output:
```
user=&gt; (require '[clojure.core.async :refer (&lt;!!)]
'[datomic.client :as client])
nil
user=&gt; (&lt;!! (client/connect {:db-name ""clj-twitter""
:account-id client/PRO_ACCOUNT
:secret ""mysecret""
:region ""none""
:endpoint ""localhost:8998""
:service ""peer-service""
:access-key ""myaccesskey""}))
#object[datomic.client.impl.types.Connection 0x2a235b8e ""#datomic.client.impl.types.Connection[{:t 63, :next-t 1000, :account-id \""00000000-0000-0000-0000-000000000000\"", :db-name \""clj-twitter\"", :db-id \""datomic:dev://localhost:4334/clj-twitter\"", :timeout 60000}]""]
```
But it doesn't work that well when I try the same from the REPL inside my project:
```
user=&gt; (require '[clojure.core.async :refer (&lt;!!)]
#_=&gt; '[datomic.client :as client])
2017-11-04 21:21:22.610:INFO::nREPL-worker-0: Logging initialized @9976ms
nil
user=&gt; (&lt;!! (client/connect {:db-name ""clj-twitter""
#_=&gt; :account-id client/PRO_ACCOUNT
#_=&gt; :secret ""mysecret""
#_=&gt; :region ""none""
#_=&gt; :endpoint ""localhost:8998""
#_=&gt; :service ""peer-service""
#_=&gt; :access-key ""myaccesskey""}))
ClassNotFoundException org.eclipse.jetty.util.thread.NonBlockingThread java.net.URLClassLoader.findClass (URLClassLoader.java:381)
```
One thing I noticed is that the REPL from the Datomic installation directory is using Clojure 1.9.0-alpha15, while my project is using Clojure 1.8.0.
Does anyone knows or have an idea of what I'm possibly doing wrong?"
1244,1509840175.000053,Araceli,"<@Ahmad> I haven't worked with Datomic, so I can't speak to that. But, in the past when I've encountered `ClassNotFoundException`, it's because I had my classpath set up incorrectly one way or another.; <@Ahmad> What build tool are you using? Have you declared all the appropriate dependencies as required by the documentation that you're following?"
1244,1509840480.000036,Ahmad,"<@Araceli> I think it's somehow related to my dependencies, some sort of conflict between versions, because I just created a new leiningen project and it worked there. I have also found some Stack Overflow questions and old conversations from the <#C03RZMDSH|datomic> channel where another person were facing the same problem; It seems to be related to ring as I'm also using it in my project and the fact that it uses Jetty on a certain version..."
1244,1509840763.000055,Araceli,"<@Ahmad> I see. In that case, you may need to bump up some versions. Although, of course, that has other effects on the project as a whole."
1244,1509841072.000031,Ahmad,"<@Araceli> I don't think I can, my dependencies are at latest versions"
1244,1509841127.000059,Araceli,"<@Ahmad> That is a bit unexpected, then. Sorry, but it doesn't match what I've seen, so I don't think I know how to help you, unfortunately."
1244,1509841311.000048,Ahmad,"<@Araceli> I have an idea, I'm inspecting the dependency tree of a new leiningen project from which the connection works and then I will compare it to the dependency tree of my project with lein deps :tree"
1244,1509841353.000015,Araceli,"And, if it turns out a transitive dependency is resolving to a different version than what works, you can always explicitly pin it."
1244,1509841378.000038,Ahmad,"<@Araceli> Oh, by the way no problem, I appreciate your attention :)"
1244,1509841414.000044,Araceli,"The problem in, for example, NodeJS land is that, sometimes, _there does not exist a set of mutually compatible versions for some sets of dependencies_. For what it's worth, Java land I feel like has been better about this on average."
1244,1509841415.00003,Ahmad,I still have to learn how that thing you mentioned works
1244,1509841501.000057,Araceli,"If there is a transitive dependency (not directly declared in your dependencies, but pulled in as a result of what was directly declared) that needs to be at a specific version, you can pin it (declare it explicitly, at the version needed, in your dependencies)."
1244,1509841985.000048,Ahmad,"<@Araceli> Oh, now it makes sense. Merging what you said with what I'm seeing in the comparison of both dependency trees. It seems that the `ring/ring-jetty-adapter` dependency in my project contains a transitive dependency as you said to `org.eclipse.jetty/jetty-io` which is also used by `com.datomic/clj-client`, but because it was already available for ring it was not downloaded for datomic."
1244,1509842022.000013,Araceli,"Hopefully, you can find a version that makes everything happy."
1244,1509842762.000019,Ahmad,"Yup, I had to add a `:exclusions` modifier for `org.eclipse.jetty/jetty-io` and it worked fine. Thanks for the help <@Araceli>!"
1244,1509842813.000027,Araceli,"You're welcome. Actually, thank you for explaining, because I learned something new there, also."
1244,1509842831.00003,Ahmad,:)
1245,1509843908.000088,Margaret,"<@Berry> instead of aset in a doseq, use amap or areduce for performance"
1245,1509843978.000002,Berry,"<@Margaret>: in the full problem. I am modifying an existing float-array -- amap is out of the question; also, areduce only returns one item right?"
1245,1509844008.000057,Margaret,"an array is one item, but areduce will walk an array input faster than doseq will; have you tried using your same array as the ret in amap?; it should work; generalized seq-oriented code is not going to be as fast as array specific code for the kind of thing you are doing"
1245,1509844131.000015,Berry,"<@Margaret>: this is my fault, my general problem is:

I have matrices A, B, C

I have a function f

I want each eleme of A[i, j] to be repalced with f(A[i-1, j], A[i, j-1], B[i, j], C[i, j])

I don't think areduce / amap is right for this

I posted a much simpler questino (for which areduce/amap works fine) mainly to learn how to do 'numeric unboxing stuff' in clojure"
1245,1509844175.000047,Margaret,"honestly beyond some very simple levels of complexity, just write some java; if unboxing matters that much, it's easier"
1245,1509844221.000035,Berry,yeah; I'm seriously considering doing part clojure + part scala (this problem arises from dealing with a scala library in particular)
1245,1509844229.000016,Margaret,also a multi-dimensional array is an array of arrays right? so you just need nested array ops
1245,1509844252.000042,Berry,the library I'm using has blas / vectorized tensor ops
1245,1509844262.000081,Margaret,OK - what's the actual type?
1245,1509844267.000041,Berry,"unfortunately, I'm doing something dynamic-programmikng ish, where A[i,j] dedpends on A[i-1, j] A[i, j-1]; ""actual type?' &lt;-- I don't get what you are asking"
1245,1509844596.000022,Margaret,"like what does (type A) return. I would assume `[[F`; so that you would use `(aget A 0 0)` to get the first item, etc."
1246,1509854255.000005,Carly,"Hey folks, I'm trying to understand how to wrap `ServerSocketChannel` with `core.async`... can someone point me towards the right direction?"
1247,1509860485.000012,Berry,"for side-effecty looping, does clojure have something faster than
```
(doseq [i (range n)]
...)
```
or is that the standard, optimal way to od it?"
1247,1509860512.000053,Weston,run!
1247,1509860618.000045,Berry,I can't believe <https://clojuredocs.org/clojure.core/run!is> a real function -- somehow I've managed to never hear of it all these years
1247,1509882861.000037,Magdalena,"I’d expect `loop`/`recur` to be the fastest way available, as it should be closer to the metal than other options built on reduce etc…  If performance matters so much measure it, it might be negligible in practice, and reduce/run! etc will probably be nicer."
1248,1509904770.00007,Douglass,"any compojure api users here? what's the url supposed to be if you want to send a query param set?  specifying {id :- [Long] []} for ""query?id=0&amp;id=1=3"" works fine but expecting a set, i.e. {id  :- #{Long} #{}} gives me ""{:id (not (set? [""0"" ""1"" ""3""]))}; the documentation on that is ridiculously thin or I just can't find the right place"
1248,1509904851.000076,Berry,"if I'm doing tensor math, should I just accept that any pure clj+java solution is going to be about 10x slower than C ?; ```
(cc/quick-bench 
 (let [n (* 10 1000 1000) 
       z (float-array n)]
   (doseq [^long i (range 1 n)]
     (aset-float z i
                 (float i)))))

```

results in:

```
Evaluation count : 6 in 6 samples of 1 calls.
             Execution time mean : 514.302217 ms
    Execution time std-deviation : 1.078130 ms
   Execution time lower quantile : 512.321577 ms ( 2.5%)
   Execution time upper quantile : 515.160140 ms (97.5%)
                   Overhead used : 2.944295 ns

```

does this seem right 10M aset-float takes 500ms ==&gt; each aset-float takes 50ns ?

this seems a bit high, as I expect, on a GHz CPU, for each aset-float to take about 1ns"
1248,1509906298.00003,Margaret,"<@Berry> remember what I said about amap? on my machine that benches 405ms,  and this benches 26 ms
```                                                                                
(let [n (* 10 1000 1000)                                                        
        z (float-array n)                                                       
        indexes (range 1 n)]                                                    
    (cc/quick-bench                                                             
     (amap z i r                                                                
       (float i))))```; <@Berry> it does the same thing, 20 times faster, you rejected what I was saying without even trying it; notice that I don't need to use r or z - for your math where you need to look at other indexes of the array, r and z are there (plus i to do math on for index math) - it's much more general than you think"
1248,1509906460.000061,Berry,<@Margaret>: I tried it just now; $&amp;@($#* amap is fast
1248,1509906469.000082,Margaret,maybe you'll listen next time
1248,1509906480.000051,Berry,:slightly_smiling_face:
1248,1509906486.000034,Jonas,"not sure if it matters, but the two different snippets aren’t measuring the same thing; one is creating the float array in the benchmark, while the other is not"
1248,1509906506.000062,Margaret,<@Jonas> it's a silly refactor I can undo :smile:
1248,1509906521.000053,Jonas,"yea, i don’t think it would change the results too much"
1248,1509906523.000083,Margaret,"I also benchmarked that refactor on the original, it makes it slower; or more likely ,the difference was less than epsilon haha; yeah, my quick bench says pulling the quick-bench to the outside again adds .2 ms to the run time"
1248,1509907080.000131,Berry,"great oracle of <@Margaret>, can you show me how to make this code faster too? (note that computing a[i] depends on a[i-1] which makes me unsure how to use amap)

```
(cc/quick-bench 
 (let [n   (* 100 1000 1000)
       dst (float-array n)
       out (float-array n)]
   (aset out 0 (aget ^floats dst 0))
   (aset out 1 (aget ^floats dst 1))
   (aset out 2 (aget ^floats dst 2))
   (doseq [^long i (range 3 n)]
     (aset out i  
           (min 

            (+ (aget ^floats dst (- i 0))
               (aget ^floats out (- i 2)))

            (+ (aget ^floats dst (- i 1))
               (aget ^floats out (- i 1)))

            (+ (aget ^floats dst (- i 2))
               (aget ^floats out (- i 0))))))))
```

my current bench output is:

```
Evaluation count : 6 in 6 samples of 1 calls.
             Execution time mean : 1.578544 sec
    Execution time std-deviation : 21.633538 ms
   Execution time lower quantile : 1.548456 sec ( 2.5%)
   Execution time upper quantile : 1.599705 sec (97.5%)
                   Overhead used : 2.944295 ns

```"
1248,1509907116.000089,Margaret,"<@Berry> like I said, the bindings i, r, z allow you to access index, original, output respectively - you can do math on i and do an array lookup on r or z; the weird part is starting on item index 3, you'll need a conditional clearly (or maybe just copy the input back to the first 4 indexes of the output, to skip the conditional on each iteration)"
1248,1509908196.000007,Berry,"<@Margaret>: amap just sped up my code by a factor of 10. I'm not sure what you could have done to get me to take amap seriously earlier, but I'm glad you kept repeating it."
1248,1509908334.000016,Jonas,i thought part of the problem was that it doesn’t modify the array in place
1248,1509908359.000082,Margaret,you can do that inside amap - if you want to; maybe areduce is better if that is what you are trying to do actually; nobody says the accumulated value maintained by areduce can't be the input
1248,1509908412.0001,Jonas,"alternatively `amap` is only like 10 lines of code; ```(defmacro amap
  ""Maps an expression across an array a, using an index named idx, and
  return value named ret, initialized to a clone of a, then setting 
  each element of ret to the evaluation of expr, returning the new 
  array ret.""
  {:added ""1.0""}
  [a idx ret expr]
  `(let [a# ~a
         ~ret (aclone a#)]
     (loop  [~idx 0]
       (if (&lt; ~idx  (alength a#))
         (do
           (aset ~ret ~idx ~expr)
           (recur (unchecked-inc ~idx)))
         ~ret))))```; it’d be pretty easy to make an amap-inplace that just doesn’t create a clone"
1248,1509908807.000028,Berry,"<@Jonas>: why is it faster than doseq, is it the loop+unchecked-inv vs range ?"
1248,1509908823.000068,Jonas,the main reason is `aset-float`
1248,1509908835.000003,Berry,aset-float is *slower* than a regular aset ?
1248,1509908842.000038,Jonas,yea; I think i mislead you there
1249,1509908848.000035,Berry,"I thought giving it more info (hey, this is a float) would make it faster"
1248,1509908852.000006,Jonas,"if you do `(aset z i ^float i)`; it runs faster; but not as fast as `amap`; ```(let [n (* 10 1000 1000) 
        z (float-array n)]
    (doseq [^long i (range 1 n)]
      (aset z i ^float i)))```; ```&gt; (macroexpand-1 '(doseq [^long i (range 1 n)]
                                       (aset ^floats z ^long i ^float i)))
(clojure.core/loop
 [seq_75583 (clojure.core/seq (range 1 n)) chunk_75584 nil count_75585 0 i_75586 0]
 (if
  (clojure.core/&lt; i_75586 count_75585)
  (clojure.core/let
   [i (.nth chunk_75584 i_75586)]
   (do (aset z i i))
   (recur seq_75583 chunk_75584 count_75585 (clojure.core/unchecked-inc i_75586)))
  (clojure.core/when-let
   [seq_75583 (clojure.core/seq seq_75583)]
   (if
    (clojure.core/chunked-seq? seq_75583)
    (clojure.core/let
     [c__4685__auto__ (clojure.core/chunk-first seq_75583)]
     (recur
      (clojure.core/chunk-rest seq_75583)
      c__4685__auto__
      (clojure.core/int (clojure.core/count c__4685__auto__))
      (clojure.core/int 0)))
    (clojure.core/let
     [i (clojure.core/first seq_75583)]
     (do (aset z i i))
     (recur (clojure.core/next seq_75583) nil 0 0))))))```"
1248,1509908909.000137,Berry,"interesting, aset-float -&gt; aset changed runtime from ""500ms"" to ""90ms"""
1248,1509908937.000079,Jonas,but the doseq version is also doing a bunch of other stuff that makes it slower than the `amap` version as seen in the macroexpand; it does seem crazy that aset-float is slower than aset; but those are similar results to what i saw on my computer as well
1248,1509909017.000134,Berry,"<@Jonas> this is so insightful:

aset-float -&gt; aset = 500ms -&gt; 90 ms
doseq -&gt; loop + unchecked-inc = 90ms -&gt; 20ms

which basically matches amap; now I'm happy; I feel like I've made every $&amp;@(#$ possible numeri-clojure mistake there is to make :-)"
1248,1509909070.000067,Jonas,i’m learning a lot from this too
1248,1509909121.000006,Margaret,"<@Berry> nah there's lots of numeri-clojure mistakes to make, you're still making the one where you write clojure instead of java when it has to be fast for numerics for example; :smile:"
1248,1509909174.000064,Berry,"<@Margaret>: now you're ignoring what I'm saying ... see ""numeri-clojure"" :slightly_smiling_face:; <@Jonas>: showing the source of the amap macro was especially useful; as I actually need a 2d version"
1248,1509909331.000017,Margaret,why wouldn't nested amap work for 2d?
1248,1509909348.000094,Berry,"because it returns an array of array, instead of a flat float-array"
1248,1509909388.000035,Margaret,"and what I meant is that if you care about your time, writing it java in the first place is more expedient, no matter how much we all prefer writing clojure"
1248,1509909413.000091,Berry,"actually, most of the code is running the GPU using tensor libraries"
1248,1509909418.00001,Margaret,why would anything give you a flat float array out of a 2d array? in java a 2d array is an array of arrays
1248,1509909422.000022,Berry,there just happens to be some $*@#($* ETL type work I need to do beforehand
1248,1509909439.000105,Jonas,i have jump to source setup and it’s really useful for clojure. either looking at source in clojure core or in libraries I consume
1248,1509909440.000043,Berry,<@Margaret> BufferedImage -&gt; getRaster -&gt; getData is an flat array
1248,1509909478.000059,Margaret,"sounds like you could skip a bunch of trouble and use the flat array and do some simple indexing math instead of pretending it's 2d; and I hear you saying that the GPU is doing most of the work, but if you'd written this in java in the first place you would have saved a lot of time, and that's 100% of my experience when numeric performance is an issue in clojure; my workflow is write in clojure, if it's slow figure out the bottleneck, if the bottleneck is math related write a small java class for it"
1250,1509911797.000062,Berry,"is `float-array` guarnateed to be all 0?
<https://clojuredocs.org/clojure.core/float-array> does not mention it, but I ran `(seq (float-array 20))` a bunch of times, and it's all 0 all the time"
1248,1509911998.000054,Margaret,<@Berry> <https://github.com/clojure/clojure/blob/master/src/jvm/clojure/lang/Numbers.java#L1126>
1248,1509912110.000024,Berry,"<@Margaret>: I see, so float-array just creates a java float array, but then according to <https://stackoverflow.com/questions/2154251/any-shortcut-to-initialize-all-array-elements-to-zero>

that defaults to 0"
1248,1509912122.000017,Margaret,so that is using `new float[]` yeah <https://stackoverflow.com/a/3426854>
1251,1509917021.000025,Ahmad,"Regarding Datomic, I'd like to have my unit tests running in isolated environments just like what was demonstrated in this video, [Test-driven Development with Datomic](<https://www.youtube.com/watch?v=JaZ1Tm6ixCY>), but using Datomic's Client API (`datomic.client`).
The author demonstrates a technique in which he creates an in memory database for every unit test in his suite, but it only seems to be possible to do using the Datomic API (`datomic.api`) because it has function `create-database` (<http://docs.datomic.com/clojure/index.html#datomic.api/create-database>) that provides some facilities for creating in memory databases whenever you want to.
I've been thinking about a work around for his technique using the Client API and the only thing that comes to my mind is executing from within my test code a peer server and then stopping it after the test finishes its execution. Something like: `bin/run -m datomic.peer-server -h localhost -p 8998 -a myaccesskey,mysecret -d hello,datomic:<mem://hello>`
It sounds like an overkill solution for me and I believe it's a pretty common use case to execute your unit tests against a fresh database instance. Does anyone have an easier solution that I could use?"
1251,1509926350.000133,Kyung,"On the one hand, you can create a fixture that deletes the database and reloads the necessary test data between every test. I found this example on SO:  <https://stackoverflow.com/questions/35005669/wiping-out-a-datomic-db-for-test-environment>; On the other hand, there’s the philosophy that you shouldn’t need to “unit test” with an external dependency like a database"
1252,1509927540.000025,Wenona,"FWIW, this is pretty much exactly what we do for tests in our services that use the client API. It’s a little heavyweight, but not overly so. Running tests works fine with this procedure."
1251,1509928434.000139,Ahmad,"<@Kyung> I don't think it would work for the Client API, it only connects to a peer server. And even though the Client API has similar methods for creating, deleting and listing databases (<http://docs.datomic.com/clojure-client/index.html#datomic.client.admin>), I'm not being able to make them work in memory databases. I guess I will have to make use of this dirty hack or I could use the older library, but wouldn't be this entertaining xD"
1252,1509928593.000099,Ahmad,<@Wenona> Good to know I'm not entirely mad in doing so xD Thanks for the letting me know!
1253,1509929057.000119,Berry,"When clojure tells me:
```
     java.lang.IllegalArgumentException: More than one matching method found: add
clojure.lang.Compiler$CompilerException: java.lang.IllegalArgumentException: More than one matching method found: add, compiling:(
```

is there a way to respond: great, please list all the matching methods for me?"
1251,1509929264.000079,Ahmad,In Cursive you can use Ctrl+B and check the method overloads. But it seems that you will have to use type hints
1253,1509929321.00001,Berry,"yeah, so I try type hints, and it tells me ""you ca't type hint this local""; maybe I should produce a minimal failure case; ```
(ns snip.fail
  (:require [primitive-math :as p]))


(let [a (float-array 20) 
      y (aget ^floats a 0)]
  (loop [x (float 0.0)] 
    (p/+ x y)))



```
^--- please help me typehint this

(yes, the loop is important, you can't change the loop to a ledt)"
1253,1509930010.000241,Ahmad,"```
(let [a (float-array 20)
      y (aget a 0)]
  (loop [x 0]
    (p/+ (float x) (float y))))
```; ^ It seems that you can do it like this <@Berry>"
1253,1509930043.000045,Berry,"yes, indeed, how expensive is the (float ...) given the arg is already a float?; I genuinely don't know, and am trying to avoid as much boxing/unboxinga s possible"
1253,1509930097.000131,Ahmad,"```
public static float floatCast(Object x) {
        if (x instanceof Float) {
            return ((Float)x).floatValue();
        } else {
            double n = ((Number)x).doubleValue();
            if (n &gt;= -3.4028234663852886E38D &amp;&amp; n &lt;= 3.4028234663852886E38D) {
                return (float)n;
            } else {
                throw new IllegalArgumentException(""Value out of range for float: "" + x);
            }
        }
    }
```; This is what happens every time you call `float`. Lots of unboxing"
1253,1509930145.000095,Berry,"this also confuses me: 
```

;; fails 
(let [a (float-array 20) 
      y (aget ^floats a 0)] 
  (loop [x (float 0.0)] 
    (p/+ x y)))


;; works
(let [a (float-array 20) 
      y (aget ^floats a 0)
      x (float 0.0)] 
  (p/+ x y))

```; so for whatever reason, let = works, loop = fails, (unfortunately, I need to loop)"
1253,1509930407.000107,Ahmad,"```
(let [a [0.0 0.0 0.0 0.0 0.0]
      y (a 0)]
  (loop [x 0.0]
    (p/+ x y)))
```; It works this way too. Do you actually need to use `float-array`?"
1253,1509930506.000023,Berry,"I think these are all doubles, not floats right ?; (I do have to use float-array, as I'm aset -ing alot); ```

(let [a [(float 0.0)]
      y (a 0)]
  (loop [x (float 0.0)]
    (p/+ x y)))


```
this also fails; question is: why is clojure making this a float vs double issue"
1253,1509930846.000023,Ahmad,"Oh, you also have the option do use `unchecked-float`, it's a bit less expensive:
```
    public static float uncheckedFloatCast(Object x) {
        return ((Number)x).floatValue();
    }
```"
1253,1509930937.000221,Berry,"```

;; works 
(let [a (double-array 20) 
      y (aget ^double a 0)] 
  (loop [x (double 0.0)] 
    (p/+ x y)))



;; fails 
(let [a (float-array 20) 
      y (aget ^float a 0)] 
  (loop [x (float 0.0)] 
    (p/+ x y)))


```; seems like double/float are treated differently; <@Haydee>: any chance you can help? :slightly_smiling_face:; alright, I have an even simple minimal failure case:
```


;; works 
(let [y (double 0.0)] 
  (loop [x (double 0.0)] 
    (p/+ x y)))

;; fails 
(let [y (float 0.0)] 
  (loop [x (float 0.0)] 
    (p/+ x y)))
```"
1253,1509931280.000094,Ahmad,"That's interesting, I wonder why `loop` works like that
```
(loop [x (float 0.0)]
  (type x))
=&gt; java.lang.Double
```; Btw, <@Berry> that's what it's causing the impossibility to find the correct overload
```
(let [y (float 0.0)]
  (loop [x (float 0.0)]
    (println (type x) (type y))))
=&gt; java.lang.Double java.lang.Float
```"
1253,1509931390.000085,Berry,"that clarifies so much; I don't know how to file clojure bug reports, but I think your example above has to be a bug"
1253,1509931505.000107,Ahmad,"I don't think it's a bug, it's seems to be related to the quotes and unquotes being performed inside the `loop` macro. Check this out:"
1253,1509931650.000056,Berry,"Regardless of the macro internals,
```
(loop [x (float 0.0)]
  (type x))
=&gt; java.lang.Double
```
should return Float instead of Double, IMHO"
1253,1509931677.000142,Ahmad,"I agree; I guess you can try other alternatives to the loop macro, or the `unchecked-float` that seems to be a bit less expensive"
1253,1509931878.000066,Berry,"<@Sandy> <@Sonny>: When you get a chance, can you please let us know what Clojure's semi-official stance on
```
(loop [x (float 0.0)]
  (type x))
=&gt; java.lang.Double
```
is intended behaviour -- or if it should return java.lang.Float, and thus a bug ?; <@Ahmad>: I'm going to go study loop* :slightly_smiling_face:"
1254,1509932160.000027,Ahmad,"You will be taken to the depths of the compiler internals, be careful mate. `src/jvm/clojure/lang/Compiler.java#L6318` more precisely"
1253,1509932326.000012,Berry,"yeah, it's kinda a bad sign when there are no docs, i.e.
```
boot.user&gt; (clojure.repl/doc loop*)
nil
boot.user&gt; (clojure.repl/doc loop)
-------------------------
clojure.core/loop
  (loop [bindings*] exprs*)
```; correct me if I""m wrong, the problem here is the loop macro is smart, so at compile time, it's like

""oh, I see (float 0.0)""

let me evaluate this at macro expansion time

""oh, we got 0.0""

[next stage:]

""oh, 0.0 is a double""; actually, my theory is wrong:
```

(macroexpand 
 '(loop [x (float 0.0)]
    x))
;; ==&gt; (loop* [x (float 0.0)] x)
```"
1253,1509932559.000155,Ahmad,"I don't think you will be able to expand everything inside this macro, `loop*` is a symbol defined in the compiler's code. I don't even think there's documentation for it. It's something we should never have to look at"
1253,1509932607.000172,Berry,"```

(macroexpand 
 '(loop [x (float 0.0)]
    (type x)))
;; =&gt; (loop* [x (float 0.0)] (type x))

(loop [x (float 0.0)]
    (type x))
;; =&gt; java.lang.Double

(loop* [x (float 0.0)] (type x))
;; =&gt; java.lang.Double
```

looking at that, it looks like everything is passed to loop* correctly (still as a float), but loop* [which is implemented in Java?] is doing the weird float -&gt; double translation"
1253,1509932644.000108,Ahmad,"Yup, the macro takes your bindings and body and send them to loop* so that it can perform the magic"
1253,1509932689.00004,Sonny,Clojure only supports primitive long and double; Loops support a wider set of loop local primitive types; But once you leave the loop you’re back to long and double
1253,1509932857.000052,Berry,"<@Sonny>: what does 'support' mean in 'Clojure only supports primitive long and double.'

We have `float-array` , `aget`, `float` -- this seems to contradict only supporting double."
1253,1509932967.000137,Sonny,"Some of that is vestigial from an earlier time when a broader set were supported. Some is for limited interop; Only float and double are supported as primitive args/returns in functions; Sorry, only long and double"
1253,1509933133.000054,Berry,"`Only float and double are supported as primitive args/returns in functions` &lt;-- Can you please explain what happens when I call a java function of type sig

` float java_add(float x, float y) `

and call it from clojure as (java_add (float 2.0) (float 3.0))

in particular, what is returned, a float or a double ?"
1253,1509933225.000071,Sonny,"Sorry, I’m signing off for the night; Too long, catch you tomorrow"
1253,1509933236.000088,Berry,thanks for your help; take care
1253,1509933465.000055,Ahmad,"Considering what alex said, you should try to use doubles instead of floats, they will fit your float values anyway. At least for these operations involving the loop macro."
1253,1509934478.000035,Berry,"I'm interfacing with other libraries that want floats.; I'm going to write this performance critical code in java :slightly_smiling_face:.; <@Ahmad>: thanks for all your help, on a sunday evening, with debugging this."
1253,1509934773.000031,Ahmad,"No problem :); Regarding Datomic, I've been struggling with this for an hour or two, please help me out. I'm trying to run a parameterized query, but apparently I'm doing something wrong, does anyone knows why is the first query not returning the entity? I tried to follow the documentation, but it doesn't seems to be working... ;-; I'm also using the Datomic's Client API (<http://docs.datomic.com/clojure-client/index.html>)"
1255,1509939726.000098,Wenona,"Just pass the value to bind to `?p-username` in `:args`, e.g. just pass `[db ""zignd""]` as `:args`; (There is also <#C03RZMDSH|datomic>)"
1256,1509944328.000044,Berry,"I have tried .size, .length, .-length
how do I get, in O(1) time, the length of a (float-array n) ?"
1256,1509944440.000108,Sandy,"<@Berry> acount I think?; nope, `alength` <https://clojuredocs.org/clojure.core/alength>"
1256,1509944488.000015,Berry,"<https://clojuredocs.org/search?q=acount%20> doesn'ts eem ot exist; alength, thanks!"
1256,1509944517.000112,Sandy,"arrays are really strange on the JVM, they don't have methods, or fields; So in Java you have to call something to Array/length, and even that I think might be some sort of strange compiler intrinsic"
1256,1509944543.000072,Berry,<https://stackoverflow.com/questions/8755812/array-length-in-java> was throwing me off
1257,1509963155.000365,Ahmad,Thank you! It worked!; I will post there next time
1258,1509978099.000116,Jutta,"Can I ""append"" a pre/post function to a function?"
1258,1509978384.000225,Ahmad,"```
(defn constrained-fn [f x]
   {:pre [(pos? x)]
   :post [(= % (* 2 x))]}
   (f x))
```
:pre and :post assertions"
1259,1509978902.000028,Willow,you mean after the fact?
1258,1509978906.00018,Shamika,"depending on what you mean by append, this might be helpful too <https://github.com/technomancy/robert-hooke>"
1260,1509983260.000111,Berry,"```

(defmacro foo [x y]
  `(let [^floats ~x ~y]
     ~x))

(macroexpand-1
 '(foo x (float-array 20)))
;; ==&gt; (clojure.core/let [x (float-array 20)] x)
```

It appears my type hint of ^floats is being stripped away.
Is there a way for macros to generate / keep type hints ?; [ I need to keep type hints as I end up using primitive math. ]; found answer: <https://stackoverflow.com/questions/11919602/generating-clojure-code-with-type-hints>; Is there a more updated view of definline ?
<http://bytopia.org/2014/07/07/inline-functions-in-clojure/>"
1261,1509984887.000514,Johana,"Probably not, but is there something in key destructuring that lets you rename the keys in one go as you destructure them?"
1261,1509984939.000693,Jodie,"yes.; ```
{new-name :old-name}
```"
1261,1509984967.00036,Sadye,"Is anyone here using the s3-private-wagon plugin with Leiningen 2.7.1 on Java 1.8? I’m getting authentication errors when using the plugin and running `lein deps`; however, when I run the `aws` cli tool, I’m able to retrieve objects from the private bucket.; It seems s3-private-wagon isn’t retrieving the EC2 instance profile credentials; ```
jenkins@ip-10-110-61-60:~/workspace/movr3-api-dev$ lein deps
Could not transfer artifact wardrobe:wardrobe:pom:0.1.3 from/to releases (<s3p://artifacts-prd.pnmac.com/releases/>): Access Denied (Service: Amazon S3; Status Code: 403; Error Code: AccessDenied; Request ID: AA5EF73EDF617F8E)
This could be due to a typo in :dependencies or network issues.
If you are behind a proxy, try setting the 'http_proxy' environment variable.
jenkins@ip-10-110-61-60:~/workspace/movr3-api-dev$ cd ../../.m2/repository/wardrobe/wardrobe/0.1.3/
jenkins@ip-10-110-61-60:~/.m2/repository/wardrobe/wardrobe/0.1.3$ aws s3 sync <s3://artifacts-prd.pnmac.com/releases/wardrobe/wardrobe/0.1.3/> .
download: <s3://artifacts-prd.pnmac.com/releases/wardrobe/wardrobe/0.1.3/wardrobe-0.1.3.jar.sha1> to ./wardrobe-0.1.3.jar.sha1
download: <s3://artifacts-prd.pnmac.com/releases/wardrobe/wardrobe/0.1.3/wardrobe-0.1.3.pom> to ./wardrobe-0.1.3.pom
download: <s3://artifacts-prd.pnmac.com/releases/wardrobe/wardrobe/0.1.3/wardrobe-0.1.3.jar> to ./wardrobe-0.1.3.jar
download: <s3://artifacts-prd.pnmac.com/releases/wardrobe/wardrobe/0.1.3/wardrobe-0.1.3.pom.sha1> to ./wardrobe-0.1.3.pom.sha1
download: <s3://artifacts-prd.pnmac.com/releases/wardrobe/wardrobe/0.1.3/wardrobe-0.1.3.jar.md5> to ./wardrobe-0.1.3.jar.md5
download: <s3://artifacts-prd.pnmac.com/releases/wardrobe/wardrobe/0.1.3/wardrobe-0.1.3.pom.md5> to ./wardrobe-0.1.3.pom.md5
jenkins@ip-10-110-61-60:~/.m2/repository/wardrobe/wardrobe/0.1.3$
```"
1261,1509985110.000386,Jodie,<@Johana> <https://clojure.org/guides/destructuring#_associative_destructuring>
1261,1509985195.000335,Johana,"<@Jodie> I mean something like this:
```
(let [{:keys [x y]} {:x 1 :y 2}
      original-x x
      original-y y
      {:keys [x y]} {:x 2 :y 3}
      new-x x
      new-y y]
  {:x (+ original-x new-x)
   :y (+ original-y new-y)})
```
where I want to assign the destructured `x` directly to the intended name; Ah, that is what `{new-name :old-name}`  can do, I see"
1261,1509985268.000034,Sadye,"By the way, I’m using version 1.3.0 of s3-private-wagon"
1261,1509985357.000217,Johana,"```
(let [{original-x :x original-y :y} {:x 1 :y 2}
      {new-x :x new-y :y} {:x 2 :y 3}]
  {:x (+ original-x new-x)
   :y (+ original-y new-y)})
```; cool"
1261,1509985373.000118,Sadye,<https://github.com/s3-wagon-private/s3-wagon-private/issues/18> It seems this has already been solved as of version 1.3.0
1261,1509985381.000398,Guillermo,"You may want to try leiningen 2.8.1 <@Sadye>, I know some attention went into updating s3-private-wagon"
1261,1509985389.000505,Johana,Actually the first time I needed this renaming :slightly_smiling_face:
1261,1509985417.000164,Guillermo,"Not sure it handles your issue, but it does appear that related issues have been closed upstream"
1261,1509985450.000386,Sadye,"<@Guillermo> Thanks for the tip! I’ll give that a try; ```
Could not find artifact wardrobe:wardrobe:jar:0.1.3 in central (<https://repo1.maven.org/maven2/>)
Could not find artifact wardrobe:wardrobe:jar:0.1.3 in clojars (<https://repo.clojars.org/>)
Could not transfer artifact wardrobe:wardrobe:jar:0.1.3 from/to releases (<s3p://artifacts-prd.pnmac.com/releases/>): Access key cannot be null.
Could not transfer artifact wardrobe:wardrobe:jar:0.1.3 from/to snapshots (<s3p://artifacts-prd.pnmac.com/snapshots/>): Access key cannot be null.
Could not transfer artifact wardrobe:wardrobe:pom:0.1.3 from/to releases (<s3p://artifacts-prd.pnmac.com/releases/>): Access key cannot be null.
This could be due to a typo in :dependencies, file system permissions, or network issues.
If you are behind a proxy, try setting the 'http_proxy' environment variable.
```; I’m getting a similar error with the upgrade to Lein 2.8.1. I’m going to try Lein 2.8.0 next"
1261,1509985848.000384,Guillermo,you're getting a much better error message now; `Access key cannot be null`; Might want to ask in <#C09N0H1RB|aws>  <@Sadye> -- usually for IAM instance profiles you don't have to do anything
1262,1509988784.00041,Berry,"```

(defmacro ifor [[i start end] &amp; body]
  `(let [start# (long ~start)
         end#   (long ~end)] 
     (loop [~i start#]
       (when (p/&lt; ~i end#)
         ~@body
         (recur (unchecked-inc ~i))))))

(defmacro iproc [expr [data i v] &amp; body]
  `(let [~data ~expr]
     (ifor [~i 0 (alength ~data)]
           (let [~v (aget ^floats ~data ~i)] 
             ~@body))))

(def x (float-array (* 1000 100)))

(cc/quick-bench 
 (ifor [i 0 (alength x)]
       (aset ^floats x i (float i))))
Evaluation count : 3276 in 6 samples of 546 calls.
             Execution time mean : 183.588777 µs
    Execution time std-deviation : 923.219982 ns
   Execution time lower quantile : 182.996929 µs ( 2.5%)
   Execution time upper quantile : 185.164436 µs (97.5%)
                   Overhead used : 1.962587 ns

(cc/quick-bench 
 (let [^long end (alength x)]
   (loop [i 0]
     (when (p/&lt; i end)
       (aset ^floats x i (float i))
       (recur (unchecked-inc i))))))
Evaluation count : 2412 in 6 samples of 402 calls.
             Execution time mean : 248.133557 µs
    Execution time std-deviation : 926.589005 ns
   Execution time lower quantile : 247.272398 µs ( 2.5%)
   Execution time upper quantile : 249.071233 µs (97.5%)
                   Overhead used : 1.962587 ns

(cc/quick-bench 
 (iproc x [x i v]
        (aset ^floats x i (float i))))
Evaluation count : 6 in 6 samples of 1 calls.
             Execution time mean : 1.121665 sec
    Execution time std-deviation : 70.439931 ms
   Execution time lower quantile : 1.067037 sec ( 2.5%)
   Execution time upper quantile : 1.206947 sec (97.5%)
                   Overhead used : 1.962587 ns

```; any idea why the running time increases ? I would expect the three to be about the same"
1262,1509989000.00001,Kareen,your type hint in iproc isn't doing what you think it's doing
1262,1509989028.000138,Berry,"should I be doing
``` (aget ~(vary-meta data assoc :tag 'floats) ~i) ```"
1262,1509989028.00046,Kareen,use `~(with-meta data {:tag 'floats})` instead
1262,1509989300.00034,Venessa,i have a question about idiomatic application architecture — i’m writing a server application with a series of modules acting as various services; my thinking now is that i can wrap the important state to each module in an atom and then connect each module w/ `core.async` channels to pass messages around as various events come into the top-level port; does anyone have any feedback on this plan? or a better suggestion for structuring the software? i’m used to the situation in Go where i can just connect all the modules w/ channels to pass messages around; what i’m used to doing in clojure for concurrency is using atoms and i’m trying to resolve the two approaches
1262,1509989393.000033,Aldo,<@Venessa> I would caution against that architecture unless you specifically know you need concurrency already
1262,1509989422.000041,Berry,"is that basically the erlang / actor model ?; <@Kareen> :
```

(defmacro ifor [[i start end] &amp; body]
  `(let [start# (long ~start)
         end#   (long ~end)] 
     (loop [~i start#]
       (when (p/&lt; ~i end#)
         ~@body
         (recur (unchecked-inc ~i))))))

(defmacro iproc [expr [data i v] &amp; body]
  `(let [~(vary-meta data assoc :tag 'floats) ~expr]
     (ifor [~i 0 (alength ~data)]
           (let [~v (aget ~(vary-meta data assoc :tag 'floats) ~i)] 
             ~@body))))


(do

  (def x (float-array (* 1000 1000)))

  (println ""\n\n\n\n\n"")
  (println ""====="")

  (cc/quick-bench 
   (ifor [i 0 (alength x)]
         (aset ^floats x i (float i))))

  (cc/quick-bench 
   (iproc x [x i v]
          (aset ^floats x i (float i)))))


=====
Evaluation count : 360 in 6 samples of 60 calls.
             Execution time mean : 1.680640 ms
    Execution time std-deviation : 3.250002 µs
   Execution time lower quantile : 1.677290 ms ( 2.5%)
   Execution time upper quantile : 1.685090 ms (97.5%)
                   Overhead used : 1.962587 ns
Evaluation count : 456 in 6 samples of 76 calls.
             Execution time mean : 1.324811 ms
    Execution time std-deviation : 255.773342 ns
   Execution time lower quantile : 1.324424 ms ( 2.5%)
   Execution time upper quantile : 1.324963 ms (97.5%)
                   Overhead used : 1.962587 ns


```

not complaining at all -- iproc is now faster than ifor, weird"
1262,1509989469.000597,Venessa,ok great <@Aldo> i’m working on a bitcoin node — messages from peers will end up going to one module and then that will have downstream effects to some other modules; ^ <@Berry>; i’m wondering what the best way to do this in clojure is
1262,1509989530.000144,Aldo,I don't know enough about erland/actor model to comment on that. you absolutely can set up an app where you have components that own little worker threads and the components talk to each other via channels. I've written apps like that. almost all of them i either have or wish I had gone back and rewritten them in a more functional way
1262,1509989590.000303,Berry,to reinforce <@Aldo>’s point: I've found core.async hard to debug (both stack traces and reasoning about it) -- and found it's much simpler to take the FRP / reagent model /reactive atom route
1262,1509989611.000181,Aldo,turns out it's hard to predict which parts of your app will benefit from asynchronous programming :slightly_smiling_face:; now when I use core.async I prefer to keep it in one namespace that wires everything together. gives you one place to read/understand your asynchronous algorithm and one place to vary the number of threads for the different parts etc
1262,1509989877.000276,Venessa,ok thanks <@Aldo> <@Berry>
1262,1509990154.000242,Adelaida,"<@Venessa> - That sounds to me like a use case that Storm is designed to solve. However, I'm speaking from relative ignorance here on both the application architecture and Storm itself, so take that with a grain of salt. <http://www.storm-project.net/>"
1262,1509990185.000213,Venessa,thanks! seems a little like overkill; for me now; I may try putting all the state in a single atom; There will just be a little overhead for each module to only get the pieces it wants
1262,1509991006.00053,Cecile,"It might also be overkill, but you could take a look at Onyx. It's written in clojure and will handle things like state for your modules and has a clear model for describing how the data flows between your tasks."
1262,1509991016.0004,Venessa,Thanks; Anyone use anything like lenses?; Zippers etc
1262,1509991058.000595,Cecile,look into Specter
1262,1509991101.000245,Venessa,Ah right ; I think that will help if I go with one big ball of state approach ; Each module can define a lens over the substate it cares about and a single atom can handle concurrent writes ; Does anyone have any suggestions on writing maintainable accessors with specter?; Can I avoid having to re-write all my accessors if the shape of the state changes?
1262,1509991259.000816,Aldo,"onyx/storm are great, but I don't think they're really related to the problem here"
1262,1509991266.000137,Venessa,Agreed; This is p simple and I just want well factored code 
1262,1509991302.000386,Cecile,"If you just go with a single key per module, you probably won't need lenses. Although that's assuming each module has its own subsection rather than different modules needing state from different pieces."
1262,1509991312.00014,Aldo,<@Venessa> specter is probably helpful here. but if you have lots of different functions mutating things then you're not writing very clojurey code; humble suggestion: write functions that take data and return data :slightly_smiling_face:
1262,1509991347.000578,Venessa,<@Aldo> can you point to an example that shows the difference?; Yeah I guess the issue is going from that to “here is a stream of events that impact various modules”
1262,1509991400.000017,Aldo,if at all possible pull state tracking/munging up to the very top level
1262,1509991422.000391,Venessa,Yeah I think that is the single top-level atom idea I like ; Then depending on what happens each module will need to read/write the state 
1262,1509991463.000336,Aldo,"right, but if you have a single top level atom I would manipulate it only at that top level, ie deref the atom and pass the contents down, not the atom itself. then receive the changes back up the top and modify the atom"
1262,1509991492.000299,Venessa,"Ok that’s a good suggestion ; I’ll keep that in mind ; Which invariably has me asking — what’s a good way to diff data structures ?; Is this map different from that map, etc"
1262,1509991664.0003,Evan,"<@Venessa> ```(= {:a 1} {:a 1})
true

(= {:a 1} {:a 2})
false```"
1262,1509991669.000308,Venessa,Great 
1262,1509991795.000397,Aldo,so long as you're staying in the good world of immutable clojure data structures then comparing is just `=` ya
1263,1509991903.000267,Amado,"hello every one, is there a better way to achieve this?
`(apply str (map str (interpose “, ” [1 2 3 4 5])))`"
1262,1509991963.000404,Cecile,"Unless diffing maps is specific to the task... I'd say it's probably bad practice in general. Think more about how the data flows through the system, the output of a pure function should depend on the input, generally not the input + diff against another piece of changing state."
1263,1509991964.000071,Evan,"`(clojure.string/join "", "" [1 2 3 4 5])` <@Amado>"
1262,1509991994.000544,Amado,thanks!
1264,1509993884.000331,Adelaida,"<@Venessa> - Agreed with the other comments about YAGNI, but in case you do need it: <https://clojuredocs.org/clojure.data/diff>"
1264,1509993901.000286,Venessa,thanks!
1265,1509994975.000515,Lori,"I need to parse simple text like: `""Important Field: {{important-field}}""`
and replace `{{important-field}}` with a value from a map
should I use something as heavy as instaparse, or what would be an idiomatic way in clojure?"
1265,1509995051.00022,Edelmira,"Instaparse isn't well suited for ""find/replace"" use cases; It's more designed to parse a whole block of text data and interpret it as data"
1265,1509995124.000436,Margaret,there are templating libraries that use that syntax already
1265,1509995139.000401,Edelmira,"yeah, like <https://github.com/fhd/clostache>"
1265,1509995151.000371,Margaret,"and selmer, and antlers"
1265,1509995186.000013,Daniell,"Selmer would be my first choice (we use it very heavily at World Singles), but clostache is probably simpler/more lightweight for this use case(?)."
1265,1509995227.00015,Edelmira,"or `(clojure.string/replace my-str #""\{\{(.*?)\}\}"" (fn ...))`"
1265,1509995342.000178,Lori,"thanks for the options, I'll weigh em out for my use case!"
1266,1509997266.000428,Berry,"x = float-array of size 1000
y = float-array of size 2000

is there a builtin to say
y[1000:1999] = x ?

(I'm hoping for a java builtin faster than 1000 aset / agets)"
1266,1509997338.000548,Guillermo,System/arraycopy (no slices on JVM)
1266,1509997388.000189,Berry,"<@Guillermo>: <https://docs.oracle.com/javase/7/docs/api/java/lang/System.html#arraycopy(java.lang.Object,%20int,%20java.lang.Object,%20int,%20int)> ?"
1266,1509997406.000659,Guillermo,"yup ~(but the long arity version)~, that one"
1266,1509997590.000486,Berry,"```

(def n (* 1000 1000 1000)) 

(def x (float-array n)) 

(def y (float-array (+ 1000 n)))

(cc/quick-bench 
 (System/arraycopy x 0 y 999 n))
```

gives:

```
Evaluation count : 6 in 6 samples of 1 calls.
             Execution time mean : 1.047620 sec
    Execution time std-deviation : 98.981008 ms
   Execution time lower quantile : 954.274457 ms ( 2.5%)
   Execution time upper quantile : 1.137644 sec (97.5%)
                   Overhead used : 1.962587 ns
```

that is copying 4GB in 1.13 seconds -- that's insane"
1266,1509998322.000273,Margaret,I bet that’s leaning heavily on OS level optimizations - might be interesting to benchmark on various platforms
1267,1509998888.000128,Berry,"agreed, short of a memcpy, I'm not sure how it can be that fast"
1268,1510003598.000448,Ross,"hi there, I’m having an issue with futures; I have a fn with `(try ... (catch ) ... (finally))` that works ok and returns as expected; but when I run it through an executor it returns nil; do you guys have any pointers?; ```
(defn submit-job [fn] (.submit threadpool fn))

@(submit-job (constantly 1))
nil
```"
1268,1510003954.000113,Rebeca,"submit can take a Runnable or a Callable, and fn's implement both, so the reflector has to pick one; ^Callable fn; submit returns a future that returns a value when you deref it; if you submit a Callable you get the return value of the callable"
1268,1510004014.000469,Daniell,"`Runnable` doesn't return a value, `Callable` does."
1268,1510004042.000281,Ross,`(deref (submit-job (cast java.util.concurrent.Callable (fn [] 1))))` still nil
1268,1510004042.000469,Daniell,"(well, in an imprecise way :slightly_smiling_face: ); Use a type hint."
1268,1510004056.000148,Ross,I feel stupid :slightly_smiling_face: gonna learn something today I guess
1268,1510004064.000057,Rebeca,you can't use cast for that
1268,1510004076.000531,Daniell,`(defn submit-job [^Callable fn] (.submit threadpool fn))` I think?
1268,1510004077.000436,Rebeca,and you can't type hint a (fn ..) form like that either
1268,1510004086.000081,Ross,"cast is runtime, I want to tell the compiler how to dispatch right?"
1268,1510004100.000551,Rebeca,"correct, as <@Daniell> has it"
1268,1510004158.000675,Ross,nope :smile: `@(let [^java.util.concurrent.Callable f (fn [] 1)] (.submit threadpool f))`; still nil
1268,1510004215.000138,Rebeca,you also need to type hint threadpool; if you `(set! *warn-on-reflection* true)` you will see that the method call is still reflective
1268,1510004453.000075,Daniell,"```boot.user=&gt; (defn submit-job ^java.util.concurrent.Future [^java.util.concurrent.Callable f] (.submit ^java.util.concurrent.ForkJoinPool fjpool f))
#'boot.user/submit-job
boot.user=&gt; (deref (submit-job (constantly 1)))
1```; (I'm using a ForkJoinPool for ease of creation but should work with a general executor service); (switching the type hint to `^java.util.concurrent.ExecutorService` works -- I just tried it)"
1268,1510004541.000448,Rebeca,"the reflected method chosen may actually vary by clojure release, with the beta of 1.9 even with reflection it chooses the callable version of submit; ```
user=&gt; (set! *warn-on-reflection* true)
true
user=&gt; (def pool1 (java.util.concurrent.Executors/newFixedThreadPool 2))
#'user/pool1
@(let [^Runnable f (fn [] 1)]
   (.submit ^java.util.concurrent.ExecutorService pool1 f))
nil
@(let [^Callable f (fn [] 1)]
   (.submit ^java.util.concurrent.ExecutorService pool1 f))
1
user=&gt; 
```; (if I explicitly type hint I can get the Runnable version)"
1268,1510004683.000362,Ross,"thanks all, it seems type hints fixed it"
1268,1510005970.000228,Berry,"when we base64 encode a string, how much does the size increase by ? does it mean each byte is now only storing 6 bits instead of 8, so a 3MB file -&gt; 4 MB ?"
1269,1510006292.000543,Evelin,"does anyone know of a good resources to learn about clojure zippers, preferably excersizes I can try to solve?; I've read through the docs, and read an overview and a few tutorials; but i really want to try to solve some problems with them, but its hard to create your own problems"
1270,1510007647.00055,Guillermo,"yes, but probably a topic for <#C03RZGPG3|off-topic>"
1271,1510010801.000276,Edward,"does anyone know if `:ret` and `:fn` aspects of `fdef` on macros are no longer being checked? The docs sort of discourage checking `:ret` (although they do not explicitly forbid it) and I'm seeing in practice that they are not being checked and just wondered if the ""discouragement"" became a ""mandate enforced by code itself""; apart from the docs being updated to reflect such"
1271,1510011546.000156,Sonny,"They are only checked during stest/check, not during instrument"
1271,1510012649.000083,Edward,<@Sonny> so what aspects are checked during instrument? just `:args`?
1271,1510012674.000369,Sonny,Yes - the purpose of instrument is to check for correct invocation 
1271,1510012684.00005,Edward,got it. thanks
1271,1510012701.000281,Sonny,Check is for checking whether a function does what it says
1271,1510012966.000449,Shira,<@Edward> you can also use <https://github.com/jeaye/orchestra> for instrumenting :ret and :fn
1272,1510019003.000036,Charlie,what does @ before a variable mean. `(let [st @state]...` from the om wiki page. Can't seem to find it googling
1272,1510019078.000242,Dawne,<https://clojuredocs.org/clojure.core/deref>
1272,1510019102.000013,Cristi,"Without the @, it returns the atom object; With the @/deref, it returns the _value_ contained in the atom"
1272,1510019152.000184,Charlie,thanks.
1272,1510019241.000091,Dawne,A good little example here <https://funcool.github.io/clojurescript-unraveled/#atoms>
1272,1510019289.000084,Charlie,@ symbols are hard to google for
1272,1510019388.000082,Dawne,haha yes.  It seems the only way would be to know that is is short for `deref`
1272,1510019406.00014,Jonas,"clojure has a lot of hard to google usage; the backtick, `-&gt;`, `-&gt;&gt;`, `#(+ 1 %)`, `#{}`; to name a few"
1272,1510019451.000088,Charlie,what's the last one of those
1272,1510019471.000187,Jonas,"it’s the set primitive; `#{1, 2, 3}`; is a set with the numbers 1, 2, and 3; `#{}`, is the empty set"
1272,1510019512.000045,Raul,symbolhound is useful for these: <http://symbolhound.com/?q=%40+clojure>
1272,1510019522.000045,Jonas,"oh yea, and `#""[a-z]*""`"
1272,1510019549.000263,Charlie,after learning about threading I can't help but get frustrated at c# almost every time i turn the corner at work
1272,1510019552.000079,Raul,there's also a nice list of these: <https://clojure.org/guides/weird_characters>
1272,1510019604.000123,Jonas,looks like I forgot a few; looks like it’s missing the `-&gt;` prefix; as well as the `map-&gt;` prefix; a few people were wondering about that earlier today
1272,1510019701.000216,Raul,those would be nice additions to that list. Don't know who maintains it so we can recommend the addition?
1272,1510019968.000043,Evan,it's open source: <https://github.com/clojure/clojure-site>
1272,1510026854.000037,Sonny,feel free to send a pr or an issue to update on that repo; also see the threading macro guide <https://clojure.org/guides/threading_macros>
1273,1510028963.000183,Berry,"```
(defn rx1 [x] x)
(defn rx2 [x] (* x x))
(defn rx3 [x] (* x x x))

(defn hpc [tensor cb]
  ;; cb :: double -&gt; double
  ;; cb is called around 10,000,000 times 

  ;; this is a big, hairy function
  ;; I would prefer to not turn it into a macro
  )

(defn h1 [tensor] (hpc tensor rx1))
(defn h2 [tensor] (hpc tensor rx2))
(defn h3 [tensor] (hpc tensor rx3)) 
```
Question: is it possible to tell clojure
to inline rx1, rx2, rx3 ?

""Don't worry about it, JVM hot spotting will take
care of it"" is a valid answer."
1273,1510029234.000121,Daniell,"<@Berry> Well, there's `:inline` metadata but I don't know how well documented that is, and I suspect it's experimental/subject to change..."
1273,1510029271.00007,Berry,"<@Daniell>: yeah, I read <http://bytopia.org/2014/07/07/inline-functions-in-clojure/> ... but there is a comment by <@Sonny> at the bottom of the blog post suggesting caution"
1273,1510029339.000132,Daniell,That was back in 2014 -- and I don't think anything has actually changed since...?
1273,1510029369.00013,Berry,"does tat mean ""nothing has changed; therefore stable to use"" or ""alex's caution hasn't changed, still dangerous to use"" ? :slightly_smiling_face:"
1273,1510029539.000078,Daniell,"It's worth noting that CLJ-1227 is indicated as being caused by <https://dev.clojure.org/jira/browse/CLJ-1330> which is fixed.; I meant ""Alex's caution probably still stands but it hasn't been removed yet"" :slightly_smiling_face:"
1273,1510029867.000054,Berry,"```~(let [(vary-meta foobar# assoc :tag 'long) ...] ```

this is not allowed -- can I not use foobar# , and have to explicitly use a gensym ?"
1273,1510029978.00013,Daniell,You mean with `:inline`?
1273,1510029987.000137,Jonas,the `#` suffix is just a backtick thing
1273,1510030009.000046,Daniell,(context is everything <@Berry> :slightly_smiling_face: ); I assume that code is inside a macro...?
1273,1510030054.000132,Jonas,you have to use a gensym in your example
1273,1510030832.000074,Berry,"sorry, was afk rewriting the function as a macro; yeah, this is part of a macro, and yes, I ended up using gensym"
1274,1510036963.000173,Margaret,"those are just a part of the name of a function though, not syntaxes, which is why they weren't included"
1274,1510037076.000066,Jonas,seems like it is similar to `&lt;symbol&gt;?` predicate suffix
1273,1510037078.000115,Jonas,<https://clojure.org/guides/weird_characters#__code_symbol_code_predicate_suffix>
1273,1510037510.000099,Margaret,fair
1274,1510042071.00032,Micha,"<@Charlie> <@Jonas> <@Raul> There is also the Clojure cheatsheet, with the <http://clojure.org|clojure.org> version here <https://clojure.org/api/cheatsheet>   which has a link to this page that has some other variants that enable searching, but unfortunately not for the special characters.  There is a dedicated section of the cheatsheet to most of the special characters you will find in Clojure, near the 'bottom left' of the page.  It has links to other docs for most of them, including a link at the top of that section to Clojure guide page linked earlier: <https://clojure.org/guides/weird_characters>"
1275,1510042822.000089,Jena,"is anyone familiar with scala interop? I need to construct a case object, but can't figure out how to do this from clojure; I need to create one of these case objects: <https://apache.googlesource.com/kafka/+/HEAD/core/src/main/scala/kafka/admin/RackAwareMode.scala>"
1276,1510043211.000148,Ignacia,"Hey all! I'm trying to rewrite core.async-based code into aleph/manifold one, and can't figure out what would be equivalent for something like this:

```
(go-loop [x 0]
  (if (&gt; x 3)
    x
    (do
      (&lt;! (timeout 1000))
      (recur (inc x)))))
```

the main problem is timeout, I have no idea what's the right way to do it with manifold deferred's: I'm making an http request with aleph and want to retry for a few times with growing backoff. Manifold docs have `Thread/sleep` somewhere, but I'm a bit scared about that one. :slightly_smiling_face: Any pointers maybe?"
1275,1510043468.000268,Jena,<@Ignacia> maybe `manifold.deferred/timeout!` is useful.
1277,1510043483.000355,Berry,"```
            ;; o  (if (p/&gt;= g t) (float 255.0) (float 0.0))
            ;; o  (if (p/&lt; g t) (float 0.0) (float 255.0) )
```
^-- these two lines should do the same thing right ? I'm doing image processing, getting different results, and completely baffled"
1275,1510043535.000064,Jena,what's the `p/` namespace?
1275,1510043571.000246,Berry,"<https://github.com/ztellman/primitive-math/blob/master/src/primitive_math/Primitives.java> <@Jena>; oh, it fails when t = NaN"
1275,1510044102.000142,Ignacia,"<@Jena> maybe, but then I have to find deferred to timeout on then...; not really, let's say <http://clojure.com|clojure.com> responds fast enough, but with an error, and we want to retry it few times in a row with growing backoff; in this case we're doing http/get, and *then* there needs to be a Thread/sleep or something similar; like, between `http/get` and `d/recur`"
1275,1510045574.000074,Jena,"ah ok, so in my example, you would want to wait before calling `d/recur`?"
1275,1510045581.000106,Ignacia,"yeah!; in current core.async code it looks like this:

```
(def process-message [...]
  (go
  ...
           (when retry?
             (&lt;! (timeout next-backoff-ms))
             (process-message client url args success? ack-fn async-exception-fn (assoc retry-params :retry-attempt (inc retry-attempt)))))))
```"
1275,1510045981.00003,Cecilia,"try this:

```
(def case-disabled RackAwareMode.Disabled$.MODULE$)
```

Haven’t tested that out but basing this on this stackoverflow discussion <https://stackoverflow.com/questions/2561415/how-do-i-get-a-scala-case-object-from-java>"
1275,1510046424.000162,Jena,"tbh, in such a situation i'd just run a function in a java executor, so i can use 'Thread/sleep' safely"
1278,1510046836.0001,Jena,Found a solution:
1275,1510046841.00024,Jena,"```(import 'kafka.admin.RackAwareMode$Enforced$)
(kafka.admin.RackAwareMode$Enforced$/MODULE$)
```"
1275,1510047326.000008,Ignacia,"<@Jena> hm, that's an option, thanks!"
1279,1510049317.000016,Adrien,"Hi! It seems that the community has pretty much settled on using this convention for test files: <http://www.lispcast.com/clojure-test-directory> (putting the test files in a separate directory that mimics the same structure as the main project). I find it pretty tedious to mimic the directory structure, and I'd like to have the tests close to the code since I will often look at them in conjunction. Does anyone have any suggestions on how to accomplish this? I would of course like to exclude the test files from production builds."
1279,1510049630.000329,Mallie,"How deep is your directory structure? o.0 We are normally only creating a couple of extra directories for a new project. Most tooling that creates projects/files, like boot (and I assume lein) can also be make to create the test file in the expected place when you tell it to create the source one..."
1279,1510049805.000376,Adrien,"Not super deep, but I find it annoying in general to have to change the same thing in several places. I also see tests as a form of documentation, and that would be nice to have as close to the code as possible."
1279,1510050082.000345,Mallie,"Why? It's just opening files. Does it really matter where they are? Especially if the structure is the same apart from the first word being `src` or `test`. You can even shell glob it when opening in most editors. Regardless, that is the same as the Java expectation, and as far as I am aware all tooling expects that structure. You *could* write a boot task that for example copies files named without `_test` into a `src` dir under `build` with the same structure and ones with `_test` into a `test` dir  under `build` and then make all other boot jobs run from that dir with the structure it expects, but that seems like a lot of work. I assume you could do something similar with lein"
1279,1510050536.000101,Adrien,"I find it definitely matters where the files are located when exploring a project. For example, if the tests where located next to the code, I could immediately see if the module I'm currently working on has any tests associated with it by seeing if there is a test file in the module or not.
I agree that writing any sort of complex task is not worth it, however."
1280,1510050555.000129,Marnie,"I have seen several Clojars deployment tutorials that claim you can enter a public GPG key in your profile there, but I do not see this anywhere in the site. What a I missing?"
1281,1510052701.000369,Francene,"Hi, someone work with Immutant 2 and protobuff. When i try to convert stream -&gt; clojure hash map (in safary) i catch ```java.io.IOException: UT000034: Stream is closed``` but in chrome/firefox/ie all work fine"
1280,1510055241.000079,Marnie,"if you want to use clojure.test on a macro, i gather you'd have to do something like `(eval '(my-macro ...))` if the  macro could throw an assertion and your `is` test is in fact testing for `thrown?`, right?; like `(is (thrown? AssertionError (eval '(some-macro {:e :hi}))))`; because otherwise the assertion is thrown when the test file is compiled for me"
1280,1510056151.000109,Candi,"<@Marnie> Clojars dropped using your GPG key - it was used to verify that the artifacts you uploaded were signed by you when trying to promote to the ""releases"" repo, which was removed. See <https://github.com/clojars/clojars-web/issues/415> for rationale"
1280,1510056460.000196,Marnie,but i cannot use `lein deploy clojars` without it failing with GPG errors
1280,1510056568.000286,Candi,"Ah, that is a different case - that's lein trying to use gpg to sign your artifacts before sending them to clojars; Have you looked at <https://github.com/technomancy/leiningen/blob/stable/doc/GPG.md>?"
1280,1510056843.000055,Marnie,only too many times; i think i'll give up on it for now
1280,1510056916.000353,Candi,"You can disable signing by setting `:sign-releases` to false for clojars: <https://github.com/technomancy/leiningen/blob/stable/doc/GPG.md#signing-a-file>; I believe this should do it (in project.clj): `:repositories [[""clojars"" {:url ""<https://clojars.org/repo>"" :sign-releases false}]]`"
1280,1510057111.000449,Marnie,"is that an actual url with `/repo` or do i put one in there for my own app? i've tried this both ways and get weird errors about ""missing connectors"" and stuff"
1280,1510057171.000377,Candi,That's the actual url - it's not project-specific
1280,1510057257.000216,Marnie,"ok, i'll try it again in a little while, thanks"
1280,1510057456.000037,Ted,"my data_readers.clj looks like this:
```
{monitor/date monitor.utils/parse-date}
```
I start a REPL, refresh (as in, I load all the namespaces) and this happens:
```
user&gt; #monitor/date ""2016 3 1""
IllegalStateException Attempting to call unbound fn: #'monitor.utils/parse-date  clojure.lang.Var$Unbound.throwArity (Var.java:43)
user&gt; @#'monitor.utils/parse-date
#function[monitor.utils/parse-date]
```
why?"
1282,1510058049.000308,Lily,"how does one supress the default logger with jetty, which is set to info,
```
2017-11-07 13:33:20.868:INFO::main: Logging initialized @3013ms
..etc...
```"
1282,1510058615.000271,Terra,"<@Lily> it depends on the logging lib you're using - with timbre you can configure it directly in Clojure, clojure.tools.looging uses underlying java libs which usually means using properties or XML files for configuration"
1282,1510058796.000348,Lily,"yes it's a mystery to me what logging lib is printing this, since this is always by default with jetty, has never bothered me. Im creating terminal app and it's distracting. Looking at ring/ring-jetty-adapter dependencies, there's no logging lib there, guessing it's coming from org.eclipse.jetty/jetty-server ""9.2.21.v20170120"". So maybe there's some java option I could set?; maybe I found it with quick google search `-Dorg.eclipse.jetty.LEVEL=ERR`; ok this fixed it `:jvm-opts [""-Dorg.eclipse.jetty.LEVEL=OFF""]` in case someone googles the slack logs."
1282,1510059620.000071,Herminia,"<@Adrien> you can technically add tests in any file, including the file with the implementation; the reason they're in a different directory is so that you can exclude them from production deployments"
1282,1510059845.000307,Sonny,"The latter; You still need to require monitor.utils before you use the tagged literal, otherwise Clojure can’t find the constructor function "
1283,1510063188.000208,Margaret,"if you add the `:test` metadata to a function, and that contains something callable, that will be run when you execute clojure.test/run-all-tests; if it contains test/is etc. it will work just like a deftest; I don't think `lein test` likes this, but making a task that loads your namespaces and runs clojure.test/run-all-tests is not hard at all - you can even just run your tests from the repl; as far as I know this feature is out of date - it wasn't being handled properly(?) and nobody had the expertise or energy to manage it correctly iirc"
1284,1510064922.000397,Adrien,Thanks for the reply! I know that's why it's in a different directory. My question was wether it's possible to exclude them anyway without too much hassle.
1283,1510071536.000798,Guillermo,Clojure 1.9.0-RC1 is out -- no different than beta4. Start your engines
1285,1510075354.0006,Geneva,<@Guillermo> any changelog?
1285,1510075376.00037,Guillermo,it's in the repo
1285,1510075392.000624,Geneva,<https://github.com/clojure/clojure/blob/master/changes.md> this?
1285,1510075396.000211,Guillermo,yup
1285,1510082047.000518,Lisette,"I was commenting a few days ago that I was having trouble calling some Clojure functions (i.e. implemented in Clojure) from my Java app.  I managed to make some progress, and to call a few functions from clojure.core -- but I still haven't been able to call any Clojure functions that I've implemented myself in my own Clojure libraries.  It always results in an error saying the function is unbound."
1286,1510082123.000684,Lisette,I'm suspecting that perhaps the clojure.core functions that I call are all static - and thus defined.. and perhaps the reason I'm not able to call my own functions is related to my 'main' being a Java 'main' instead of a Clojure 'main'.. and perhaps this is resulting in the Clojure functions never getting bound in the first place due to some binding step getting skipped?  (since this would only occur automatically with a Clojure main?)  Anyway - trying to come up with theories/solutions.
1286,1510082305.000216,Aldo,<@Lisette> you need to load the namespaces you want to call functions in; using for instance `require`; clojure.core is the only namespace loaded by default
1286,1510082424.000534,Lisette,"""clojure.core is the only namespace loaded by default"" - that helps explain what I'm seeing a lot.  On Friday, I had difficulty calling 'require' in particular for some reason -- but I'll get back to trying that right now."
1286,1510082452.000379,Aldo,"Clojure.var(""clojure.core"",""require"").invoke(""you-ns-here""); should do the trick"
1286,1510082549.000604,Lisette,"ok. I had tried this (code follows):; `		String mumbojumbo_ns_name = System.getProperty(""mumbo.jumbo.system"");
		IFn require = Clojure.var(""clojure.core"", ""require"");
		Object mumbojumbo_ns_sym = Clojure.read(mumbojumbo_ns_name);
		Object ns = require.invoke(mumbojumbo_ns_sym);`; but keep getting: Exception in thread ""main"" java.lang.Exception: prefix cannot be nil, compiling:(NO_SOURCE_PATH:0:0); I'll try what you suggested; When I try the code you suggest, I get this error (I've been seeing this over the past few days as I try it):; ```Exception in thread ""main"" java.lang.IllegalArgumentException: Don't know how to create ISeq from: java.lang.Character```"
1286,1510082749.000094,Aldo,"oh sorry you need to symbolify it; Clojure.var(""clojure.core"",""require"").invoke(Clojure.var(""clojure.core"",""symbol"").invoke(""your-ns-here""))"
1286,1510082940.000316,Lisette,Wow.  I think that's done it.  Thank you :slightly_smiling_face:; my previous attempt was along the right lines.. but just wrong.
1287,1510084513.000259,Christin,does anyone here use VS Code for clojure?
1287,1510085732.000258,Daniell,<@Christin> There's a <#C6H9FUNET|vscode> channel -- no idea how active it is tho'...
1287,1510087376.000294,Christin,thanks!
1288,1510088305.000585,Salvador,"Hello guys, I am looking for a solution for background jobs which should survive Tomcat server restart or moving application to another VM on AWS. I found <https://github.com/metametadata/byplay> which looks really promising because we are already using Postgres on separate machine and  jobs shouldn't do any heavy lifting (mostly tasks like send email to a user after 2 weeks and stuff like that). Do you think it's feasible to use DB as a persistent storage for jobs or should I look somewhere else?"
1288,1510088929.000236,Rebeca,"there are far worse ways to do that, I am unfamiliar with byplay, but it sounds perfectly reasonable; the idea of long running transactions doesn't sound great, in the past I've worked on systems that used postgres advisory locks instead, but I am not sure that is any better"
1288,1510090340.000126,Salvador,Long running transaction are the only part I am worried about because there can be possibly hundreds of jobs waiting to execute and I am not sure how it can affect performance of the DB
1288,1510090505.000158,Rebeca,I would be shocked if any database had a problem storing hundreds of things
1288,1510090583.000396,Salvador,Storing it's not the issue I thought that lot of opened transactions might be
1288,1510090665.000079,Guillermo,"generally job systems won't leave a transaction open.  workers claim jobs, then relinquish them in two separate tx'es"
1288,1510090673.000311,Rebeca,having the number of open transactions scale with the number of stored jobs would be the result of a very special system
1288,1510090871.000438,Salvador,"Ok, I've probably misunderstood the byplay documentation. It seems like worth trying to me, I am building a system with hundreds of users at maximum who generates some background tasks from time to time so it should scale"
1289,1510093222.000069,Sophie,"Style Question:  If I have global-level configuration data, how should I make that accessible to the functions in my program?  I can think of 4 ways:

1) Pass ALL configuration data in a single map as an argument to each function that needs some of the config data.
2) Pass ONLY the configuration values that are NEEDED as individual arguments to each function
3) `(declare)` some vars for configuration, then `(defn)` all the functions that need access to them, then start runtime, then populate the config vars
4) Start program, read in config values, then use `(let)` to hold the config values while using `(defn)` to create closures around the config values as needed.; I’m sure there are other ways, too.; Does this make sense?; Does anyone have any wisdom for me here?"
1289,1510093319.000059,Margaret,I do 1) in combo with using stuartsierra/component which I use to also pass all stateful shared resources in the same map with the config
1289,1510093584.000246,Jonas,i’ve been using <https://github.com/weavejester/environ>
1289,1510093786.000143,Raul,"Personally my latest project is using <https://github.com/tolitius/cprop> to manage the values (via merging environment, system properties, &amp; a config file of defaults) and storing the result loaded at known times via <https://github.com/tolitius/mount>"
1289,1510093800.000242,Margaret,"<@Jonas> I use environ too, but for example if a library needs config, I’d rather pass the config in from my app, rather than putting environ in the library; and it turns out I have a few libraries that need config"
1289,1510093841.000204,Jonas,same; libraries should avoid imposing too much structure on the consumers of the library; it would be annoying if a library forced you to use environ
1289,1510093960.00026,Sophie,"I haven’t used any of those.  I’ll go check them out.; Thanks; It’s interesting to me that this is such a fundamental task in any programming language, but there are so many libraries to achieve this; I’m thinking, “shouldn’t there be an obvious, idiomatic clojuric way to do this?”; but each of the four ways I mentioned definitely have their own specific tradeoffs"
1289,1510094059.000474,Jonas,"there are lots of different tradeoffs; yea; if clojure was just used for one specific domain, then you might seem more convergence"
1289,1510094078.000068,Margaret,4) is definitely not “clojuric” at all; we don’t do much data hiding
1289,1510094092.00002,Sophie,"right, that seemed hideous as I was typing it"
1289,1510094122.000252,Margaret,"for a similar reason, 2 is OK, but most people would prefer 1 to it; and 3 is really just accessor methods, which are also not “clojuric” if we are going to use that word; so that leaves 1, with a maybe on 2; and you don’t need a library to do 1 or 2 - it’s a simple convention using immutable data"
1289,1510094196.000605,Jonas,"i tend to write small apps, but I typically use a form of 3; :flushed:; `(def db-conn (env :db-info))`; and then have a query function that uses the global db-conn"
1289,1510094261.000118,Sophie,do you use ALL-CAPS in those var names or some other convention to mark them as “coming from outside of this function” ?; or do you just remember “db-conn” is a global thing ?
1289,1510094291.000266,Kareen,no all caps
1289,1510094303.000324,Sophie,"tell me all about it, bronsa"
1289,1510094322.000124,Jonas,"most of the application code doesn’t use the `db-conn`; cause it’s not passed around; the application code will just do `(query ""select 1"")`; i realize that might be a controversial way to do it, but most apps never outgrow by needing multiple database connections within the same app; and it’s easy to change once/if that’s the case"
1289,1510094450.000125,Daniell,We used to do 3) when we started out using Clojure (2011) but we've switched to 1) (or 2) for subcomponents) with Component. Much nicer.; Our app has five or six DB connections <@Jonas> :slightly_smiling_face:
1289,1510094485.000343,Jonas,:slightly_smiling_face:
1289,1510094518.000492,Daniell,So we have a Database Component with a `xyz-db` element for each DB connection (we create connection pools at startup).
1289,1510094524.000531,Margaret,"also I take it back, 3 isn’t accessor methods (I misread) - but it is singletons which can be a problem"
1289,1510094547.000038,Daniell,"Yeah, 3) is very problematic. I speak from (painful) experience :slightly_smiling_face:"
1289,1510094564.000106,Margaret,"and yeah, 3 is semi-popular in clojure apps, but also a common source of problems which leads to messy refactors from 3 to 2 or 1; this is part of why people are skeptical of mount btw - it does some of the same things as eg. component or integrant without providing the biggest benefit which is not locking you into singletons, which is a hard thing to fix later if your app design is built around it"
1289,1510094638.000606,Sophie,"Tell me about why all caps is a bad idea; I’ve been using clojure for about 4 years now off and on, but I feel like I still have a lot to learn"
1289,1510094769.00034,Kareen,"it's not a bad idea per se, it's just not conventional"
1289,1510094805.00017,Sophie,is there some kind of community-approved style guide that I would want to look at?
1289,1510094956.00007,Kareen,<https://github.com/bbatsov/clojure-style-guide>
1289,1510095368.000169,Sophie,"cool, thanks!"
1290,1510095582.00003,Francisca,"Is anyone able to run `lein-marginalia` aka `lein marg` against their codebase using `[org.clojure/clojure ""1.9.0-RC1""]` ?  The last clojure that `lein marg` seems to work fine with is `[org.clojure/clojure ""1.8.0""]` in my codebase."
1290,1510097844.000288,Daniell,"<@Francisca> I assume you're getting an error? Probably from the spec checking on some macros. Probably Marginalia has illegal `ns` syntax that ""just happened"" to work on 1.8 and earlier...; Or more likely, some library it depends on, having looked at the source..."
1290,1510098040.000053,Barbera,clj-uuid states that its squuids `encode retrievably the posix time at which they were generated` anyone know of code to retrieve the posix time? i can figure out the bit math but thought i’d ask first
1290,1510098138.000063,Daniell,"<@Francisca> I created a new empty Leiningen project, updated Clojure to 1.9.0-RC1 and added `lein-marginalia ""0.9.0""` and was able to run it -- but maybe the problem you encountered isn't triggered on an empty project? Can you provide more detail about the problem you are having."
1290,1510098255.000291,Barbera,"actually nevermind, it’s really simple"
1290,1510100093.000228,Francisca,"<@Daniell> the cause isn't that helpful but I'll post it: ```Exception in thread ""main"" java.lang.RuntimeException: Problem parsing near line 1 &lt; [taoensso.timbre :refer [info warn error] :as timbre]&gt; original reported cause is java.lang.NoSuchMethodException: clojure.lang.LispReader.matchSymbol(java.lang.Str
ing) -- java.lang.NoSuchMethodException: clojure.lang.LispReader.matchSymbol(java.lang.String), compiling:(/tmp/form-init450743688382126384.clj:1:72)
```"
1291,1510100171.000074,Francisca,"looks `ns` related though, what is the issue with illegal `ns` syntax in 1.9?"
1291,1510100383.000143,Daniell,1.9 checks `ns` syntax more stringently than 1.8 did
1291,1510100384.000384,Rebeca,"that is a reader error, before any macros would see anything"
1291,1510100406.000373,Daniell,"Yeah, that's what I was thinking having seen the error.; Or maybe an AOT issue?"
1291,1510100430.000306,Rebeca,"maybe; nosuchmethod is rather odd; yeah, a library aot'ed against a different version of clojure would do it"
1291,1510100497.000098,Daniell,<@Francisca> So it's probably specific to your code base setup rather than something in Marginalia per se...
1291,1510100548.000002,Rebeca,"timbre can be really bad for that, because people will write extensions to whatever java logging framework and depend on timbre for whatever reason,  but they need to be aot compiled, so you can end up with an aot'ed version of timbre coming in from some other jar; <https://dev.clojure.org/jira/browse/CLJ-1886?focusedCommentId=42074&amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-42074>"
1291,1510100632.000154,Daniell,"Repro'd ```Exception in thread ""main"" java.lang.RuntimeException: Problem parsing near line 1 &lt; [taoensso.timbre :refer [info error warn] :as timbre])&gt; original reported cause is java.lang.NoSuchMethodException: clojure.lang.LispReader.matchSymbol(java.lang.String) -- java.lang.NoSuchMethodException: clojure.lang.LispReader.matchSymbol(java.lang.String), compiling:(/private/var/folders/p1/30gnjddx6p193frh670pl8nh0000gn/T/form-init7849628237322743095.clj:1:125)
```"
1291,1510100697.000055,Francisca,"well, I can change anything.  No issue though for lein marg under 1.8.0.  I don't even have to use lein marg, but why not?"
1291,1510100717.000317,Daniell,Marginalia <https://github.com/gdeer81/marginalia/blob/master/src/marginalia/parser.clj#L160>; Calls the LispReader directly -- I suspect the calling arity changed in 1.9?
1291,1510100771.00017,Rebeca,<https://github.com/gdeer81/marginalia/blob/master/src/marginalia/parser.clj#L117-L120>
1291,1510100831.000375,Francisca,more info here: <https://github.com/gdeer81/marginalia/issues/167>
1291,1510100908.000174,Daniell,"Ah, there we go. Looks like `matchSymbol` expects two arguments now? A string and a resolver...; 1.8 <https://github.com/clojure/clojure/blob/clojure-1.8.0/src/jvm/clojure/lang/LispReader.java#L394> takes just a string; I added a comment to that issue. Maybe <@Herlinda> will be able to chime in?"
1291,1510101247.000151,Francisca,"thank-you, Sean"
1292,1510105049.000135,Evelin,"I wonder if Rich would be ok with clojure 2.0 having breaking changes to remove warts from the core language, or if he wants clojure to be eternally backwards compatible regardless of whether the occasional bad design decision aggregates or not; I mean clojure is a very well designed language but there are a few ugly parts that could use a do-over; i know he mentioned that if he could do it all over again reduce would require an initial value"
1292,1510105348.000029,Margaret,"and rename `for` to something like `sequence-comprehension`; (my suggestion, not anybody elses)"
1292,1510105383.000148,Evelin,and I tend to think that lazy evaluation of the elements of a sequence and the actual transformation performed over a sequence are orthogonal concepts. its unfortunate that transducers are complected with the idea of immediate evaluation.
1292,1510105405.000157,Margaret,are they? you can transduce lazily
1292,1510105452.000151,Evelin,(transduce ...) isn't truly lazy
1292,1510105469.000041,Margaret,"but that’s not the only transducing context - and right, transduce is not lazy"
1292,1510105518.000057,Evelin,what i'm really getting at is that the core api is more complex than it needs to be simply because it was necessary to keep it backwards compatible and not make a breaking change; what you'd really want to do is be able to define a set of transformations (probably a sequence of transformations actually)
1292,1510105569.000235,Margaret,"sequence is lazy, and eduction; and defining a transducing function is exactly what you describe"
1292,1510105622.000037,Evelin,"then you'd want to separately define how those transformations are applied to a sequence of data (lazy, not lazy, across multiple cores or not, etc)"
1292,1510105626.000092,Aldo,transducers are literally a way to define a set of transformations without worrying about representation. the `transduce` function is perhaps a bit misleading as it's a way of applying transducers
1292,1510105651.000114,Evelin,right now we have reducers in the core library for handling the parallel case
1292,1510105656.000076,Margaret,<@Evelin> you are describing exactly how transducers are used
1292,1510105686.000223,Evelin,"let me be more specific then; what i'm saying isn't that something should exist; its that something shouldn't exist; there shouldn't be an api for doing things ""without transducers""; transducers are the bottom, simplest (most decomplected) case"
1292,1510105743.000182,Aldo,"eh, that's a position to take. it'd make the language less approachable though"
1292,1510105812.000085,Giovanna,"<@Evelin> Do you know where Rich said that about reduce requiring an init val? I remember that as well, but I tried looking for it once and couldn't find it.; And I think he has said that clojure 2.0 just isn't going to happen..."
1292,1510105860.000203,Evelin,"there is something else i find a bit puzzling though-- we use transducers to convey what is basically loop unrolling to the compiler-- we really don't NEED then to pass around the idea of doing a specific sequence of transformations, because we could just use apply to apply a sequence of transformations or we could pass around an s-expression that represents the transformations"
1292,1510105864.000175,Evan,<@Giovanna> he mentions it in his effective programs talk
1292,1510105891.000188,Evelin,"basically i've been thinking and i'm trying to understand whether or not transducers are really ACTUALLY simple, or whether or not they are just an implementation detail; wouldn't a sufficiently intelligent compiler be able to inspect an s expression before evaluating it and rearrange its subexressions algebraically to do what transducers are effectively doing?; or heck, a macro could do that; the async library has really magical macros that tear apart s expressions"
1292,1510106001.000053,Giovanna,"A macro is a compiler, in a way"
1292,1510106085.000162,Evelin,"i'm just thinking that transducers, while they capture the idea of performing a computation independent of the type of the collection or data source, and in that sense are a basic fundamental thing, realistically aren't NECESSARY to extract the information about what sequence of transformations are actually taking place, since this is a lisp after all; i'm really not sure how I feel about it, its either transducers (and the initial difficulty in learning them) or the magic of a macro; imagine that if instead of having go channels take a transducer you just had something like `(magic (map f (filter g chan)))`, where `magic` is responsible for doing what transducers essentially do for chans; it would do all the unrolling itself, and ensure that you didn't have intermediate collections or channels; furthermore you can extend `magic` beyond what transducers are strictly capable of; you can use it with other (non transducible) forms"
1292,1510106326.000093,Guillermo,If you want to use transducers on a lazy source call `(sequence xfn coll)`; (where `xfn` is the transducer)
1292,1510106461.000154,Evelin,i'm aware of that <@Guillermo> i was just criticizing some of clojure's design
1292,1510106546.000027,Giovanna,"I think there is an option somewhere in between those. I was thinking about that the other day. Transducers are kind of ... fragile?... they have all these rules like don't touch the result so far, call the next rf in the chain in the cleanup arity, zero arity just calls (rf), etc. Could a macro kind of like `fn` take care of all that stuff instead of us having to write all that boilerplate?"
1292,1510106588.00004,Guillermo,"Rich has made it really clear that despite some regrets, compatibility will be preserved. There will not be any attempt to ""fix mistakes"" and break everyone's code.  This is why it's important to commit to and promise less; (see the ""speculation"" keynote); As always though, the future holds interesting possibilities..."
1293,1510106829.000016,Jonas,"<@Giovanna>, there really aren’t that many types of transducers. it seems like it’s pretty uncommon to create a “new” transducer. out of curiosity, what kinds of transducers have you or others been creating that aren’t `map`, `filter`, `cat`, `dedupe`, etc?"
1292,1510106853.000181,Giovanna,Wouldn't your `magic` macro have to know about all possible transducers though? How would it know if something can be made into a transducer?; <@Jonas> <https://github.com/cgrand/xforms>
1292,1510106980.000152,Evelin,"I mean i understand that one of the really great things about transducers is that you can construct your own transducers and then use them with any transducible process. My criticism about it is that it seems to expose some limitation in the implementation; its not purely about separating the sequence of transformations from the sequence (or channel or whatever) of data-- you could make that separation without creating the idea of a transducer, by just passing around function that is composed of the data processing functions for instance, then apply that function directly to the data."
1292,1510107096.000194,Giovanna,<@Jonas> Also I wrote this one for someone here on the slack <https://gist.github.com/madstap/a7d158ef0c3e7b5bbf5cd55c5de4c913>
1292,1510107146.000116,Jonas,"<@Evelin>, `(map inc)`, `(filter even?)`, etc. seem like fairly minimal descriptions of a “step”"
1293,1510107164.000201,Jonas,which part of `(map inc)` doesn’t need to be part of the transducer?
1292,1510107185.000067,Evelin,why even bother me with that though?; why can't i say `(map inc (filter even? (map inc foo)))`; why can't clojure do algebra to reorganize it
1292,1510107217.000168,Giovanna,"<@Evelin> But how would you do filter in that scheme? A function that returns nothing, as something separate from nil?"
1292,1510107267.000196,Jonas,"how would you like it organized? currently, you can do `(comp (map inc) (filter even?) (map inc))`"
1292,1510107271.000244,Guillermo,"Doing algebra in the compiler has a cost... That's what Haskell does; There is also no clear definition in an impure language around what is pure vs impure, where can I move things around, etc; Transducers aren't perfect, but the cost-benefit / leverage is off the charts high; They were also implemented in user space, in a library initially; No involvement of compiler"
1292,1510107411.000252,Evelin,"basically, `(comp (map inc) (filter even?) (map inc))` is no better a representation of the process from an apparent point of view than the s-expression `((map inc) (filter even?) (map inc))`, or the s expression `(map inc (filter even? (map inc)))`; the idea of transducers were to separate the definition of what was being done from the thing upon which it was being done; i posit that we could already do this; because this is lisp"
1292,1510107528.000111,Jonas,neat
1292,1510107535.000017,Evelin,the real reason transducers are around is because clojure see's `(map inc (filter even? (map inc x)))` and makes three sequences; it isn't smart enough to know it can unravel for you
1292,1510107548.000129,Guillermo,I don't really know what you're arguing for tbh
1292,1510107567.000201,Jonas,"just for my understanding, how does this compare to `(comp (partition-by consecutive-fn) (map merge-fn))`?"
1292,1510107588.000197,Guillermo,"Transducers are independent of collections. They don't compare to a collection pipeline; But sure, can make a macro that does a lot of things.  Transducers as they are in core hit a sweet spot with expressivity and leverage"
1292,1510107670.000196,Giovanna,The merge-fn is reduced over each partition instead of given a partition as an argument.; Does that make sense?
1292,1510107705.000019,Guillermo,The examples being bandied about (map inc) are nice because they capture only essential detail; Hard to improve on that
1292,1510107731.000128,Jonas,so more like `(comp (partition-by consecutive-fn) (map #(reduce merge-fn %))`?
1292,1510107803.000226,Giovanna,I think that would be equivalent. Nice one!
1292,1510107827.000149,Jonas,"although, I think your example wouldn’t have to hold a whole partition in memory at the same time"
1292,1510107842.000016,Guillermo,"There would have to be a huge benefit to incur additional complexity into the compiler or macro.  Not saying that's a no, but it's unlikely to be sufficiently compelling."
1292,1510107843.000108,Jonas,so if you had large partitions
1292,1510107860.000172,Giovanna,That's true
1292,1510107882.000164,Guillermo,Esp to overcome the inertia of adding an opt phase in the compiler
1292,1510107934.000171,Evelin,"my biggest gripe is that transducer's inherent value seems to be that you can describe a process to be done on the elements of a data source (channel, collection, sequence, iterable, whatever else) by ""composing that process out of transducers""-- but you could already DESCRIBE that process anyway, without resorting to composing functions; you could just compose data in S-expressions that literally represent what you are doing to whatever thing you are doing it to; and if you want it to be independent of the thing you have that choice already! just omit it from the S-expression (its always going to be the most nested, rightmost element)"
1292,1510107946.000192,Jonas,"i’m trying to figure out if the same transducer could be created from two simpler transducers, but my brains a little fried at the moment; too much philosophizing about tranducers :stuck_out_tongue:"
1292,1510107984.000264,Evelin,"so i'm wracking my head trying to think, what do transducers really actually do? They don't necessarily allow me to communicate anything about the process of transformation on data moreso than i could without them, and they don't allow me to separate the process from the thing being processed moreso than i could do without them; i can only think that what transducers really do that the nested S-expressions don't is to capture the idea of doing a bunch of processes together at once in one pass on whatever the thing is"
1292,1510108046.000132,Jonas,I think you could say that about functions in clojure in general; once you do `(def myfn (fn [x] (+ x 1)))`; you don’t pass around the s-expr; you pass around the function; and you can’t really take it apart later
1292,1510108131.000113,Giovanna,I find them fun and tiring to write :slightly_smiling_face:
1292,1510108157.000045,Jonas,"if you hand somebody `myfn`, they can’t tell if it’s made up for complicated stuff or that it just returns a constant; hehe; that’s kinda why i’m hoping you could make more complicated transducers by just composing simpler ones; because, as you mentioned, there are a bunch of rules that you have to follow; … or else; kaboom"
1292,1510108296.000104,Evelin,"if the idea of transducers was to separate what is being done from the thing is is being done to, isn't that just the definition of a function?; doesn't `myfn` do precisely that?; why should i need transducers when i have `(fn ...)`"
1292,1510108344.000123,Jonas,"i mean, you can take a look at the definitions of the different transducers; and they are “just functions”; I think it’s useful to say more about them and give them a name like transducers; for these types of functions, `map`, `filter`, `dedupe`, etc; and having the tranducers as a separate thing has already paid off"
1292,1510108423.000185,Giovanna,"Yes, exactly. I think that you mostly can do that, but sometimes there are just basic building blocks that aren't compositions of other transducers. And sometimes, like I did, you make a new one cause you don't have the imagination to combine two existing ones."
1292,1510108425.000111,Jonas,"originally, core async had their own map, filter, dedupe functions; but now you can reuse these core functions in core async or use them with lazy sequences; it seems kinda obvious that it should be possible, but if you look around at other ecosystems, they do have have a `map` for Rx, and then `map` for collections"
1292,1510108499.000061,Giovanna,"Take a look at source of the xforms library some time, some of those are basic building blocks.  (Fair warning, trying to grok that is headache inducing.)"
1292,1510108521.00007,Evelin,i don't mean to imply that i think we should have a bunch of different maps for different data types; i'm trying to say that i don't think we need transducers to avoid that
1292,1510108569.000247,Jonas,"yea, it seems neat; thanks for the link!"
1292,1510108600.000017,Evelin,"think about what you are actually feeding a chan for instance when you provide a xf argument; you are giving it a function that is composed of transducers (other functions); it has to be composed of transducers, nothing else; you can't for instance, give it just a general expression that expects a value in a particular place and can use any function (""transducible"" or otherwise); you also can't just give it any old function; and expect it to work, even if the dimensionality and data types match up; atleast not as exepcted; IF the transducible process had the macro capability to look inside what you gave it; THEN it could decide for itself what it can do, whether it has to break up some things or rearrange others into what we are calling ""transducible process""; it could even rearrange things or break things up in more particular ways that are specific to the thing being worked on; chan in this instance; this is what async/go actually does; it breaks up your s-expression and creates a state machine out of it; transducers were a great way to follow DRY, but i feel like it was a missed opportunity to just fix the real issue"
1292,1510108868.00007,Jonas,"can you give an example of what you would like the code to look like?; i feel like it’s hard to be more concise than `(chan 1 (map inc))`,"
1292,1510109104.000039,Evelin,"i'd like to say `(map dec (filter even? (reduce conj [] (foo bar (xan zoo WHATEVER)))))` and have clojure know how to optimally unravel it so that it doesn't create more intermediate sequences than necessary, can do what is effectively known as a ""transducible process"" (doing things in one pass) on either side of the reduce, and can even do things in parallel if it can use the runtime to judge that doing so doesn't alter the semantics of what you are doing (it can't if you are just using immutable values) and if doing so would result in faster computation even after taking into account the overhead involved with concurrency.; in other words, the details exposed to us in the transducer api shouldn't really have to be exposed to us-- if that is how things need to work between ""transducible processes"" well ok, but why should i be bothered with it?; that sort of thing belongs in the implementation of eval; the fact that making new transducers means they have to do this and this and that, why do i care?; can't eval look at what i'm giving it and verify that i've done these things?; if i want to express the idea of a computation without the thing being computed, i can just say `(map dec (filter even? (reduce conj [] (foo bar (xan zoo)))))`; notice the lack of WHATEVER; i just pass it as an s-expression and someone can inject whatever they want into it and then evaluate it; imho transducers just don't feel very lispy; they work well for what they try to do, but it sort of misses the point of lisp"
1292,1510109290.000007,Giovanna,"Verify that I've done these things is different than doing them automatically, though."
1294,1510109311.00003,Giovanna,Imho what you're describing sounds more haskelly than clojurey
1292,1510109384.000042,Jonas,"it would be cool if the compiler would take my clojure code and optimize/parallelize it for me, but that seems like a separate issue than the design of transducers"
1292,1510109397.000031,Evelin,"yeah its sort of a bigger issue; i guess i tend to think that ideally programs should just say what it is, semantically, that you want to do; the question of how that is done or how to make it performant is a completely separate and orthogonal concern; usually best solved in the complier or evalutor; i don't like it when programming languages ask you to make them faster by instructing them on how to do the compiler's job"
1292,1510109537.000223,Giovanna,"I think that's kind of  not the clojure way, though. Like the difference between `last` and `peek` on a vector.; Semantically they're the same, but one's way faster"
1292,1510109627.000103,Evelin,yeah i guess i just have a different opinion on the matter; you are right it probably isn't the clojure way; heck it probably isn't even a very popular view on things; oh well i'll stop ranting; thanks for hearing me out though
1294,1510109674.000134,Daniell,"Hmm, I couldn't find that in the transcript <https://github.com/matthiasn/talk-transcripts/blob/master/Hickey_Rich/EffectivePrograms.md>"
1292,1510109782.00021,Giovanna,"Yeah, I remember hearing/reading it longer ago than the conj.... I have a crappy memory though, so you never know ¯\_(ツ)_/¯; I think it's very valid to question things :slightly_smiling_face: Rich is not a messiah and blindly following him is not good for anyone."
1294,1510110160.000196,Giovanna,"What you're saying about a sufficiently smart compiler/macro really reminds me of both criticism and praise about haskell though. Where it can do some really cool optimizations, but that makes it hard to reason about perf."
1292,1510110444.000065,Daniell,Re: writing your own transducing functions -- I wrote one that turned flat sequences of maps into sequences of threaded sequences of maps (based on certain fields acting as keys and back references). It turned out to be a very elegant solution to creating threaded conversations out of raw sequences of messages between members. It hid the complexity of the problem and it was easily composable with any other processing I wanted to do on messages (before transformation) or conversations (after transformation).
1292,1510116184.000201,Sandy,"<@Evelin> there's a lot of compiler tech out there that does this sort of thing. PyPy does it out-of-the-box at runtime, infact PyPy actually runs transducers over int arrays faster than Clojure. ClojureScript does as well. Clang can do this sort of stuff but it would require all your pipelines to be defined up-front and fully static; The beauty of the Clojure model, is that none of this took compiler support. It just works as a library.; That's the problem with a lot of these approaches.  PyPy took 3-4 people 10 years to engineer. The JS JITs took less time, but larger teams. Transducers were mostly designed in about 3 weeks by one person.; And you'll see that pattern throughout Clojure, never over-engineer. If you can accomplish what you need with your existing tools, do it that way.; Not saying these other methods aren't valid, but they are much more complicated.; And for anyone here interested, here's pretty much the state-of-the-art for this sort of thing. From the Scala world, but the paper goes over Lisp and the like as well: <https://infoscience.epfl.ch/record/180642/files/EPFL_TH5456.pdf>"
1295,1510117784.000136,Bibi,That's a big paper! Won't start it tonight :slightly_smiling_face:
1292,1510117850.000197,Sandy,yeah the first 50 pages or so are an overview of why we need this thing
1292,1510118137.000068,Berry,"<@Sandy>: can you tell <https://www.youtube.com/channel/UC6yONKYeoE2P3bsahDtsimg/videos> to create a video walkthrough of the paper, step by step, implementing a minimal setup in clojure ?"
1292,1510120838.000128,Sandy,"Heh, most of it leans really heavily on static typing. How to adapt it to more dynamic languages is still a WIP"
1296,1510120987.000203,Janette,"Were Clojure's transducers only able to be made so quickly because of the way the language is, or does putting them in the compiler just take longer? Since it's lispy i'm just curious if impossible to do it the library way in other languages."
1296,1510124702.000013,Alix,It would be nice if there was something like defmacro that did not evaluate its arguments but that could return a value instead of code that gets evaluated.  Is such a thing possible?
1296,1510130937.000264,Danyel,"<@Alix> well, it is possible as long as the value can be expressed as code... Isn't this what `comment` does ?
```
(defmacro comment [&amp; body] nil)
```"
1297,1510131725.000036,Verna,"Could anybody help me with fuzzy multi-method dispatching? Say, I have maps with `:os` and `:version` fields. Basically, I need to dispatch them by OS, but for some specific versions I need to perform some other logic. What I’m trying to reach is:
```
;; let's say my dispatcher function is (juxt :os :version)
[:mac &lt;any-version&gt;] ==&gt; the standard iOS algorithm
[:win &lt;any-version&gt;] ==&gt;&gt; the standard Windows algorithm
;; but!
[:mac :11.22.33] == &gt; some Mac-specific algorithm for version 11.22.33
```
So once I’ve got some another buggy version, I just add another `(defmethod...)` definition for that case. Probably, later I’ll need to add more minor keys to dispatch, say, browser name or something else. 
I’ve tried a bit `derive` and custom hierarchies but without success."
1297,1510132051.000336,Randee,<@Verna> <http://clojuredocs.org/clojure.core/defmulti#example-57558046e4b0bafd3e2a0474>
1297,1510132112.000039,Verna,yes I’ve seen that example but cannot understand it completely so it prevents me from using it.
1297,1510132129.00038,Randee,"<@Verna> What's the question? I wrote that example :slightly_smiling_face:; Basically: 1. If no 100% match, find the default method in the `:default` fallback. 2. Add this fallback to the defmulti"
1297,1510132346.000044,Verna,<@Randee> makes sense. Another solution might be to derive any version over `::default` value once I’ve got that map.
1298,1510134881.000063,Evan,"sorry, i was mistaken - it's the Inside Transducers talk; &gt;&gt;&gt;Who knows what the semantics of reduce are when you call it with a collection and no initial value?

[Audience response]

No one, right. No one knows. It's a ridiculous, complex rule. It's one of the worst things I ever copied from Common Lisp was definitely the semantics of reduce. It's very complex. If there's nothing, it does one thing. If there's one thing, it does a different thing. If there's more than one thing, it does another thing. It's much more straightforward to have it be monoidal and just use f to create the initial value. That's what transduce does, so transduce says, ""If you don't supply me any information, f with no arguments better give me an initial value.""; well, transducers are very simple, language-agnostic concept - there are (library) implementations for javascript, ruby, python, and java as well; tim's point was just that transducers were invented in a very short time, and required no compiler support at all"
1297,1510137528.00032,Taina,"<@Verna> Why not use something like this:
```
(derive :mac/high-sierra :mac/default)
=&gt; nil
(isa? :mac/high-sierra :mac/default)
=&gt; true
````; and derive all the os-versions from a default version."
1297,1510137607.000275,Verna,"<@Taina> yes, it came to me afterwards. I’m going to derive version once I get a map to dispatch."
1297,1510137658.000336,Taina,<@Verna> :slightly_smiling_face: Happy hacking.
1299,1510150299.000002,Lavenia,"<@Sonny> or other Cognitect folks -- I noticed that the instructions in the `readme.txt` in the Clojure repo are no longer complete and accurate -- I can build with ant or maven, but `java -cp clojure-${VERSION}.jar clojure.main` no longer works; it throws an exception because of the spec dependency. Maybe worth adding a note to readme that spec has to be built and installed first? Note: I'm assuming that's what has to be done to fix; I haven't actually tried it at this point.
Didn't seem worth filing a ticket, since it's so minor, but a suggestion for the final 1.9 release.; Just seems like it could trip up new users who are naively trying to follow the instructions in the readme."
1299,1510150457.000311,Margaret,"<@Lavenia> this is a known issue, and being addressed with the `clj` tool; it will be integrated (including the readme) when 1.9 is the stable release, is what I heard"
1299,1510150507.000418,Lavenia,"Right, I'm aware of the new CLI tool -- just suggesting that the readme be updated.; Cool, good to know; just wanted to be sure it hadn't been overlooked."
1300,1510152674.000002,Lester,what new CLI tool?
1299,1510152705.000389,Margaret,"the tool is called clj, it's clojure.core plus a dependency manager to bootstrap"
1300,1510152714.000548,Margaret,since clojure.core now needs other libraries to run
1300,1510152871.000565,Lester,"ah, I see"
1299,1510153523.000487,Sonny,There are several things in that readme that are lagging and need updating. We don’t plan to make any more changes for 1.9 though.; <https://clojure.org/guides/deps_and_cli>
1299,1510153632.000778,Mallie,Why were those other libs not merged into `clojure.core` to make sure it could run standalone?
1299,1510153666.00033,Sonny,they were originally in core and we split them out to allow them to be updated independently from core
1299,1510153679.000458,Mallie,Fair enough
1299,1510153688.000215,Sonny,<https://groups.google.com/forum/#!msg/clojure/10dbF7w2IQo/ec37TzP5AQAJ>
1299,1510153689.000645,So,Does anyone know a way how to genereate documentation out of plumatic/schema ?
1301,1510155961.0006,Ava,"<@So> what kind of documentation are you looking for?; <@So> ```user=&gt; (s/defn foo :- Bar
  #_=&gt;   [qux :- s/Str, quux :- [s/Keyword]])
#'user/foo
user=&gt; (doc foo)
-------------------------
user/foo
([qux quux])
  Inputs: [qux :- s/Str quux :- [s/Keyword]]
  Returns: Bar
```"
1302,1510159707.000894,Daniell,"Yeah, `reduce` is ... weird. When I first implemented `reducible-query` in `clojure.java.jdbc` I got the no-init arity of `reduce` wrong because I assumed the semantics of `transduce`. The `reduce` docstring is very clear -- the behavior is just a bit non-intuitive."
1303,1510161435.000454,Georgianne,How do you idiomatically spell `(is (thrown-with-msg? ...))` except also binding the exception to a name so I can `ex-data` it?
1301,1510162179.000363,So,"@bla The first prototype I've writen as comment (see: <https://github.com/DomainDrivenArchitecture/dda-serverspec-crate/tree/development>); like ```
(def ServerTestConfig {
 (optional-key :netcat-test)
 {Keyword {:reachable? Bool}},          ; keyword is used to match test against fact
 (optional-key :netcat-fact)            ; parsed result of ""nc [host] -w [timeout] &amp;&amp; echo $?""
 {Keyword {:port Num,
           :host Str,                   ; may be ip or fqdn
           :timeout Num}},              ; timeout given in seconds
 (optional-key :netstat-test)
```; But the datatypes described here are splittet across several modules, so we will need a way to 
1. add documentation as meta to elements like 'keyword' or 'defschema'
2. a way to render documentation on schema endpoints (sth. like `explain`)"
1304,1510163319.000192,Margaret,"quoting doc of is: ```(is (thrown? c body)) checks that an instance of c is thrown from
  body, fails if not; then returns the thing thrown.``` - so at the very least, thrown? lets you do that"
1301,1510163467.000125,Margaret,"<@Georgianne> - looks like it works with thrown-with-msg? too ```kingfisher.core=&gt; (clojure.test/is (thrown-with-msg? Exception #""foo"" (/ 1 0)))

FAIL in () (form-init2223331148129063339.clj:1)
expected: (thrown-with-msg? Exception #""foo"" (/ 1 0))
  actual: #error {
 :cause ""Divide by zero""
 :via
 [{:type java.lang.ArithmeticException
   :message ""Divide by zero""
   :at [clojure.lang.Numbers divide ""Numbers.java"" 158]}]

 :trace
 ...
kingfisher.core=&gt; (type *1)
java.lang.ArithmeticException```; so the pattern would be to put the `is` in a let block so you can make other assertions about the ex-data"
1301,1510163608.000297,Georgianne,"I totally read over that, oops; that makes sense. Thanks!"
1301,1510163702.000713,Margaret,"it only explicitly documents the return-value of the `thrown?` check, I guess it’s implied that `thrown-with-msg?` would similarly return e"
1305,1510167018.000375,Chang,"Does anyone have an idea what could be wrong here?
```
(defn testex []
  (go
    (let [response (try (&lt;! (http/get ""<http://localhost:3000/sim/error>"" {:with-credentials? false}))
                        (catch :default e
                          (println ""error"" e)))]
      (println response))))
```
The URL returns HTTP 500 with content-type application/json but not a JSON body, so http/get throws a parse error, but I can't figure out why I can't catch it. I tried putting the `try` everywhere."
1305,1510167052.000744,Margaret,"you can’t catch it because channel ops are lifted into core.async’s state machine; so the fact that http/get returns a channel means that you can’t catch its error - in order to handle that error you need to use the facilities your http library defines, and if they define none the library is broken; normal clj-http at least takes a `:throw-exceptions` arg you can set to false - I don’t know what library `http` is but with any luck they accept that arg and return the error response instead of throwing an error(?) - I have no idea why that wouldn’t be the default in an async lib frankly"
1305,1510167276.000706,Chang,I use this one: <https://github.com/r0man/cljs-http> . Are there alternatives out there that also use core.async?; so this means that any code that returns a channel should never throw an error?
1305,1510167449.000436,Rebeca,:default likely doesn't work correctly inside clojurescript core.async go blocks anyway
1305,1510167463.000094,Aldo,asynchronous code shouldn't throw errors. who's gunna catch it?; not just core.async
1305,1510167481.00055,Rebeca,<https://dev.clojure.org/jira/browse/ASYNC-42>
1305,1510167487.000098,Margaret,"<@Chang> it can throw an error if its non recoverable, what would be the point? but yeah, it shouldn’t throw exceptions because there’s no reasonable block of code that can catch it"
1305,1510167517.000367,Aldo,"anyway looking at that code it doesn't seem like it would throw exceptions to me, it looks like it returns some sort of structured error"
1305,1510167562.000129,Margaret,"<@Chang> looking at that lib it isn’t the one throwing, yeah; but really, you can just use xhr via interop, and use core.async inside the callback; that way you can attach your own error handler inside the callback; wrapper libs are severely overrated"
1305,1510167617.000199,Chang,"<@Margaret> 
```
ioc_helpers.cljs?rel=1509880107319:42 Uncaught SyntaxError: Unexpected token S in JSON at position 0
    at JSON.parse (&lt;anonymous&gt;)
    at cljs_http$util$json_decode (util.cljs?rel=1509894674732:63)
    at core.cljs:4829
    at Function.cljs.core.update_in.cljs$core$IFn$_invoke$arity$3 (core.cljs:4829)
    at cljs$core$update_in (core.cljs:4820)
    at cljs_http$client$decode_body (client.cljs?rel=1509894676467:83)
    at Function.&lt;anonymous&gt; (client.cljs?rel=1509894676467:181)
    at Function.cljs.core.apply.cljs$core$IFn$_invoke$arity$2 (core.cljs:3685)
    at cljs$core$apply (core.cljs:3676)
    at async.cljs?rel=1509880110795:712
```"
1305,1510167647.000107,Margaret,"right, so your server is giving your garbage that isn’t json, and cljs-http isn’t set up to catch that for you; you need to either replace wrap-json with something that handles the error nicely, or just use xhr and js/JSON yourself directly; my bet is that in the long term that last option is the least trouble"
1305,1510167853.000463,Chang,"well, I was using JulianBirch/cljs-ajax before, which is ok, but I wanted a solution where my logic in not split in event handlers; for simple stuff there should be no problem, but as soon as you have something more complex, like several ajax requests in sequence it gets messy"
1305,1510168171.000183,Margaret,"right, you can use core.async in your callback - then you’re in clojure land"
1305,1510168280.000145,Chang,"regarding ""who should catch the error"", my answer would be ""the code inside go"". core.async gives you the illusion to have sequential code when its actually asynchronous, right? so that is where errors should handled as well. ironically throwing an exception/error is actually a break in a sequential code. i don't know how it works internally, i just recently learned that they are actually not the same as continuations, so it may not be easy or possible, but that question definitely has an answer"
1305,1510168296.000269,Alix,Do people prefer to use for list comprehensions or filter and map?
1305,1510168367.000029,Margaret,"<@Chang> but that’s impossible - your go block can’t see errors inside another go block, and that’s what is happening in your code when you call http/get; this is a hazard of using library code that creates go blocks you can’t control"
1305,1510168786.000767,Chang,"<@Margaret> it may be technically impossible (though I'm not so sure about that), but not logically. my point is that asynchronous code should have a generic way of dealing with errors, like sequential code has. blaming the library for not following a convention and not having a way to deal with that is not good :slightly_smiling_face:"
1305,1510168842.000184,Margaret,"OK - you would need to re-implement core.async to implement this; it’s a core structural problem, not a superficial oversight"
1305,1510169415.000064,Chang,"hmm, i'm going to have to get to know core.async better to understand that. I come from JS promises, where errors are part of the ""promise system"", i.e. when you have a promise chain, and one of the steps throws an error it is caught by the ""promise system"" and the closest error handler (sort of like a catch) is executed. granted it's not perfect, for example errors while creating the promise chain are not caught.; i'm going to follow your recommendation and switch back to JulianBirch/cljs-ajax"
1305,1510169496.000256,Margaret,this might be a better discussion for <#C05423W6H|core-async> - and perhaps I’m wrong and there’s a way to put in a more generic exception handler for go blocks- but if that existed I’d think we would have seen it in action already
1305,1510169527.000553,Chang,<@Margaret> thank you
1305,1510169537.000729,Margaret,"to be clear, I recommended using xhr and JSON via interop, but if that works and is easier that’s cool too :smile:"
1305,1510169578.000058,Chang,"why would you favour xhr vs a cljs library?; <@Alix> I would choose what looks best aesthetically (by which I mean what code is more understandable), but I guess performance may also matter in some cases. why do you ask?"
1305,1510169973.000727,Margaret,"<@Chang> because wrapper libs are limiting, and interop is strightforward; using the js lib directly will be the most flexible option, and least likely to get you stuck"
1305,1510170112.000492,Alix,"<@Chang> cool, I am learning how to write better code"
1306,1510186324.000035,Merri,Anyone know of a good HTML extracting library? I want something that can use CSS or xpath selectors that can be represented in text so that I can store them in a config somewhere. Tried hickory and it works but it’s not geared toward text based parsing instructions.
1306,1510186403.000231,Margaret,this is what enlive does <https://github.com/cgrand/enlive>; or - at least - I have done this with enlive before
1306,1510186444.000218,Merri,neat. I always thought it was a templating library. thanks!
1306,1510186468.000005,Margaret,"yeah, it templates too, but it can also break down html input and search it via selectors; I've used it alot but have never templated with it"
1306,1510186525.000094,Merri,looks like I could maybe store the config in edn or something. cool.
1307,1510197172.000017,Charity,",1"
1308,1510213384.000321,Harriet,"A question about selecting Clojure libraries: 

Anyone know, offhand, of a site that will let you search a Clojure project by the other projects (with public dependency information eg on github) that have it as a dependency? I'd find this useful when understanding if and how certain libraries are being used.; I feel sure this thing / project does or did exist, but I've forgotten where to find it."
1308,1510214655.000372,Austin,<@Harriet> check out <https://crossclj.info/>
1309,1510216509.000183,Armida,"Hi Guys,

I've tried to test pmap functionality and came across a weird (to me) behaviour.
It would be nice if someone could tell me where am I wrong, or how does it make sence:

For my understanding pmap goal is to run a function in parallel over a collection, limiting parallelism.
From pmap code I underatand that the desired parallelism level is 2+num-of-cpus

In practice i see a different behaviour:
```(defn- f1 [delay-num]
  (info ""delay #"" delay-num ""started, sleeping"")
  (Thread/sleep (* 1000 5))
  (info ""delay #"" delay-num ""finished"")
  delay-num)

(defn run []
  (let [delays (range 21)
        results (pmap f1 delays)]
    (info ""num of cpus = "" (.. Runtime getRuntime availableProcessors))
    (info ""total is"" (reduce + results))))
```


This shows all 20 delays running in parallel
(I have 4 CPUs and running with clojure 1.8)

Trying to understand it I came up that applying the seq on fs is to ""blame"".

What do u say?"
1309,1510216544.000159,Darci,"Not sure if it has been asked before - I can't find it googling for it - but with Java9 and the modularization of the JDK, I'm wondering if there's a kind of 'minimal JDK for clojure'? The reason for asking is: on small devices, RAM is still limited, and starting a few full blown JVM's takes quite some unnecessary baggage (CORBA, Swing, ...). It would be nice to have a JDK which contains the necessary modules, but not more, that clojure needs to run. I guess it could save up to maybe 30-40MB per JVM. Running 4-5 clojure apps on a 1-2 GB RAM device, well, it certainly makes a difference."
1309,1510216897.000374,Janette,I've never actually used it: but have you looked into things like Wildfly? It's supposed to let you multiple applications in one JVM process. It *might* be able to help you *now* instead of waiting for the devs to do it.
1308,1510217079.00014,Harriet,Thanks! That's the one.
1310,1510218482.000148,Terra,"<@Armida> I guess this has something to do with chunked seqs. `map` et al process sequences in chunks of 32 elements.
And this is indeed what I observe; ```
(defn- f1 [delay-num]
(Thread/sleep (+ 100 (rand-int 1000)))
(println (java.util.Date.) ""delay #"" delay-num ""started"")
(Thread/sleep (* 1000 5))
(println (java.util.Date.) ""delay #"" delay-num ""finished"")
delay-num)

(defn run []
(let [delays (range 41)
results (pmap f1 delays)]
(println ""num of cpus = "" (.. Runtime getRuntime availableProcessors))
(println ""total is"" (reduce + results))))

(run)


#inst ""2017-11-09T09:06:30.493-00:00"" delay # 1 started
#inst ""2017-11-09T09:06:30.498-00:00"" delay # 2 started
#inst ""2017-11-09T09:06:30.559-00:00"" delay # 13 started
.....
```"
1310,1510219507.000386,Armida,"cool - thanx! wasn't aware of that at all.
so it seems that num-of-cpus calculation is redundant right? unless you have more than 30 cpus."
1311,1510221170.000029,Kareen,"correct, if you're pmapping over a chunked seq; OTOH you can dechunk it and get back the expected n+2 behaviour; or if your sequence isn't chunked, that will be the case too"
1310,1510225117.000163,Armida,understood. thanx a lot!
1312,1510227660.000357,Margaret,"<@Darci> the JVM already runtime loads classes into memory as you use them. If they end up in RAM that's because something accessed them at runtime. The main RAM killer with Clojure in particular is the assumption that RAM is cheap and throughput is more important, which informs the design of the collections and the way the core functions use those collections."
1312,1510228861.000112,Darci,"<@Janette> Yeah... I'm not particularly fond of application servers. I can't talk for all of them, but they still have a hard time if one of the applications is stopped unexpectedly (even in clojure, this happens :slightly_smiling_face: ). Many of them seem to have quite some issues with memory leaks as well. They're not real multi-tenant... I'm still hoping some day, there will be a real multi-tenant JDK.
<@Margaret> allright... I will check it. In my understanding - and seeing how much RAM 'hallo world' seems to use - the JDK loads the classes of the applications dynamically, but not the JDK itself. I may be completely wrong, though :slightly_smiling_face:."
1312,1510228921.000453,Margaret,Why even use a JDK if not compiling Java code? Clojure doesn't need one. you can just use a JVM.
1312,1510228944.000216,Darci,"right... misphrased my question :slightly_smiling_face:; Being able to modularize and customize your own JVM, is there minimal clojure-JVM? - oh, I seem to answer my own question: clojure doesn't need any special JVM, so just JDK9 base (and maybe some other modules), be be ok. Could work.
However, without aot, would an an optimized JVM (which can compile clojure on the fly) make sense?"
1312,1510229150.000034,Margaret,Clojure can't run without the compiler anyway can it?
1312,1510229196.000151,Darci,right.
1312,1510229423.000393,Margaret,"my hello.java has 21 megs resident (I threw a Thread.sleep so I would have enough time to find it in htop); that's a lot more than I would see in C, but it's a lot less than clojure.core takes up; for reference ```class Main {
  public static void main (String[] argv)
    throws InterruptedException {
    Thread.sleep(100000);
  }
}
```"
1312,1510229549.000145,Darci,"Right... so, I'll check how much it would take for clojure - later."
1312,1510229647.000264,Margaret,"my clojure 1.9.0-RC1 with no other deps is 83 megs resident before I do any require calls; pulling in core.async brings it up to 298 megs; this is without lein, boot, or any other tooling"
1312,1510229743.000269,Darci,"OK, so it's pretty clear what the memory is necessary for; it's not the JVM :slightly_smiling_face:. Meaning, no need to start fiddling with it :slightly_smiling_face:"
1312,1510229786.000302,Margaret,"this is on ```$ java -version
java version ""1.8.0_05""
Java(TM) SE Runtime Environment (build 1.8.0_05-b13)
Java HotSpot(TM) 64-Bit Server VM (build 25.5-b02, mixed mode)
```; yeah - java isn't the primary thing driving memory usage here - I'm sure java's design and optimization criteria play a part, but it's dwarfed by the memory used by clojure itself to define data structures and functions"
1312,1510229884.000132,Randee,FYI: you can get some info about memory usage with `(bean (ManagementFactory/getMemoryMXBean))`
1312,1510229989.000258,Darci,"ok, nice, thx a lot. This will do for now :slightly_smiling_face:. I guess I'll just have to see if I can work it out to use clojure on small devices."
1312,1510230118.000124,Margaret,Clojure's design assumes RAM is cheap (Rich Hickey has talked about this when talking about Clojure's design assumptions)
1312,1510230170.000312,Darci,"yeah, I know... but I just seem to have a hard time to not using clojure these days."
1312,1510230184.000006,Margaret,there are other functional languages (some of them even in the lisp family) that don't make that assumption; in my experience OCaml is really good about runtime memory usage if you stick to the core language as much as possible
1312,1510230231.00033,Darci,Or I'll may have to see for another lisp... or maybe Erlang or OCaml.
1312,1510230246.000117,Katharyn,somewhat related: <https://ferret-lang.org/>
1312,1510230313.00007,Darci,nice... looks pretty cool as well.
1312,1510230366.000207,Margaret,"I use OCaml for a project on the raspberry pi, I could compile OCaml to machine code ~100 times then run it, in the time it takes Clojure to start up on the pi; (rough rough estimate)"
1312,1510230379.000433,Darci,:slightly_smiling_face:
1312,1510230886.000102,Evan,<@Darci> you could also look into clojerl or LFE
1312,1510231006.000342,Darci,"<@Annabelle> you have experience with them (they seem to be experimental, whatever that really means)"
1312,1510231036.000097,Evan,"no experience, sorry"
1312,1510231120.000178,Darci,np... again too many things to try out.
1313,1510231162.000131,Celina,Is it possible to save maps with namespaced keys to mongo ?
1312,1510231175.000102,Merri,Nobody has mentioned elixir yet?; I bet lumo would run on the pi as well.
1312,1510231277.000258,Darci,:slightly_smiling_face:
1312,1510231462.000161,Weston,<@Darci> lfe is quite solid/stable
1312,1510231503.000174,Darci,ok... so I may give that a try.
1312,1510231503.00028,Weston,"but even tho clojerl is younger it looks more appealing, lfe inherits from a lot of common lisp idioms"
1312,1510231542.000281,Darci,"yeah... well, I can bet it'll be stable and try clojerl. No harm done in the first months anyway :slightly_smiling_face:"
1312,1510231562.000261,Weston,it's prolly super alpha but it's moving fast it looks like
1312,1510231587.000022,Darci,:+1:
1312,1510231999.000046,Margaret,"<@Celina> I prefer to only have a few keys in my mongo document (basically whatever needs indexing) plus an embedded transit string; because this allows using all the core clojure data types (plus whatever else I implement readers / writers for as needed); monger will auto-convert all map keys to strings going in, and by default will turn those into keywords coming out, which leads to terrible things like `{1 :a}` (key is a number) becoming `{:1 ""a""}` (key is a terrible, illegal keyword); <https://github.com/cognitect/transit-clj>"
1312,1510232381.000479,Celina,Thanks <@Margaret> we are converting the keys to strings befor insertion and it seems to be working
1312,1510232451.000479,Margaret,"right, my point directly to your question is that ""namespaced keys"" can't exist in mongo without you encoding"
1312,1510232466.000268,Celina,yeah I see that now
1312,1510232507.000341,Margaret,"whether it's a simple assumption like ""if there's a / that's namespaced and it should be a keyword"" or a more advanced usage like embedding a full encoded clojure data payload (my choice has been the latter - it simplifies a lot of things)"
1314,1510233030.00054,Jutta,"`IllegalAccessException class clojure.core$bean$fn__5975$fn__5976 cannot access a member of class sun.management.MemoryImpl (in module java.management) with modifiers ""public""  jdk.internal.reflect.Reflection.newIllegalAccessException (Reflection.java:361)`
(i'm on java9)"
1315,1510242187.000674,Berry,"1. In namespace foo.bar , I created a keyword ::apple
2. In namespace snip, I did (:require [foo.bar :as fb])
3. I'm trying to use fb/:apple ... but am getting an 'no such var error

4. Is there a wa yot refer to a keyword in a namespace via the alias ?"
1315,1510242286.000122,Daniell,<@Berry> use `::fb/apple`
1315,1510242315.00067,Berry,<@Daniell>: works; thanks
1315,1510242328.000369,Daniell,The `::` auto-resolves the alias. 
1315,1510242393.000204,Mallie,"You'll see that a lot if you do XML manipulation, with the XML namespaces :wink:"
1315,1510242473.00027,Daniell,Or use spec...
1315,1510242696.000112,Berry,"This is from spec use. For the past few days, I've been thinking ""getting errors with deep stacks is really annoying -- wouldn't it be great if, for each function, I had two functions:

one to check if the input is correct format
one to actually evaluate

and the check-correct-format function is run before hand""

-- then I realize I just rediscovered spec"
1315,1510242812.000071,Kareen,i think you just rediscovered pre/post conditions rather than spec :)
1315,1510242943.000416,Berry,"<@Kareen>: good point, those all the 'pre-conditions' are checks of the form 'this var has the following shape' -- and the shapes are composable"
1316,1510247423.000411,Evelin,"honestly the jvm can be hard to reason about anyway, especially when you add clojure's runtime on top of that."
1317,1510253723.000052,Laurette,"My project depends on two libraries that both depend on respectively `some-lib 1.1.1` and `some-lib 1.1.2`. According to `lein deps :tree`, `some-lib 1.1.1` is pulled in. I thought newest version would win in this case?; Oh, btw, I get a warning when running `lein deps :tree` that may explain it in the concrete case:
```
[bidi ""2.1.2""] -&gt; [prismatic/schema ""1.1.3""]
 overrides
[io.nervous/eulalie ""0.6.11-SNAPSHOT""] -&gt; [prismatic/plumbing ""0.5.5"" :exclusions [org.clojure/clojure]] -&gt; [prismatic/schema ""1.1.7""]
```
So how come `bidi` overrides in this case?"
1317,1510254046.000458,Margaret,"there is no “newest wins” logic - you can use :exclusions, or ensure that the the dep walking finds the version you want before the other one (including explicitly adding the one you want earlier in the list); it uses the first one it finds, and it searches from the beginning of your deps vector to the end"
1317,1510254135.000431,Laurette,<@Margaret> I tried putting `eulalie` on top without any luck. Maybe the dependency path length is taken into account?
1317,1510254173.000403,Margaret,hmm - that could be
1317,1510254220.000191,Laurette,"Okay. Anyway, thanks for the pointer. I ended up adding an explicit dependency to `prismatic/schema ""1.1.7""`, and I’ll ask the bidi project to bump the version"
1318,1510258414.000175,Lino,"Hi. I have a problem with HugSQL used with Postgres (`[com.layerware/hugsql ""0.4.7""]`, `[org.postgresql/postgresql ""42.1.3""]`).

This code:
```
(try
  (db/persist-job-invocation data)
  (catch java.sql.SQLException e
    (println ""=================== caught java.sql.SQLException"")
    (println (type e))
    (println (type (.getCause e)))
    (println ""===================""))
  (catch Exception e
    (println ""=================== caught Exception"")
    (println (type e))
    (println (type (.getCause e)))
    (println ""==================="")))

```
throws a useful SQL exception wrapped in a useless java.lang.Exception.
```
=================== caught Exception
java.lang.Exception
java.sql.BatchUpdateException
===================
```

How to catch the real wrapped exception? Do I have to unwrap and raise the exception each time I call a HugSQL-generated DB function?"
1318,1510259089.000438,Daniell,"<@Lino> Take a look at the stacktrace and see what code is wrapping the exception. I _thought_ that `clojure.java.jdbc` made sure to throw bare `java.sql.SQLExceptions` wherever it could, so maybe HugSQL is catching and rewrapping it?"
1318,1510259190.000207,Lino,"HugSQL does this in the generated DB functions:
```
 (catch Exception e
   (adapter/on-exception a e))))))))
```

The default adapter method:
```
(on-exception [this exception]
  (throw exception)))
```
Could this cause it?

(I'll reproduce it and get an exception in a sec); <https://gist.github.com/not-raspberry/413fc99d5cc352f402770355a95568a7>; &gt; Caused by: java.lang.Exception: Exception in :persist-job-invocation
So it looks like that's hugsql.; Found the issue in conman. <https://github.com/luminus-framework/conman/issues/44>; Downgrading conman helped."
1319,1510261346.000115,Antonietta,does anyone know if Juxt's Clojure radar is geting an update? [ 2016 versoin: <https://juxt.pro/radar.html>]
1320,1510263782.000072,Delois,"Is there any way to adjust the `:tag` metadata on a local binding?; ```
(defn len [x]
  (let [x (vary-meta x assoc :tag String)]
    (.length x)))
```
still produces a reflection warning."
1320,1510263839.00009,Guillermo,do you mean the fn arg or the let binding?; for the latter I write `(let [^String x .......] ........)`
1320,1510263890.000675,Delois,"Either, really - in this case I’m trying to use the let binding to adjust the meta on the fn arg.; Yeah - thinking about it, what I’m trying to do doesn’t make sense."
1320,1510263936.000581,Guillermo,"it needs to go on the left-hand-side...the way you have it written it is tagged at runtime, not at compile time"
1320,1510263941.000157,Delois,"I was hoping to be able to calculate the tag value at runtime, but of course that affects compilation."
1320,1510263961.000458,Guillermo,yeah you can't dynamically modify at runtime without reflection.
1320,1510263962.00009,Delois,"I was up both late and early, is my excuse."
1320,1510263968.000034,Guillermo,lol. welcome to NZ
1320,1510264012.000387,Delois,Lein 2.8.0 switched Aether to a new version which has moved from Sonatype to Eclipse; So all the package names of the classes have changed.; Even though the code is basically the same.; Just trying to figure out the best way to handle that.
1320,1510264186.000007,Mallory,"hi guys; which is better?
(-&gt; ll rest butlast butlast)
or
(subvec ll 1 (-&gt; ll count dec dec)); or if there is something better than both please refer it?"
1320,1510264477.000043,Kristy,"<@Mallory> subvec should perform quite better, assuming II is a vector; subvec surely leverages structural sharing, my guess is it's an instant operation"
1320,1510264535.000417,Guillermo,`(-&gt; v pop pop rest)`; (or subvec); `butlast` is linear; like `last`
1320,1510264622.000351,Mallory,thanks guys
1321,1510264981.000238,Mallory,"another question; what is the best way to for [""hello"" ""world""] to swap first two characters in this list to get [""ehllo"" ""owrld""] ?"
1320,1510265068.000641,Mallory,i can do it in ugly way
1321,1510265070.000512,Mallory,"like:; (mapv (fn [w] (let [l (vec w) tmp (get l 0)] (-&gt; l (assoc 0 (get l 1)) (assoc 1 tmp) )) [""hello"" ""world""])"
1320,1510265202.000515,Mallory,i feel it's ugly way to do this
1321,1510265210.000574,Mallory,"is there elegant way to this?; that's exactly i have; (-&gt;&gt; [""hello"" ""world""] (mapv (fn [w] (let [l (vec w) tmp (get l 0)] (-&gt; l (assoc 0 (get l 1)) (assoc 1 tmp))))) (mapv #(apply str %)))"
1321,1510265988.000138,Jonas,"```(-&gt;&gt; [""hello"" ""world"" """"]
     (map (fn [w]
            (let [split-index (min (count w)
                                   2)]
              (str
               (apply str (reverse (subs w 0 split-index)))
               (subs w split-index))))))```"
1321,1510266119.000159,Mallory,<@Jonas> what makes your version more elegant ?
1321,1510266135.000003,Jonas,it depends on who you ask
1321,1510266152.00032,Mallory,i want your prespective
1321,1510266166.000163,Jonas,I prefer this way of writing it because I think it emphasizes what you’re trying to do
1321,1510266190.000335,Mallory,what makes my version is less elegant in your prespective ?
1321,1510266251.000499,Jonas,"the fact that you’re swapping letters is a little harder to see; and the fact that you’re using assoc and manipulating vectors makes it harder to tell you’re doing string manipulation; another try is ```(-&gt;&gt; [""hello"" ""world"" """"]
     (map (fn [[first-letter second-letter &amp; other-letters]]
            (apply str second-letter first-letter other-letters))))```"
1321,1510266333.000018,Mallory,yeah last version is better for me
1321,1510266338.000153,Jonas,which matches your problem description a little more closely; the `reverse` in my first version is a little closer to the “swap” part of “swap the first two characters”
1322,1510266440.00026,Kristy,"&gt; what is the best way to for [""hello"" ""world""] to swap first two characters in this list to get [""ehllo"" ""owrld""] ?
also worth nothing that what you really care about is the string function. dealing with vectors is trivial and a separate concern

by reducing problems to their essence, you get to think more clearly :slightly_smiling_face:"
1321,1510266515.000544,Jonas,"the other thing I would consider is that in <@Mallory>’s example, the “swapping the first two letters” gets split up into two pieces; first the swap and then turning it back into a string; so even if you were going to do it that way, I would combine both pieces into one function since I think of swapping the first two letters of a string as one operation; like ```(-&gt;&gt; [""hello"" ""world""]
     (mapv (fn [w]
             (let [l (vec w)
                   tmp (get l 0)]
               (-&gt; l
                   (assoc 0 (get l 1))
                   (assoc 1 tmp)
                   (-&gt;&gt; (apply str)))))))```; the other point I would make is that `tmp` isn’t very descriptive; just using good names can help readability a lot imo ```(-&gt;&gt; [""hello"" ""world""]
     (mapv (fn [w]
             (let [l (vec w)
                   first-letter (first l)
                   second-letter (second l)]
               (-&gt; l
                   (assoc 0 second-letter)
                   (assoc 1 first-letter)
                   (-&gt;&gt; (apply str)))))))```"
1321,1510266930.000084,Margaret,"<@Jonas> as a suggestion, you can replace that let block with `(let [[first-letter second-letter] w] ...)`; oh, you need it to be a vector never mind; `(let [[first-letter second-letter &amp; trailing] w] (apply str second-letter first-letter trailing))`"
1321,1510267045.000282,Jonas,one of my snippets above is very similar to that one
1321,1510267060.000489,Margaret,"oh, I see that now"
1321,1510267070.000173,Jonas,I was trying to show some other examples that were incremental improvements upon his original
1321,1510267106.000245,Margaret,another suggestion: `(assoc 0 second-letter 1 first-letter)` - assoc is vararg
1321,1510267156.000114,Jonas,clojure is fun because you can often come up with a really concise readable version
1321,1510267156.000121,Daniell,`(let [[first-letter second-letter :as l] (vec w)] ... )` would do what you need I think? (edited to use `vec` instead of `seq` so `l` is a vector)
1321,1510267169.0004,Margaret,"you don't need seq there; but as he said, he showed that above"
1321,1510267217.000143,Daniell,"Oh, I didn't scroll back to see -- it's a _very_ long thread :wink:"
1321,1510267385.000384,Jonas,I think the main take aways are 1) name intermediate variables in a way that helps convey what you’re trying to do if possible 2) if possible try to write a solution that matches a declarative description of the problem. I think the other changes are less important.
1321,1510267423.000543,Daniell,"```(-&gt;&gt; [""hello"" ""world""]
     (mapv #(let [[first-letter second-letter :as word] (vec %)]
              (clojure.string/join (assoc word 0 second-letter 1 first-letter)))))```; (TIL recently: `str/join` uses `""""` if you omit the separator); `assoc`ing into a vector kinda bothers me... I think I'd do `(into [second-letter first-letter] (nnext word))` (and then you don't need the call to `vec`)."
1321,1510269701.000427,Ernesto,<@Daniell> first time I see this « let in map destructuring » coding style... pretty cool 
1323,1510283062.000159,Aletha,<https://www.reddit.com/r/Clojure/comments/7btc2k/who_owns_the_twitter_accounts_clojure/>
1324,1510285168.000013,Berry,"is there an example of clojure.spec-ing either SVG or HTML so if my 'hiccup data' passes the spec, it's valid HTML/SVG ?"
1325,1510300477.000221,Berry,"in standard usage of spec, when ::foo shows up in different maps (of the same namespace), is it expected that the value associated with ::foo will always be of the same 'shape' ?"
1325,1510304962.000311,Karolyn,"in spec the mapping of a qualified keyword to a spec (shape) is global by design, so yes."
1323,1510305012.000151,Karolyn,though you can make the spec match a set of pretty much arbitrary shapes if you’re set on doing that.
1325,1510305271.000136,Basil,"qqq: Well the value of ::foo must match whatever the spec behind ::foo says. You can use `spec/or` or similar for disjunction.; qqq: as for a hiccup ""spec"", I used <http://p.tarn-vedra.de/hiccup-spec.html> in the past. This also has the benefit of conforming to a nice tree that can be converted to html by a simple tree-walk. Note that `:tag` is just `keyword?`, you can extend htis and `:attrs` with better specs describing the set of allowed tags / attributes."
1326,1510324125.00003,Deana,Question about type hinting: I have code like: `(def ms-per-second 1000) (def ms-per-minute (* ms-per-second 60))` - I get a boxed math warning w/ that second def unless I use `(def ms-per-minute (* ^long ms-per-second 60))`. I'd like to type hint `ms-per-second` once where it's defined to avoid needing to type hint it everywhere it's used. Is that possible?
1326,1510324212.000335,Kareen,"yes; however if you want to avoid boxing, you should probably use `^:const` too"
1326,1510324311.000263,Deana,Could you please show me what that syntax looks like? I haven't been able to get any placement of the ^long hint to work. I get this error: java.lang.IllegalArgumentException: Unable to resolve classname: clojure.core$long@5aadb195
1326,1510324415.000378,Kareen,"in pseudo syntax, what's happening is w/o type hint: `Numbers.multiply (Long(60), (Long)ms-per-second.get())`, w/ type hint: `Numbers.multiply((long) 60, ms-per-second.get().longValue())`, w/ const `Numbers.multiply((long) 60, (long) 1000))`; yeah sure; just `(def ^{:const true :tag 'long} ms-per-second 1000)`; or `(def ^:const ^long ms-per-second 1000)`; the long tag is actually useless with const as the compiler will be able to infer it after inlining"
1326,1510324502.000054,Deana,Thank you very much
1327,1510325292.000195,Owen,"<@Mallory> that use case is very easy to handle with specter: `(transform [ALL (srange 0 2)] clojure.string/reverse [""hello"" ""world""])`"
1326,1510325490.000138,Owen,"a great example of using composition to avoid having to reinvent the wheel (in this case, string reversal)"
1328,1510326899.000243,Magdalena,can you type hint the return of a protocol function signature?; or do you have to do it at the call site?
1328,1510327261.000138,Kareen,sure; `(defprotocol P (f ^MyType [..]))`
1328,1510327529.000602,Magdalena,don’t know why I didn’t just try it lol
1329,1510328651.000264,Pauletta,Is there a proper channel for asking 1.9 questions? <#C1B1BB2Q3|clojure-spec> ?
1329,1510328925.000551,Berry,"is there anything special about `unq in
```
(s/def :unq/person
  (s/keys :req-un [::first-name ::last-name ::email]
          :opt-un [::phone]))

```

or is this literally the `:person` keyword in the `unq` namespace ?"
1329,1510329536.000483,Shamika,"`:unq` is the namespace part of the `:unq/person` keyword; there’s nothing really _special_ about it, it could be anything"
1330,1510330702.000021,Timmy,hey all. I need to set an Object’s field but I don’t know it’s name until runtime.; I’d like to do do: `(set! (.-field object) value)` but I have .-field as a String.
1330,1510330780.000268,Ted,"Thanks for this, I was actually including monitor.utils and still had problems. It turns out that it was because I was using CIDER’s refresh functionality (C-c C-x in emacs) instead of `clojure.tools.namespace.repl/refresh`! Still unsure as to why, but at least I found a way around it"
1329,1510331572.000683,Magdalena,"<@Berry> the single `:` syntax doesn’t presuppose any loading, so there’s no guarantee that unq maps to a namespace at all.  `::` will implicitly be a real namespace, as it will either be the current namespace or `::alias/foo` where `alias` will have to have been `require` `:as`’d."
1331,1510333192.000322,Rebeca,<https://docs.oracle.com/javase/tutorial/reflect/>
1331,1510334027.000351,Earlie,"Anyone know of a way to use ring or bidi to create a url with certain query params from a map?
Doing string concatenation feels wrong in this case. I'm trying to general an oauth redirect link."
1331,1510334677.000527,Kareen,"if they're about spec ask there, otherwise here is fine"
1329,1510334874.000495,Timmy,Thanks <@Rebeca> I was beginning to suspect I’d need to fall back on Java’s reflection.
1329,1510334889.000089,Rebeca,definitely with bidi you should be using one of its built in functions for doing that; path-for
1332,1510335807.000187,Demarcus,Is there a recommended way to use protobuf with clojure? The first few projects that come up after a google search don't seem to be actively maintained. I'm specifically looking for something that plays nice with repl dev
1333,1510342333.000106,Berry,"<@Magdalena> <@Shamika>: makes sense; thanks!; ```

(s/def :event/type keyword?) 
(s/def :event/timestamp int?) 
(s/def :search/url string?) 
(s/def :error/message string?) 
(s/def :error/code int?)

(defmulti event-type :event/type)

(defmethod event-type :event/search [_]
  (s/keys :req [:event/type :event/timestamp :search/url])) 

(defmethod event-type :event/error [_]
  (s/keys :req [:event/type :event/timestamp :error/message :error/code]))

(s/def :event/event (s/multi-spec event-type :event/type))

(s/explain :event/event
          {:event/type :event/search
           :event/timestamp 123456789
           :search/url ""<https://clojure.org>""})
```
can someone please explain to me why this is failing?

I don't understand the error of:

`val: {:event/type :event/search, :event/timestamp 123456789, :search/url ""<https://clojure.org>""} fails spec: :event/event at: [nil] predicate: event-type,  no method`; ah, it works now: the above code works fine; problem was, I initially defined the defmulti wrong, and then upon correction, it was not being redefined until I called a remove-ns"
1333,1510343838.00029,Shamika,you should join the <#C1B1BB2Q3|clojure-spec> channel too
1334,1510344066.00043,Pauletta,"So in working on an application which interacts with PSQL, I’ve setup some standard tooling which pulls dates out of the records and transforms them from sql times to jodatimes (because `clj-time` has this functionality).

However, in working with 1.9, the `inst?` operator expects a `java.util.date`. I’m curious if there’s been any public conversation around what timestamps clj should be using going forward, especially now considering there’s `java.time` in jdk 8, etc."
1334,1510344204.000185,Randee,<@Pauletta> `inst?` works just fine for `java.time.Instant`
1334,1510344919.00004,Daniell,"<@Pauletta> I think at this point I would switch to Java Time. I'm one of the maintainers of `clj-time` and we've been wrestling for a long time with the question of whether to migrate/produce a new version of `clj-time` on top of Java Time. The feeling is that we can't realistically do it in a compatible way and therefore we'd need a new artifact name (rather than change the API and/or semantics and violate the spirit of Rich's Spec-ulation talk) -- so it would be a ""new"" library altogether (similar to `clj-time`). But none of us have the time(!) or inclination for that, so I'm switching to `clojure.java-time` which is based on Java Time and that's what I'm recommending folks use.; I've introduced `clojure.java-time` at work and we're slowly migrating off our current combination of `date-clj` (for `java.util.Date` stuff) and `clj-time` (for Joda Time stuff)."
1334,1510345156.000274,Kathe,"hello world; i'm trying to use `spyscope` from <https://github.com/dgrnbrg/spyscope>.  Added the dependency to my `project.clj` but when I try and add `[require [spyscope.core as spy]` in my namespace, repl refuses to start.  The error is:

```
Exception in thread ""main"" clojure.lang.ExceptionInfo: Call to clojure.core/ns did not conform to spec:
In: [2] val: ((require [clojure.pprint :as pp] [clojure.string :as str] [clj-time.core :as time] [clj-time.format :as fmt])) fails spec: :clojure.core.specs.alpha/ns-form at: [:args] predicate: (cat :attr-map (? map?) :clauses :clojure.core.specs.alpha/ns-clauses),  Extra input
 #:clojure.spec.alpha{:problems [{:path [:args], :reason ""Extra input"", :pred (clojure.spec.alpha/cat :attr-map (clojure.spec.alpha/? clojure.core/map?) :clauses :clojure.core.specs.alpha/ns-clauses), :val ((require [clojure.pprint :as pp] [clojure.string :as str] [clj-time.core :as time] [clj-time.format :as fmt])), :via [:clojure.core.specs.alpha/ns-form], :in [2]}], :spec #object[clojure.spec.alpha$regex_spec_impl$reify__2436 0x3c7c886c ""clojure.spec.alpha$regex_spec_impl$reify__2436@3c7c886c""], :value (spyscope.core ""This co"" (require [clojure.pprint :as pp] [clojure.string :as str] [clj-time.core :as time] [clj-time.format :as fmt])), :args (spyscope.core ""This co"" (require [clojure.pprint :as pp] [clojure.string :as str] [clj-time.core :as time] [clj-time.format :as fmt]))}, compiling:(spyscope/core.clj:1:1)
```

any clues?  (oh, and I'm using clojure 1.9.0-RC1)"
1334,1510345960.000107,Daniell,<@Kathe> Which version of spyscope did you use?; 0.1.6 is the latest.; Looks like 0.1.6 includes the fix for the issue you saw above -- I see commits fixing the `ns` forms.; Although it looks like you may run into this <https://github.com/dgrnbrg/spyscope/issues/26> until the maintainer releases 0.1.7.
1334,1510346321.000245,Pauletta,"Good point. My above question was from a standpoint of what should I expect to be using in 6 months, etc.

Thanks for pointing this out!; This is great information. Thanks Sean. The debates we’ve had at work have been mostly the same, but having some indication from the maintainer of clj-time itself definitely helps."
1334,1510346492.000036,Daniell,"(that starts out as the bug you encountered <@Kathe> but notes there's a 0.1.6 release but that also has a blocking bug and the library needs a 0.1.7 release made, since the fix is already merged); `clj-time` will continue to be maintained, but it's much less useful now we have Java Time. I've been very happy with `clojure.java-time` so far in production code."
1335,1510355535.000175,Georgianne,"Hi; I’d like to experiment with program obfuscation and one part I’d like to do via term rewriting — does anyone have a favorite term rewriting library? It seems expresso and stratege and termito are the common ones; expresso seems to be focused on symbolic mathematical expressions, but I don’t think that really matters"
1334,1510364971.000016,Kathe,<@Daniell> i downgraded clojure to 1.8.0 and spyscope to 0.1.5.  all is well with the world (since i'm not really using spec yet).  once i'm done debugging i'll remove spyscope and revert to 1.9.0-RC1.  thank you so much!
1335,1510377662.000036,Kathe,is there any way to add log or println statements _inside_ a threading macro?  looks like it tries to pass the result (`nil`) to the next step.  I'd like for the log/print statements to just print the message but otherwise be ignored.
1334,1510378248.000038,Daniell,`(-&gt; stuff (doto (println)) more-stuff)` <@Kathe>
1335,1510378324.000015,Ava,<@Kathe> taoensso.timbre/spy can do that for you: `(-&gt; stuff spy more-stuff)` if you're already using timbre
1334,1510378358.000054,Daniell,"(but timbre drags in half the world so unless you're already using it, perhaps a sledgehammer to crack a nut?); _and I say that as someone who uses timbre in production_"
1334,1510378416.000011,Ava,"yeah, me too. timbre is .... blunt. but I've found it to be slightly more sane the everything else.; and if you don't have timbre, `(def spy #(do (prn %) %))` gets you most of the way there"
1334,1510378488.000002,Daniell,"<@Ava> The big plus of timbre for me is that with plugins it can hijack *all* logging and filter it through _one_ place. Otherwise, it's really a pain in the butt."
1334,1510378528.000001,Ava,"that's exactly my use case. it took me a bit of time to configure correctly, but I can manage all of my logging in the JVM world via timbre and even configure it at runtime easily"
1334,1510378541.000065,Daniell,"We were using bare `tools.logging` at first and that was super fragile, with log4j, so we backed off to just `println` for a while, and then switched to timbre, and we're still not happy.; It's like logging is just a horrible problem and timbre is the least bad of many solutions?"
1334,1510379285.000015,Kathe,"<@Daniell>, <@Ava>: thank you for the suggestions.  i'll look into timbre (it seems.. a lot)"
1335,1510379326.000011,Kathe,"for now, i tried the `doto`, `prn`, and `spy` suggestions but none seem to work.  here's a minimal example:

```
(defn foo0 [x]
  (-&gt;&gt; x
       (* 2)))

(defn foo1 [x]
  (-&gt;&gt; x
       (doto (println))
       (* 2)))

(defn foo2 [x]
  (-&gt;&gt; x
       (spy ""doing the thing with the thing"")
       (* 2)))
```; the function call immediately after the log statement fails with either a cast or arity error."
1335,1510383816.000025,Giovanna,<@Kathe> I wrote tiny library for this <https://github.com/madstap/hugin>
1336,1510383850.000001,Giovanna,It's for exploring at the repl and not a logging library though
1335,1510383986.000063,Giovanna,"```
(require '[hugin.dbg :as dbg])
(defn foo [x]
  (-&gt;&gt; x
       (dbg/p&lt; ""Doing the thing with the thing"")
       (* 2)))
```
should work."
1337,1510385807.000014,Daniell,"Use `-&gt;` not `-&gt;&gt;`; `-&gt;&gt;` inserts the expression at the _end_ of the form. You want the expression inserted as the _first_ argument, not the last."
1338,1510408239.000102,Chang,"hmm, dissoc does not work on vectors. what's the simplest way to remove an element from a vector (by index)?"
1338,1510410381.000033,Adele,<@Chang> this works: <https://stackoverflow.com/a/18319708/4839573>
1339,1510411795.000091,Randee,Just for fun: Writing ansible config in CLJ: <https://gist.github.com/rauhs/a72cfbeef4c80f9a58480484c49e7a51>
1340,1510419005.000074,Catharine,"hmmm, i think i broke my repl environment, but i have no idea how to debug it.

when refreshing, it throws exceptions on the `(:require ...)` statements of some files that it cannot find certain modules, where they clearly are defined. after some fierce debugging i was able to get things refreshing, but now my webserver's handlers are suddenly undefined (getting ""java.lang.IllegalStateException: Attempting to call unbound fn:"" errors)

i _think_ something is very wrong somewhere, but i'm unable to pinpoint the issue. sounds like some dangling references / things not getting properly refreshed.

any suggestions ?; it's worth noting that `lein run` and the uberjar created with `lein uberjar` run fine; so i think there's definitely something wrong with my reloaded flow somewhere"
1339,1510421517.000061,Pearlene,"I just put together <https://github.com/gfredericks/dot-slash-2>, to address some problems with <https://github.com/palletops/lein-shorthand>"
1341,1510428462.000084,Necole,"How best to loop over some data and assert it's valid? I tried putting asserts in a doseq but getting strange results: when there is an exception, that iteration is not called."
1341,1510429443.000027,Daniell,<@Necole> can you expand a bit on what you're trying to do? Perhaps share some code?
1341,1510430749.000086,Necole,"Sure, let me try and come up with a minimum repro; Nevermind, I can't reproduce. I'm basically doing:
```
(doseq [i [1 2 3 4 5]]
  (println i)
  (assert (&lt; i 4) ""Too big!""))
```
but with something more complicated.; Error is being swallowed somewhere else probably.; Open to hearing about any better patterns for this sort of thing."
1342,1510440683.000013,Valorie,"Does anybody have experience using Akka via okku? The design looks ok, documentation decent, and it shows up in a ""Clojure Programming Cookbook"", but the original author admits in a PR comment that it was more of a proof of concept and that he never really used it (as of 2015, at least)."
1343,1510460431.000015,Tyisha,"<@Judy> I've been told I should ask you about this. I'm trying to get lein-droid to work and it's having a ClassNotFoundException, not able to find the GenericVersionScheme class from org.sonatype.aether/aether-util. Is there a good alternative to building clojure for droid these days?"
1343,1510462523.000028,Daniell,<@Tyisha> You might check the <#C07JPKQ5S|clojure-android> channel as well. Not sure how active it is...
1343,1510462700.000049,Tyisha,Thanks. I'll check it out. It wasn't visible to me at first.
1343,1510462873.00002,Daniell,We have a *lot* of channels here. It can be hard to navigate sometimes!
1344,1510466294.000056,Lenita,Java interop question: I would like to take the results of a datomic query and construct a java object with them. Rather than doing `(MyObj. (first result) (second result))` I would like to use apply to pass the arguments to the constructor of MyObj. However when I try to do that I get a compiler error. I'm guessing that just means that the . constructor is not actually a function. Is there a clean way to do this?
1344,1510466784.00004,Daniell,<@Lenita> The only thing that comes to mind is to write a Clojure wrapper for your constructor: `(defn my-obj [a b c d] (MyObj. a b c d))` or whatever you need and then you should be able to `(apply my-obj result)`
1344,1510468237.000036,Lenita,<@Daniell> i think i'll do the inline version of that `(apply #(MyObj. %1 %2 %3) results)` which is definitely less awkward than what I had before. thanks!; what is the best way to handle a function in a pipeline that expects the piped value as the first arg when all the others expect it as the last arg. Is there a nice way to use an anonymous function to do that?
1344,1510472203.000035,Terra,<@Lenita> you can use `as-&gt;` (<https://clojuredocs.org/clojure.core/as-%3E>) if functions expect the argument to be at different positions
1344,1510472512.000028,Lenita,<@Terra> thats awesome. thanks.
1344,1510474760.000048,Daniell,"<@Lenita> You can start with `-&gt;` and have a nested `-&gt;&gt;` for the ""last"" position and then your first position expression (and then another nested `-&gt;&gt;` if you need it)."
1344,1510478186.000009,Lenita,<@Daniell> that seems like a good solution too. I like that with `as-&gt;` I can call out a name to help my readers follow the transformations through the pipeline.
1345,1510482527.000051,Lieselotte,"hi! is there a command in CIDER to ""jump to a namespace""? (I type the namespace and it opens it in a buffer); ah found it: cider-browse-ns-all"
1345,1510489090.000067,Kristy,"<@Lieselotte> also `cider-find-var` does the job. I place the cursor over a namespace (in the `:require` section), or simply over an interesting fn/var elsewhere

this code avoids being redundantly prompted:

```
(defun jump-to-clojure-definition ()
  (interactive)
  (let* ((old cider-prompt-for-symbol))
        (setq cider-prompt-for-symbol nil)
        (cider-find-var)
        (setq cider-prompt-for-symbol old)))
```"
1345,1510493115.00006,Terra,there's also `cider-find-ns`
1346,1510504243.000051,Kyung,"I’m trying to follow Carin Meier’s lein-jupyter walkthrough of the cats and dogs challenge.  I’m stuck getting the jupyter notebook to launch without throwing an exception (I assume can’t find the clojure kernel, which is installed).... ?"
1346,1510504372.00001,Bibi,"<@Kyung> try the <#C0BQDEJ8M|data-science> channel, Carin's active there."
1347,1510505154.000013,Berry,"is there a simpler way of writing (def color-regex #""^#[0-9a-z][0-9a-z][0-9a-z][0-9a-z][0-9a-z][0-9a-z]"")
 -- I need this to work in a cljc file, so it needs to work in both js and jvm"
1347,1510505907.000045,Eloisa,"will `re-pattern` help?
`cljs`: <https://crossclj.info/fun/cljs.core.cljs/re-pattern.html>
`clj`: <https://clojuredocs.org/clojure.core/re-pattern>"
1347,1510505979.000088,Willow,javascript allows for `{n}` so you could do `#^[0-9a-z]{6}`; and i imagine that jvm supports that as well
1347,1510506164.000072,Eloisa,I misunderstood ... +1 to what dan said above ^
1347,1510506642.000133,Willow,"if you want something that looks a bit more explicit and you don't like regex syntax you could do something like `(let [digits (repeat ""[0-9a-z]"")] (re-find (re-pattern (clojure.string/join (take 6 digits))) ""aaaaaa""))`"
1348,1510516310.000037,Bronwyn,Re: `clojure.jdbc` - Does using `with-db-transaction` close the connection after it's finished? It's not immediately obvious from the API documentation
1349,1510518780.000016,Lieselotte,"hi! in a clojure doc string, how to refer the reader to another function? similar to what can be done in javadoc as {&lt;AT SIGN&gt;link Whatever}"
1349,1510519057.000019,Kristy,"<@Lieselotte> with backticks, normally clojure-mode will syntax-highlight it"
1349,1510519535.000092,Lieselotte,<@Kristy> thanks!
1348,1510519885.000006,Cherelle,<@Bronwyn> You might try <#C1Q164V29|sql>.
1350,1510523053.000034,Berry,<@Willow>: [0-9a-f]{6} is perfect
1348,1510529059.000059,Daniell,"<@Bronwyn> Sorry, only just saw your question. Yes, `with-db-transaction` closes the connection as well as committing the transaction (or rolling it back if there's an exception)."
1351,1510543144.000041,Pamela,"Hello. I am learning clojure, lambda calculus, computation theory and architectural design"
1352,1510558432.00027,Danyel,"Well Clojure is a good place to start for this, except maybe computation theory :)"
1348,1510558651.000188,Verna,"<@Bronwyn> there is  built-in feature to re-use connections: <http://clojure-doc.org/articles/ecosystem/java_jdbc/reusing_connections.html#using-connection-pooling>

also, check for special libraries that manage connection pooling. We use <https://github.com/tomekw/hikari-cp> in our Postgres-driver Clojure project.; <@Bronwyn> moreover, take a look at conman library. It’s a mixture of HugSQL + connection pooling + small details that make everything work fine. <https://github.com/luminus-framework/conman>"
1353,1510568944.000015,Misti,"Hey guys,
4Clojure problems updated on Clojurecademy - <https://clojurecademy.com/courses/17592186045426/learn/syllabus>"
1353,1510570128.000382,Mallory,"hi guys; what is the wrong with this code <https://gist.github.com/aibrahim/f48b8d35eaa4e63013dd66e07fce47cc>
StackOverflowError   java.math.MutableBigInteger.divide (MutableBigInteger.java:1153); why clojure breaks for recursion like this; ?"
1353,1510570277.000488,Cora,"You're not using tail recursion, so the stack will explode. And I think you're using ""normal"" integers alongside bigints. It may be out of date, but this could be helpful <https://dev.clojure.org/display/design/Documentation+for+1.3+Numerics>; I doubt it will fix it but you could try adding an `M` suffix to your numbers like `(/ n 2M)`. But you may want to redesign your algorithm to use the `recur` form in the tail position. <https://clojuredocs.org/clojure.core/recur>"
1353,1510570450.000235,Mallory,why recursion like this not working in clojure?
1353,1510570475.000367,Hedwig,"<@Mallory> also your code will logically never return, if you run `(fast-fib 5)`, you will never reach the the case `n=0`; you always divide the argument by two and call it again"
1353,1510570501.000275,Mallory,"works; user=&gt; (fast-fib 3)
[2 3]
user=&gt; (fast-fib 10)
[55 89]
user=&gt; (fast-fib 5)
[5 8]; only added 2M as olical suggested; user=&gt; (fast-fib 100)

ArithmeticException integer overflow  clojure.lang.Numbers.throwIntOverflow (Numbers.java:1501)"
1353,1510570533.000046,Hedwig,should not work...
1353,1510570554.000082,Cora,"Because you're not using `recur` in the tail position though, it will blow the stack at some point."
1353,1510570635.000041,Hedwig,"```
(defn fast-fib [n]
  (if (== n 0)
    [0, 1]
    (let [[a, b] (fast-fib (int (/ n 2)))
          c (* a (- (* b 2) a))
          d (+ (* a a) (* b b))]
      (if (zero? (mod n 2))
        [c, d]
        [d, (+ c d)]))))
```; you have to do integer coercion; otherwise you never reach the end, tail recursion is not the main problem here"
1354,1510577808.000324,Adelaida,"A couple nit-picky points about your code: you can omit the commas (they are whitespace in Clojure) and your `(zero? (mod n 2))` is equivalent to `(even? n)`. Not a big deal in either case though. :simple_smile:; <@Mallory> - In case that wasn't obvious, he put a call to `int` around the `(/ n 2)`. `(/ 1 2)` evaluates to `1/2` (the fraction), but `(int (/ 1 2))` evaluates to `0`."
1355,1510585899.000024,Marnie,"if I have :profiles :dev in my project.clj, under what conditions does that profile take effect by default without my explicit use of with-profile ?"
1356,1510588098.000852,Johana,Why doesn’t `run!` take an init argument?
1356,1510588239.000446,Guillermo,"because `run!` is about consuming each element individually, not accumulating"
1356,1510588286.000229,Johana,"ok, I needed some state in my `proc` (alternating boolean), so I just used `reduce`; could have used `map-indexed`, but doesn’t matter I guess"
1356,1510588616.000034,Randee,<@Johana> If it's a vector you can use `reduce-kv` and check for `even? / odd?` to get alternating booleans
1356,1510588641.000422,Johana,"in hindsight I couldn’t use the index at all, because it depends…; so I need reduce for sure, but don’t need the end result.. hence my question :slightly_smiling_face:; then again, the end result is a boolean, so who cares."
1357,1510592975.000112,Kathe,"I have a strange situation.  A function works as expected in repl (freshly started, no old state build up) but not from a compiled uberjar.

```
(defn print-router-config [rcfg]
  (log/info ""printing router config"")
  (println rcfg)
  (let [cfg (:customer-router-config rcfg)
        fname (str (:region account) ""_"" (:alias account) ""_"" (:virtual-interface-id rcfg) ""_"" (:location rcfg) "".txt"")]
    (spit fname (xml-&gt;json (xml/parse (java.io.ByteArrayInputStream. (.getBytes cfg)))))))


(defn download-router-config [account]
  (log/info ""doing the thing"")
  (let [cfgs (get-router-configs account)]
    (println ""should map print over cfgs now"")
    (println (type cfgs))
    (println (count cfgs))
    (println (type (first cfgs)))
    (map print-router-config cfgs)))
```

the `print-router-config` function doesn't get called over `cfgs`.  any pointers appreciated.."
1357,1510593371.00002,Rebeca,map is lazy
1357,1510593970.000463,Giovanna,You can simply replace `map` with `run!`
1357,1510594148.000402,Kathe,"thanks <@Rebeca>, <@Giovanna>!  obviously i don't really understand laziness.  reading <https://stuartsierra.com/2015/08/25/clojure-donts-lazy-effects> now.  any other resources/books that may help with clarity?; `run!` did the trick!! yay. thank you so much."
1358,1510603093.000411,Leonida,"Apologies if this is the wrong channel, but is anyone else having trouble accessing <http://jarkeeper.com/>?  I'm getting an ""Origin DNS error"" message from CloudFlare."
1358,1510603160.000124,Daniell,<@Leonida> Maven Central reported a DNS issue that seems to have screwed a lot of build systems up...; <https://twitter.com/sonatype_ops/status/930138391005589505>
1358,1510603181.000294,Leonida,"Ah ok - jarkeeper uses central for some of its info, I presume?"
1358,1510603206.000316,Shira,"Jarkeeper is down at the moment, it's been down for a few weeks now"
1358,1510603213.000789,Daniell,"I was seeing Travis builds failing all over the place this morning (while trying to release a new version of `clj-time`).; Oh, so this is unrelated? OK, I'll get back in my box... :smiling_imp:"
1358,1510603252.000491,Shira,<@Leonida> I just announced <https://versions.deps.co/> which provides the same service as Jarkeeper (and was forked from it)
1358,1510603269.000588,Leonida,"Thanks <@Shira>!; I'm a big fan ""public self shaming"" as a motivation technique.  :wink:; Jarkeeper-type tools are great for this."
1359,1510608762.000621,Olen,"When I deploy my release to clojars, printing `Failed to deploy artifacts/metadata: Cannot access releases with type default using the available connector factories: BasicRepositoryConnectorFactory``; What is that mean ?"
1359,1510609091.000012,Candi,What tool are you deploying with?
1359,1510609269.000296,Olen,leiningen.
1360,1510613754.000351,Marnie,which profile in project.clj is the one that is distributed in a clojars dependency?
1361,1510656430.000108,Lily,"Can it be that clojure spews out `clojure.lang.LazySeq@1f` file-directories when useing `io/file` within for loop. Wondering how I can prevent this.; This is in the target directory, so maybe this is expected?"
1361,1510656711.000169,Danuta,`for` produces a lazy sequence
1361,1510656857.000082,Lily,"yes, but what explains these directories
```
$ ls target/
clojure.lang.LazySeq@1f        clojure.lang.LazySeq@316eef    clojure.lang.LazySeq@92aa04bb  src
clojure.lang.LazySeq@30b541e8  clojure.lang.LazySeq@712f77fe
```; useing doall did not prevent this"
1361,1510657012.000317,Danuta,possibly something is getting a name for a directory by calling `str` on the lazy sequence
1361,1510657083.000435,Lily,"yes that's right, I call `.isAbsolute` `.exists` `.getPath` and `.getName`.; well, maybe this is harmless and I just let them be or remove them when needed.; even more percice, this is inside the lazy sequence
`(io/file (str proj sep) classp)`"
1361,1510657396.0005,Danuta,why the `(str proj sep)`?
1361,1510657428.000158,Lily,"yes it's stupid, should only be proj and classp.; here's the function <https://pastebin.com/B3vtXJJH>"
1362,1510658745.00007,Tameka,"hello. I’m trying to do a simple http call using using `clj-http` package:
```
(defn -main
  []
  (client/get ""<https://jsonplaceholder.typicode.com/users>""
              (fn [response] (println response)))```; and I’m getting the following error; ```Exception in thread ""main"" java.lang.RuntimeException: EOF while reading, starting at line 4, compiling:(samsing/core.clj:10:1)```"
1362,1510658814.00042,Lily,missing a closing parenthesis there?
1362,1510658851.000193,Tameka,ah damn it :smile:; I feel so stupid haha
1362,1510658872.000302,Lily,been there :wink:
1362,1510658914.000162,Tameka,"thank you, that solved it; and one more question :smile: it doesn’t seem to decode to json, no matter what option I pass; for example I’m doing the following; ```client/get url {:async? true :as :json} handle-response handle-exception```; nvm, this solved it:
<https://stackoverflow.com/questions/37264250/clj-http-not-returning-json>"
1363,1510665008.000515,Sommer,"I'm looking for a debugging library I saw recently (on reddit, probably), but can't seem to find it now. I only looked at it for a moment, but I believe it involved one or more macros for writing values to an atom. Something like that.
Anyone know what I'm talking about?"
1363,1510665553.000328,Giovanna,"I put my lib in <#C06MAR553|announcements> recently, and it involves some functions for putting stuff in an atom. They're not macros though, just functions. Lib: <https://github.com/madstap/hugin>
Blog post: <https://madstap.github.io/posts/dbg/>"
1363,1510665626.000189,Sommer,"That's it! thanks. I checked <#C06MAR553|announcements>, before posting this, but I guess I missed it.; I used to use spyscope (but it stopped working for me??), then I wrote sayid, but sometimes I still use `def` and `pprint`. Some of those times, I think I want something like hugin."
1364,1510666849.000101,Lois,"is there any way to ""transduce"" this?  
```(frequencies
   (reduce #(if (not (nil? (:samplevalue %2)))
                          (conj %1 (.intValue (:samplevalue %2)))) []
                       (qos/device-qos-range origem device qos alvo inicio fim))) ```; device-qos-range returns collection of numbers; [1 2 3 100 200 ...]"
1365,1510667319.000535,Giovanna,Looks like slack swallowed it...
1364,1510667669.000427,Eliana,"literally, more or less this:
```
(frequencies
  (eduction
    (keep :samplevalue)
    (map (memfn intValue))
    [{:samplevalue 3.1} {:samplevalue 2} nil]))
```; you have the `:samplevalue` to deal with"
1364,1510667711.000057,Giovanna,"Yeah, def and pprint work great, but you have to put them in a `do`. Apart from the debug atom, hugin has `def&lt;` and `pp&lt;` respectively that you can wrap around an arbitrary expression without changing how the code works."
1364,1510667875.000304,Eliana,"(update, just added)"
1364,1510669214.000486,Lois,"<@Eliana> Thanks, I´ll try it"
1366,1510669305.000305,Lois,why `frequencies` does not be in `transduce` args?
1364,1510669337.000712,Eliana,there is no frequencies transducer
1366,1510669369.000192,Lois,"it´s so confuse :neutral_face:; so `keep` and `map` are ""transdusible"" ?"
1366,1510669495.000446,Erlinda,they provide an arity that returns a transducer
1367,1510673000.000159,Laci,Has anyone ever used docjure for Excel file generation? Having an issue where even though I specify `:data-format` it doesn't ever get applied to the generated file.
1366,1510673590.000261,Eliana,"actually `frequencies` is the reducing step here <@Lois> so you can compact everything into:
```
(transduce 
 (comp 
  (keep :samplevalue) 
  (map (memfn intValue))) 
 (completing #(assoc! %1 %2 (inc (get %1 %2 0))) persistent!) 
 (transient {}) 
 [{:samplevalue 3.1} {:samplevalue 2} nil])
```"
1366,1510673721.000244,Lois,"<@Eliana> about performance, what do you think is most performatic?"
1368,1510673955.000305,Candie,"Does anyone know of a way to get the frame-local variables printed during stacktraces?; I've done a little googling, and read some of `clojure.stacktrace`, but nothing seems promising."
1366,1510674418.000517,Eliana,how big is input coll?
1366,1510674521.000555,Terra,"I don't think this is possible.
<https://stackoverflow.com/questions/4620430/getting-local-variables>"
1366,1510674644.000008,Candie,"Ahh, good point.; I've never attempted to extend Throwables, a la `slingshot`, but maybe that would be the way to go: create Throwables that automatically capture their local variables."
1366,1510674925.000798,Lois,9k; <@Eliana> too much isn´t? It´s a timeseries informations
1366,1510675176.000201,Eliana,not particoularly I guess...; so the benchmark are roughly the same
1366,1510675374.000838,Candie,"This blog seems to have some of the answer, from a frame-local-variables perspective:  <http://blog.element84.com/debugging-clojure-with-jdi.html>"
1366,1510675600.000336,Berry,"in a cljc file, I have;; ```
            #?(:clj [b.acompat.macro :refer [read-at-compile-time]]
               :cljs [b.acompat.macro :refer-macros [read-at-compile-time]])
```

^-- can this be simplified ?"
1369,1510675795.000752,Malka,"<@Berry> narrow the reader conditional to the `:refer` / `:refer-macros` (as far as I can tell, that's the only difference)"
1369,1510675900.00038,Johana,How do I get this to work? `(clojure.java.shell/sh “rm” “/tmp/out/*“)`
1366,1510675916.000166,Johana,The wildcard doesn’t work
1369,1510675976.000519,Berry,"<@Malka>: maybe this is asking too much, but it seems that at compile time, it should be possible to infer if a symbol if a function or a macro, and have it behave accodingly"
1366,1510676019.00009,Malka,<@Berry> are you the author of the `b.acompat.macro` namespace?
1369,1510676050.000279,Berry,<@Malka> I am author of the b.acompat.macro namespace
1366,1510676139.000506,Johana,"ok, `(clojure.java.shell/sh ""bash"" ""-c"" ""rm /tmp/out/*"")` works"
1366,1510676277.000208,Malka,<@Berry> there's a cljs feature called 'implicit macro loading'; add `#?(:cljs (:require-macros [b.acompat.macro]))` to your `b.acompat.macro` ns form and you can `:refer` your macros as usual
1366,1510676408.000675,Berry,"<@Malka>: are you suggesting:
```
;; foobar/macro.cljc
(ns foobar.macro 
  #?(:cljs (require-macros [foobar.macro])))


(defmacro black-magic [ ...])

;; other/code.cljc
(ns other.code
  (:require [foobar.macro :refer [black-magic]]))




```
?"
1366,1510676487.000768,Malka,"yes (minor nitpick: it should be `:require-macros`, with the colon)"
1366,1510676581.000174,Berry,<@Malka>: thanks; this is interesting; I will try it out once my cljs code compiles again
1366,1510677531.000348,Adelaida,"Oh right, this reminds me that wildcards are a creature comfort provided by shells. :simple_smile:"
1370,1510680300.000511,Johana,Why does `=` accept one argument?
1370,1510680412.000528,Guillermo,"because of `apply`; you can apply multiple args, so what is so special about one arg"
1370,1510680626.000677,Candie,Maybe because of transducers?
1370,1510680648.000849,Kareen,no
1370,1510680960.000521,Candie,Fair enough
1370,1510681351.000727,Sophie,Question: How do people feel about memoizing a function that performs IO to get something out of a database?; Does that raise red flags for anyone in and of itself?
1370,1510681416.000366,Eliana,"<@Lois> Depending how important speed is, the parallel solution is twice as fast, at the price of the increased complexity. I collected all in a gist: <https://gist.github.com/reborg/37c76a61c9a60ddae8de737170e2e675>

Before going parallel like this tho (with mutation, side-effects and whatnot), I'd carefully weight pro and cons. The very first solution with `frequencies` and `eduction` was easy to read and good 98% of the use cases."
1370,1510681456.000381,Berry,How do you analyze if the query is pure of makes updates ?
1371,1510681670.000764,Lois,<@Eliana> thanks a lot for your help
1371,1510681701.000109,Eliana,"no worries, all useful stuff :slightly_smiling_face:"
1370,1510681703.000079,Lois,I used the second solution in my code
1370,1510681800.000425,Myles,like so many things it depends
1371,1510681811.000472,Myles,depends on how often you're writing to the db; depends on the load; depends on whether having the latest info is critical; depends on how important speed is
1370,1510682159.000398,Sophie,"I’m thinking of this from a readability / obviousness perspective for the benefit of the human reading the code down the road.; Right now the application should only need to read the data once for the duration of the app.; And I’m thinking of memoizing the function to keep things cleaner, so I don’t need to add yet one more thing to my global config; But down the road, it’s possible that I would need to read from the DB more than once per application run.; And I’m wondering if 6 months, a year from now, I would remember that the function was memoized, or if I would tear my hair out wondering why it isn’t reading new data in the DB; :slightly_smiling_face:; anyway, just seeing if people have experience or strong opinions about this sort of thing"
1371,1510682452.000516,Myles,I would certainly avoid adding this until it's necessary
1370,1510682475.000819,Berry,"I'm trying to write a function that converts an unqualified keyword to a qualified keyword. I have this so far:
```
(defn qkw [kw]
  (keyword (str (ns-name *ns*))
           (str (name kw))))
```

unfortunately, it doesn't work in cljc as *ns* is undefined in cljs

is there a way to make this work in cljs too ?"
1371,1510682477.000315,Myles,too often I see myself to 'clever' stuff and then confuse myself the next day
1370,1510682828.000061,Sophie,"haha, true story; yeah, that’s why I was hesitant about this; “Oh, memoizing is this clever, useful thing!  I’ll use it!”  But I’m not confident that it won’t burn me down the road"
1370,1510683321.000409,Herlinda,I had to spin up a clojurescript repl to see it for myself and yep calling `*ns*` returns `nil`
1370,1510683344.00004,Filomena,"I tried to post a message to the google group yesterday, but it hasn't appeared. It's possible that it got hung up in moderation; any moderators around?; It's also possible that pressed the wrong button at some point."
1370,1510683782.00037,Herlinda,<@Berry> try this out `(defn qkw [kw] (keyword (namespace ::_) (str (name kw))))`
1370,1510684268.000031,Berry,"that almost works, except ::. gets us the namespace where qkw is defined, not where qkw is called"
1370,1510684558.000398,Micha,"<@Filomena> I am one moderator of Clojure Google group.  No messages are waiting for moderation approval right now.  There are other moderators, so someone else may have seen it and made a reject decision on your message without me seeing it, but if your message was about Clojure, it shouldn't have been rejected."
1370,1510684586.000497,Filomena,"<@Micha> ok, thanks; I'll resubmit and be very careful about which button I press this time."
1370,1510684995.000078,Herlinda,ah yes...more hammock time needed
1370,1510685554.000832,Berry,"<@Herlinda>: maybe 
```
(defmacro qkw [kw]
  `(keyword (str (namespace ::foo))
            (str (name ~kw))))
```"
1372,1510686079.000678,Earlie,"Is there any good way of creating an anonymous function which doesn't accept any arguments? I need to be able to create them nested.
```
#(function/one :alpha (partial function/two :bravo))
```
Using partial with full arguments works, but it doesn't feel right."
1372,1510686322.000119,Jonas,"<@Earlie>, you can’t nest `#(...)` anonymous functions, but you can nest the `(fn [] ...)` form"
1372,1510686382.000784,Earlie,"Yeah, I know I can just nest fn calls. Was just curious if there was a core function for this type of thing."
1372,1510686383.000487,Jonas,so either `(fn [] (function/one :alpha #(function/two :bravo))` or `(fn [] (function/one :alpha (fn [] (function/two :bravo)))`
1372,1510686411.00045,Earlie,(A core function that allowed creating nested thunks)
1370,1510686414.000017,Herlinda,<@Berry> doesn't seem to work at the repl for me
1372,1510687045.000177,Natosha,<#C055AMK5Y|clojure-brasil>
1372,1510687226.000342,Herlinda,"<@Berry> I'm not the best at writing macros and especially calling them from cljs namespaces, but I think you might be on the right track; I pasted your macro into a clj file and then called `(require-macros '[my-ns :refer [qkw]])` at the figwheel repl and it but when I call `(qkw :foo)` I get `:my-ns/foo`; so even with the macro it is still giving you the ns where it is defined and not where it's called. I'm not the best at writing macros so maybe it just needs to be tweeked"
1373,1510691944.000322,Kathie,"hey guys, I'm dealing with this strange issue -- when i call `(keys my-map)` the key `:example-key` is included in the results; however, when i log `(:example-key my-map)` i get nil; and when i print out `my-map` the key is nowhere to be found"
1373,1510692008.000658,Willow,what does `(:example-key my-map ::its-not-there)` return?
1373,1510692044.000412,Kathie,"it returns not-there; so all evidence points to the key not existing in the map, except for the `keys` function; also to be clear, i have code that's supposed to add that key and value to the map, so it not being there is problematic; not sure what could be causing this behavior"
1373,1510692139.00033,Willow,is it a record by any chance?
1373,1510692153.000423,Kathie,"it's reframe app-db; which i thought was just an atom; it's a `reagent/atom`; ```app:cljs.user=&gt; (:search-lol @re-frame.db/app-db ::but-why?)
:cljs.user/but-why?
app:cljs.user=&gt; (keys @re-frame.db/app-db)
(:schema
 :errors
 :audio-label
 :audio-player
 :loaded
 :duration
 :routes-initialized?
 :search-lol
 :token
 :active-page
 :models
 :status
 :path-array
 :file-download
 :playing
 :position 
 :page-query 
 :audio 
 :url-data 
 :location 
 :user 
 :audio-type)``` here's the code incase i'm doing something obviously dumb"
1374,1510692708.000281,Adelaida,What is `(type @re-frame.db/app-db)`?
1373,1510692722.000479,Kathie,cljs.core/PersistentHashMap
1373,1510692734.000078,Amado,its possible to get the current localized datetime without any libs in clojure
1374,1510692735.000013,Amado,?
1373,1510692803.000415,Adelaida,<@Kathie> - How about `(let [db @re-frame.db/app-db] (prn 'keys (keys db)) (:search-lol db :no-dice))` (to be sure the value isn't changing out from under you)?
1373,1510692834.00046,Jonas,"what does `(-&gt;&gt;(keys @re-frame.db/app-db) (map name))` show?; you can make a keyword with a space in it; it might not be it, but might explain the weird behaviour"
1373,1510692865.000153,Kathie,"```app:cljs.user=&gt; (let [db @re-frame.db/app-db] (prn 'keys (keys db)) (:search-lol db :no-dice))
keys (:schema :errors :audio-label :audio-player :loaded :duration :routes-initialized? :search-lol :token :active-page :models :status :path-array :file-download :playing :position :page-query :audio :url-data :location :user :audio-type)
keys (:schema :errors :audio-label :audio-player :loaded :duration :routes-initialized? :search :token :active-page :models :status :path-array :file-download :playing :position :page-query :audio :url-data :location :user :audio-type)
:no-dice
app:cljs.user=&gt; keys (:schema :errors :audio-label :audio-player :loaded :duration :routes-initialized? :token :active-page :models :status :path-array :file-download :playing :position :page-query :audio :url-data :location :user :audio-type)
```; not sure why it printed 3 times"
1373,1510692885.000461,Jonas,"checking for something like `(keyword ""search-lol "")`"
1373,1510692906.000097,Kathie,"```app:cljs.user=&gt; (-&gt;&gt;(keys @re-frame.db/app-db) (map name))
(""schema""
 ""errors""
 ""audio-label""
 ""audio-player""
 ""loaded""
 ""duration""
 ""routes-initialized?""
 ""search-lol""
 ""token""
 ""active-page""
 ""models""
 ""status""
 ""path-array""
 ""file-download""
 ""playing""
 ""position""
 ""page-query"" 
 ""audio"" 
 ""url-data"" 
 ""location"" 
 ""user"" 
 ""audio-type"")```"
1373,1510692923.000383,Jonas,¯\_(ツ)_/¯
1373,1510692935.000265,Kathie,"also this is the db that i reset! the atom to for it to get in this state; ```(-&gt; db
          (assoc-in [:status :search-results-fetch audio-type] :success)
          (assoc-in [:search-lol :search-results] results))```; seems pretty straightforward to me so i dunno whats up; note: db doesn't start with `(-&gt; db :search-lol :search-results)` existing"
1373,1510692988.00035,Adelaida,"My next guess was unicode weirdness, but if you typed in `:search-lol` in the `assoc` then that's surely not it."
1373,1510692990.000531,Kathie,"i assume assoc-in automatically creates a map for them; yea; and it does automatically create the nested maps: ```app:cljs.user=&gt; (assoc-in {} [:test :nested] true)
{:test {:nested true}}```; so im at a complete loss"
1373,1510693180.000316,Adelaida,<@Amado> - Should be able to use the Java date/time API without any libs. <https://docs.oracle.com/javase/tutorial/datetime/iso/index.html>; <@Kathie> - you've stumped me! ¯\_(ツ)_/¯
1373,1510693264.000748,Kathie,"thanks for trying lol, i have no idea what could be the issue"
1373,1510693312.000464,Jonas,"what does that print?```(let [db @re-frame.db/app-db]
  (doseq [k (keys db)]
    (prn k (= k :search-lol) (contains? db k) (get db k ::not-found))))```; just added `(= k :search-lol)` as something to print"
1373,1510693603.000453,Kathie,"ok so this is really strange; prn prints the results twice, and the first time it prints it, :search-lol is there; `:search-lol true true {:search-results [{:au...`; but then it start printing everything again and an old key that should no longer be in there got printed out too"
1373,1510693723.000488,Jonas,how are you printing the value?; ie. are you using a repl; or putting it as a top level form in a cljs file
1373,1510693758.000222,Kathie,repl; lein fighwheel in intellij
1373,1510693917.0001,Jonas,seems like the app + dev tools might be in a weird state
1373,1510693930.000312,Kathie,yea lemme restart it
1373,1510693991.000458,Jonas,there are something things can cause a figwheel refresh; where it will rerun all the top level forms in your code; like saving a file; maybe there’s something with autosave and not having the state setup to make figwheel happy (eg. using `(def state (atom {}))` instead of `(defonce state (atom {}))`
1375,1510694793.000004,Lonna,"I sometimes hit use-cases for this FN in threading macros. Is there a better/builtin implementation, or suggestions on the name?
```
(defn pred-or-nil
  [pred? v]
  (when (pred? v) v))
```"
1373,1510694869.000018,Kathie,"<@Jonas> idk i'm at a loss. something weird is definitely happening because it's worked fine with every other key every tried previously; the repl doesn't seem trustworthy, so i'm tryign to see if i dissoc the key somewhere in my code"
1373,1510695067.000287,Marx,<@Kathie> did you try it from a command-line repl?
1375,1510695113.000561,Marx,"I guy I work with was having some really weird issues that cleared up when he deleted the contents of the /target dir, fwiw"
1373,1510695115.000431,Kathie,not sure how i'd recreate the state of the app from the cli
1375,1510695120.000194,Kathie,hm; lemme delete mine
1373,1510695141.000332,Marx,"Oh that’s right, I was thinking clj not cljs, nvm"
1375,1510695151.000537,Marx,but maybe the /target thing will help
1373,1510695416.00028,Jonas,"it does seem like a weird situation. I would check to make sure that you’re following the tips for reloadable code, <https://github.com/bhauman/lein-figwheel#writing-reloadable-code>. I would also try some of these tests outside of the figwheel repl to try to isolate the issue; in the past, Ive added debug functions like ```(defn ^:export debugprints []
  (let [db @re-frame.db/app-db]
    (doseq [k (keys db)]
      (prn k (= k :search-lol) (contains? db k) (get db k ::not-found)))))```; and then you can call `my.namespace.debugprints()` from the dev console"
1373,1510695537.000242,Kathie,ahh cool tip; (and yea lein cleaning and deleting /target didn't help)
1376,1510698197.000424,Alix,Is there a way to run lein tasks from the repl?
1377,1510699217.000597,Earlie,Should some-&gt; be able to have as-&gt; contained within it?
1377,1510699433.000349,Rebeca,"```
user=&gt; (some-&gt; 1 (as-&gt; % (+ % %)))
2
user=&gt; 
```"
1377,1510699461.000174,Lonna,"<@Earlie> anecdotally, I remember having issues with it a few months ago. I usually bust out <https://github.com/rplevy/swiss-arrows> when I need improved threading"
1377,1510699506.000238,Rebeca,"the -&gt; macros are purely transformations of form, usually when people have trouble with them it is because they expect them to be aware of semantics"
1377,1510699613.000326,Earlie,"Alright, I'd changed a -&gt; into an as-&gt;; I needed to nest my original -&gt; inside the new as-&gt; which was inside some-&gt;. My mistake.; Huh, <@Lonna>, I'll have to look into that."
1377,1510699634.000515,Rebeca,that is too many arrorws
1377,1510699641.000074,Earlie,"Yeah, probably.; It doesn't actually look too bad in reality."
1377,1510699668.000082,Rebeca,you can't actually tell if it is correct; that is too many
1377,1510699685.000262,Earlie,"```
defn callback [{{{cookie-state :value} ""state""} :cookies
                 {:strs [code hd] query-state ""state""} :query-params}]
  (if-let [userinfo
           (and (= cookie-state query-state)
                (some-&gt;
                 (-&gt; @(http-client/post (env :google-token)
                                        {:form-params {:code code
                                                       :client_id (env :google-id)
                                                       :client_secret (env :google-secret)
                                                       :redirect_uri ""<http://localhost:8080/callback>""
                                                       :grant_type ""authorization_code""}})
                     :body
                     (cheshire/parse-string true)
                     :access_token)
                 (as-&gt; access
                     (-&gt; @(http-client/get (env :google-user-info)
                                           {:oauth-token access})
                         :body
                         (cheshire/parse-string true)))))]
    (merge
     (response/redirect ""/"")
     {:cookies {""access"" (compact/sign
                          {:email}
                          (env :secret))}})
    (response/redirect ""/login""))
```"
1377,1510699739.000355,Rebeca,that is gross
1377,1510699754.000183,Earlie,Fair enough. Do you have a specific way you'd change it?; The alternative I was running into was having more than 2 exit points. (Duplicating my redirect to /login on multiple branches)
1377,1510699801.000301,Rebeca,"no, I think a good start would be breaking it up, pulling out some helper functions"
1377,1510699809.000255,Guillermo,agree with the breaking it apart
1377,1510699831.000032,Earlie,Good call there. I definitely will. This was largely just a matter of getting it working.
1377,1510699843.000024,Guillermo,"break it apart at the seams where you'd test (the initial OAuth call, the second call)"
1377,1510699846.000171,Rebeca,I will often rewrite code with multiple exits as explicit cps
1377,1510699862.000051,Earlie,Explicit cps?
1377,1510699899.000234,Rebeca,"often you can have control flow diverge down two paths, and then you need to join the control flow; that control flow join is the divergent control flow having the same continuation; so you just create a function that represents all actions after the join point, and pass it in to each branch"
1377,1510700006.000288,Earlie,"Oh, I'm following now. So you'd have a default-response defined at the beginning which calls the redirect to /login?"
1377,1510700061.000536,Rebeca,"sure, something like that"
1377,1510700085.000008,Earlie,"That makes sense.
Is this a specifically defined pattern? Link?"
1377,1510700157.000314,Rebeca,"I dunno, it is just sort of I think of code after fiddling with compilers for a while"
1377,1510700180.000182,Earlie,I think this is what I was looking for: <https://en.wikipedia.org/wiki/Continuation-passing_style>
1378,1510700305.000014,Rebeca,"oh yeah, cps is a thing, and has lots of applications, a lot of which are sort of tangential to the relatively simple ""hey, I have this repeated bit of code for different control flow branches, why not make it a function and reuse it on both branches"""
1377,1510700329.000458,Earlie,:thumbsup: Thanks
1379,1510701768.000291,Audie,"Hi!
I’m trying to receive an AWS SNS message in pedestal but I’m facing a small problem. When pedestal receives a message with content-type application/json it automatically convert the body to keywords.

But aws sns sends its message with content-type text/plain and pedestal does not convert the message so I can extract the data I need.

Is there a way to convert the entire message? I’m trying to create an interceptor to convert the requests but It’s not working problem:

```(defn- parse-string-to-map-keys
  [string-to-convert]
  (walk/keywordize-keys string-to-convert))```

```(defn- parse-stream-to-map-keys
  [stream-to-convert]
  (json/read-str (slurp (<http://clojure.java.io/reader|clojure.java.io/reader> stream-to-convert)) :key-fn keyword))```

```(def parse-sns-message-to-json
  (interceptor/interceptor
    {:name ::parse-sns-message-to-json
     :enter
     (fn [{:keys [request] :as context}]
       (let [ headers (try
                        (parse-string-to-map-keys (:headers request))
                        (catch Exception _))
              body (try
                     (parse-stream-to-map-keys (:body request))
                     (catch Exception _))]
         (if (and headers body)
           (do
             (assoc context :request (-&gt; request
                                         (assoc :headers headers)
                                         (assoc :json-params body))))
           (-&gt; context
               terminate))))}))```; I’m using ```[clojure.data.json :as json]``` as well; The body of the message stays like this:

```:body #object[org.eclipse.jetty.server.HttpInputOverHTTP 0x9344f6 ""HttpInputOverHTTP@9344f6[c=1804,q=0,[0]=null,s=EOF]""], :scheme :http, :request-method :post}```"
1379,1510701836.000348,Rebeca,can you make an interceptor that just changes the content-type for sns messages?
1379,1510701929.000195,Audie,"I could try this, but I don’t know the order of the functions
would pedestal try to convert the message before or after my interceptor?"
1379,1510701994.000246,Rebeca,"I  dunno, I've never used pedestal interceptors, my understanding is they form something like a pipeline, so there must be some way to influence the order things flow through the pipeline"
1379,1510702073.000089,Audie,"hm, I see
I’ll try to do what you’ve said
I’ll send the result in a minute"
1379,1510702078.000094,Rebeca,<http://pedestal.io/reference/default-interceptors#_modifying_the_default_stack>
1380,1510724991.000158,Alix,Hey is it possible to use leiningen from the REPL instead of from the commandline?
1379,1510755193.000418,Ernesto,<https://stackoverflow.com/questions/47309604/dynamic-variables-in-clojure-libraries>
1379,1510755566.000396,Ahmad,"guess i'll do the same next time i have questions, post them on SO and then link them here. as a newcomer it is very hard to find answers to some questions others might already had"
1379,1510755791.000129,Ernesto,<@Ahmad> Yes. SO is better in SEO and UX that slack logs. :wink:
1379,1510755851.000407,Ahmad,that's what i had in mind
1379,1510756346.000532,Ernesto,"Is this a good pattern for libraries? 
```
(def ^{:dynamic true} *var*)
(defn my-fn [{:keys [var]}]
  (do-smth (or var *var*)))
```"
1379,1510757345.000529,Verna,"<@Ernesto> sometimes, such global variables might be useful. Say, cls-http stores default middlewares in such a global vector. And there is a macro `(with-middlewares...)` that substitutes them temporary with `binding`"
1381,1510757385.000128,Verna,"but as long as you can avoid using them, please do."
1379,1510758037.000039,Ernesto,"<@Verna> Thank you.; Nice answer from Joost Diepenmaat on SO: “In my experience, having dynamic arguments /almost/ always causes more trouble than it saves down the line. You need a pretty compelling reason to have them and in this case I would definitely just make `*var*` a non-dynamic `default-var`. Note that clojure.java.jdbc (like the example in the docs) used to have a dynamic default db argument but that was removed ages ago."
1382,1510762260.000114,Basil,"Does anyone here have some strong thoughts on what a simultanuous `put` and `take` on the same channel (via `alts`) should do? In IRC someone brought up the following:

```
(let [c (async/chan)]
  (async/alts!! [c [c 42]]))
```

First thought is deadlock, but it actually executes both operations, and returns either `[42 c]` (the result of the `take`) or `[true c]` (the result of the `put`). This feels wrong, as the documentation clearly states it should execute at most one operation."
1381,1510765184.000325,Margaret,"yes, you can for example launch a clojure repl from the leiningen jar, or include leiningen as a dep of your project. But if you aren’t making a tool that is meant to be used as a leiningen plugin or extension you might be on the wrong track here. leiningen is meant to be a build tool, ideally it and its libraries don’t exist on a production server"
1382,1510765440.000483,Guillermo,"<@Basil> This is a weird one -- I'm not saying it's not surprising, but let me offer an explanation of what's going on:

alts will attempt its requested ops in a random order. For each op it checks: Did it work immediately? If so return, if not try the next one.

In this specific example, one of the ops is selected and attempted (doesn't matter which), and because the channel is unbuffered, that op is enqueued (aka doesn't succeed immediately).  alts moves on to the next/other op, and tries it. This op will succeed immediately because the originally attempted op is the complement.  Technically, alts is upholding its contract of exactly one op succeeding, _but it's the succeeding op that unblocks and runs the other op, not alts itself_."
1381,1510765484.000225,Guillermo,(I'm one of the committers to that project.)
1382,1510765779.000455,Guillermo,"Just to put it on the record, it would be unusual to see this puzzler in the wild (as well as bidirectional usage of a channel within the same function); (I lament that Slack history disappears)"
1383,1510767783.000166,Cecilia,"It does not, it just gets hidden since no one pays for this slack organization; The second someone pays the whole history will be there"
1383,1510768506.000314,Daniell,"Feel free to discuss that in <#C0CB40N8K|community-development> (but we have 11,000 members and no one is going to fund this at $57,000 per month)."
1383,1510768540.000726,Guillermo,"""effectively disappears"" :smiley:"
1382,1510770289.000281,Shamika,isn’t there some off-site archive? I think I’ve found things on it via google before
1382,1510770380.00019,Guillermo,it's discontinuous
1382,1510770772.000132,Eufemia,you can get around it to some degree if you use the irc gate. have an irc bot connected constantly and have it save logs.; doesnt do well with the advent of threads though since those messages appear inline
1384,1510772874.000405,Johana,What does Rich mean when Lisp is ‘tangible’. I’ve looked up the word tangible and I found ‘substantially real’. which doesn’t really make it any clearer.
1384,1510773096.000001,Brande,<https://clojurians-log.clojureverse.org>
1384,1510773117.000545,Marnie,"Like something you can touch, feel, mold"
1384,1510773166.000462,Sonny,"data is directly readable without going through an interface, your runtime state is always manipulable, even your tooling is often changeable on the fly; or at least that’s what it means to me"
1384,1510773221.000647,Brande,"hmm, doesn't seem up to date though, something wrong with logbot"
1384,1510773288.000523,Guillermo,yeah it's discontinuous
1384,1510773289.000622,Margaret,"I’d add to that that the things that make up your program state are concrete and explicit (reified as data), not ephemeral “fictions” that are enforced by a compiler but missing in the runtime data itself"
1384,1510773342.000211,Johana,"ah that makes sense yes. when I’m programming in a more static / less interactive language, you can’t really play around with it, you’re not as close to the data. All you can do is watch the program unfold, unless you explicitly build hooks and monitoring into it"
1384,1510773423.000797,Margaret,"even just the fact that you can take an arbitrary piece of data, and say “what type is this?” or print it and expect a reasonable result"
1384,1510773456.000115,Johana,"right, thanks"
1384,1510773459.000002,Brande,:sadpanda:
1385,1510784240.000353,Peter,"For me “tangible” means a REPL that is the whole thing of what a REPL means, coupled with homoiconicity.; For a contrasting example with Python. Python occasionally spits out results in its REPL that’s homoiconic. Or almost homoiconic. I once implemented a bunch of classes’ `__repr__` magic functions with a string that was that type’s call to its constructor. This, when used in a REPL, made my Python custom *classes* behave in a homoiconic way.; But don’t be fooled. If python were made to be fully homoiconic _by default_ yet because of the language, you’d have to implement it without the parenthesis, not many would ever use this feature because macros would be so much harder to write because of the grammar rules being so complicated.; I think this is what Rich was getting at.; Does that make any sense?"
1386,1510788844.000179,Danielle,how do i figure out out which version clojure has decided to call when doing interop. I'm trying to understand why I have to typehint the executor as `java.util.concurrent.ExecutorService` and the function as a `Callable`? What's the strategy  used? i.e. is typehinting `Callable` not enough?
1386,1510789278.000307,Rebeca,"it depends, if the compiler can figure out that you are invoking the method on an Executor service, type hinting Callable is enough; if you use interop to construct an ExecutorService and bind it to a local and use that, the compiler can figure it out, if you create it as a global (via def) then it can't, but you can type hint the var if you want"
1386,1510789344.000358,Danielle,what's really weird is we were trying the same JVM version inside docker and outside docker and we got different results w/ the same code
1386,1510789351.000141,Rebeca,sure; I would not be surprised at that
1386,1510789408.000015,Danielle,mind if i ask you to pick you brain to explain why you aren't surprised? :wink:
1386,1510789416.000332,Rebeca,"the executor issue is tricky because the class of the thing you are passing in, introduces more ambiguity instead of narrowing the scope; functions implement both Callable and Runnable, so it could be either"
1386,1510789489.000191,Danielle,"aye, I think what we're going to do to reduce ambiguity is to reify a Callable"
1386,1510789516.000193,Rebeca,"I think it is a little odd that you would get differences with just inside and outside of docker, but I am perfectly happy to hand wave that away as you also introducing some other difference"
1386,1510789602.000218,Danielle,"yeah it's really weird, we've gotten inconsistencies in other ways as well (trying tests in this order):

- ran our test using lein test (on 2.7.2) and the right version of `.submit` was used
- ran our test using lein test (on 2.8.1) and the the wrong version of `.submit` was used
- ran our test using lein test (on 2.7.2) and the the wrong version of `.submit` was used &lt;-- freaky"
1386,1510789626.00031,Rebeca,"the version of lein has nothing to do with it; (well, has less to do with it then you might think); the important thing would be the build of the jvm (version and os) and the clojure version (which lein version might effect); e.g. if you are locally running on the jvm on osx, and comparing it to the jvm on linux in docker, many (not often noticeable) things will be different"
1386,1510789830.000156,Danielle,fair
1386,1510789864.00028,Rebeca,<https://github.com/clojure/clojure/blob/master/src/jvm/clojure/lang/Reflector.java#L47>
1386,1510789889.000114,Danielle,oo thanks for sharing haha
1386,1510790138.000231,Rebeca,"I had a colleague years ago who spent a lot of time tracking down some flapping tests for a date parser that turned out to be due to the osx and the linux build of the same jdk treating dates that claim to be in dst, but being for a month that dst is in effect for differently"
1386,1510790388.000071,Danielle,"thanks, would I be able to avoid this ambiguiety by setting *warn-on-reflection* to `true`?"
1386,1510790400.000333,Rebeca,yes
1386,1510790422.000072,Danielle,this will help me sleep better at night :smile:  thanks for the explanations!
1387,1510792777.00021,Ernesto,"Is there a way to show “simpler” java objects:; `[#object[edu.stanford.nlp.ling.TaggedWord 0x6a16b1ef ""Short/JJ""]]` 
-&gt;; `[#&lt;TaggedWord Short/JJ&gt;]`"
1387,1510793462.00032,Jonas,<https://clojuredocs.org/clojure.core/print-method>; are you talking about how java objects are printed?
1387,1510794660.000179,Ernesto,"<@Jonas> I tought I could get this construct `[#&lt;TaggedWord Short/JJ&gt;]` from/instead of this construct `[#object[edu.stanford.nlp.ling.TaggedWord 0x6a16b1ef ""Short/JJ""]]` in the repl.; Using prn doesn’t seem to change anything"
1387,1510794719.00011,Jonas,"I think if you can change how it’s printed by overriding the print-method; ```(defmethod print-method edu.stanford.nlp.ling.TaggedWord [v ^java.io.Writer w]
  (print-method ""[#&lt;TaggedWord Short/JJ&gt;]"" w))```"
1387,1510798289.000298,Ernesto,"<@Jonas> wow! Thanks! Works like a charm!; oh wait; would need to make dynamic this part: `Short/JJ`; <@Jonas> this does it:
```
(defmethod clojure.core/print-method edu.stanford.nlp.ling.TaggedWord
  [piece writer]
  (.write writer (str “#&lt;TaggedWord ” (.toString piece) “&gt;”)))
```; Thanks again!; Is this a good practice?; ```
(def printed-objects [CoreLabel TaggedWord Word])

(defn set-print-methods! [print-objects] 
  (doseq [o print-objects] 
    (defmethod print-method o
      [piece ^java.io.Writer writer]
      (.write 
       writer 
       (str “#&lt;” (.getSimpleName o) ” ” (.toString piece) “&gt;”)))))

(set-print-methods! printed-objects)
```; `(-&gt; “Short and sweet.” tokenize pos-tag)`; `;;=&gt; [#&lt;TaggedWord Short/JJ&gt; #&lt;TaggedWord and/CC&gt; #&lt;TaggedWord sweet/JJ&gt; #&lt;TaggedWord ./.&gt;]`"
1388,1510817159.00018,Nilda,"I have two channels. One sends frequent, but low-priority messages. Another sends infrequent, but high-priority messages. I want to process messages from these channels sequentially. If a message is available on the high-priority channel, I want to process that message before the low priority channel is considered.

In essence, is there some variant of `alts!` that I can use/build that has a deterministic order in which it takes from channels?"
1389,1510817255.00001,Rebeca,have you read the docstring for `alts!`?
1388,1510817968.000195,Valorie,You can specify `:priority true` after the channel and handler forms to indicate that the channels should be tried in declared order.
1390,1510821067.000297,Mirna,"hi guys. I'm using Cursive to develop &amp; debug our Clojure apps, often experimenting things with the REPL. I wonder if there is an efficient way to create datastructures in the REPL sourced from a Debug breakpoint - e.g. if I have a complex datastructure, which I'd like to work with in the REPL as well (to test functions, debug etc...), how can I have a var referencing it the easiest way in the REPL? Of course I dont want to type the whole thing in the REPL, but would like to get the data from an app under- debugging (say I have a breakpoint and the object is there)?"
1390,1510822142.000512,Terra,"<@Mirna> perhaps `def`?
It should be generally avoided inside functions but I guess it's fine for debugging.
```
;; let's say I want to get `m`
(defn debug-me [x y]
  (let [z (* x y)
        w (Math/pow z x)
        m {:x x
           :y y
           :wz {:z z :w w}}]
    (def d-m m)
    (keys m)))
(debug-me 4 5)
d-m
```"
1390,1510822720.000022,Delois,"<@Terra> <@Mirna> Yes, `def` should work for this. When stopped at your breakpoint, use Evaluate Expression to do something like: `(def test-data-var (my-expr))` - that should work fine.; I’m actually planning to try to have the REPL work when stopped at a breakpoint, but there’s some trickiness there when the user changes context (i.e. clicks on a higher stack frame)"
1390,1510822914.000483,Berry,"{:keys [ .... ]} works with unqualified names. Does it also work with qualified names (from other namespaces)? intuition says no, since there could be more than one match, and there's no obvious way which to pick."
1391,1510823284.000208,Rosia,<https://clojure.org/guides/destructuring#_namespaced_keywords> ?
1391,1510824138.000042,Magdalena,"Not really.  Binding `*defaults*` isn’t really a done thing.  Normally you’d `(merge defaults overrides)`.

Can even do patterns like:

```
(def default-sentiment-labels [""foo"" ""bar""])

(defn my-fn [{:keys [labels] :or {labels default-sentiment-labels}]
,,,)
```"
1390,1510824603.00009,Mirna,"thanks for the responses <@Terra> <@Delois> <@Berry> Indeed, `def` can be used - was too obviuos for me to find it :slightly_smiling_face:"
1392,1510835667.000305,Troy,hello folks - just wondering if I can dip into the hive mind for five mins….; I want to use a resource and have it clean up …. like `with-open`; but the resource has a shutdown method rather than a close method; do I make my own or is there a more idiomatic alternative?
1392,1510838243.000063,Karolyn,<@Troy> we use a custom macro like this:
1393,1510838276.000542,Karolyn,and then something like `(with-cleanup [r (make-resource) .shutdown] ...)`
1392,1510838311.000339,Troy,thanks <@Karolyn>; For the moment I just copied / pasted with-open; but yours is nicer as the method can be varied
1392,1510838383.000005,Karolyn,in the end you can also just write out a `(let [r (make-resource)] (try .... (finally (.shutdown r))`
1392,1510838509.000092,Troy,indeed
1394,1510854479.000283,Margaret,"<@Mirna> if you might also want to use the data in a regression test, I wrote a library that simplifies stashing the clojure data to disk and re-inflating it to use it in test code"
1392,1510860768.000204,Jeanene,"In that context, it's fair to say that macros make Lisp a more 'tangible' language than others"
1395,1510861600.000162,Lori,what are some highly-considered db migration libraries (mysql specific?)
1395,1510861724.000369,Carletta,Calling Flyway (Java lib) from Clojure is just a few lines of code
1395,1510861886.000181,Lori,"good point, I always forget I can reach for java :slightly_smiling_face:"
1395,1510866824.000089,Antonia,"anybody know if ideaVim, Cursive, and parinfer play well together?"
1395,1510866928.000593,Delois,"<@Antonia> Mostly, yes. There’s some doc here about problems: <https://github.com/cursive-ide/cursive/wiki/IdeaVim-issues>; Certainly there are Cursive users using it, and most seem to consider it more or less EVIL-level emulation.; I don’t use it myself so I only have hearsay on that though."
1395,1510867022.000348,Antonia,<@Delois> you get parinfer 3.0 ported over yet?
1395,1510867065.000452,Delois,"I have it mostly done, it’s waiting on a couple of outstanding bugs. Shaun was hopefully going to find time to look at them soon. Once they’re fixed it’ll be good to go."
1395,1510867235.000294,Antonia,IdeaVim seems to have many issues on its own that are frustrating.   I can never get certain leader combinations to work properly
1395,1510867314.000482,Delois,"I’m not sure, sorry - I’m not vim-literate myself."
1395,1510867592.00046,Antonia,"they seem to be known issues....I'm resigned to carpal tunnel syndrome on some of the action with some hideous ctrl-alt-shift-....if I just had one more pinkie"" combination"
1396,1510869364.000442,Katina,"Hi, this is beginner stuff, an exercise to re-implement boolean: (defn boolean [x]
        (if (x == ""false"")
          false
          (if (x == ""nil"") 
            false
            true))); but; user&gt; (boolean ""asd"")
java.lang.ClassCastException: java.lang.String cannot be cast to clojure.lang.IFn; can't understand what's wrong"
1396,1510869477.000135,Shameka,"<@Katina> assuming you were wanting to output based on string values `(cond (= x ""false"") false (= x ""nil"") false true)`"
1396,1510869482.000192,Mia,"`(x == ""false"")` I think you want `(= x ""false"")`"
1396,1510869499.0002,Katina,"ohh, :slightly_smiling_face:"
1396,1510869514.000228,Mia,"depending on what you’re actually testing for; the string `false` or the value `false`; but, the root cause, `(x == ""false"")` is not doing what you think it’s doing; there is a <#C053AK3F9|beginners> channel that may be helpful for you"
1396,1510869617.000162,Katina,"yes, this is for the <http://mooc.fi|mooc.fi> course, I'll see how the tests go, but that one was really noob; Thanks, and thanks for the suggestion"
1396,1510870792.000048,Micha,"<@Antonia> Years ago I bought one of these and have used one for heavy typing ever since -- not cheap, but way cheaper than wrist surgery.  Puts most of those modifier keys under your thumbs, and the keys are programmable, too.  <https://www.kinesis-ergo.com/shop/advantage2/>"
1397,1510871385.000234,Antonia,<@Micha> nice.  I use this <https://www.microsoft.com/accessories/en-us/products/keyboards/sculpt-ergonomic-desktop/l5v-00001>; <@Micha> nice.  I use this <https://www.microsoft.com/accessories/en-us/products/keyboards/sculpt-ergonomic-desktop/l5v-00001>; <@Micha> you use footpedals?
1397,1510871549.000248,Micha,"I have them, but have only used them on occasions when I was transcribing some audio lectures, where i mapped foot pedals to play/pause on the audio.  I do use VI key bindings inside of Emacs, too, just to be weird, although there are still plenty of control keys I use too often for my own good.; (Sorry, Clojure denizens, we can take this privately if it gets too much longer)"
1397,1510878292.000262,Kristy,"<@Antonia> sorry to hear about RSI :disappointed:

I've owned those mentioned Microsoft and Kinesis in the past (circa 2011). I found them dangerously misleading - I've used Apple keyboards since 2013 - zero pain now, zero contortions (un-natural movements); I have used Emacs this whole time. It hasn't been a factor of pain, given that since day one I rejected the emacsy way of using the keyboard.

all my shortcuts are in the form:

command-s
ctrl-a
alt-e

etc.

simple stuff. particularly good that one can use three modifiers easily, in Mac; you may read a little about my approach (and my real list of shortcuts) in <https://github.com/vemv/.emacs.d> . my config is not shareable as of today, but I'm working towards that. anyone interested can ping me; ---
in general I think I have quite a story to tell, about how I beat wrist pain. Like, it really hurted a few years ago, felt how my career was at risk. did lots of research and found some really good advice buried in a sea of workarounds.

as a sad trivia, the only people I've ever met with RSI (or similar) were clojure programmers. and I couldn't really share my advice with them, because normally you can't tell people they're just wrong; ---

this ""good advice"" is a bit complex to tldr, I guess I could record a 20m video for anyone interested"
1398,1510891631.000096,Herminia,is there a way to alias a namespace without requiring it?
1398,1510891942.000048,Micha,Maybe clojure.core/alias can do that?  Not sure.; e.g. (alias 'str 'clojure.string) followed by (doc str/join) gives docs for clojure.string/join
1398,1510892541.000042,Berry,"I have a naming question. I am genuinely tempted to mix camelCase with - . Here is the problem&gt;

Suppose I have an object, say

update-event

then, I have other functions:

update-event-new
update-event-process
update-event-do-foo-bar

but then it's not clear to me where the ""noun"" and the ""verb"" are separated.

Whereas, if I named my event

updateEvent

then I ca ndo

updateEvent-new
updateEvent-process
updateEvent-doFooBar

however, Clojure seems to uniformly dislike camelCase; oh wait, Protocols use camelCase -- so it's actually acceptable right?"
1398,1510892609.000017,Sonny,"that’s a red herring - clojure.string is loaded during startup. alias requires the namespace to be loaded to be able to alias it. So the answer to the original question is no. But you can work around that with a call to `create-ns` first; Clojure doesn’t care what you do, but other people might :)"
1398,1510892692.00008,Berry,"right, by ""Clojure"" I meant to say ""Clojure Community"""
1398,1510892723.000004,Sonny,why do you need to repeat “updateEvent” in all those names?
1398,1510892724.000106,Berry,"it seems like the Protocol naming convention sets precedence that it's 'okay to have camelCase for multi word nouns"""
1398,1510892743.00013,Sonny,"protocols create Java interfaces under the hood so they steal Java style naming; or at least many people follow that; you only really refer to protocols by name when you implement them though; most clojurists do not use camelCase for nouns, they use kebab case"
1398,1510892927.000225,Berry,"I have a lot of functions of type signature

verb :: foobar -&gt; ... -&gt; ... -&gt; ... -&gt; foobar

so I like to have functions of name

foobar-verb1
foobar-verb2
foobar-verb3

when 'foobar' and 'verbi' both contain dashes, I find it awkward to read; some-noun-name-do-action-one vs
someNounName-doActionOne"
1398,1510892998.000002,Sonny,that seems more verbose than most clojure code; why not just (defn verb1 [foobar]); <https://stuartsierra.com/2016/01/09/how-to-name-clojure-functions> has a lot of good advice
1398,1510893469.00008,Berry,"<@Sonny>: the suggestion there seems to be lots of small namespaces, and not repeat namespace name"
1398,1510893639.000038,Herminia,I like his suggestions; I don't think I've ever used camelCase in Clojure; I also prefer verbs in front; like a command/imperative
1399,1510893720.000122,Herminia,"but when I see what you've written above, the first thing that pops into my head is ""that's a namespace"""
1398,1510893748.00014,Herminia,"that is, a common prefix for top-level definition names"
1399,1510894937.000074,Herminia,"but the nice thing is it splits the two pieces with a different character, `/`; that could solve the readability issue you're having"
1400,1510909516.000346,Jodie,I think I'd solve it how the CSS people do: `update-event--new`. But I'd also avoid this problem in the first place by not doing this.
1398,1510913329.000394,Krystina,"I'm writing some ""scripts"" that will help to check a few things like status of database tables or marathon tasks for example; the scripts now simply do `log/error` on errors and `log/info` otherwise, however it would be also nice to keep track of all the errors in a data structure; (which is computed across different functions), and exit with failure Exit code in case anything failed; any suggestions about how to do that?; the easiest way would be to use an `atom` maybe, but it would have to be shared across different namespaces or being passed in from `core.clj`"
1401,1510913703.000119,Janean,"Hi guys I need your help.

I want to make a clojure query, but the :where conditions are condition. SO i used cond-&gt;.
this works well. but now my problem is that I want to make a clojure function call inside a (‘) or quote.


(defn foo [num]

  (inc num))

(def query ‘[:find ?e
              :in $
              :where ])

(cond-&gt; query
    (some-condition) 
    (conj ‘[? :data/number ?number])
    (some-other-condition)
    (conj `[~’(&gt; ?number ~(foo 2))]))


I get this result:
[:find ?e 
  :in $ 
  :where [? :data/number ?number] 
  [(&gt; ?number (clojure.core/unquote (foo 2)))]]


What I am trying to achieve is this:

[:find ?e 
  :in $ 
  :where [? :data/number ?number] 
  [(&gt; ?number 3)]]


Can anyone please help"
1398,1510914182.000031,Anika,In clojure I do same transformation to the var and then want to store the result by same name. Is this ok to do so? I don't want to invent new var names for this. Eg. `(let [address (cleanup address)] address)`
1398,1510919168.00003,Giovanna,"This will work:
```
(cond-&gt; query
  (some-condition)
  (conj '[? :data/number ?number])
  (some-other-condition)
  (conj `[(~'&gt; ~'?number ~(foo 2))]))
```

You could write a little helper function to make this easier though.
```
;; NB: Only use this when you specifically want a list (ie. code).
;;     Normally prefer using conj on a vector.
(defn append [coll &amp; xs]
  (concat coll xs))

(cond-&gt; query
  (some-condition)
  ;; This is probably supposed to be ?e and not just ?
  (conj '[?e :data/number ?number])
  (some-other-condition)
  (conj [(append '(&gt; ?number) (foo 2))]))
```"
1402,1510919198.000023,Donella,why do i get an invalid number exception for `0x1.0p-53`?
1398,1510919283.00016,Kareen,because that's not a valid clojure number literal
1398,1510919292.000029,Donella,but it works in java
1398,1510919298.000076,Kareen,and it doesn't in clojure; they have different lexers
1398,1510919324.000085,Donella,"clojure docs say ""As of version 1.3, Clojure provides full support for JVM primitive values, making it possible to write high performance, idiomatic Clojure code for numeric applications."""
1398,1510919351.000024,Kareen,and that's true; what it doesn't say is that clojure will accept all java literals; because it doesn't
1398,1510919442.000169,Donella,"so if it did accept more literals for primitives, you wouldn't say that support for primitives has been improved?"
1403,1510923122.000157,Giovanna,"That's fine. It's a local though, and not a var. Vars are the things that `def` and `defn` create at the top level. You shouldn't define those more that once (except at the repl, when developing)."
1404,1510928625.000454,Sonny,Feel free to file a ticket - Java has added stuff over the years and I don’t see any reason we shouldn’t track their literal
1405,1510931093.000128,Tobie,"Hi everyone, I have an interview coming up for which the recruiter told me to prepare for datastructures questions. I know I should review them, but I'm loathed to learn about mutable versions as I never use them anymore :confused: Id much rather learn about immutable implementations so that at least its relevant to my interests. How come there are so many tutorials for mutable but not immutable datastructures; Moreover, its actually not natural to create a mutable datastructure in clojure i find"
1405,1510931158.000239,Jonnie,"All I remember is that Clojure uses something called HAMT; (IIRC - a bit fuzzy on this, although I did some reading a long time ago); <https://github.com/clojure/clojure/blob/master/src/jvm/clojure/lang/PersistentHashMap.java#L18-L26>; The comment is actually pretty clear"
1405,1510931426.000286,Tobie,"Thanks <@Jonnie> looks good; I'm thinking more along the lines of if asked to implement a binary tree, how would i implement a persistant version"
1405,1510931468.000242,Jonnie,"oh right. I think I did something like that on.. codewars maybe?; They have two “katas” that make you implement these IIRC; But I agree overall, there is a gap in knowledge about these immutable data structures; <https://www.codewars.com/kata/functional-binary-trees> I think that was the exercise"
1405,1510931662.000002,Tobie,This looks great :slightly_smiling_face:; i wish there were more like this; but yes this is the sort of thing im looking for
1405,1510931959.000817,Jonnie,Definitely :slightly_smiling_face: If you come across some more I would be interested to hear about it :stuck_out_tongue:
1406,1510938899.000234,Ernesto,Hello! Are there libraries that manipulate plain datastructures in the fashion of Datomic pull syntax?
1405,1510938921.000142,Ernesto,"I saw this, but seems not quite alive; <https://github.com/LockedOn/graph-router>; Thanks!"
1407,1510949608.000638,Adelaida,"3 days ago, <@Lois> and <@Eliana> had an exchange about transduce-ing a transformation. I found the exchange interesting and helpful for learning transducers, and I thought it might be useful to stick it somewhere more enduring than this Slack channel. So, with their permission, I wrote it up and posted it to StackOverflow [1].

One of the side benefits is to have more Clojure content on StackOverflow, which will help us look better next time they analyze languages. I welcome others to similarly capture interesting or useful content from here to StackOverflow. (Or even go the other way and post a question there first, linking to it here.) Totally voluntary, of course, but I think it might benefit our broader community. Cheers!

[1] <https://stackoverflow.com/q/47358416/202292>"
1406,1510952885.000204,Johana,"Starting to like transducers are lot now: <https://stackoverflow.com/a/47354316/6264>; I’m wondering on which kind of things you can apply them also, instead of collections, text files, SQL results?"
1406,1510953098.000275,Silas,"When files are loaded, when does macros expand? Would my macros expand before earlier def ? And in my case, before earlier spec s/def ?; Or do they expand in parralel?"
1406,1510953586.00041,Rebeca,"the compilation unit for clojure is a form; so a single form is compiled to bytecode at a time, and macroexpansion needs to happen before bytecode can be generated, so macroexpansion is a form (a top level form, at a time)"
1406,1510953696.000347,Silas,"Oh, ok, and in order from top to bottom in the file, and then for each top level form, it goes inner form to outer form?"
1406,1510953712.000119,Rebeca,"no; macro expansion happens outer to inner (I could mixing this up, but I don't believe I am)"
1406,1510953827.000352,Silas,"Oh right, I think I remember that"
1406,1510953838.000106,Rebeca,this is way something like (when-let (some-macro-that-expands-to-a-binding-vector) ...) doesn't work
1406,1510953889.000447,Silas,"Ya, I guess it does, when you have a macro inside another, and call macroexpand-1, you only see the outer one expanded.; I'll get us back on topic, why is it discouraged to wrap macros in functions to allow to compose them?; Like how apply-macro says its madness: <https://clojure.github.io/clojure-contrib/apply-macro-api.html>"
1406,1510954494.000104,Daniell,"The guidance I've always felt I got from the Clojure/core folks was: always write functions first, then use macros only to provide syntactic sugar (or to achieve something that is impossible in a function -- but even then, use the macro to translate it to a function call)."
1406,1510954608.000341,Silas,"A use case I find commonly is I want to extend an existing macro. So I want to maybe transform the input to the macro, before sending it to the macro. I can't, because I can't evaluate the args to the macro, so I'm always stuck having to write a macro that wraps the other macro."
1406,1510954718.000349,Johana,"A lot of macros can also be replaced by passing functions instead of a body I think; Not that it’s convenient, but you can. I mean the `with-` kind of macros which is 90% of the macros I write."
1406,1510954819.000153,Silas,"Hum, that's true, or can be written like that if you take thunks as the predicates"
1406,1510954835.000512,Daniell,"&gt; I'm always stuck having to write a macro that wraps the other macro
Right, because ""macros don't compose"". If a macro really is just a thin syntactic wrapper to a function, then you can compose functions and then write just a thin veneer macro around it -- wrapping the functionality, not the other macro."
1406,1510955119.000392,Silas,"Ya, and I've trying that more so now, to have my macro implementation be full of normal functions, and the macro just does the unorthodox composition of them. But I think when you want to extend a macro in some other lib, like a core macro, its more confusing to me, though maybe I need to just start digging into those * functions inside, and see that I can use those directly or within my macro, avoiding the need to wrap the macro.; I guess I'm trying to understand why macros don't compose. Could they compose? Is there other constructs out there that are different to macros, yet offer similar benefits but also compose"
1408,1510955259.000105,Willow,what core macro have you wanted to extend?
1406,1510955282.000172,Silas,"Well, right now I extended s/keys from clojure.spec; That's what got me thinking; All I do is (s/and the spec from s/keys and another predicate that needs the same input to s/keys."
1406,1510955376.000282,Adelaida,"Macros are all about the evaluation model. If you understand that, you will know how they can compose. I've written about this here, in case it's helpful: <http://blog.altometrics.com/2016/04/a-few-tips-for-writing-macros-in-clojure/>"
1406,1510955377.000376,Silas,"And I was like, why can't this be a function, and its because I can't pass the arguments to a function to the s/keys macros; Cool, I'll give it a read.; I guess I've been reading a bit about rebol: <http://blog.hostilefork.com/rebol-vs-lisp-macros/>; And I've noticed that one of the limitations of macros from composing in Clojure is that they evaluate at compile time. They act like a pre-processor, and don't have runtime context.; And so, you can pass quoted code to functions, and then the function can choose to eval it, but eval also runs without context, so the code you pass quoted does not carry an environment, all bindings are lost.; But why doesn't Lisps also allow a way to pass code with its environment, like Rebol does? It seems like it could be an interesting thing."
1406,1510956275.000236,Daniell,This is a specific case where the implementation of the macro is just wrapped around a function. Alex has acknowledged that and has said a more programmatic API is coming. This is just alpha at the moment.
1406,1510956300.000399,Silas,"Now, functions can be passed with an environment, but they can't be transformed before being evaluated, so again its limiting in some ways."
1406,1510956317.000241,Johana,What they usually mean with “macros don’t compose”: <https://softwareengineering.stackexchange.com/questions/222559/is-it-fair-to-say-that-macros-dont-compose>
1406,1510956332.000458,Silas,"Oh, that's pretty good to know."
1406,1510956333.000275,Johana,I.e. you cannot pass them around as values like you can with functions.
1406,1510956405.000069,Silas,"Ya, it might be overkill, and having all these different meta programming construct could get confusing and make things worse, but I'm having fun thinking about it :stuck_out_tongue:"
1406,1510956521.000126,Margaret,sometimes a good answer is to make a macro that returns a function - the function captures your locals nicely and lets others pass in values; it tends to elegantly solve the “I would use eval but it loses context” issues if you generate functions and pass in the locals
1406,1510957206.000011,Silas,"Interestingly, it appears this is an old idea called FEXPRS, and people talk about it: <http://wiki.c2.com/?RuntimeMacro> and <https://en.wikipedia.org/wiki/Fexpr>"
1406,1510957216.000015,Margaret,"yeah, they are very very slow; they mean you need interpreted instead of compiled code"
1406,1510957360.000144,Silas,"Ya, I can see that, as there is no way to know the order in which things will end up at runtime; I'll have to think about this"
1406,1510957496.000422,Margaret,it looks like `(let [some-f (eval form-for-f)] (some-f local1 local2))`
1409,1510959449.000037,Berry,"It appears that I can use a qualified keyword for a namespace that:

1. does not exist
2. exists in project, but is not yet loaded (to avoid circular dependency)

Are there any gotchas I should be aware of concerning these ?"
1409,1510959631.000378,Daniell,"The only ""gotcha"" I can think of is when you use something like `::alias/name` and it will depend on having the `alias` defined as an alias for the actual namespace qualifier."
1409,1510959697.000394,Willow,yeah and the errors from the alias not existing are terrible; copying aliased stuff into a ns without an alias throws like 5 reader errors in succession
1409,1510959768.000112,Berry,"ah, but since I'm not requiring the namespace (to avoid circular dependency), I'm doing :foo.bar/kw-name; I don't see where the `::alias/name` would show up"
1409,1510959793.000192,Willow,"its if you explicitly use it; if everything is namespaced by `:Account/permissions` and `:Account/username` it can get a little tiring, and your code can get a little wide. So its nice to use 
```
(create-ns 'HumanName)
(alias 'HN 'HumanName)
```"
1409,1510960020.000258,Daniell,"Yeah, we have `ws.domain.member` and usually alias that to `m` so we have `::m/id` etc instead of `:ws.domain.member/id`"
1409,1510960063.000083,Berry,"I still do not understand how this applies to the current question, but when I run into this issue, I'll look back at this."
1409,1510960114.000054,Willow,they are just gotchas with namespace qualified keywords
1410,1510963347.000198,Georgianne,"Does anyone know about any prior art re: using specs for autocomplete? e.g. I have a query language and an in-browser text box, `[:a :b :c (|)]` where `|` is the cursor, spec “knows” that there are only a handful of things that can meaningfully go there; the closest I’ve found is expound; maybe spec isn’t really the best tool for this since the set of answers can change at runtime there; I don’t necessarily know the full spec for the query language ahead of time, people can define their own helper rules"
1410,1510964110.000158,Rebeca,"I know you have some core.logic experience, have you tried that? it seems like something like that would sort of be like type inference, like you want a list of possible things (|) could be, and there are constraints on what it could be based on what is around it (or just what precedes it)"
1410,1510964223.000103,Berry,"<@Georgianne> <@Rebeca>: I was recently looking at a similar problem. Given 1. a CFG and 2 a prefix of a string ... what are all valid possible next-letter or next-2-letter or next-word combos?

Turns out, <https://en.wikipedia.org/wiki/Earley_parser> can handle that."
1410,1510965665.000007,Georgianne,<@Rebeca> huh that’s an interesting suggestion; I hand’t considered that but sure I could probably hack together some HM type inference in core logic :slightly_smiling_face:; it just seems that spec _mostly_ has that information already but I guess maybe it doesn’t exactly
1410,1510965822.000108,Rebeca,"I am not sure spec would work directly, mainly because spec doesn't support partial parses(regardless of if you could get the information about what would complete the parse from the parser), but you might be able to walk a spec via s/form and generating the core.logic ""typing"" rules from it"
1410,1510966010.000036,Berry,Is there a reason to not use an Earley Parser? It can literally tell you what values are valid for next token.
1410,1510966040.000043,Rebeca,"any parser will have that information; it just depends on if you can get at it; grammars tend to be thought of as recognizers of languages, but they are also recipes that can be used to generate strings that are members of a language; the parsing with derivatives stuff spec's parser is based on seems like it would be really good for that stuff, but spec doesn't do partial parses, and finding some protocol for communicating where you want the parse to stop, and how you when to generate possible completions of the parse might be tricky"
1410,1510966324.000198,Berry,"<@Rebeca>: really? I thought for most parsers, on incomplete strings, it's okay to just barf and say ""this fails somewhere"""
1410,1510966344.000195,Rebeca,sure
1410,1510966357.000145,Berry,"Earley one of the few parsers I know of where the algorithm makes it blatantly clare what values are valid for next token give current prefix; In particular, I believe this is one of the main advantages of Earley over CYK or Packrat for parsing CFGs."
1410,1510966427.000062,Rebeca,"that is just because most other parser libraries don't provide meta information about the structure of the grammar they represent; the information is encoded in the structure of the parser, but it is hard to get at it"
1410,1510966465.00006,Berry,"I'm not convinced that is true, but I can't disprove it either.; Is there a way to *get* the validator function of an atom ? I'm trying to create a spec that asserts: this atom has the following validator functikon.; <https://clojuredocs.org/clojure.core/get-validator>; why is `atom` in core, but `atom?` in clojure.inspector ?
<https://clojuredocs.org/clojure.inspector/atom_q>

Is there some other way I should be checking if an object is an atom ?"
1411,1510967294.000005,Raul,`#(instance? clojure.lang.Atom %)` ?
1412,1510972028.00005,Magda,anybody use clojure or clojurescript to write iOS apps that use the audio engine?  I'm interested to see if I can port one of my apps to clj/cljs
1410,1510977438.000064,Berry,"```
(defn atom? [obj]
  (instance? clojure.lang.Atom obj))
```
works for clojure. In cljs, how do I check if an object is an atom ?"
1410,1510978903.000077,Daniell,"<@Berry> A guess but I would imagine it'll be a protocol and you can use `satisfies?` on it...; Hmm, no, apparently `(instance? Atom obj)` -- `cljs.core.Atom` according to the Replete iOS app."
1410,1510979732.000077,Berry,"there's an ""IAtom"" somewhere in the source, but I wasn't sure how to include it; the full, appearing to work code, in case anyone else wants it, is:
```
(defn atom? [obj]
  (instance?
   #?(:clj clojure.lang.Atom
      :cljs cljs.core.Atom)
   obj))
```"
1413,1510984762.000059,Bettyann,"hello all, I'm storing some information on a atom and, in the end, I have this atom *data* `(type data) =&gt; clojure.lang.Atom` that, when I put @ become `(type @data) =&gt; clojure.lang.PersistentVector`. I need to convert this PersistentVector(ou the original atom) into a json array. Is there a built-in way of doing this?"
1413,1510984813.000073,Margaret,there are two popular json libraries - cheshire and clojure.data.json; there's nothing built in
1413,1510984874.000071,Bettyann,nothing canonical I could do to avoid add any lib? any loop specific strucutre or somethig?
1413,1510984931.00001,Margaret,"neither the jvm nor clojure itself comes with a json generator, you need a library (even if you write that library yourself, which I don't recommend)"
1413,1510985061.000004,Bettyann,"json is not the problem as I'm using a ring middleware to convert, the problem is that PersistentVector doesn't provide a valid json array, due to the lack of comma or something; this is my real problem"
1413,1510985130.000007,Margaret,you are using the middleware wrong then
1413,1510985132.000002,Bettyann,is there any built-in convertion instruction for persistentVector?
1413,1510985134.000044,Margaret,"the vector is not the problem; if commas aren't coming out, you aren't generating json"
1413,1510985219.000038,Bettyann,"if a write { :structures ""like that"" } a valid json comes out. But { :information *any-persistentVector* }  not"
1413,1510985242.000012,Margaret,that's not my experience of wrap-json at all; something else is wrong here; (unless there's been a regression and you are somehow the first one to see it)
1413,1510985431.000074,Bettyann,"well, when I do what I wrote, I got something like `{""information"": [{:index 0, :data 1} {:index 1, :data 100}] }` the problem of commas are related only to vector elements, not every element internally; I've been trying a lot of conversions the whole day but nothing worked"
1413,1510985512.000021,Margaret,the only way I could see getting that result is if somebody called str on the vector before it was passed to the middleware; because the middleware uses a proper json generator that wouldn't do that
1413,1510985660.000013,Bettyann,"```
  (str @block)
=&gt; ""[{:index 0, :data 100} {:index 1, :data 500 }]""
```"
1413,1510985699.000061,Daniell,"<@Bettyann> here's a REPL session showing that `ring-json/wrap-json-response` works as expected: ```boot.user=&gt; (require '[ring.middleware.json :as json])
nil
boot.user=&gt; (defn handler [req] {:body [1 2 3 4] :status 200 :headers {}})
#'boot.user/handler
boot.user=&gt; (defn app (json/wrap-json-
json/wrap-json-body       json/wrap-json-params     json/wrap-json-response
boot.user=&gt; (app {})
{:body ""[1,2,3,4]"", :status 200, :headers {""Content-Type"" ""application/json; charset=utf-8""}}``` Note that the response -- the `:body` -- needs to be a _vector_ *not* `(str some-vector)`; Don't call `str` on the vector.; Here's another example (using `ring.util.response/resp`): ```boot.user=&gt; (require '[ring.util.response :as resp])
nil
boot.user=&gt; (defn handler [req] (-&gt; (resp/response {:my-vector [""I"" ""am"" ""a"" ""vector""]}) (resp/status 200)))
#'boot.user/handler
boot.user=&gt; (def app (json/wrap-json-response handler))
#'boot.user/app
boot.user=&gt; (app {})
{:status 200, :headers {""Content-Type"" ""application/json; charset=utf-8""}, :body ""{\""my-vector\"":[\""I\"",\""am\"",\""a\"",\""vector\""]}""}```"
1413,1510985822.000056,Bettyann,"I'm doing something like that:
```
(defn output-json
  [information]
  {:status 200
   :headers {""Content-Type"" ""application/json""}
   :body information })

(defn show-data
  []
  (output-json {:length (count @core/data) :chain (str @core/data)} ))
```"
1413,1510985833.000035,Daniell,_Don't call `str`!_
1413,1510985844.000094,Bettyann,"ok, let me try"
1413,1510985850.000033,Margaret,<@Bettyann> you are doing exactly the thing I said would cause your bug
1413,1510986045.000046,Bettyann,"yup, the str. That damn str was driving me crazy; thank you"
1413,1510986114.000051,Daniell,"<@Bettyann> BTW, welcome to Clojurians! I saw you just joined half an hour ago.; Are you new to Clojure? Or did you just find out about us?"
1413,1510986152.000053,Bettyann,"Thank you! And yes, I just found about this slack; I'm actually from erlang; joining a clojure project on my work"
1413,1510986181.000042,Daniell,Oh cool. The Functional Prolog LOL :laughing:
1413,1510986186.000005,Bettyann,lol; clojure is awesome; I'm just having some small issues to get used
1413,1510986217.000011,Daniell,"I did a lot of Prolog back in the day, and I did an Erlang workshop at Lambda Jam a few years ago. Interesting language."
1413,1510986248.000006,Bettyann,"I work with payment processing in erlang; is nice, works well and I write new things in LFE(lisp flavored erlang). This led us to start some clojure experiments; and, well, JVM got my boss heart; and we are rewriting somethings in clojure, to check if we can go with this; I rather go with clojure than elixir; Pure erlang is no longer an option as is not too easy to find programmers"
1413,1510986443.000082,Daniell,And BEAM is an island. The JVM opens a lot more doors.
1413,1510986465.00003,Bettyann,"yup, this is the main point; and clojure is nice to code with, you feel productive"
1413,1510986503.000049,Daniell,"(don't get me wrong: BEAM is a _great_ island, but I don't know how broad that ""church"" will ever be... Erlang, LFE, Elixir)"
1413,1510986529.000038,Bettyann,"yup, this is true. BEAM is great, but JVM is a world"
1413,1510986554.000012,Daniell,"I've been on the JVM since '97... Java, Groovy, Scala, Clojure... and, would you believe, among all of that: CFML on the JVM too :slightly_smiling_face:; ColdFusion or the open source engine Lucee"
1413,1510986596.000033,Bettyann,lol didn't even know there was cfml on jvm
1413,1510986623.000037,Daniell,Most people don't.
1413,1510986651.000064,Bettyann,"JVM is battle tested, the banks that we have to interface with use it, so is just natural; BEAM is good, really really good; and we have a lot of lobby for elixir here; as the creator, jose valim, is from here; I'm from Brazil, btw; and his company, plataformatec, try to make people use elixir"
1413,1510986736.000006,Daniell,I guess there's always <https://github.com/trifork/erjang/wiki> and JRuby :slightly_smiling_face:
1413,1510986756.000037,Bettyann,lol
1413,1510986766.000048,Daniell,"It's late for you in Brazil (or early, depending on how you look at it)"
1413,1510986776.000034,Bettyann,3:32am
1413,1510986789.00006,Daniell,10:23pm here in San Francisco
1413,1510986797.000052,Bettyann,"haha nice; but is common for us to be online this time at friday/saturday. We grab some beers, go code in a beach or any pool, and this hour we start to fell human again"
1413,1510986920.000009,Daniell,:beers:
1413,1510987260.000068,Bettyann,"I was trying to get some pictires but I'm too drunk lol; well, thank you guys, see you later. You are awesome"
1414,1510988948.00002,Jenee,"Hello developers,

i have now been using spacemacs for my clojure development since last 4 months but there is one feature which i am still not able to configure.
That is auto-complete for inbuilt library functions,
eg. when i type fil then it should already suggest me filter or any other functions available for it

Currently i have installed auto-completion layer in my spacemacs
and set (global-company-mode t) which enables dumb auto-complete everywhere
that is now when i type anything if that function or variable name is used previously only then it will suggest me, its not smart.

I have did alot of research and read ac-cider gives it but it shows now its depricated and i am not able to configure it in my spacemacs.

I have been stuggling for this since long now and i am pretty sure someone might have configured this in there setup can anyone help me out.??"
1415,1511014930.000048,Olen,How you guys manage `Errors` and `Failures` in `Clojure`. of course in `functional way`.
1415,1511015251.000052,Tien,Anyone in Hong Kong?
1416,1511018798.00006,Johana,"Hmm, why does Clojure accept doubles as array indices?  `(aget (into-array [1 2 3]) 0.1)`"
1416,1511018902.00005,Dirk,"<@Johana> Not an answer to your question, but this is the one last difference that we could ideally patch up in ClojureScript in order to make behavior be consistent. (We can't round down right now without breaking code that is misusing `aget` by passing property names.)"
1416,1511018926.000046,Johana,That’s exactly where my question comes from (reacting on your twitter announcement); I would rather have `aget` accept strings than doubles :joy:
1416,1511018978.000036,Dirk,"Yeah, if the entire ClojureScript community used `:checked-access` then we could conceivably safely fix things by adding an inexpensive operation to round down."
1416,1511019009.000176,Johana,It’s no big deal switching to `goog.object`. But why on earth would you pass doubles when you want ints. It seems a bug to me.
1416,1511019070.000017,Dirk,"Perhaps the answer is: Clojure only accidentally works on doubles, and it is not the intended API.; There is a cast to `int` sitting right in the `:inline` definition, though, so perhaps it is intentional."
1416,1511019124.000055,Johana,JavaScript also accepts doubles but interprets them as keys. Another source of confusion: should `aget` be more like the host or weird behavior in JVM Clojure
1416,1511019187.000098,Dirk,Valid question IMHO
1416,1511019230.000068,Johana,"```
x = {1.5: 1}
x[1.5] // 1
```"
1416,1511019653.000041,Dirk,"I successfully wrote lots of ClojureScript, relying on Clojure's semantics, without ever having learned JavaScript. Perhaps this is an argument for staying away from host semantics when you can."
1416,1511019840.000075,Johana,"Numbers and regexes have host semantics/implementations as well.; But like I said, it’s no big deal to move to goog.object for objects… just don’t understand the double behavior… maybe it has a reason… :slightly_smiling_face:"
1416,1511020422.000038,Dirk,Maybe there is no reason for it <@Johana>. It could well just be an accident of a change made to avoid reflection <https://github.com/clojure/clojure/commit/742619e583400400e69cd46ab9e9536c10afb738>
1416,1511020499.000059,Johana,"Hmm, commit message says ‘hints’ indeed…"
1416,1511020528.000066,Margaret,isn't the int cast there so that clojure defaulting to longs doesn't make things inconvenient?
1416,1511020561.000084,Dirk,"That's the hypothesis (better support for `long`, not an intention to support `double`)"
1416,1511020600.000044,Margaret,"without all the int casting clojure does, our code would get ugly with all the long-&gt;int conversions we would be doing every time we interact with methods"
1416,1511020642.000128,Dirk,So perhaps `(aget (into-array [1 2 3]) 0.1)` is not correct code and only works as an accident.
1416,1511020649.000003,Johana,I think so yes
1416,1511020955.000082,Dirk,Cool. I captured this concept in the relevant ClojureScript ticket <https://dev.clojure.org/jira/browse/CLJS-2149?focusedCommentId=47399&amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-47399>
1417,1511022617.000057,Jodie,"I was doing some inspection of stacktraces, and I noticed that I don't have `clojure/lang/RT.java` on the classpath, only `clojure/lang/RT.class`. Is that normal?; If it is normal, why is it this way? I have some other java sources on the classpath."
1417,1511022724.000114,Margaret,why would a java file be on classpath?; you can't run it
1417,1511024351.000118,Jodie,"<@Margaret> I presumed so that tooling could read it, is that not correct?"
1417,1511024611.000099,Carletta,"<@Jodie> sources are often distributed as separate source jars, to reduce jar sizes; <http://central.maven.org/maven2/org/clojure/clojure/1.9.0-RC1/> like -sources jar here"
1417,1511024659.000094,Jodie,"ah, I've found that jar. Looks like cider has an open discussion about this: <https://github.com/clojure-emacs/cider-nrepl/issues/64>; <https://gitlab.com/vise890/lein-pocketbook> works, even if very verbose. Interesting tool."
1418,1511031167.000089,Adelina,Does anyone have any preferred Clojure libraries/wrappers for working with Apache Kafka?
1418,1511031283.000001,Margaret,"YMMV but I've had the most luck with avoiding clojure bindings as much as possible and using interop, I use a few things from clj-kafka (mostly for creating the objects) and a lot of interop once I have the things to work with; <@Adelina> hi, btw, I think we met at clojure/west
for an example of why I avoid clojure bindings, there's a tendency to wrap side effecting IO operations in lazy abstractions, which is a technique that creates more problems than it solves; the abstraction of lazy computation over IO is very lossy, you can't ignore the IO so now you have to keep track of two abstractions (the IO abstraction itself, plus the laziness abstraction) and the lazy thing will tend to break things"
1418,1511031912.000098,Adelina,":thinking_face: interesting! Yeah, I think I remember meeting you at the conference!; Those are some things I definitely hadn't thought about or considered. I was trying to weigh using interop vs using an existing kafka library like clj-kafka."
1419,1511033934.000042,Lois,<@Bettyann> :flag-br:
1418,1511034603.00008,Daine,"<@Adelina> Have not seem one I’m really happy with, but not doing kafka now, but worked on a java library which wrapped the java clients. I almost used it for a pet project so did some research. Most likely I will use the java client. If I would want to to do something with the stream api, I would probably just use java."
1420,1511036143.000015,Margaret,"teng - `read` takes a stream, you can use it to repeatedly access a stream and get the next form"
1420,1511036688.000045,Gwendolyn,"I haven't used lein in a while and upgraded before I created a new project and am getting errors like this when I try and do `lein deps`: ```Could not transfer artifact enlive:enlive:jar:1.1.6 from/to central (<https://repo1.maven.org/maven2/>): Connect to  [localhost/127.0.0.1] failed: Connection refused (Connection refused)
Could not transfer artifact enlive:enlive:jar:1.1.6 from/to clojars (<https://repo.clojars.org/>): Connect to  [localhost/127.0.0.1] failed: Connection refused (Connection refused)
```; Any ideas why it's trying to connect to localhost?"
1420,1511036775.000045,Margaret,"<@Kassie> ```(with-open [rdr (-&gt;  ""clojure/conduit/src/conduit/status_transmitter.clj""       
                    (io/reader)                                                 
                    (java.io.PushbackReader.))]                                 
  (doall                                                                        
   (take-while #(not= ::done %)                                                 
               (repeatedly #(try (read rdr)                                     
                                 (catch Exception _ ::done))))))```
`((ns conduit.status-transmitter (:require [taoensso.timbre :as timbre] [conduit.kafka :as kafka] [noisesmith.component :as component] [conduit.tools.component-util :as util]) (:import (java.util.concurrent ScheduledThreadPoolExecutor TimeUnit) (java.util Date) (<http://java.net|java.net> InetAddress) (java.lang.management ManagementFactory) (javax.management ObjectName))) (defn get-cpu [] (let [mbs (ManagementFactory/getPlatformMBeanServer) oname (ObjectName/getInstance ""java.lang:type=OperatingSystem"") ls (.getAttributes mbs oname (into-array [""ProcessCpuLoad""])) usages-raw (map (fn* [p1__249#] (.getValue p1__249#)) ls) usage (map (fn* [p1__250#] (/ (* p1__250# 1000) 10.0)) usages-raw)] usage)) (defn get-all-stacks [] (map (fn*...`"
1420,1511036945.000023,Kassie,"<@Margaret> Wow, that worked! Thank you so much! I was surprised that I couldn’t find this anywhere though :slightly_smiling_face:"
1421,1511037448.00002,Berry,"```

(defstyles media
  (at-media {:orientation :landscape}
            {:html
             {:transform ""rotate(-90deg)""}}))

(css media)
(comment
 @media (orientation: landscape) {
  html-transform: rotate(-90deg);
})


@media screen and (min-width: 320px) and (max-width: 767px) and (orientation: landscape) {
  html {
    transform: rotate(-90deg);
    transform-origin: left top;
    width: 100vh;
    overflow-x: hidden;
    position: absolute;
    top: 100%;
    left: 0;
  }
}
```

how do I inject the 'screen and' into the @media part ?; found it, {:screen true}"
1421,1511039256.000066,Gwendolyn,any ideas how I can figure out what's going on with my lein? is there a better place to ask?
1422,1511040577.000011,Daniell,<@Gwendolyn> There's a <#C0AB48493|leiningen> channel -- but you could try your question since a lot of people here use `lein`...
1422,1511040628.000076,Gwendolyn,"<@Daniell> Thanks, my question is above <https://clojurians.slack.com/archives/C03S1KBA2/p1511036688000045> I found the lein channel too and posted there as well"
1422,1511040876.000005,Daniell,Maybe something odd in your `~/.lein/profiles.clj` file?
1422,1511040894.000052,Gwendolyn,I deleted my .lein folder to try and fix it
1422,1511040960.000051,Daniell,'k... Do you have any network proxy running or perhaps a firewall that might be messing with things?
1422,1511040975.000033,Gwendolyn,"nope, I am at home and using a standard ubuntu install"
1422,1511040997.000019,Daniell,Can you get to those repo URLs in a browser on that machine?
1422,1511041000.000015,Gwendolyn,"yes; curl and chrome both; `Connect to  [localhost/127.0.0.1] failed: Connection refused (Connection refused)` seems unusual to me, but I could be wrong; should it be trying to connect to localhost?"
1422,1511041049.000014,Daniell,Yeah I've never seen that. 
1422,1511041149.000067,Gwendolyn,proxy env's are all empty
1422,1511041200.000021,Daniell,Did you try `lein repl` outside a project folder? (Just to make sure there's nothing odd in your `project.clj` file)
1422,1511041212.000025,Gwendolyn,"yes, I did, I tried it from ~/"
1422,1511041582.000033,Daniell,"I'm out of suggestions at this point, sorry :disappointed:"
1422,1511041665.000073,Gwendolyn,"no problem, thanks"
1423,1511055787.000029,Audie,"I’m trying to read a json from stdin but I’m having some problems.. 

I’m using cheshire trying to convert the entry but I’m getting a “JsonEOFException: Unexpected end-of-input”

Does anyone tried to do this?; ```(ns job-queue.core
  (:gen-class)
  (:require
    [job-queue.job-queue-handler :as handler]
    [cheshire.core :refer :all]))

(defn handle-json
  [json]
  (prn ""json: "" json)
  (prn ""json decoded: "" (decode json true)))


(defn -main
  [&amp; args]
  (println ""Hi, enter the JSON!"")
  (doseq [in (line-seq (java.io.BufferedReader. *in*))]
   (handle-json in)))
```; perhaps that’s because stdin is bringing one line at a time?"
1423,1511056111.000056,Domingo,"probably, yes"
1423,1511056136.000004,Audie,"hmm
Is there a way to bring the lines all together?"
1423,1511056164.00007,Domingo,`slurp` is a common way of reading a file into a string; <http://clojuredocs.org/clojure.core/slurp>
1423,1511056376.000013,Audie,"I have tried to do with slurp but it doesn’t print anything

```(ns job-queue.core
  (:gen-class)
  (:require
    [job-queue.job-queue-handler :as handler]
    [cheshire.core :refer :all]))

(defn handle-json
  [json]
  (prn ""json: "" json)
  (prn ""json decoded: "" (decode json true)))


(defn -main
  [&amp; args]
  (println ""Hi, enter the JSON!"")
  (let [in (slurp *in*)]
    (handle-json in)))
```; am I doing something wrong?"
1423,1511056741.000001,Domingo,how are you calling it from the command line?
1423,1511056835.00007,Audie,I’m executing the command ```lein run```; and then pasting a json that is correctly formatted
1423,1511057079.000059,Domingo,"try `echo '""string""' | lein run`; I suspect `slurp` needs and EOF, which it's not getting if you're running just `lein run` and typing; (well, `ctrl-d` will send EOF, but it'll also quit the program. that works for me.)"
1423,1511057346.000001,Audie,"yeah, if I executes ```echo '""string""' | lein run``` it works; well, It’s an exercice and I have more things to do.

I’m going to move on this way; thanks a lot <@Domingo>"
1423,1511057466.000085,Domingo,glad to help!
1424,1511059288.000044,Berry,"This is a common code pattern I use:
```
(case (:tag obj)
  :foo (let [{:keys [a b c]} obj]
         ...)
  :bar (let [{:keys [x y z]} obj]
         ...)
  :cat (let [{:keys [aa dd ff]} obj]
         ...))
```

Is there a nice macro to simplify this? basically, I want to 1. dispatch on the :tag field, and 2. do a destructuring bind on keys"
1425,1511059503.000085,Sonny,You could just use a multimethod
1424,1511060004.000065,Berry,"```

(defn rule-&gt;sexp [obj [[tag &amp; vars] &amp; body]]
  `[~tag
    (let [{:keys ~(vec  vars)} ~obj]
      ~@body)])

(defmacro tdbind [obj &amp; rules]
  (let [obj-var (gensym ""obj"")] 
    `(let [~obj-var ~obj] 
       (case (:tag ~obj-var) 
         ~@(mapcat #(rule-&gt;sexp obj-var %) rules)))))


(macroexpand-1
 '(tdbind (make some obj)
         [[:rect x y]
          (* x y)]
         [[:circle r]
          (* r r 3.14)]
         [[:triangle a b c]
          (assert false ""no idea"")]))

(comment
 (clojure.core/let
 [obj9109 (make some obj)]
 (clojure.core/case
  (:tag obj9109)
  :rect
  (clojure.core/let [{:keys [x y]} obj9109] (* x y))
  :circle
  (clojure.core/let [{:keys [r]} obj9109] (* r r 3.14))
  :triangle
  (clojure.core/let
   [{:keys [a b c]} obj9109]
   (assert false ""no idea"")))))


```
is closer to what . I had in mind :slightly_smiling_face:"
1425,1511061841.000044,Ahmad,"cross-posting this link here from <#C03RZMDSH|datomic>, would appreciate any help <https://stackoverflow.com/questions/47373356/query-result-pagination-in-datomic>"
1426,1511080996.00002,Lesia,"What's your way of introducing new bindings as you test some conditions? I see that let bindings in `cond` was rejected.
<https://dev.clojure.org/jira/browse/CLJ-200?page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel>
<https://github.com/Engelberg/better-cond>"
1427,1511085123.000036,Kareen,"that's to avoid boxing; ah, sorry didn't notice I was this back in the scrollback :) "
1428,1511085322.000048,Tari,"Hi, how to get the min value's index of a vector? shall i use `(let [v [1 2 3 4]] (.indexOf v (apply min v)))`?"
1427,1511087164.000066,Kareen,you can `(apply min-key v (range (count v)))`
1429,1511087536.00007,Deborah,"Here’s my try, bit verbose; would the use of reduce make it more or less efficient than using ranges?

```
(let [v [7 2 4 3]]
  (reduce-kv
    (fn [[min-k min-v] k v]
      (if (&lt; v min-v)
        [k v]
        [min-k min-v]))
    [0 (first v)]
    v))
```; (also, doesn’t work correctly for an empty vector but gives you both key and value)"
1430,1511100620.000055,Sonny,"A multimethod would be a lot simpler; (defmulti area :tag)
(defmethod area :rect [{:keys [x y]}] (* x y)); Etc"
1431,1511124489.000054,Logan,"Hello everyone. Did anyone of you ever wrote a logging into a clojure application? I am currently building a clojure app with postgresql and one of main features should be activity log.
This feature was actualy designed after i wrote a lot of code, so customizing every database action to also make a activity log would be time counsuming and to be honest not very clean solution.; Therefore I am asking if anyone of you know any good clean solution to this? I was thinking about some posgres triggers or stuff like that, but i need to know which user in my application is doing such action"
1432,1511134299.000035,Berry,"realistically, how big can a *.cljc file get before it becomes too big ?"
1432,1511134565.000057,Kristy,<@Berry> depends on who you ask :stuck_out_tongue_winking_eye:; personally I go by these lines in general
1432,1511134648.000004,Logan,Anyone who might help me with my issue :slightly_smiling_face:?
1432,1511134699.000076,Kristy,"&gt; Did anyone of you ever wrote a logging into a clojure application? 

I'm confused by the wording"
1432,1511134724.000114,Logan,"Sorry, i will try to clarify it as much as possible; We have appplication where several users perform basic CRUD actions on postgresql database; the point is, we would like to log each of those actions with coresponding users; for example USER A added entity B with name C , or USER D edited entity (fields E F G) with values ( H I J) .. basicaly an activity log; that is readable for non-programmer admin user"
1432,1511135066.000012,Kristy,"ah got you! interesting feature. sincerely IDK. the Rails equivalent would be <https://github.com/airblade/paper_trail> which wraps every CRUD action with an object to be persisted, including a `whodunnit` column; <https://blog.clubhouse.io/auditing-with-reified-transactions-in-datomic-f1ea30610285>; switching to Datomic just for this might be overkill; otherwise dunno!"
1432,1511135371.00011,Logan,Yea .. well since I am using sqlkorma with postgres i even thought about somehow forking korma and writing this kind of logic. But it's not the clean solution im looking for. :confused:
1432,1511135497.00001,Kristy,"sql log analysis? turn `INSERT into ...` text data into new data to be inserted

would seem fragile-ish to me, can be a last resource"
1433,1511137139.000085,Tobie,"hi everyone, basic question about threading. Why doesnt this work
```
(-&gt; 10
    inc
    dec
    (fn [x] (* x x)))
```

I expected output of 100"
1432,1511137171.000082,Kristy,"```
(-&gt; 10
    inc
    dec
    ((fn [x] (* x x))))
```; as for the why... this will reveal :slightly_smiling_face:

```
(macroexpand-1 '(-&gt; 10
                    inc
                    dec
                    (fn [x] (* x x))))
```"
1432,1511137460.00012,Tobie,oh i see it now; thanks :slightly_smiling_face:; duh
1434,1511141108.000105,Al,<@Logan> have you considered a database trigger that writes to a separate logging table on inserts and updates to specific tables?
1434,1511142398.000081,Logan,"<@Al> Yes I did, but i haven't figured out how to get the current user logged in :confused:"
1434,1511142770.000115,Domingo,"<@Logan> Did I see you're using postgres? If so, `CURRENT_USER` should give you what you want."
1434,1511142878.000059,Logan,"That would be SQL user, not application user. I would need to find a way to append id of current id to every SQL query for the trigger to work :confused:; And that wouldn|t be clean anyways :confused:"
1434,1511143133.000155,Domingo,I'd create a wrapper to the database query functions that takes the logged in user as an argument. Use that data to log anywhere/way you want.
1435,1511143794.000125,Tari,Thanks. <@Kareen> <@Deborah>
1434,1511146463.000008,Logan,"<@Domingo> that actually sounds good. Are you familiar with sqlKorma ? Im wondering what would be the less possible way to wrap native sqlkorma functions for this to work.
There could for example be problem with threading macros"
1434,1511146780.000029,Domingo,"I haven't used Korma before. At a very brief glance, it's too magic for me. I pretty much just use clojure.java.jdbc and write my sql directly."
1434,1511147131.000171,Logan,"Oh, alright .. Well, i came to clojure from OOP languages with frameworks like SpringMVC .. so at least a querybuilder is kinda a must for me :smile:"
1434,1511147588.000153,Willow,this may be a good time for a simple macro. `defquery` that takes a user and then just passes everything through to a defn that includes whatever logging form you normally do.
1434,1511148101.000135,Logan,"Oh , that might actualy work."
1436,1511149865.000172,Magda,"Hello, are there any clojure libraries that play nicely with bitcoin, or any bitcoin exchanges powered by clojure?"
1437,1511153965.000052,Lovie,district0x got some work on ethereum  <https://medium.com/@matus.lestan/how-to-create-decentralised-apps-with-clojurescript-re-frame-and-ethereum-81de24d72ff5> 
1434,1511159078.000161,Daniell,<@Logan> Clojure requires a different mindset to OOP -- but you might want to look at HoneySQL as a composable way to build queries from expressions (which is compatible with `clojure.java.jdbc`).
1438,1511163742.000096,Berry,is there a way to tell clojure.core/memoize to only keep WEAK references to its arguments ? I need this to be WEAK in both clj and cljs
1438,1511164497.000123,Mario,Has anyone tried Clojure with Google App Engine Java 8 RTE ?
1438,1511165100.000034,Danyel,<@Berry> no but I guess it wouldn't be too hard to roll your own version of memoize using weak maps. Be careful of browser support though.
1439,1511171023.000479,Delsie,does clojure have any libraries pertaining to data analysis/data science?
1439,1511172093.000129,Elois,Howdy. What would you guys recommend for putting together a simple ReSTful API for passing JSON from Mongo to a web client?
1439,1511172280.000136,Ed,<@Mario> I have been using it for a project for the past couple months and it mostly just works. Most quirks are due to the way the developer server is set up and the REPL. Let me know if you have specific questions and happy to help.
1440,1511173915.000011,Kenia,"hey guys, does somebody know the owner of `<http://tryclj.com|tryclj.com>`? I just tried it today and it says that the domain name has expired :confused:
Just putting it here hoping it that the owner sees it."
1440,1511173975.00002,Shantae,"maybe a clone on `<http://try.clojure.org|try.clojure.org>`

The repo is here
<https://github.com/Raynes/tryclojure>"
1440,1511173988.000157,Kareen,"unfortunately the owner passed away last year (see <https://cemerick.com/2016/12/07/rip-anthony-grimes/>), not sure if anybody else has access to the domain"
1440,1511174187.000437,Kenia,"oh, didnt know that. Well there are now some other websites out there with Clojure repl so it shouldnt be a problem."
1441,1511175409.000408,Audie,"Guys, is there a beautiful way to implement this in clojure?

```(defn handle-job-entity
  [result {:keys [new_agent new_job job_request] :as entity}]
  (when new_agent
    (handle-new-agent entity))
  (when new_job
    (handle-new-job entity))
  (when job_request
    (handle-job-request entity)))```

Every time I receive an entity that has this three keys but only one is true at a time"
1441,1511175693.000435,Kristy,<@Audie> multimethods
1441,1511175954.000144,Audie,"ok, I’ll take a look into it
tks"
1441,1511176046.00016,Kristy,"<@Audie> I had this in mind:

```
(defmulti a (fn [result command]
                 (-&gt;&gt; command (filter second) ffirst)))

(defmethod a :new_agent ...)
```

hope it helps!"
1441,1511176242.000353,Kenia,"<@Audie> if all functions use the same argument, why dont you just pass the function as argument? `(handle-job-entity new-whatever entity)` and inside it, you just do `(new-whatever entity)`"
1441,1511176447.000353,Mario,Have you been using standard or flexible environment ? I was looking at setting up project for standard environment. It seems like you have to do a fair bit of hackery if you want to use leiningen for building the project. :slightly_smiling_face:
1441,1511176525.00031,Audie,"But in that case, how can I know what function to pass? I think I’d have to check that three values; I’m having a hard time to go from OOP to funcional; It’s a whole new way to think"
1441,1511176894.000331,Kenia,"<@Audie> the code that calls `handle-job-entity` *must* know which function to call, otherwise it would not be possible to pass it as an argument as you show above. I assumed that you were in control of that code."
1441,1511177066.000112,Audie,"Yes, I am.

The function that calls `handle-job-entity` is `handle-job-entities`

```(defn handle-job-entities
  [job-entities]
  (reduce handle-job-entity {} job-entities))```; So in this function will I have to check some how that same values I’m receiving in `handle-job-entity` and pass the correct function right?; Is this a better approach than implementing using multimethods?"
1441,1511178114.000032,Kenia,<@Audie> it depends. Multimethods are much more flexible but if you are just starting I would recommend you to stay with the basics. That way you can avoid overloading yourself with new stuff.
1441,1511178293.000248,Audie,"I see. Good idea :grimacing:

But in that case where I pass the function depending on the value of that three keys, would’n I end up with the same problem before?; I’ve tried to do like this:

```(declare handle-new-agent handle-new-job handle-job-request)

(def entity-functions {:new_agent handle-new-agent, :new_job handle-new-job, :job_request handle-new-job})

(defn handle-new-agent
  [result entity]
  (prn ""handle-new-agent: "" entity))

(defn handle-new-job
  [result entity]
  (prn ""handle-new-job: "" entity))

(defn handle-job-request
  [result entity]
  (prn ""handle-job-request: "" entity))

(defn handle-job-entities
  [job-entities]
  (reduce (fn [result entity] ((entity-functions (first (keys entity))) result entity)) {} job-entities))
```; But it gives me an `Attempting to call unbound fn: #'job-queue.job-queue-core/handle-new-agent`"
1441,1511181826.000255,Kristy,put the `def`   before the last `defn`; i.e. you cannot do this `:new_job handle-new-job` before the `defn handle-new-job`
1441,1511181958.000269,Audie,"sorry, I forgot that before the `def`I have:

```(declare handle-new-agent handle-new-job handle-job-request)```; just fixed"
1441,1511182081.000238,Kristy,in that case code looks fine!; might it be that it's inconsistently evaluated into the repl? try loading it from scratch
1441,1511182512.000196,Audie,"if I remove the `declare`and put the `def` after the last `defn`as you said, It works; but why is that? the declare did not bind with the function?"
1441,1511184087.000049,Kristy,"<@Audie> at first sight I would have said the code worked tbh; here's the fix:

`(def entity-functions {:new_agent #'handle-new-agent, :new_job #'handle-new-job, :job_request #'handle-new-job})`; (that's 'var quote' syntax)"
1441,1511184146.000269,Audie,"oh my..
can you please tell me why is it necessary?"
1441,1511184459.000008,Kristy,"`declare` returns special `clojure.lang.Var$Unbound` objects, you aren't supposed to handle them directly as the `(def entity-functions ...` code does; a simpler lesson would be: define things in a way that the compiler can resolve at every moment; coming from other languages you might be tempted to define higher-abstraction-level functions first, it would be nice if Clojure favored that style but it doesn't"
1442,1511184980.000032,Jodie,"```
(condp #(get %2 %1) entity
  :new_job
  (handle-new-job entity)
  :new_agent
  (handle-new-agent entity))
```"
1441,1511185041.000273,Jodie,<@Audie> This is how I would approach this problem ^^
1441,1511186424.00015,Audie,Thanks guys. I really appreciate the help <@Jodie> <@Kristy> <@Kenia> !
1443,1511186947.000657,Verna,could anybody remind me the easiest way to get start/end of the year for the datetime instance? I checked `clj-time` sources but without result (or did I skipped those functions?). thanks.
1443,1511187998.000598,Audie,<@Verna> did you try `clj-time`?
1443,1511188034.000157,Verna,<@Audie>&gt; I checked `clj-http` sources…
1443,1511188057.000261,Kristy,http != time :stuck_out_tongue_winking_eye:
1443,1511188106.000148,Verna,"oh, my bad. meant `clj-time` of course.; are there any functions to jump at the beginning/ending of some period: week, month, year etc?"
1443,1511188617.000361,Randee,"<@Verna> ""get next Monday"": <https://gist.github.com/rauhs/3ec9f05f2501bfb40acec35eca3fa73e#file-java-8-time-clj-L32-L36>; It's Java 8's datetime API; Beginning/end of year should super easy, no? Just get the current year and create a new date with Jan 1 &amp; Dec 31st?"
1443,1511188761.000198,Verna,"<@Randee> thank you, the code looks interesting. Yes, dealing with the year issue would be easy. I just expected some general functions to exist.; for example, in PostresQL, there is a great `date_trunc` function; ```
select date_trunc('week', current_timestamp);
       date_trunc
------------------------
 2017-11-20 00:00:00+03
(1 row)
```"
1443,1511188977.000657,Randee,"<@Verna> Read the doc string of TemporalAdjuster, it has `TemporalAdjusters/firstDayOfYear`, and month (and last respectively)"
1444,1511189928.000535,Allie,"Hi, y'all! Is there a way to stub clj-time to return a certain time instead of now, when I call `(t/now)`? I want to write tests and I am looking for something like timecop (a Ruby gem)"
1443,1511189984.000691,Mallie,<@Allie> `with-redefs`?
1443,1511190026.000698,Allie,Sounds like it :slightly_smiling_face:
1443,1511190027.000005,Mallie,"We tend to write our stuff so that most time-based functions take in a definition of 'now' as an argument. Makes testing easier, and then we generally only generate 'now' in one place in the live code and use it where needed"
1443,1511190080.000191,Allie,"let me read about that, found it being used in the tests of clj-time :slightly_smiling_face:"
1445,1511190368.000348,Eddy,"Hey guys, I'm trying to manipulate a record in Java. It seems assoc returns an Associative type. Is there a way to get back the same record type or do I have to just cast it everytime?; example:
```
// c is a record of type ""Context"" created in Clojure with (defrecord Context [foo bar])
// this returns Associative rather than Context
c.assoc(""some_key"", ""some_val"")

//ideally I could just do this
c = c.assoc(""some_key"", ""some_val"")
```"
1443,1511190874.000238,Verna,"<@Allie> you could try using mocking library for that: <https://github.com/igrishaev/mockery>
```
(with-mock _ {:target :clj-time.core/now                 
                  :return (date-time 2017 12 31)}
  ... code goes here))
```"
1443,1511191212.000837,Mallie,What does that get you that a simple `with-redefs` doesn't?
1443,1511191563.000229,Verna,It accumulates info about numbers of calls and arguments.
1446,1511193939.000394,Guillermo,"There was a recent library I saw that implemented some sort of computation DAG, very much like AWS Step Functions. I lost the link, does it ring a bell for anyone?; (It's not prismatics/graph)"
1443,1511198359.000507,Lovie,<https://github.com/leonoel/task>
1447,1511200609.000411,Margaret,"<@Berry> core.cache has these sorts of things  <https://github.com/clojure/core.cache> - it’s very flexible but not as easy to use as memoize; the key thing for me that made core.cache “click” is that nothing in core.cache knows or cares how your mutable storage is implemented - it has a bunch of functions that accept an immutable hash map, and return an immutable hash-map, and it’s your job to figure out what to do with that hash-map in your app; compare to memoize, which implicitly uses an atom holding an immutable hash-map that you never touch directly; oh, sadly core.cache isn’t cljs compatible-  I wonder what else is out there"
1443,1511201588.000355,Guillermo,"that was it, thanks <@Lovie>"
1448,1511204112.000236,Jayne,"How can I run `lein` in verbose  mode and see the source paths that are used; I have set source path in `:dev` profile; `:source-paths [""dev/src/clj"" ""dev/resources"" ""test/resources""]`"
1448,1511204194.000441,Randee,<@Jayne> One option: run `(clojure.java.classpath/classpath-directories)` in your repl
1448,1511204232.000545,Jayne,my main file is not able to find other files in source paths
1448,1511204403.000248,Margaret,"<@Jayne> if you look at the classpath in the running repl, all your source directories need to be on the class path (and the namespace needs to form a path starting at a classpath entry matching the namespace name); ```(System/getProperty ""java.class.path"")```; a “source path” is a leaky leiningen abstraction, all clojure itself cares about is the classpath"
1448,1511204549.000539,Jayne,<@Margaret> I do see the directory in class path; but I get file not found; when I do `lein uberjar`
1448,1511204576.000345,Margaret,"then the path to your file does not match the namespace, or it failed to load for some other reason and you misunderstood the error"
1448,1511204625.000496,Jayne,"`Exception in thread ""main"" java.io.FileNotFoundException: Could not locate ****/system__init.class or ****/system.clj on classpath., compiling:(server.clj:1:1)`"
1448,1511204693.000712,Margaret,"well, the part where the problem is would be in the **** somewhere - double check that `-` is translated to `_` and that the file path from the classpath root matches the full namespace"
1448,1511204733.000723,Jayne,**** is just a single word; name of our project; without any `-` or `_`
1448,1511204776.000474,Margaret,and you have a /****/system.clj on the classpath during uberjar creation?
1448,1511204815.000622,Jayne,How can I check the classpath while uberjar ?
1448,1511204859.000482,Margaret,```lein with-profile uberjar cp```
1448,1511204940.000134,Jayne,yeah <@Margaret> its not there; Its in dev profile
1448,1511204958.000151,Margaret,dev profile is for things you only use in dev
1448,1511204959.000185,Jayne,and isn’t dev profile loaded by default ?
1448,1511204962.000169,Margaret,no
1448,1511204980.000124,Jayne,`lein with-profile dev uberjar`
1448,1511204980.000417,Margaret,it’s specifically for things you want during dev but not while making an artifact
1448,1511204987.000154,Jayne,should this work ?
1448,1511205005.000728,Margaret,"don’t do that! if you need the source files in your uberjar, put them in the normal source paths, don’t put them in dev; if you add the dev profile to your uberjar command, you also pull in things that are only needed during dev (especially a risk with tools like cider that add to your dev profile); it would also mean your test files would end up in the jar - not usually what people want"
1448,1511205438.000592,Jayne,Thanks <@Margaret> I was stuck on it for some time. Didnt know how to check class path.; Can you please explain this command ```lein with-profile uberjar cp``` in one line
1448,1511205487.000117,Margaret,"it says “use the uberjar configuration, and run the cp command”; “lein cp” would run lein with the default profile and show the classpath; you can also use `lein with-profile +foo ...` to merge rather than replace profiles"
1448,1511205562.000121,Jayne,okay so `:uberjar` it self is a profile; ?; one that comes as default with lein ?
1448,1511205585.000181,Margaret,"uberjar is a profile, yes - you can see a lot more example and info in the output of `lein help sample`"
1448,1511205602.000549,Jayne,Thanks <@Margaret>.
1449,1511206991.000619,Anneliese,any recommendations of mocking libraries ??
1449,1511207264.000562,Guillermo,clojure folks tend to avoid mocking
1449,1511207294.000481,Mia,"depends on the features you need, but we (CircleCI) use <https://github.com/circleci/bond>"
1449,1511207341.000372,Guillermo,I have had good success in the past with making protocols that represent external side-effects (e.g. a mail server) and then reifying dummy impls.
1449,1511207344.000018,Mia,very simple and light
1449,1511207348.000536,Anneliese,<@Guillermo> but how can i test a function that depends on another one that calls external systems or has side effect; <@Guillermo> I got your point
1449,1511207384.000651,Guillermo,"if you feel the need to mock, you might have a global that needs to be an argument."
1449,1511207410.000319,Mia,^^ that’s an awesome way to think about it
1449,1511207412.000614,Guillermo,(I'm speaking in vast generalities)
1449,1511207415.000405,Margaret,"ideally the external functionality has a thin wrapper that you can easily cover with integration tests, and you can pass in an alternate stub implementation for testing things that use it; (I think this expands on what ghadi was saying); sometimes it’s even worth making a protocol, in order to have two implementations (the stub and the one that uses some external / stateful / side effecting resource)"
1449,1511207579.000583,Guillermo,"If you're using Ring or similar, you can make a middleware that inserts the appropriate implementation into the request context, that way you don't have to grab it from a global var"
1449,1511207647.000467,Anneliese,<@Margaret> <@Guillermo> I got the point but I really don't know why we should avoid mocks? aren't they easier than stubing protocols?
1449,1511207693.000484,Margaret,"they lead to unneeded complexity, you end up wrangling an implicit global state in order to verify something that shouldn’t care about it; with-redefs for example causes a multitude of problems, including preventing parallel testing; if you really want the easier / global / implicit thing, at least implement it in terms of something that uses an explicit argument to the function - you can easily build implicit / global / stateful out of explicit immutable arguments, but it is much harder to go the other way"
1449,1511207844.000054,Anneliese,valid point but this will add too many types and records which i try to avoid most of the time
1449,1511207918.000324,Margaret,"you can do it without a protocol or record - I only mention using a protocol (which in my practice means using a reify in the test, and either a record or reify in the implementation) - because that can simplify the swapping of implementations; if you prefer functions, use functions, it does work"
1449,1511208034.000385,Anneliese,<@Margaret> thnx
1449,1511208372.000158,Ed,"Standard environment. Yeah, it takes a little bit, but it's a lot easier now that there are no restrictions on what classes to use. Let me know if you have specific questions and if there's interest, I might publish it as a lein plugin."
1450,1511209399.000251,Edward,are there any known gotchas involving partial application around a `stest/instrument`ed function ?
1450,1511210725.000327,Jayne,"I get this error
`Warning: The Main-Class specified does not exist within the jar. It may not be executable as expected. A gen-class directive may be missing in the namespace which contains the main method, or the namespace has not been AOT-compiled.`"
1450,1511210852.000093,Margaret,"you can run an uberjar without AOT if you can specify the java command line: `java -cp my-uber.jar clojure.main -m my.ns`; if you need the jar to be startable or loaded by some other java process, you probably need aot though"
1450,1511211199.0001,Jayne,Thanks <@Margaret>. I was missing `(:gen-class)`; in the main file
1451,1511213602.000631,Lori,"I have a `wrap-auth` fn in compojure-api, and an endpoint where I'd like it to be conditionally applied
contingent on a query parameter
is that possible?; ex, either they're authenticated, or a query param has a valid signature (in which case, non-authd is fine)"
1450,1511214675.000409,Margaret,"yes, you can make a middleware that either returns the handler unchanged, or applies a middleware, based on some property of the request-map; something like `(defn conditional-middleware [pred? middleware handler] (fn [request] (if (pred? request) ((middleware handler) request) (handler request))))`; if you don’t like `((` you can use let to bind the wrapped handler"
1450,1511214780.000509,Lori,"oh nice, I think that'll work thank you!"
1450,1511214860.000446,Margaret,"the devilish thing with ring is it’s very flexible and things like this are easy to apply, but it can be very hard to debug when you have enough wrappers like this - my theory is that pedestal interceptors are an improvement as they are data you can investigate on the fly but haven’t used them in anger"
1450,1511215066.000109,Lori,"I'm in the same camp, anytime I can convert ""effects"" to data, it tends to be a win"
1450,1511215895.000027,Sandy,"Ring is also rather anti-async, you can bolt-in async stuff, but it doesn't work super well."
1452,1511217656.000206,Lovie,from r/Clojure/ :slightly_smiling_face:
1453,1511219451.000424,Lori,"relatedly, I have a `:path-param` that I'm trying to pull off the `request` in my `wrap`per
but the best I can find on there is `:path-info` which has my route un-parsed
is there place I can get a parsed `:path-param`, eg for `myroute/:x`, `(get-in request [:path-params??? :x)`"
1453,1511220274.000059,Rebeca,"basically ""no""; longer answer is it depends on which library you using for routing; even longer is it depends on which library you use for routing and if you use it to do routing before or after your middleware is run"
1454,1511222405.000018,Shira,"Using bidi and yada you can get this, I suspect bidi with Ring would get you most of the way there too. If I understand the question correctly"
1455,1511257866.000021,Pattie,G’day all. Is the closure.algo.generic really the only standard-ish library fmap? That’s astounding! Is there a transducer for it? I like the look of <@Eunice> but might be a bit much stuff for all I need (at the moment)... mind you I’ll probably use ap and lift soon enough.
1455,1511258028.000328,Ed,"Here's a preview of the latest setup I'm working with. Main draw back at the moment is no nrepl support, but using a socket repl. Definitely a couple of other rough edges, but thought I'll share. For anyone else interested, feel free to reach out. <https://gist.github.com/alpeware/f18bef80cb521347d22b85f1ad07ada7>"
1455,1511271667.000464,Sandy,"<@Pattie> by fmap you mean monads? Then yes, monad usage is quite rare in Clojure except when no other approach will work (for example in test.check)."
1454,1511271717.000613,Sandy,"In general Clojure tends to drive abstractions with data, and data interpreters/compilers instead of directly with functional composition."
1456,1511273865.000635,Timmy,"hey all. I’ve got a function that provides me with a list of all the possible combinations of values from two lists:
```
(defn all-combinations
  ""Return all possible combinations of values from as and bs collections.""
  [as bs] (apply concat (for [a as] (for [b bs] [a b]))))
```; I’d like to do this to a list of lists rather than just a pair of lists.; Has anyone got any hints for doing so neatly?"
1456,1511274387.00016,Adrien,<@Timmy> Perhaps <https://github.com/clojure/math.combinatorics>
1456,1511274423.000394,Timmy,Thanks <@Adrien> cartesian-product looks just the job
1456,1511274886.000684,Adrien,"Np! A small side note: your original implementation can be simplified to
```
(defn all-combinations
  ""Return all possible combinations of values from as and bs collections.""
  [as bs] (for [a as b bs] [a b]))
```"
1456,1511274946.000691,Timmy,oh lovely! thankyou
1456,1511274994.000524,Dakota,Plz help cteate and use data base. Telegram Bot. Morse dep; 🦌;  🧐; :flushed:
1456,1511283682.000303,Hedwig,"<@Dakota> Are you the beginning of the singularity? Morse dep, bro!"
1457,1511285050.000178,Mina,"Hello, wanted to hear your opinions on `honeysql` and `yesql`.
I want to build a small web app on top of a RDBMS and I wonder how should I handle the queries.
Any thoughts or past experience?"
1457,1511285091.000745,Mia,I prefer <#C3EATG7EV|hugsql>; you can also ask in <#C1Q164V29|sql>
1458,1511294834.000568,Lori,"i have a long list of `let` bindings where a conditional could branch an error at any time
options:
1. I have many-nested `(let [...] (cond ... (let [...] (cond ...`
2. ~would it be idiomatic to build the `let` ""context"" as a record getting passed down a `(cond-&gt;`?~
3. something else?; actually, step 2 doesn't seem to work like I want; basically, I'd just like a long list of let bindings, that depend on things before them, but if I have a conditional branch during that process,  I can ""short circuit"" the whole thing"
1458,1511295093.000323,Earlie,"Is there a way for a deftype to extend Atom, or do I need to have an atom in its parameters and implement the lang.IAtom interface?; I assume I should do that instead of manually using mutable fields? (using `set!`?)"
1458,1511295520.000464,Jonas,"<@Earlie>, there are some cases where manually setting mutable fields might be more straightforward (eg. java interop); why won’t using a regular atom work for your usecase?"
1458,1511295768.000092,Margaret,<@Lori> let-later from useful works for that kind of thing <https://github.com/amalloy/useful/blob/develop/src/flatland/useful/utils.clj#L224>
1458,1511296246.000002,Earlie,"<@Jonas> I'm using deftype, because there are a number of other protocols to be implemented and modifications to the normal atom functions. I didn't know if there was a way for it to extend an atom, since its base data is just an atom."
1458,1511296341.000273,Lori,"interesting, that could possibly work, but I'd rather not bring in a big dependency, nor copy out what I need from EPL'd code... is there not a standard trick for me to obviate heavily nested code?"
1458,1511296394.000138,Margaret,"the typical approach is to extend all the interfaces / protocols atom implements, instead of concrete inheritance from atom itself"
1459,1511296397.000202,Hugo,I usually implement `IDeref` when I want a thing that acts like an atom
1458,1511296474.000555,Margaret,"```=&gt; (supers (class (atom nil)))
#{clojure.lang.IRef java.lang.Object clojure.lang.IMeta clojure.lang.AReference clojure.lang.ARef clojure.lang.IDeref clojure.lang.IReference clojure.lang.IAtom}```; it depends what you need - IDeref doesn’t help with eg. swap! or add-watch"
1458,1511296550.000408,Jonas,isn’t `swap!` specifically for atoms and not any other reference type?
1458,1511296617.000208,Margaret,"it depends what someone means by “acting like an atom” here - it’s fully in our power to make something that is a drop in replacement for an atom; not that I know of - you could do something similar to what let-later is doing, but more manually - making delays and only realizing them as you need them for example; there are also “monad” libraries that use the Either monad for a similar result"
1458,1511296879.00063,Jonas,"right. I ask mostly because most of the time when I’ve seen someone try to implement `IAtom`, they don’t plan to also implement all of the same semantics. if you’re not implementing all of the same semantics, I think it probably makes more sense to just use another function to manipulate your reference type just like the other clojure reference types each have their own functions, (eg. `vswap!`, `send`, `ref-set`, etc)"
1458,1511297092.000605,Earlie,"Thanks, guys, this helps."
1458,1511297105.000319,Margaret,"<@Earlie> going back to your initial question, `proxy` can extend an atom, or you can implement all the right protocols / interfaces to replicate an atom (maybe even using a closed over atom) with deftype, reify, defrecord, etc.; but it really depends on what you are trying to do, which behaviors you need, what you exactly you wanted from IAtom; because extending a clojure built in tends to be a bit tedious because of how the interfaces / protocols are factored"
1458,1511297148.000666,Earlie,Closed over meaning the deftype includes an atom as a parameter?
1458,1511297180.000147,Margaret,"as a parameter, or just creating a reify inside a let block that defines the atom - there’s a few ways to “capture” an atom for internal usage"
1458,1511297199.000308,Earlie,":thumbsup:; <@Margaret> When implementing IAtom's swap functions, is there a way to reduce duplication of swapping code? Do I need the 4 different arrity versions?"
1458,1511297813.000063,Margaret,"since you can’t control the caller, and the interface supports all those arities, I think the only safe thing is to define them all (even if they all end up calling the same variadic function); clojure will let you skip arities or even methods, but it will lead to a runtime error if they get called"
1458,1511297867.000628,Earlie,"Is there a performance benefit of not colling the other arities of the  type (duplicating the function). (e.g. should I call deref on the `this` argument, or does it make sense to reimplement the logic of the deref inline?); Oh, so an external variable arity function could be called by all of them. That's probably the cleanest."
1458,1511297916.000498,Margaret,"that’s a more general software design question isn’t it? sometimes it’s worth it to avoid the abstraction for performance / resource reasons, sometimes it makes sense to abstract and avoid the repetition; right, yeah, that’s probably cleanest"
1458,1511297938.000204,Earlie,"Yeah, I suppose it is.
Thanks!; <@Margaret> You mind giving me your opinion on this?:
```
(defn- swap-g-counter [this f &amp; args]
  (let [oldv @this
        newv (apply f oldv args)]
    (assert (number? newv) ""Swap! G-Counter function must return a Number"")
    (swap! (.p this) update (.n this)  + (- newv oldv))
    @this))

(defn- compare-and-set-g-counter [this oldv newv]
  (let [value @this]
    (if (not= oldv value)
      false
      (do
        (swap! this + (- newv value))
        true))))

(deftype G-Counter [p n]
  clojure.lang.IDeref
  (deref [this]
    (reduce + (vals @p)))

  clojure.lang.IAtom
  (swap [this f]
    (swap-g-counter this f))
  (swap [this f a]
    (swap-g-counter this f a))
  (swap [this f a b]
    (swap-g-counter this f b))
  (swap [this f a b args]
    (apply swap-g-counter this f b args))
  (compareAndSet [this oldv newv]
    (compare-and-set-g-counter this oldv newv))
  (reset [this newv]
    (swap! this + (- newv @this))
    newv))

(defn gcounter []
  (new G-Counter (atom {:id 0}) :id))
```"
1458,1511298621.000662,Margaret,using @ and swap! in the same function is usually a race condition
1458,1511298680.000024,Earlie,On the reset function? So the `@this` should be bound before `swap!`?
1458,1511298680.000422,Margaret,"you probably want compare-and-set! which allows more complex logic; <@Earlie> at a quick skim, every single function that uses @ and swap! in the same body is a likely race condition; I mean, you even have compare-and-set in the name, so implementing via compare-and-set! is much more likely to be correct"
1458,1511298780.000234,Earlie,I'm not following how it would be a race condition.
1458,1511298785.000028,Margaret,"and yes, looking closer, those are definite race conditions in both of the first two functions"
1458,1511298807.000174,Earlie,"Right, I didn't think about how the normal `compare-and-set!` would use my custom reset logic. I'll switch to that."
1458,1511298837.000086,Margaret,"<@Earlie> `(+ newv oldv)` - this is a race condition, oldv came from a deref, the swap! itself will retry, but your function won’t so it will use stale data in a race; `(not= oldv value)` - the truth value of this can change before the swap! runs"
1458,1511298870.000288,Earlie,"<@Margaret> Oh! Thanks for clerifying that. I'm following now.; I'd completely neglector the retrying functionality of atoms.; <@Margaret> Oh, I can't use the normal `compare-and-set!`, because I'm not wanting the atom reset to the newval; only a subset of the atom can ever be set.; `compare-and-set!` uses a java interop `.compareAndSet`"
1458,1511299029.000314,Margaret,"you can’t use it to implement your full functionality, but to preserve expected atom semantics it needs to be your building block"
1458,1511299051.000038,Earlie,It is? `compareAndSet`; Between swap and reset
1458,1511299072.000661,Margaret,"you can’t just mix @ and swap! of the same atom and expect correctness of any sort; but you can get it by using compare-and-set, with your own retry condition, etc."
1458,1511299121.000451,Earlie,"Oh, I think I'm following. I'll try implementing that."
1458,1511299160.000413,Margaret,"the idea is to use compare-and-set to wrap both the read and the modification, and then recur as your retry if the operation did not succeed"
1458,1511299506.000076,Jonas,is there a reason you want your reference type to use the atom functions instead of creating new functions to interact with your reference type?
1458,1511299567.000133,Earlie,Mostly as a proof of concept / out of curiosity at the moment.
1458,1511299630.00003,Jonas,"it seems like instead of putting counter related logic inside of `swap!` and `deref`, it might make more sense to put that logic in another function that takes an atom as an argument"
1458,1511299702.000355,Earlie,"Well my thought was to abstract it, so users can completely ignore the implementation details of the crdt. :shrug: I think I'll do it both ways and see how it feels."
1458,1511299726.000433,Pattie,"Not a Monad, no.

By fmap I mean (at the minimum) to be able to apply a function to the members of something that this can be done to such that it creates another thing that this can be done to whose members are the result of applying that function.

This is very much something we’d want to do with abstract data structures. Like a vector or a map.

If it happens to follow the rules of being a Functor (which a Monad does, yes), then great."
1458,1511299727.000041,Jonas,I would actually probably have the functions work on immutable data; and then let the consumers of the counter decide if they want to use an atom or other reference type
1458,1511299759.000013,Earlie,"Yeah, that's likely how I'd do it.; How can I get two `swap!`s to run at the same time to test retrying?; Oh, it was just too fast... A Thread/sleep did the trick."
1458,1511301214.000129,Margaret,yeah - adding sleeps (maybe randomized) is a quick way to get race conditions to happen
1458,1511301236.000285,Earlie,Randomized is a good idea
1458,1511301275.00012,Margaret,combining randomized timeouts / sleeps with looped calls is a great way to stress test things that might misbehave; (in terms of race conditions that is)
1458,1511301523.000149,Earlie,<@Margaret> So I'm still not quite seeing the purpose of `compare-and-set!`. Is there a reason I shouldn't just implement `reset!` inside it with the new value if the old value is the expected value?
1458,1511301569.000034,Margaret,"the point of compare-and-set! is that atoms don’t lock, and you need to be able to retry if the value changes before your update completes"
1458,1511301600.000427,Earlie,"Which `reset!` would do, right?"
1458,1511301605.000492,Margaret,no; how would it even know?
1458,1511301619.000315,Earlie,"Oh, unless you have some sort of abstract logic based on the value?; I think I'm starting to understand."
1458,1511301632.000434,Margaret,"reset! never retries, and the condition you would need to detect in order to retry is outside the scope of the reset! call; which is why you have compare-and-set!"
1458,1511302870.000413,Earlie,"<@Margaret> Mind giving this another look?
```
(defn- project-g-counter [p]
  (reduce + (vals p)))

(defn- swap-g-counter [p n f &amp; args]
  (let [oldv (project-g-counter p)
        newv (apply f oldv args)]
    (assert (number? newv) ""Swap! G-Counter function must return a Number"")
    (assert (&gt;= newv oldv) ""G-Counter is grow only"")
    (update p n + (- newv oldv))))

(deftype G-Counter [p n]
  clojure.lang.IDeref
  (deref [this]
    (project-g-counter @p))

  clojure.lang.IAtom
  (swap [this f]
    (swap! p swap-g-counter n f)
    @this)
  (swap [this f a]
    (swap! p swap-g-counter n f a)
    @this)
  (swap [this f a b]
    (swap! p swap-g-counter n f a b)
    @this)
  (swap [this f a b args]
    (apply swap! p swap-g-counter n f a b args)
    @this)
  (compareAndSet [this oldv newv]
    (loop []
      (let [pval @p]
        (if (not= oldv (project-g-counter pval))
          false
          (or (compare-and-set! p pval (swap-g-counter pval n + (- newv oldv)))
              (recur))))))
  (reset [this newv]
    (assert (number? newv) ""Reset! G-Counter value must be a Number"")
    (swap! this (partial + (- newv @this)))
    newv))

(defn gcounter []
  (new G-Counter (atom {:id 0}) :id))
```"
1460,1511302999.000134,Rebeca,that is all race conditions
1458,1511303081.000223,Margaret,<@Earlie> I can see you are trying but <@Rebeca> is right - all the code that uses deref and swap! in the same block of code is setting up a race of some sort
1458,1511303142.000278,Rebeca,"swap returns the value swapped in, derefing after the swap could return anything"
1458,1511303167.000344,Margaret,what I meant about compare-and-set! is that to make this code correct the whole thing needs to be inside a compare-and-set! loop which can either let the caller know if it failed or retry if there was any modification outside
1458,1511303193.000213,Earlie,"Oh, right, I need to use `project-g-counter` on the return value of `swap!` instead.
Is there something somewhere else?"
1458,1511303219.000607,Margaret,the various places you call swap! then return @this for example
1458,1511303260.000153,Earlie,"I realize that problem now:
```
  clojure.lang.IAtom
  (swap [this f]
    (project-g-counter (swap! p swap-g-counter n f)))
  (swap [this f a]
    (project-g-counter (swap! p swap-g-counter n f a)))
  (swap [this f a b]
    (project-g-counter (swap! p swap-g-counter n f a b)))
  (swap [this f a b args]
    (project-g-counter (apply swap! p swap-g-counter n f a b args)))
```"
1458,1511303336.000328,Jonas,"someone posted and example of using `compare-and-set!` recently, <https://github.com/plumatic/plumbing/blob/master/src/plumbing/core.cljx#L360>"
1458,1511303405.000155,Earlie,Is there something wrong with the implementation of compare-and-set! above?
1458,1511303711.000033,Margaret,"you don’t seem to understand why I was mentioning compare-and-set! - in order to check an arbitrary condition and retry if the value is modified and also return an arbitrary value other than the thing you just modified, compare-and-set! is the ideal tool; it lets you keep the logic you wanted without having all the race conditions (as long as you use it properly)"
1458,1511303825.000114,Earlie,"Oh, you're saying compare-and-set! should be used not only for the implementation of compareAndSet, but also for the other implementations too?"
1458,1511303871.000035,Margaret,right - it lets you coordinate in a more flexible way than swap!
1458,1511303888.000298,Earlie,"I apologize for not reading that more carefully. Makes sense. :slightly_smiling_face:; I didn't even know `compare-and-set!` was a thing until I went to implement IAtom.; <@Margaret> Like this?
```
(defn- project-g-counter [p]
  (reduce + (vals p)))

;; (defn- swap-g-counter [p n f &amp; args]
;;   (let [oldv (project-g-counter p)
;;         newv (apply f oldv args)]
;;     (assert (number? newv) ""Swap! G-Counter function must return a Number"")
;;     (assert (&gt;= newv oldv) ""G-Counter is grow only"")
;;     (update p n + (- newv oldv))))

(defn- swap-g-counter [this f &amp; args]
  (let [p (.p this)
        n (.n this)]
    (loop []
      (let [oldval @this
            newval (apply f oldval args)
            pval @p
            nval (update pval n + (- newval oldval))]
        (if (compare-and-set! p pval nval)
          newval
          (recur))))))

(deftype G-Counter [p n]
  clojure.lang.IDeref
  (deref [this]
    (reduce + (vals p))
    ;; (project-g-counter @p)
    )

  clojure.lang.IAtom
  (swap [this f]
    (swap-g-counter this f)
    ;; (project-g-counter (swap! p swap-g-counter n f))
    )
  (swap [this f a]
    (swap-g-counter this f a)
    ;; (project-g-counter (swap! p swap-g-counter n f a))
    )
  (swap [this f a b]
    (swap-g-counter this f a b)
    ;; (project-g-counter (swap! p swap-g-counter n f a b))
    )
  (swap [this f a b args]
    (apply swap-g-counter this f a b args)
    ;; (project-g-counter (apply swap! p swap-g-counter n f a b args))
    )
  (compareAndSet [this oldv newv]
    (loop []
      (let [pval @p]
        (if (not= oldv (project-g-counter pval))
          false
          (or (compare-and-set! p pval (swap-g-counter pval n + (- newv oldv)))
              (recur))))))
  (reset [this newv]
    (assert (number? newv) ""Reset! G-Counter value must be a Number"")
    (swap! this (partial + (- newv @this)))
    newv))

(defn g-counter []
  (new G-Counter (atom {:id 0}) :id))
```"
1458,1511304784.00012,Margaret,I don’t get what’s happening in `reset` but the rest looks better at a first glance
1458,1511304888.000292,Earlie,"Rreset needs to take the value the user wants the counter to be and find the difference between the that and the current value of the counter, then it adds that to the value in the map the user is allowed to modify.; ```
  (reset [this newv]
    (assert (number? newv) ""Reset! G-Counter value must be a Number"")
    (swap! this #(+ % (- newv @this)))
    newv)
```
I had this originally. I suppose it's more readable.; Can a swap function deref the atom it's swapping?; It's weird, because derefing doesn't return the same value as the swap function accepts."
1458,1511304993.000348,Margaret,"I don’t know if that’s correct yet, but fyi you can always replace `(swap! a #(f % b))` with `(swap! a f b)`"
1458,1511305012.000015,Earlie,"Oh yeah, good point. :thumbsup:; Much cleaner; Actually, swap does accept the current counter value. There's no need for the `@this`"
1458,1511305073.000323,Margaret,"a deref of the same atom inside the function arg to swap! is safe because if the atom changes you will retry the swap!; but yes, that too"
1458,1511305109.000226,Earlie,"That's what I thought, which is why I hadn't thought about it.; ```
  (reset [this newv]
    (assert (number? newv) ""Reset! G-Counter value must be a Number"")
    ;; (swap! this + (- newv @this))
    (swap! this #(+ % (- newv %)))
    newv)
```; ... I'm not sure why I'm doing this. It just needs to return the newv, and the swap! will handle the difference stuff.; ```
  (reset [this newv]
    (assert (number? newv) ""Reset! G-Counter value must be a Number"")
    (swap! this (constantly newv))
    newv)
```"
1458,1511305344.000507,Margaret,won’t the swap! call already return newv?
1458,1511305362.000292,Earlie,"Uh, yeah, it will.; Well, that shrunk a lot...; It feels a little weird to use swap for reset, though I suppose that allows me to keep the difference logic in the same place.; I'm pretty happy with that.
For anyone interested:
```
(defn- swap-g-counter [this f &amp; args]
  (let [p (.p this)
        n (.n this)]
    (loop []
      (let [oldval @this
            newval (apply f oldval args)
            pval @p
            nval (update pval n + (- newval oldval))]
        (assert (number? newval) ""Swap! G-Counter function must return a Number"")
        (assert (&gt;= newval oldval) ""G-Counter is grow only"")
        (if (compare-and-set! p pval nval)
          newval
          (recur))))))

(deftype G-Counter [p n]
  clojure.lang.IDeref
  (deref [this]
    (reduce + (vals p)))

  clojure.lang.IAtom
  (swap [this f]
    (swap-g-counter this f))
  (swap [this f a]
    (swap-g-counter this f a))
  (swap [this f a b]
    (swap-g-counter this f a b))
  (swap [this f a b args]
    (apply swap-g-counter this f a b args))
  (compareAndSet [this oldv newv]
    (loop []
      (let [pval @p]
        (if (not= oldv (project-g-counter pval))
          false
          (or (compare-and-set! p pval (swap-g-counter pval n + (- newv oldv)))
              (recur))))))
  (reset [this newv]
    (assert (number? newv) ""Reset! G-Counter value must be a Number"")
    (swap! this (constantly newv))))

(defn g-counter []
  (new G-Counter (atom {:id 0}) :id))
```; Thanks, <@Margaret>, <@Jonas>, <@Rebeca>!
I appreciate the help."
1461,1511305981.000402,Jonas,how does the `deref` method work? isn’t `p` an atom?
1458,1511306053.000466,Jonas,seems like calling `vals` on `p` in the deref method would throw an exception
1458,1511306120.000247,Earlie,"Yeah, that's a typo. I've fixed it:
```
  clojure.lang.IDeref
  (deref [this]
    (reduce + (vals @p)))
```; I'm not sure when that got changed."
1458,1511306269.000013,Jonas,"i might be reading it wrong, but seems like there’s still a race condition in your `swap-g-counter` function"
1458,1511306305.000094,Margaret,the compare-and-set! will fail if p no longer olds pval; that’s the point of using that function
1461,1511306320.000369,Jonas,`p` is dereferenced twice
1458,1511306332.000301,Margaret,inside a loop that retries if the compare-and-set! fails; and the compare-and-set! will fail if p changes
1458,1511306366.000187,Jonas,"so if it changes between the 1st and 2nd dereference, but not between the 2nd dereference and `compare-and-set!`; it would be inconsistent; since the new value is derived from both the 1st and 2nd dereference; and the first and second dereference might have different values"
1458,1511306412.00008,Margaret,no- if it changes between binding oldval and compare-and-set! the compare-and-set will fail
1458,1511306443.000243,Jonas,"`oldval` isn’t passed into `compare-and-set!`, `pval` is"
1458,1511306465.000066,Margaret,"oh, tricky; yeah, this is weird"
1458,1511306493.000271,Earlie,"Yeah, I need to get a better naming convention."
1458,1511306521.000191,Jonas,i think the code would be simplified a lot by having functions that work on immutable counter data
1458,1511306536.000121,Margaret,I think you need nested compare-and-set! calls to ensure consistency on both dereferences?
1458,1511306538.000057,Jonas,"and using a plain ol’ atom to hold the data; if you really wanted it to work with this interface, you could have `pval` use the data from the `oldval` dereference"
1458,1511306663.000413,Earlie,"Yeah, I think I'm going to need to switch to immutable functions anyways for my merging logic.
At the moment I'd need to have a function which takes one of these and a p (from somewhere else) and merge them. I'd also need another function to get the p out to send elsewhere."
1458,1511306689.000419,Jonas,the nice thing about atoms is that they just encapsulate identity. I don’t think you want to mix the identity and state pieces into one thing
1458,1511306701.000243,Earlie,"pval can't use oldval, because oldval is just an integer.; Yeah, I think you're right."
1458,1511306740.000082,Jonas,"right, I guess you would have to have `oldval` derive from `pval`"
1458,1511306758.000183,Earlie,"Good call, that's something that it could do.; Though I'd need to bring back project-g-counter for the reduction function."
1458,1511306811.000123,Jonas,"yea; or as long as you dereference `pval` before you do the dereference for `oldval`, it would work; actually, nvmd; i take that back; I think you have to do it with a single dereference; other wise it could change in between dereferences and then change back"
1458,1511306961.000388,Earlie,"```
(defn- swap-g-counter [this f &amp; args]
  (let [p (.p this)
        n (.n this)]
    (loop []
      (let [pval @p
            oldval (reduce + (vals pval))
            newval (apply f oldval args)
            nval (update pval n + (- newval oldval))]
        (assert (number? newval) ""Swap! G-Counter function must return a Number"")
        (assert (&gt;= newval oldval) ""G-Counter is grow only"")
        (if (compare-and-set! p pval nval)
          newval
          (recur))))))
```; Yeah, I'm pretty sure it's needed."
1458,1511307017.00004,Jonas,:thumbsup:
1462,1511307922.000067,Lori,"I'm using `wrap-json-response`, but I'd like to opt out and return `Content-Type: text/html` sometimes, is there an easy way out?; (oh, I'm working within  Compojure-API)"
1462,1511308323.000303,Margaret,"so you have one endpoint, that would sometimes return json and sometimes return html?"
1462,1511308566.000355,Lori,"<@Margaret> correct, based on their request header of `Content-Type`, so they can have json or html; I think I need to just pull out this route from the main app, and add it back in separate without the offending middleware; is there a less awkward solution tho, perhaps?"
1462,1511308631.000055,Margaret,there’s no rule saying you can’t generate json inside your handler (or have a conditional in your handler that either dispatches to an html function or a json function)
1462,1511308632.000117,Lori,(the ring function `content-type` was a no go)
1462,1511308654.000351,Margaret,"those functions are just modifying data in a hash-map, if using them is at all awkward just skip them"
1462,1511308699.000116,Lori,"oh no, I mean, I'd like `wrap-json-X` most of the time, but on one route, reset it. I think what I'm setting is getting over-written though by the middleware"
1462,1511308727.000283,Audie,"<@Lori> 
I don’t know if that’s wrong, but when I need to return a different content-type I just change manually and return something like this:

{:status 200
       :headers {“content-type” “text/html”}
       :body {:message (:message (any-function))}}"
1462,1511308739.00038,Margaret,"yeah, if you want to conditionally make json you don’t want a middleware that always returns json"
1462,1511308752.000302,Audie,"if you do that, the content-type is changed?"
1462,1511308758.000073,Margaret,"that middleware isn’t doing as much as you think it is, just skip it"
1462,1511308840.000009,Audie,here I’m using `wrap-json-response` as well
1462,1511308989.000262,Lori,"<@Audie> hm, I think it's not working, still debugging:
```
(-&gt; (ok {:x y)
        (assoc ""headers"" {""content-type"" ""text/html""}))

Content-Type: application/json; charset=utf-8
```"
1462,1511310143.000084,Audie,How are configuring the handlers and middlewares of the app? can you put here?
1462,1511310262.000025,Lori,"this is weird, I've checked that I'm setting the header where the route is defined, and turned off all middleware, but the header is still reverting to `""application/json""`"
1463,1511310270.000082,Rebeca,"the above isn't even valid code, so maybe start there before dumpling all the handlers and middlewares; ""headers"" isn't the right key"
1462,1511310293.00012,Rebeca,<https://github.com/ring-clojure/ring/blob/master/SPEC#L117>
1463,1511310306.000207,Daniell,(it helps to use the `ring.util.response` functions to make sure you're creating valid responses)
1463,1511310318.000184,Lori,"<@Rebeca> apologies, I've mostly been using `(content-type ""text/html"")`"
1462,1511310371.000073,Lori,"and <@Daniell> thanks, ya that fn is in `ring.util.response`"
1463,1511310465.000242,Rebeca,and <https://github.com/ring-clojure/ring-json/blob/master/src/ring/middleware/json.clj#L103-L112> clearly shows it doesn't check Content-Type at all to determine if it needs to encode; the docstring here <https://github.com/ring-clojure/ring-json/blob/master/src/ring/middleware/json.clj#L114-L128> says it only encodes vectors or maps; which of course doesn't match the actual behavior; <https://github.com/ring-clojure/ring-json/blob/master/src/ring/middleware/json.clj#L107>
1462,1511312015.000001,Daniell,<@Lori> And what exactly is your `ok` function doing?
1462,1511312079.000048,Lori,"just returns a simple map  (`ring.util.http-response/ok`)
```
(defn ok
  ""200 OK (Success)
  OK""
  ([] (ok nil))
  ([body]
   {:status 200
    :headers {}
    :body body}))
```"
1462,1511312282.000165,Daniell,Using your `ok` and `ring.util.response/content-type` and `ring-json`'s `ring.middleware.json/wrap-json-response` seems to work as expected: <https://www.dropbox.com/s/dzts47q5bwpg59x/Screenshot%202017-11-21%2016.57.17.png?dl=0>
1463,1511312336.000265,Daniell,"The `(assoc ""headers"" ...)` you had before, definitely would not work (as <@Rebeca> said) because it uses a string instead of a keyword."
1462,1511312430.000163,Daniell,"And even if you used `:headers`, you need to capitalize the header name for it to work.; Anyways, did you get it sorted out in the end? Or are you still looking for input? <@Lori>"
1462,1511312548.00019,Lori,"haha, thanks, and no I'm still at it, brute forcing a bit
```
(-&gt; (ok (str {:recording-url signed-url}))
        (assoc ""Header"" {""Content-Type"" ""text/html""})
        (assoc ""Headers"" {""Content-Type"" ""text/html""})
        (assoc ""Content-Type"" ""text/html"")
        (assoc :Header {""Content-Type"" ""text/html""})
        (assoc :Headers {""Content-Type"" ""text/html""})
        (assoc :header {""Content-Type"" ""text/html""})
        (assoc :headers {""Content-Type"" ""text/html""})
        (content-type ""text/html""))
```"
1462,1511312604.000039,Rebeca,"as I pointed out in the link to the code, setting the content-type to ""text/html"" or anything else, will not effect wrap-json-response"
1462,1511312785.000117,Daniell,"If you set `:headers {""Content-Type"" ""text/html""}` then `wrap-json-response` will not overwrite that -- as I showed in my screenshot.; <@Lori> Your code has weird indentation!"
1462,1511312857.000009,Lori,"oh sorry, it's indented where it is, and when I paste it, I'm missing the whitespace before the first open paren"
1462,1511312869.000066,Daniell,"Ah, ok :slightly_smiling_face:"
1462,1511312884.000138,Lori,"and re your help, thank you, it must be something else in my code, I think I'll attack it tomorrow with fresh eyes"
1462,1511312930.000039,Daniell,"But, anyway, as I showed in the REPL session above, `(-&gt; (ok {...}) (content-type ""text/html""))` will ""do the right thing"" in that you'll get your desired content type and still get a body that is the JSONification of the data structure.; (so perhaps I'm not understanding what you're trying to do?)"
1462,1511313104.000023,Lori,"well, i'm trying the same code as you, but within a big code base, and for some reason that `Content-Type: text/html` is getting replaced with `Content-Type: application/json`; I'm sure it'll be surprisingly simple when I find it :face_with_rolling_eyes:"
1462,1511313132.000139,Daniell,"Er, I thought you wanted it the other way around?"
1462,1511313151.000219,Lori,"yes, oops (fixed)"
1462,1511313211.000262,Daniell,I'd write a little debugging middleware function that displayed a message and the content type and thread that into your stack of middleware in between each layer.
1462,1511313276.000051,Lori,"that's a good idea, that'll be a good place to stage round 2 of this battle :slightly_smiling_face:"
1462,1511313570.000254,Daniell,Middleware can be pretty sensitive to ordering -- so I tend to rely on the ring-defaults library for the basic stack.
1464,1511320531.000187,Berry,"when using predicates with clojure spec, is there a way, instead of just returning true/false, also return a error msg on false ?; I can't do `#(apply and %)` since `and` is a macro. What is the idiomatic way to logic-and a list ?"
1465,1511325114.00016,Jonas,`every?`?; `(every? identity coll)` would work
1466,1511330831.000116,Alla,"About middleware ordering, I have been playing with middleware as data, just like Pedestal interceptors. I think we can solve most of the middleware ordering / debugging problems with data and a mw-composer. Plan: instead of just functions, mw  are maps with `:wrap` key with the actual mw-function. In addition, they can have things like `:name`, `:spec`, `:produces` and `:requires`. Middleware-chain is vector of maps, which is composed into actual mw-function by the a composing function producing zero runtime penalty. The intermediate mw data format allows things like documentation extraction, automatic/manual re-ordering, adding debug-mw’s between all mw’s in dev etc.; we are building up a new routing library, which supports this (for both mw &amp; interceptors), but I’m wondering could it be a more general solution for Ring in the future? ping <@Ramonita>.; (and there is <#C7YF1SBT3|reitit> channel for the new lib if someone is interested in); And <@Lori> there is also Muuntaja, which does JSON content negotiation like ring-json, but also for other formats too (EDN, Transit). It has a lot of options that the endpoint can set to override the defaults. One can change just the response content-type, request a different response encoding, or disable the response encoding totally, see  <https://github.com/metosin/muuntaja#response>. c-api 2.* uses this internally."
1467,1511351597.000356,Mallie,"When I'm working with XML and zippers, is there any way to tell if the point I've got to in the zipper is an Element (as opposed to a string or whatever) *without* converting to a node first?; At the moment I'm doing `(instance? clojure.data.xml.node.Element (zipper/node location))`. `(map? (zipper/node location))` also works for the cases I care about because an element is a map and other things aren't, but it'd be nice if there was some way I could do `(element? location)` without having to convert to a node myself"
1468,1511352922.000256,Mirna,"hi guys - what is the simplest way in a Clojure server to start new threads for some async processing? Preferably with threadpools, like using Java's `ExecutorService`. I am not expecting any return value from the submitted task. `future` seems tempting but I'm afraid that they are not cleaned up if I'm not dereffing them. Is there a convenient way achieving this? Or shall I use some interop to use Java ExecutorService with fns?"
1468,1511354199.000214,Rosia,<@Mirna> what do you mean by not cleaned up ?
1468,1511354276.000247,Shameka,<@Mirna> <https://github.com/ztellman/manifold> uses an ExecutorService and will be there when you do need to use the return values :slightly_smiling_face:
1469,1511354694.000153,Zola,is there any disadvantage to using `gensym` for making up arbitrary keys? my use case is that i have a list of strings and i want to remove certain ones after a pause. since strings can be duplicated i need to assign them some sort of identifier.
1468,1511354998.000159,Mirna,"Hi <@Rosia> I mean that the thread will remain in the memory, its stacktrace will consume the available stack and if I end up having too many, I could run out of memory"
1469,1511355052.000146,Zola,"(with the understanding that gensym won't be unique across different instances of the same app, of course)"
1468,1511355226.000377,Rosia,`future` basically wraps the body in a `fn` and submits it to a unbounded thread pool Executor. If you don't use the result it will be candidate for GC as soon as it's done and the thread will likely be reused for subsequent computations; if you're familiar with java executors you should have no surprise with clojure.core `future`; <https://github.com/clojure/clojure/blob/clojure-1.9.0-alpha14/src/clj/clojure/core.clj#L6838>
1468,1511355789.00008,Mirna,"thanks, awesome"
1470,1511359247.000596,Lovie,"Yes, executor here <http://aleph.io/codox/manifold/manifold.executor.html>; also cljs version <https://github.com/dm3/manifold-cljs>"
1470,1511360794.000629,Kalyn,":slightly_smiling_face: after a long while away from clojure, could someone benevolently remind me how do I stream process a file? e.g. reading one text line at a time without ever storing the entire file in memory?"
1470,1511360855.000016,Weston,a reader + line-seq
1470,1511360895.000261,Myles,<https://clojuredocs.org/clojure.core/line-seq#example-542692cec026201cdc326de3>; `with-open` a reader and `line-seq`
1470,1511361003.000018,Kalyn,"Thanks guys. I must have encountered a severe form of programmer amnesia...

even this simple adaptation of that source code which I was trying before posting here doesn't work for me

```
  (with-open [rdr (<http://clojure.java.io/reader|clojure.java.io/reader> input-file-name)]
    (map
      println
      (line-seq rdr)))
```"
1470,1511361043.000086,Cecilia,<@Kalyn> `map` is lazy
1470,1511361048.000178,Kalyn,ah right!
1470,1511361092.00005,Cecilia,I would use `doseq` instead for that
1470,1511361130.000389,Myles,`run!`
1470,1511361132.000112,Kalyn,I admit I used `doall`
1470,1511361151.000279,Cecilia,"meaning:

```
(with-open [rdr (<http://clojure.java.io/reader|clojure.java.io/reader> input-file-name)]
  (doseq [line (line-seq rdr)] (println line)))
```; but then again, if your real use case isn’t about doing side-effects then probably map is just fine"
1470,1511361218.000309,Basil,why not `(run! println (line-seq rdr))`? :slightly_smiling_face:
1470,1511361255.00069,Myles,except presumably you want to force evaluation in order to read the file
1470,1511361259.000569,Cecilia,"possibly because I’ve never actually used that :slightly_smiling_face: And it came in 1.7 it seems, wayyy too new stuff for me :oldman:"
1470,1511361301.000094,Kalyn,"I'll be stream writing a transformation of each line, so side-effects will be needed"
1470,1511361322.000175,Cecilia,but is it only about side-effects?
1470,1511361355.000265,Kalyn,well writing an output file is (or entails) a side effect
1470,1511361374.000284,Cecilia,"yeah right, well then either doseq or run! is your friend"
1470,1511361422.000145,Kalyn,whereas `doall` will force the entire input seq and thusly the whole file into memory?
1470,1511361445.000725,Cecilia,"yes, it forces the whole lazy sequence to be evaluated and keeps the head"
1470,1511361473.000613,Kalyn,"thanks, the doc for it makes much more sense now :slightly_smiling_face:; thanks all"
1471,1511362225.000142,Kalyn,ever had to re-learn a language yourselves? :slightly_smiling_face:
1472,1511367269.000538,Marcos,"Hi. Some one uses incanter?  It shows empty windows instead of graphs. I tried to set different versions of it and clojure in project.clj. Also changed jdk7 to jdk8. Can't solve problem; This problem appears also on another computer, what I have; I found out what this happent when my wm is bspwm. With xfwm4 all works as intended...; Another apps on java awt and swing works fine; Where I should I write an issue? In bspwm repo or incanter repo?"
1472,1511368519.000004,Kalyn,"Any idiomatic way of verifying a sequence is lazy? (e.g. in test code, or as an assertion)"
1472,1511369134.000329,Willow,what's your use case? or what problem are you trying to solve
1472,1511369174.000328,Kalyn,"I wish to make sure I've not accidentally yielded an unlazy collection after a lot of collection manipulations; Otherwise my program would realize huge collections whereas it is supposed to do streaming work, to maintain a constant memory footprint"
1472,1511369242.000209,Basil,Note that a LazySeq is usually Chunked anyway - check into transducers or core.async + transducers if you really want to do streaming work
1472,1511369259.000111,Kalyn,<@Basil> hmmm; chunked?
1472,1511369289.000566,Basil,"They evaluate a chunk of themselves (32 or so) items eagerly, for performance reasons."
1472,1511369295.00015,Kalyn,"I don't care about a constant chunk size being realized behind the scenes; Each item is small; I guess I'm fine then; But good to know, realizing by chunks makes more efficient"
1472,1511369401.00034,Willow,i'm not sure how you could check this in general though. something could be fully realized and also a `clojure.lang.LazySeq`; `(type (doall (map inc (range 0 2)))) =&gt;clojure.lang.LazySeq`
1472,1511369461.00001,Kalyn,"<@Willow> there must be a way to know whether the type is lazy, regardless of its current state (realized or not)"
1472,1511369491.000015,Willow,well lazyseq is a container amenable to lazy realization. but it does not change into a different type upon full realization
1472,1511369522.000787,Kalyn,"well, maybe my answer is ""check if the type is LazySeq"" then"
1472,1511369532.000128,Willow,but my example above shows that that is not sufficient; the doall realizes the entire list
1472,1511369542.000605,Kalyn,if I assert this at a time where realization could not yet happen; Such as before processing the sequence
1472,1511369587.000298,Willow,i guess so. but if the assertion is not falsifiable it does not introduce any confidence.
1472,1511369632.000389,Kalyn,"well my point is to make sure a collection does not arrive at a certain function not lazy; if it were to arrive as a non-lazy type, the assertion would falsify; where is my line of thought wrong here?"
1472,1511369714.000046,Willow,"that would certainly be true, if something comes in as a vector is is guaranteed to be fully realized. the problem is that if something comes in as a LazySeq it is not guaranteed to _not_ be realized; again, `(type (doall (map inc (range 0 10000000)))) =&gt; clojure.lang.LazySeq`"
1472,1511369809.000808,Kalyn,oh I get what you mean now
1472,1511369831.000308,Randee,"<@Kalyn> Do you mean something like this:
```
(let [x (map inc [0 1])]
  [(realized? x)
   (first x)
   (realized? x)])
```"
1472,1511369843.000184,Kalyn,my first thought ― I can check both the type is `LazySeq` and check `realized?` is false
1472,1511369852.000398,Randee,It'll tell you if it realized the *first* element of a lazy seq.
1472,1511369924.000297,Kareen,"nit: LazySeq is never chunked, it is possible that the underlying seq it wraps is chunked, but LazySeq itself knows nothing about chunking; `realized?` on lazy-sequences is practically useless, don't use it"
1472,1511370125.00001,Kalyn,boy this is a thorny use case then
1472,1511370166.000058,Kareen,it's generally impossible to test whether a sequence is lazy or not
1472,1511370170.00067,Kalyn,I was hoping there is an idiomatic way of confirming the streaming nature of a program; other than opening a profiler....
1472,1511370270.000111,Kareen,there is an idiomatic way to avoid having to know that; use transducers and build a pipeline of transformations; I wouldn't use lazy seqs to build streaming pipelines; esp given that the clojure never guarantees *how* lazy things are
1472,1511370503.000329,Kalyn,"okay I get the picture <@Kareen> thanks :slightly_smiling_face:; care to elaborate how flawed laziness is though? 
""esp given that the clojure never guarantees *how* lazy things are"""
1472,1511370772.00047,Kareen,<@Kalyn> it's really easy to go from 1-el-at-a-time to chunk-at-a-time laziness in clojure
1472,1511370782.000483,Willow,<@Johnathon> come to <#C053AK3F9|beginners> and we'll dig through it
1472,1511370795.00074,Kareen,because clojure makes no guarantees about the laziness granularity and it's free to use what's more performant
1473,1511370798.000178,Johnathon,ok
1472,1511370814.000327,Kareen,"but if you're using laziness to stream, that's often not the behaviour you'd expect"
1472,1511370859.00062,Kalyn,"<@Kareen> what's wrong with chunks? a chunk of 32 is orders of magnitude smaller than e.g. a file with million lines... it will guarantee 32 lines in memory at a time, compared to a million lines had the entire file been realized; I am very wrong in that?"
1472,1511370877.0004,Kareen,"nothing's wrong with chunks; but if your element is not an atomic value but a big expensive collection, then you might not have space for 10 elements in memory"
1472,1511370917.000406,Kalyn,understood
1472,1511370938.000185,Kareen,"again, it depends on what you need to do, but if you're aiming to build a streaming pipeline, reach for transducers which were designed for that (among others) use-case in mind"
1472,1511370992.000534,Kalyn,"well indeed, next time I'll start with transducers, but for my simple use case this once, it seems laziness is enough, given the issue (in my use case) is collection size, not element size"
1474,1511375178.000715,Mei,How do I open cider inspector with value of last expression evaluated while stepping? I tried `cider-inspect` but it does nothing
1475,1511377154.000519,Monet,"Anyone here have much experience with <https://github.com/oliyh/martian>? I am trying to get the martian/bootstrap method working with a simple get request. Here's a simplified version of what I am seeing:
```;Works
(client/get ""<http://myservice/myfunction>"" {:query-params {:arg 1}})

;Fails
(let [m (martian/bootstrap
          ""<http://myservice>""
          [{:route-name   :myservice
            ;Is this for path params? If so, how would I do query-params?
            :path-parts [""/myfunction/"" :arg]
            :method       :get
            :path-schema {:arg s/Int}}])]
  (martian/response-for m :myservice {:arg 1}))```

I can't seem to get the martian version to work. Any ideas? It seems like I should be specifying query-params instead or something like that.; FYI: I've tried a variety of different options like

```
;Fails
(let [m (martian/bootstrap
          ""<http://myservice>""
          [{:route-name   :myservice
            :path-parts [""/myfunction/""]
            :query-params [:arg]
            :method       :get}])]
  (martian/response-for m :myservice {:arg 1}))```

I've also tried a :path key, and others. No dice."
1474,1511383694.000408,Margaret,"FYI you only need one assoc call there, it’s vararg"
1472,1511390568.000148,Tameka,is there a way to add dependencies to my `project.clj` without visiting github all the time and copying package name + version ?; I’m using vim btw
1472,1511390747.000074,Liza,<@Tameka> The only thing I've seen like that is this leiningen plugin: <https://github.com/johnwalker/lein-plz>
1472,1511391439.000159,Tameka,this is amazing! :smile:; I love the command too; thank you <@Liza>
1472,1511391463.0001,Liza,No problem.
1472,1511395920.000005,Tameka,"is `reloaded.repl` supposed to run the server at the same time?; it says
```
Started server on 8080
:resumed
```
but then localhost:8080 isn’t working; that’s when I run `(reset)` in my repl; this is my simple `user.clj`
```
(ns ring-it.user
  (:require [reloaded.repl :refer [system reset stop]]
            [ring-it.core]))

(reloaded.repl/set-init! #'ring-it.core/create-system)
```; has no one ever used reloaded.repl? :confused:"
1472,1511398612.00007,Margaret,<@Tameka> I’m guessing the channel is going to be less active right now because the US has a big holiday which for many people starts with traveling tonight or early tomorrow morning
1476,1511398645.000086,Margaret,I bet you’ll get replies if you ask this weekend or Monday
1472,1511398876.000051,Lovie,"*reloaded workflow* coined by stuartsierra, a clojure workflow as demonstrated with *Component* <https://cb.codes/a-tutorial-of-stuart-sierras-component-for-clojure/>
weavejester adopted the workflow with <https://github.com/weavejester/reloaded.repl>, <https://github.com/weavejester/integrant>"
1472,1511399394.000045,Tameka,"<@Lovie>, I went through all of those :slightly_smiling_face: perhaps there’s an issue with the version.. thanks anyway"
1477,1511400273.000112,Berry,is there a way to say {:keys [ .... ]} AND assert that none of them are nil ?
1476,1511401287.000052,Lovie,"sorry, Bravi, didn't see you raise issue but a general question"
1476,1511402552.000077,Tameka,"all good, I figured it out :slightly_smiling_face:; thanks!"
1478,1511407393.000041,Marty,only default values
1477,1511410637.000079,Daniell,"<@Berry> I can't think of a way that doesn't involve duplication... can you give a bit more context?; For example, you can do `{:keys [a b c] :as data}` but `data` will be the whole of what you bind, not just those keys...; (or maybe `(every? some? [a b c])` for whatever keys you destructure?)"
1477,1511419180.000076,Berry,"sorry, I meant to say:

(let [{:keys [a b c]} ... ]
  (assert a) (assert b) (assert c))
^-- is there a shorthand for this"
1477,1511419318.000139,Daniell,"<@Berry> Well, I'd say `(assert (every? some? [a b c]))` is going to be clearer as the number of keys increases."
1477,1511419321.000013,Verna,<@Berry> maybe try `:or` syntax: `{:keys [foo bar baz] :or {foo 42 baz 1 baz 99}}`
1477,1511419350.000152,Daniell,"<@Verna> That's not what he's asking tho' -- he doesn't want defaults, he wants failure-on-nil."
1477,1511419355.00011,Berry,"I don't want default values -- if a field is nil, it should assert and die, as something went wrong; <@Daniell>: I think your solution is opt, if I try to write amacro, it becomes very messy as I have to basically parse destructuring"
1477,1511419439.000025,Verna,"Ah I see now. So, you could either to assert every value or use clojure.spec"
1477,1511419466.000143,Daniell,You could probably write a macro that expands to `(let {{:keys ~keys} ~value] (assert (every? some? ~keys)) ...)`; That would remove the repetition...
1477,1511419501.000087,Berry,"yeah, but this wouldn't play well with multi part let-destructs, like

```
(let [{:keys [...]} objA
  {:keys [...]} objB]
...)
```"
1477,1511419538.000052,Daniell,"You'd have to have it nested... which I think logically it would need to be, given the fail-on-nil requirement?"
1477,1511419558.000027,Berry,"oh; I'm okay with destructure all the things, then do fail on hnil; it's okay to destructure objB even if some part of objA is nil, they're not 'nested', they're two separate objects"
1477,1511419592.000095,Daniell,"Well, then write the macro to do that :slightly_smiling_face:"
1477,1511419618.000157,Berry,"I was hoping I could to

{:keys [a b c] :no-nil true} objA

:slightly_smiling_face:"
1477,1511419794.00012,Verna,"But still, take a look at clojure.spec. It has useful `instrument` function that wraps another function with data checks. And having schemes declared explicitly makes your code more clear. Instead, checking data every time in place leads to spagetty code."
1477,1511419894.000034,Daniell,<@Berry> You could indeed write such a macro... <@Verna> `instrument` has an overhead that you might not want to pay in production. It is better to be explicit with `s/valid?` or `s/assert`.; And relying on `instrument` when you actually want the `nil`-checks performed explicitly in production is definitely not something I'd recommend (as a heavy user of spec myself).
1477,1511420004.000096,Berry,I'm familiar with spec; I'd actually want something even morespecy- .... only allows keys taht are part of s/keys of the spec
1477,1511420022.000051,Verna,"<@Daniell> yes, agree with your points."
1477,1511420023.000208,Berry,but I don't know how to formulate that
1477,1511420125.000148,Daniell,"If you have a spec with `s/keys`, you can call `s/form` on it and destructure to get the list of `:req` or `:req-un` keys. Then you can programmatically use that key list to validate the data.; (if the spec is more complex -- say `s/and` over `s/keys` -- then you'll need to do some work there... and maybe you'll need to parse `s/merge` etc so it depends how ""smart"" you might want to be?); You could of course write a spec for those keys where each value was specified as non-`nil`able... but you'd still have to call `s/valid?` or something...; ```boot.user=&gt; (s/def ::foo (s/keys :req-un [::a ::b ::c]))
:boot.user/foo
boot.user=&gt; (s/form ::foo)
(clojure.spec.alpha/keys :req-un [:boot.user/a :boot.user/b :boot.user/c])
boot.user=&gt; (let [[_ _ keys] (s/form ::foo)] (println (map name keys)))
(a b c)
nil```"
1477,1511421973.000067,Berry,"1. <@Daniell>: this is very cool, `s/form` is awesome and I will be using it in the future

2. asserting that the value associated with the key is non-nil does NOT solve my problem

my problem is that I sometimes specify the wrong key -- i.e. the key doesn't even exist in the map -- that's the problem I'm trying to solve"
1479,1511423955.000001,Terra,"<@Mirna> beware though, that you might hit some surprises, especially with exception handling (exception invisible until you deref the future - unless you wrap the future body with try-catch explicitly).
Check also <https://github.com/TheClimateCorporation/claypoole>"
1480,1511424322.000093,Daine,"I use s/form a lot, both in my spec serialize library, and to be able to edit a map based on the spec, it’s great."
1477,1511431846.000314,Alla,"<@Berry> metosin/spec-tools has a s/form parser, it extracts the keys from s/keys (also s/merge ones), and utilities for dropping out undefined keys."
1481,1511435229.000171,Johana,"Hmm, maybe `cycle` could also have an `n` argument, like `repeat` has"
1481,1511435975.000246,Kareen,<@Johana> <https://dev.clojure.org/jira/browse/CLJ-1412>
1481,1511436054.00025,Johana,<@Kareen> Voted.
1481,1511438789.000023,Jodie,<@Kareen> is 1412 like `take`? I somehow expected it to be like doing `(take (* n (count s)) (cycle s))`
1482,1511438800.000358,Jodie,But I'm not sure that's what it does based on reading it
1481,1511438897.000026,Kareen,yes that's what it does
1482,1511439029.000267,Margaret,"so that would change its degree of laziness; but of course if you count on a precise amount of laziness, you are probably doing something wrong"
1482,1511439088.000233,Kareen,what do you mean?
1482,1511439098.00006,Margaret,"because you count the collection argument; so I would assume it would realize the full input if it was lazy, right away, where the original would be lazier; hmm, never mind, looks like cycle already forces the arg; oh, a chunk, of course ```+user=&gt; (def c (cycle (map print (range 1000))))
012345678910111213141516171819202122232425262728293031#'user/c

```; so that would change from realizing 32 items to realizing 1000"
1483,1511465526.000054,Tameka,"hi everyone. if anyone uses spacemacs, could you tell me how to switch between open panes please? :smile: there’s literally no tutorial I could find that says this"
1482,1511465585.000138,Kareen,<@Margaret> the impl in that ticket doesn't actually count anyway
1483,1511465589.000125,Tameka,"I know I can mouse-click, but there’s gotta be a keyboard shortcut I think"
1484,1511467141.000056,Bradley,"Hello people!

We making a study group about Clojure in Brazil.

This table of contents is good to beginners learn the language?

<https://github.com/training-center/clojure-study-group/blob/master/material/roadmap.md>"
1484,1511468251.000034,Margaret,<@Bradley> maybe interacting with the JVM could be earlier? (or at least an intro to the useful stuff about figuring out how java stuff works - what to look for in javadoc for example?)
1484,1511471473.000072,Bradley,"Maybe into second session, <@Margaret>?"
1484,1511471629.000054,Margaret,"Sure - it's hard for me to say without seeing a more detailed curriculum of course, just a thought. I think people could save a lot of trouble if they were more pragmatic about using host interop"
1484,1511471738.00016,Rene,"Pretty sure you do `space 1` for the first pane, `space 2` for the second and so on - unless I misunderstand the question."
1485,1511512059.000279,Tari,"Hi, I tried to do something like this in jdbc and get an Exception:
```
(j/db-do-prepared (:user-db @g-config) [""select
case
when (select 1 from user_favorstocks where uid=1823 and stockid='600123.SH') is not null
then (select 8)
else (select 5)
end as tmp""])
```
`SQLException SQL String can not be NULL  com.mysql.jdbc.SQLError.createSQLException (SQLError.java:957)`; what could be the reason?"
1485,1511512195.000188,Fe,"<@Tari>, don't you need to prepare the statement first?"
1485,1511512217.000402,Tari,"maybe not; `The sql parameter can either be a SQL string or a PreparedStatement.` in clojure.java.jdbc doc; and here is the test code:; ```
(deftest test-do-prepared4
  (doseq [db (test-specs)]
    (create-test-table :fruit2 db)
    (sql/db-do-prepared db [""INSERT INTO fruit2 ( name, appearance, cost, grade ) VALUES ( ?, ?, ?, ? )"" [""test"" ""test"" 1 1.0] [""two"" ""two"" 2 2.0]] {:multi? true})
    (is (= 2 (sql/query db [""SELECT * FROM fruit2""] {:result-set-fn count})))))
```; on <https://searchcode.com/file/138699/src/test/clojure/clojure/java/test_jdbc.clj>"
1485,1511512270.000404,Fe,maybe you're looking for `execute!`?
1485,1511512291.000261,Tari,"I've tried that seems not working.; `SQLException Can not issue executeUpdate() or executeLargeUpdate() for SELECTs  com.mysql.jdbc.SQLError.createSQLException (SQLError.java:957)` if I change to `execute!`; btw, can I do an `insert` stmt in a `then` subclause?"
1485,1511512414.000145,Fe,"ah you need `query`; `execute!` is only for ""write""-y queries (INSERT, UPDATE, etc.)"
1485,1511512469.000102,Tari,"I am just trying to select something from the table, and if found, check the value of some column ( and if satisfied some condition do update, otherwise nothing ), if not ,do insert. And return a value that tells me what has been done.; yes, but can I do an `insert` in a `then` subclause when using `query`?"
1485,1511512525.000042,Fe,"you're shifting the goalposts; better to ask one thing at a time, not ""everything I've always wanted to know about SQL"""
1485,1511512590.000357,Tari,:smile:; sorry for that.; `query` works!
1485,1511512671.000084,Fe,"you can't nest INSERT inside of a compound statement - you'll need to do multiple queries, or use a stored procedure I think"
1485,1511512713.000223,Tari,Thanks.; I tried to write a stored procedure but `ERROR 1548 (HY000): Cannot load from mysql.proc. The table is probably corrupted` happens. But  it is not right to ask this here. It seems the mysql version is too old. some `5.1` version.
1486,1511513328.000218,Jodie,Is it possible to utilize java annotations from clojure?
1485,1511514609.000143,Tari,<@Jodie> maybe this? <https://github.com/clojurebook/ClojureProgramming/tree/master/ch09-annotations>
1485,1511514703.000364,Jodie,<@Tari> perfect. Thanks. Completely missed that.
1487,1511521012.000216,Mina,"I want to use `migratus` in my dev environment.
I also use `environ` to manage environments variables.
How can I set a value in my `project.clj` by evaluating data from `environ`?

working example:
```clojure
:migratus {:store         :database
             :migration-dir ""migrations""
             :db            ""<postgresql://postgres:pass@localhost/xchange>""}
```

What I want:

```clojure
```; ```
:migratus {:store         :database
             :migration-dir ""migrations""
             :db            ~(environ.core/env :db-url)}
```"
1487,1511522275.000212,Verna,"<@Mina> `:migratus {:store :database :db ~(get (System/getenv) ""DATABASE_URL"")}`; <@Mina> the rule is simple: once lein sees a list form, it tries to evaluate it."
1487,1511522365.000338,Mina,"But using `environ`, my `DB_URL` is not in the `System/getenv` map"
1488,1511523558.000026,Kristy,"Can `(let [...] (defn ...))` be problematic?

(generally I'd never do that, but from time to time I need some dynamism e.g. defns emitted from macros)"
1488,1511546218.000044,Danyel,"Not that I know of; `(def fname (let [,,,] (fn ,,,)))` may be more conventional"
1488,1511546470.000046,Kristy,Thanks for the input! Might end up using that one
1489,1511554800.000225,Tameka,"I’m using stuartsierra component and can’t figure out how to fix this error anyhow. any hints would be much appreciated:
```
IllegalArgumentException No implementation of method: :stop of protocol: #'com.stuartsierra.component/Lifecycle found for class: nil  clojure.core/-cache-protocol-fn (core_deftype.clj:568)
```
this is my application:
```
(ns application.system
  (:require [application.web :refer [app]]
            [com.stuartsierra.component :as component]
            [org.httpkit.server :refer [run-server]]))

(defn- start-server [handler port]
  (run-server app {:port port})
  (println ""Started server on localhost"" port))

(defn- stop-server [server]
  (when server
    (server)))

(defrecord Application []
  component/Lifecycle
  (start [this]
    (assoc this :server (start-server #'app 9009)))
  (stop [this]
    (stop-server (:server this))
    (dissoc this :server)))

(defn create-system []
  (Application.))

(defn -main [&amp; args]
  (.start (create-system)))
```"
1489,1511554891.000088,Margaret,<@Tameka> that error means one of your components returns nil instead of a valid component; (probably from a start method)
1489,1511554947.000072,Tameka,but it relates to this Application component right?
1489,1511554969.000001,Margaret,"how would I know?; one of your components, when started, returns nil instead of a component; that's what causes that error; unless you call stop on the wrong object and it was not your component in the first place"
1489,1511555059.000036,Tameka,":smile: well this is my whole application, so .. it has to be here; somewhere"
1489,1511555108.000026,Margaret,OK - nothing in that code is calling the stop method; who calls the stop method?
1489,1511555121.000037,Bibi,"I don't know component at all, but should 'start-server' return anything? It's returning nil at the moment."
1489,1511555146.000092,Margaret,"<@Bibi> that's the error, good eye; <@Tameka> - println returns nil, so start-server returns nil"
1489,1511555209.000139,Tameka,ah damn it should be the other way round
1489,1511555213.000034,Margaret,"we still don't know what is calling stop, but that's what is causing the error"
1489,1511555474.00011,Tameka,yeah that was the issue. I had to have them other way round; now the server instance is returned and life is good; … again
1489,1511555696.000119,Bertram,Do you know about the system library?; <https://github.com/danielsz/system>; It looks like it could be helpful based on your recent questions in the channel.; Also lots of examples in the repo
1490,1511562895.000105,Berry,"is there a clojure builtin for ""take this vec of 5 elements, pad it to a list of 10 elemes by adding :null"" 's ?"
1489,1511562908.000105,Berry,"basically, ""make this vec longer by repeating this elem"""
1489,1511563195.000123,Margaret,"no builtin, I'd use concat and repeat (concat coll (repeat 5 nil)) or (take 10 (concat coll (repeat nil)))"
1489,1511563201.000113,Willow,`(first (partition 10 10 (repeat :b) [:a]))`; you could partition with a pad and take the first partition; although i think the take concat version is nicer
1491,1511569789.000031,Bebe,"For those who use Docker, any reason to use java image instead of clojure image ?"
1489,1511569972.000088,Margaret,I've found making an uberjar (either on my machine or a build server) and then deploying as if it was java keeps things simple
1489,1511570318.000091,Bebe,I was thinking of a workflow including ansible &amp; docker. Maybe it's better to just stick to ansible
1491,1511570471.000027,Giovanni,Is docker more popular right now for production Clojure apps?
1491,1511570808.000016,Bebe,"I saw some snippets to build &amp; deploy with docker, but it seems a bit old and use java image instead of clojure one"
1491,1511570926.000089,Giovanni,"I'm about to deploy for the first time, what is the ""safe"" bet?"
1491,1511570969.000024,Margaret,"the simplest thing is to make an uberjar, make sure there's a jvm on your server, and run it"
1491,1511571368.000023,Giovanni,I was thinking that docker container networking might be a better fit for me because I want a local database connection. How do Clojarians typically handle that sort of situation?
1491,1511571421.000032,Margaret,"I've used dedicated database servers, so can't offer anything on that; though with mongo, we do have a mongo server process for sharded dbs, that's set up by chef in our case; (I think using ansible would be very similar)"
1492,1511573509.000018,Bebe,<@Giovanni> <https://www.reddit.com/r/java/comments/46ksv2/why_bother_with_docker_deployments_when_jars_are/>; Ah and I found this: <http://www.capsule.io/>; :slightly_smiling_face:
1492,1511573760.000057,Giovanni,"This seems to confirm my suspicion that the benefits of solo UberJar is that simple deployment is easy, but doing anything non-trivial becomes a nightmare and the benefits of containers being that it can manage high amounts of deployment complexity, but is pretty heavy and frustrating to set up. Thanks for the resources, I'll have to ponder more what fits for my use case"
1492,1511573778.000072,Margaret,"""nightmare"" is not my experience"
1492,1511573847.000086,Giovanni,"That's good to hear! Does the box running your UberJar have other dependencies that lein doesn't support?; I know you mentioned mongo, but I imagine you can keep the config inside of your .clj"
1492,1511573883.000024,Margaret,"it has a few local deps that are set up by chef (I am not the one managing ops / chef stuff though); there's a mongo program that you need to run, it's not a client thing; (for sharded dbs); basically it's a mongo server running on localhost that interacts with the sharded system, because the client can't use it directly"
1492,1511574054.000006,Giovanni,"I'll have to consider the UberJar setup more seriously considering your positive experience. All of my professional dev is done on 'Nix boxes,  and I'm a huge 'nix buff so I normally wouldn't shy away so much, but I have a few other portability considerations this time around."
1492,1511574089.000068,Margaret,"yeah, even just the differences between OSX and Linux are a pain, and I see how a container helps there"
1492,1511574105.000035,Kyung,Two startups in a row we’ve deployed services in docker and never regretted it. “Pretty heavy” and “frustrating” have not been our experience. 
1492,1511574108.000061,Margaret,"but an uberjar is an uberjar, and it really does work"
1492,1511574291.000031,Giovanni,"Thanks <@Kyung>, I haven't heard of many people regretting dockerizing. I didn't mean to use such bold words! :slightly_smiling_face: I'm just trying to view my options for their _upsides_ and their _downsides_.; I really don't think either option will cause too many problems. I'm thinking docker would give me a bit of the agility I'm after; Thanks much for the answers"
1492,1511574506.000012,Bebe,<@Kyung> did you use java or clojure image ? just curious :slightly_smiling_face:
1492,1511575386.000049,Kyung,Custom images.
1492,1511575479.000076,Margaret,"regardless of the solution you pick, I would like to advocate for having a separate build server or process, that isn't something run on your production server (eg. let circleci create your uberjar and upload it, and download it from your server process)"
1493,1511578807.000023,Kyung,"In our case we built the docker images too, and we tagged (w/ version numbers) and uploaded those to a local docker image repository."
1494,1511622699.000094,Tari,"Hi, If I want to find the index of the biggest element that is &lt;= 5 , and the index of the biggest element that is &lt;=8, in a sorted array. Can I get the two indices in one search in Clojure?; ```
(defn tmp-search
  []
  (let [v [1 2 3 4 5 6 7 8 9 10]]
    (loop [index1 9
           index2 9]
      (let [condition1 (&lt;= (get v index1) 5)
            condition2 (&lt;= (get v index1) 8)]
        (if (and condition1 condition2)
          [index1 index2]
          (recur
           (if condition1 index1 (dec index1))
           (if condition2 index2 (dec index2))))))))
```"
1494,1511625828.00003,Dirk,"<@Tari> You could consider a one pass using `reduce-kv`
```
(reduce-kv (fn [[ndx1 ndx2] k v]
             (cond-&gt; [ndx1 ndx2]
               (&lt;= v 5) (assoc 0 k)
               (&lt;= v 8) (assoc 1 k)))
  [nil nil]
  [1 2 3 4 5 6 7 8 9 10])
```; I suppose your approach is more efficient <@Tari> in that it traverses a part of the sequence from the end. You could force that into a single-pass `reduce` by using `reduced` to stop things. Thinking something like:
```
(take 2
  (reduce (fn [[ndx1 ndx2 ndx :as acc] v]
            (if (and ndx1 ndx2)
              (reduced acc)
              (cond-&gt; [ndx1 ndx2 (dec ndx)]
                (and (nil? ndx1) (&lt;= v 5)) (assoc 0 ndx)
                (and (nil? ndx2) (&lt;= v 8)) (assoc 1 ndx))))
    [nil nil 9]
    (rseq [1 2 3 4 5 6 7 8 9 10])))
```"
1495,1511633345.000003,Lucio,"Would you recommend using <https://github.com/funcool/cats> on a project, or are there better FP librairies out there? (for simple functor/monad stuff); Actually, my only real use-case right now is using Either to model failure instead of throwing exceptions"
1495,1511634789.00008,Cherelle,Have you also seen <https://clojure.github.io/algo.monads/> <@Lucio>?
1496,1511635528.000123,Evan,I've only heard good things about it. I know that <@Shameka> is a fan
1495,1511638718.000104,Shameka,"cats is ok <@Lucio> - it was the best of the clojure fp libs i tried. the context stuff is a bit awkward, and i end up writing sugar macros for `(with context ... (mlet [...`; they took out the monad transformer stuff - i had to resurrect it for one of my libs (uses a promise-state transformer); and there is no reader or continuation or comonad stuff; but what is there is solid and straightforward - i’ve come across only a couple of bugs in 2 years of heavy use in both clj and cljs; and if you use `either` to model failure you might also want to take a look at <https://github.com/zalando-stups/cats.match>"
1495,1511639553.000045,Sandy,"Since these sorts of solutions slow the code down, I’ve never used the either in production. But what’s the driver to avoid the exceptions?"
1497,1511642534.000123,Lucio,"<@Sandy> I just thought it would be a neater way to differentiate between ""expected"" failure-like return values and actual exceptions; for example, I am implementing a unification algorithm. When unification fails it's not really an error, just a failure scenario that the caller will handle; a try/catch seemed a bit odd in that case; I could return a custom map with a success/failure tag, but in that case why not use functors and get chaining etc for free..."
1497,1511642881.000029,Sandy,"Well one reason is that they are opaque. That’s my biggest criticism against using functions instead of data, there are few ways to introspect them. ; But either way the chaining isn’t free, since either method requires using non standard Clojure forms instead of let, do, etc; But I agree exceptions are not the answer for this."
1497,1511643618.000089,Lucio,"<@Sandy> ah yes you are right, I was using the term ""free"" a bit too freely. I am open to better approaches!"
1498,1511645844.000057,Berry,is there a way to tell `(for [[k v] someMap] ...)` to process the elements in order sorted by 'k' ?
1498,1511645895.000054,Margaret,"<@Berry> `(for [[k v] (sort-by key someMap)] ...)`; and, incidentally `(sort someMap)` will return key/value pairs in the same order as `(sort-by key someMap)` - when sorting collections it sorts by the size, then first item, then second item if first items sort equal; I guess technically sort-by key might be different if sort thought two of your keys were equal even though hash does not; fun ```+user=&gt; (assoc {} [:a] 0 '(:a) 1)
{[:a] 1}
```"
1498,1511646340.00003,Audie,"Is there a way to filter a collection with various rules? Fox example:

```(def jobs [{:id ""f26e890b-df8e-422e-a39c-7762aa0bac36"",
            :type ""type1"",
            :urgent false}
           {:id ""ed0e23ef-6c2b-430c-9b90-cd4f1ff74c88"",
            :type ""type2"",
            :urgent true}
           {:id ""690de6bc-163c-4345-bf6f-25dd0c58e864"",
            :type ""type3"",
            :urgent false}
           {:id ""c0033410-981c-428a-954a-35dec05ef1d2"",
            :type ""type2"",
            :urgent false}])```

I want to get the jobs with type 2, but considering this: return only urgent jobs if they exists. If not, return jobs with the same type that are not urgent. Just to avoid using lots of ifs… is there a way to do this with `filter`?"
1498,1511646457.0001,Margaret,"<@Audie> `(or (seq (filter :urgent jobs)) ...)`; oh, the type 2 part; `(let [type2 (filter (comp #{""type2""} :type) jobs)] (or (seq (filter :urgent type2)) type2))`"
1498,1511647279.000054,Audie,"<@Margaret> 
in this case `type2` will have all the jobs right?
Do I have to put the `urgent` part inside the `let` somehow?"
1498,1511647330.000114,Margaret,"type2 will have all the type2 jobs, `(or (seq (filter ....)) ...)` ensures that you look at the regular jobs if none of them are urgent; but otherwise you get the urgent ones only"
1498,1511647771.000032,Audie,I tried in my application and it works perfectly! thanks
1499,1511648391.000004,Berry,"None; ```
(defmacro def-fsi [args]
  `(do
     ~@(for [[v ks] (sort-by key args)
             k      ks]
         `(clojure.spec.alpha/def ~k ~v))))

(macroexpand-1
 '(def-fsi {number? [::a]}))
#_ (comment
     (do (clojure.spec.alpha/def :a.aa-util/a number?)))

(macroexpand-1
 `(def-fsi {::foo [::cat]}))
#_ (comment
     (do (clojure.spec.alpha/def :a.aa-util/cat :a.aa-util/foo)))

(macroexpand-1 
 '(def-fsi
    {number [::a]
     ::foo  [::cat]}))


Unandled java.lang.ClassCastException
   clojure.lang.Symbol cannot be cast to clojure.lang.Keyword

```"
1499,1511648488.000063,Margaret,<@Berry> is it `number` that it doesn't like?
1499,1511648524.000004,Berry,"good cll; unfortunately
```
(macroexpand-1 
 '(def-fsi
    {number? [::a]
     ::foo  [::cat]}))
```
also give same error"
1499,1511648546.000056,Margaret,number? is also a symbol rather than a keyword
1499,1511648551.000023,Berry,"what I don't get is why does
```
;; works
(macroexpand-1
 '(def-fsi {number? [::a]}))
```"
1499,1511648557.00006,Margaret,oh
1499,1511648596.000012,Berry,"`{number? [::a]}` and `{::foo [::cat]}` works, but when I merge the two maps -- BAM, error -- can't even macro expand; `(sort-by key {'a 20 :fo 30})` -- totally your fault for suggesting (sort-by key ...) :slightly_smiling_face:; so clojure's sort can't compare keyword vs symbol"
1499,1511648772.000109,Margaret,you could provide a compare that knows how to
1499,1511648798.000068,Berry,I actualy doh't care about the order so long as it's deterministic; maybe I'll just cast everything t strings
1499,1511648860.000064,Margaret,"<@Berry> `(fn [coll] (into [(type (first coll))] coll))` - that ensures that every item in the collection has an item of type Class as its first element; and the second elements would only be compared if the types of their first elements were the same, etc."
1499,1511649027.000005,Berry,"does that get around this issue here: (sort [[:foo] [""hello""]]) ?"
1499,1511649614.000006,Margaret,"hmm... it's not working as I expected...; <@Berry> ```+user=&gt; (defn weird-compare [x y] (if (= (type x) (type y)) (compare x y) (compare (str (class x)) (str (class y)))))
#'user/weird-compare
+user=&gt; (weird-compare :a :b)
-1
+user=&gt; (weird-compare :a ""b"")
-7
+user=&gt; (sort weird-compare [:a ""b"" 'c 3])
(:a c 3 ""b"")
+user=&gt; (sort weird-compare [:a ""b"" 'c 3 66 2 50])
(:a c 2 3 50 66 ""b"")
```; its order is stable, and you get arbitrary order if they are not equal; it's not quite right yet for k/v or collections yet"
1500,1511652688.00006,Micha,"If you search for 'cc-cmp' on this page, you can find a function I wrote a couple years back that tries to be a 'universal comparator' between objects of different classes, sorting first by class names alphabetically, then by class-specific means between objects of the same class: <https://github.com/jafingerhut/thalia/blob/master/doc/other-topics/comparators.md>; It doesn't succeed at being universal, quite, but it goes a lot farther than clojure.core/compare does."
1501,1511657364.000026,Sandy,"Isn’t that just map, or perhaps the result of (map f)?"
1501,1511657549.000028,Terra,"I'm using timbre for logging and wondering if there's any way how to change the log level of running application from outside.
Sometimes, I want to raise the logging level temporarily - mostly for staging/production environment.
I was thinking about something like jmx..."
1501,1511657652.000048,Margaret,"set-level! just changes a key in an atom, but you could easily hook up an api to alter it. My app starts a localhost only socket server that we sometimes connect to in order to change the log level, or the logged namespaces"
1501,1511658179.000023,Terra,"I was thinking about socket repl but not sure if that's feasible in terms of security compliance on production :slightly_smiling_face:.
Nevertheless, thanks for advice. Maybe I'll try to add simple jmx api"
1501,1511658211.000041,Margaret,"it's localhost only by default; if they are on localhost, there's nothing they could do via the socket that they couldn't do easier with a shell"
1501,1511658267.000034,Terra,"That sounds reasonable. Will speak to ops guy and see if that's feasible.
Thanks!"
1502,1511660852.000004,Sonny,@jumar you don’t actually need the full repl - the socket server can be used to trigger the invocation of an arbitrary function with args; <https://clojure.org/reference/repl_and_main>
1502,1511661502.000002,Margaret,"I keep forgetting it can do that, that's smart"
1503,1511691071.000071,Berry,"spec is not behaving the way I expec it to
is there a way to query the ""spec database"" to see what is ""registered"" corresponding to a given keyword/spec ?"
1504,1511693657.000006,Wendi,"Yep, there’s a private atom &amp; a helper which derefs and returns the current value. "
1504,1511694083.000059,Berry,Can you point me at the documentation of the helper function?  don'ts see it in the spec guide.
1505,1511696048.000003,Daine,"there is (defn get-spec
  “Returns spec registered for keyword/symbol/var k, or nil.”
  [k]
  (get (registry) (if (keyword? k) k (-&gt;sym k)))) from the source"
1503,1511699475.000014,Mina,"What are the benefits of using `keyword` over `string`? In particular, in a map?"
1504,1511700921.00004,Berry,"```
(:foo {:foo 20})
(""hello"" {""hello"" 20})
```
kw works, string gives error"
1503,1511700960.000013,Danyel,"<@Mina> there's a performance benefit - because of interning, Clojure Keywords are very fast to check for equality (essentially a pointer comparison), making for fast lookups in maps; they also then to consume less memory. There's also a practical benefit that keywords are functions of the maps that (potentially) contain them as keys. Finally, IMO, there's a clarity benefit: when you see a piece of data as a keywork, you know that it's a programmatic name, not content meant to be shown to a user; Strings have that ambiguity."
1504,1511704209.00007,Basil,"<@Berry>: keyword implement IFn and act as functions, strings don't. Similarly, you can't use a number as a function like `(1 [""foo"" ""bar"" ""baz""])`. However, maps implement IFn, so you can do `({""hello"" 20} ""hello"")`."
1503,1511704550.000047,Mina,"ok thanks.
One more question, do you use keywords scattered in your codebase or abstract them using a `def`?
What I mean:
```
(def name :name) 
(name {:name ""itaied""})
```
Rather than 
`(:name {:name ""itaied""})`; so that if the model name changes (lets say that the map is a dynamic variable), you have to change it in only one place; like `:name` change to `:fullname`"
1503,1511705213.000001,Jodie,"This is something I've also been interested in, and has been one of the things I've felt myself wanting monads for."
1506,1511707575.000085,Lucio,<@Jodie> have you ended up using this approach on any project?
1503,1511707772.000089,Danyel,"<@Mina> I know why you may feel this is a good idea, but from experience, I recommend using keywords in their literal form, not abstracted behind a name."
1506,1511707869.000064,Danyel,"This level of indirection is unlikely to make your change non-breaking, because the keyword will probably end up being exposed raw somewhere, e.g serialized over the network"
1503,1511709391.000008,Mina,"but then the change would be in one place, doesn't it?"
1507,1511713651.000066,Maryann,"Hey folks. I’m trying to parse a string of the format `aaa bbb ""ccc"" {:a 1} foo bar...`, where non-bracketed whitespace-separated parts are to be read verbatim, and `{..}`, `#{..}` and `[..]`-parts are to be read as ClojureScript expressions. What’s the easiest way to do the expression read? I had a look at `clojure.edn/read-string`, but it does not return the unread tail, and I wouldn’t want to count brackets manually.; <@Mina> No, it will be everywhere: instead of changing a keyword throughout the code you’ll need to change a variable throughout the code. If you don’t, you’ll end up with moral equivalent of `(def fourteen 17)`."
1508,1511714542.000059,Margaret,that reminds me of this lib <https://github.com/gfredericks/seventy-one>
1508,1511715477.000091,Jodie,"Not yet, no."
1503,1511716711.000081,Ahmad,"<@Mina> it's not considered idiomatic clojure, people simply use keywords and repeat them whenever they need to, you should also know that there's another feature regarding Clojure keywords that is useful to provide this isolation you're looking for, it's called namespaced keywords. Check this article for more info on that: <https://kotka.de/blog/2010/05/Did_you_know_III.html>; also, if you define a name for your keywords you would have to require them in the other namespaces to use them, therefore, keywords and namespaced keywords are easier to use."
1503,1511717369.000084,Magda,( for extremely large values of fourteen )
1509,1511728909.000021,Berry,"is there a nice way to interface Clojure with either Rust, C, or C++ ?

my ideal setup would be:
  1. Clojure has a DSL for Rust/C/C++
  2. I write some high performance code in this DSL
  3. at runtime, this DSL -&gt; Rust/C/C++ -&gt; *.so -&gt; dynamic loads as JNI -&gt; I can call it from Clojure

The only structured I need to pass back &amp; forth is float-array, int-array, and double-array"
1509,1511729324.000019,Jonas,"i’ve used jna for integration with `C`; and it was pretty enjoyable; <https://github.com/Chouser/clojure-jna/>; it seems like rust supports being called like a c function, <https://doc.rust-lang.org/book/first-edition/ffi.html#calling-rust-code-from-c>; so it seems like you could setup rust code to be called from clojure-jna, although it might involve some boilerplate; the same will apply for c++, where you would create c wrapper functions to your c++ code"
1510,1511733984.000102,Edwin,"I've used Clojure with JNI directly, it was straightforward to follow the JNI docs. You have to be a little careful to make sure pointers passed to native code don't get garbage-collected. I think there is some overhead involved in the interaction between native code and JVM, which might matter if there is a lot of calling back-and-forth between the native code and JVM code."
1510,1511734380.000052,Berry,"I currently have a boot process that looks like:
```
(deftask learning-dev []
  (comp
   (repl :port 4001) 
   (watch)
   (fn [next]
     (fn [fileset]
       (require 'server.ss-web :reload)))))
```

the goal is to auto reload all *.clj *.cljc files

unfortuantely, it's not doing that; how can I fix this?; (server.ss-web) is a ns that happens to require all the namespaces I care about; I'm trying:
```
(deftask learning-dev []
  (comp
   (repl :port 4001) 
   (watch)
   (fn [next]
     (fn [fileset] 
       (require 'clojure.tools.namespace.repl)
       [clojure.tools.namespace.repl/refresh]))))
```

but I am getting error: 
```
java.lang.ClassNotFoundException: clojure.tools.namespace.repl
      clojure.lang.ExceptionInfo: clojure.tools.namespace.repl
```"
1509,1511737189.000041,Margaret,"if you call require inside your function, you can’t compile code for that function that accesses it directly; you need to use resolve or similar; it’s much simpler if you can move the require outside the function and into the top level of the code"
1509,1511737544.000106,Berry,"<@Margaret>: can you head ovedr to <#C053K90BR|boot> ? I have code via resolve, but it's failing with a different error"
1509,1511737567.000056,Margaret,"I know nothing about boot; resolve returns a var, you might need to dereference it and get the actual function? usually that doesn’t matter"
1509,1511737714.000065,Berry,"```
(deftask learning-dev []
  (comp
   (repl :port 4001) 
   (watch)
   (fn [next]
     (fn [fileset] 
       (require 'clojure.tools.namespace.repl)
       ((resolve 'clojure.tools.namespace.repl/refresh))))))
```
is what I have, but it's causing prolblems with ""set! on non-binding thread""; but at this point, I guess it's a boot problem, and not a cloju4re problem"
1509,1511737729.000048,Margaret,"yeah, that sounds like some boot stuff"
1509,1511737736.00001,Berry,"repl/refresh is being called properly, just on a different thread"
1509,1511738242.000008,Margaret,"one thing to try could be bound-fn, which creates an fn that will have all your current dynamic bindings when called"
1509,1511738750.000098,Berry,"eh, I'm just going to have emacs hot key send it to repl :slightly_smiling_face:"
1511,1511742906.000015,Krysta,"I implemented a map-indexed-2d, give it a 2d vector, it will spit out a 2d lazy seq with the same shape. But I need to get-in on the result, get-in doesn't apply to lazy seqs. What can I do?"
1512,1511745726.000067,Berry,(for [y ys x xs] (f (get-entry x y))) ?
1511,1511748149.000143,Giovanna,"<@Krysta> Make it return a 2d vector instead of a  2d lazy seq in the first place? `(vec (map-indexed ,,,))`"
1511,1511748214.000019,Krysta,"yeah~ thx~; I got the same suggestion in <#C03S1L9DN|clojurescript>, but map-indexed-2d loses laziness~"
1511,1511751112.000011,Ernesto,<@Krysta> `nth`?
1512,1511751250.000108,Ernesto,or <https://github.com/clojure/clojure-contrib/blob/a6a92b9b3d2bfd9a56e1e5e9cfba706d1aeeaae5/modules/map-utils/src/main/clojure/clojure/contrib/map_utils.clj#L22> ?; ?
1513,1511753495.00017,Tari,Thank you <@Dirk>
1514,1511766422.000048,Berry,"assert returns nil;
what is the best way to do an assert that returns obj ?

I want to basically ""assert this obj is not nil, and return original value""

I'm not sure if this is better written as a function or a macro"
1514,1511768726.000114,Daine,<@Berry> why would you want to do it like that? It seems like an use case for if-let which checks whether some function returns something which is not nil.
1514,1511770017.000145,Verna,"<@Berry> 
```
(defn assert-or-value
  [x]
  (assert x)
  x)
```; <@Berry> but it seems there is no sense in such behavior.; since this function does not change the output, there is no sense in re-defining the value. I mean, if you write something like this `(let [x (assert-or-value x)])` it will look weird"
1515,1511770965.000035,Fe,(doto x assert)
1514,1511771521.000311,Berry,"I have code of the form
```
(let [ ... ]
  (code))
```

but (code) will throw a weird exception if one of the top bindings is nil -- in which case, I'd prefer to get an assert exception at the point of binding a nil value, rather than when I use it"
1514,1511779925.000021,Daine,"<@Berry> just wrap all the bindings with if-let, if one of them fails, code will not be called; <@Berry> you could use the else clause to log something, so you know where it went wrong"
1516,1511781287.000181,Rogelio,"I have an irritating issue with Leiningen REPL. Every time I try to close an IDE (IDEA + Cursive) that has started `lein repl` via a bash script, it hangs on `Waiting for process detach`.
If I `kill` the REPL process, everything continues as it should have. If instead I press ""Cancel"" in the IDEA dialog, it doesn't wait, but the REPL process is still there, parentless.
Is there anything I can do to make IDEA kill REPL?"
1517,1511782701.000029,Vickie,"Is anyone working on a Clojure to LLL to Ethereum Virtual Machine bytecode compiler?; LLL isn't precisely a LISP, but it's LISP-like"
1516,1511784205.000366,Rogelio,Probably I can reformulate the question - is there any way to make `lein repl` exit on `Ctrl+C`?
1516,1511784489.000239,Hermelinda,"I want to parse a array of bufferedImage. I need the first three values, modify them and then take the next 3. Currently I use a loop construct, but  this tooks really long. Now my idea was to use r/reduce, to speed it up. How could I go through the array, always using three values at once?"
1518,1511785873.00026,Mallory,"hello guys; i'm asking about situation which i have (deftype X [id name]) , then i would like to assign id automatically without declare it at (X. id name), is there a good way to do it?; so only i have (deftype X [name])  and id is generated automatically and i able to do something like (.id x) for example"
1518,1511786009.000451,Rogelio,"As far as I know, people usually create a constructor function: `(defn make-x [name] (X. (generate-id) name))`"
1518,1511786073.00032,Mallory,<@Rogelio> i know this so do you think there is something better ?
1518,1511786092.000003,Rogelio,Better from what perspective?
1518,1511786107.000155,Mallory,for example hiding (generate-id) part; (X. name)
1518,1511786400.000291,Rogelio,"Well, the constructor function does exactly that, it's just named differently.
If you want both the same name and an implicit field, I don't think that's possible."
1519,1511787775.000231,Nilda,"I have two different standalone projects that I want to send data between. Both are backend, so no need for websockets. but I want to send data back and forth between the two using Transit. Should I roll my own low-level socket thingie, or should I use something else?"
1518,1511788072.000417,Mallory,henrik maybe google protobuf
1519,1511788497.000015,Rogelio,"<@Nilda> WebSockets can be still be used in your situation. Check this out: <https://github.com/ptaoussanis/sente> It supports Transit out of the box
Other projects linked on that page are pretty good, too. Personally, I use Chord."
1519,1511789674.000239,Nilda,"Cheers, I could yeah. I’m currently eyeing ØMQ: <http://zeromq.org|zeromq.org>; The introduction is speaking to my Clojurian sensibilities: 

&gt; Programming is science dressed up as art because most of us don’t understand the physics of software and it’s rarely, if ever, taught. The physics of software is not algorithms, data structures, languages and abstractions. These are just tools we make, use, throw away. The real physics of software is the physics of people—specifically, our limitations when it comes to complexity, and our desire to work together to solve large problems in pieces. This is the science of programming: make building blocks that people can understand and use easily, and people will work together to solve the very largest problems."
1519,1511789966.000167,Rogelio,A nice paragraph indeed.
1520,1511793951.000038,Lanie,"Hello guys. I'm asking if someone have faced use Kafka from clojure. I have been looking for a client and the most updated client, his last commit was 6 months ago. In theory we have planned use version 1.0 of Kafka. Thanks for advanced."
1520,1511794335.000615,Rogelio,"Interestingly, ClojureScript gives `true`."
1520,1511794558.000075,Fe,case has a special case for seqs
1520,1511794613.000761,Inga,Yeah but it works for positive numbers
1520,1511794628.000238,Fe,but that should only be true for lists not vectors... hm
1520,1511794649.00049,Rogelio,"Yes, as per the documentation: ""Note that since
lists are used to group multiple constants that map to the same
expression, a vector can be used to match a list if needed."""
1520,1511794660.000413,Inga,`(compare 3 2)` and `1` works; same for `(compare 3 3)` and `0`
1520,1511794927.000297,Fe,"```user=&gt; (case [""a"" (int -1)] [""a"" -1] true false)
false
user=&gt; (case [""a"" (long -1)] [""a"" -1] true false)
true```"
1520,1511795178.000421,Kareen,"looks like a bug in clojure; ```user=&gt; (case -1 -1 true false)
true
user=&gt; (case [-1] [-1] true false)
true
user=&gt; (case (int -1) -1 true false)
true
user=&gt; (case [(int 1)] [1] true false)
true
user=&gt; (case [(int -1)] [-1] true false)
false```"
1520,1511795228.000413,Fe,integers are kind of rare so maybe that's why people don't run into this more often; oh it only happens with vectors containing negative integers
1520,1511795351.00003,Kareen,I have a good idea of why this happens; if you can log this in jira I might have a look this evening
1520,1511795418.000477,Fe,I think that's directed at <@Inga> ? :slightly_smiling_face:
1520,1511795430.00017,Kareen,anybody willing :)
1520,1511795531.000309,Inga,That drove me crazy :smile: yeah I'll try 1.9 later to confirm if it is still the `case`
1520,1511795542.000443,Kareen,<@Inga> it is
1520,1511796036.00016,Inga,opened one :slightly_smiling_face:
1520,1511796202.000809,Fe,"<@Inga>, link?"
1520,1511796246.000779,Inga,<https://dev.clojure.org/jira/browse/CLJ-2275>
1520,1511796433.00059,Fe,"<@Inga>, you could reduce the repro to what <@Kareen> wrote (`compare` or the 2-element vector don't help trace down the bug); clojurescript doesn't make a lot of sense as it doesn't distinguish Long vs Int"
1520,1511796705.000736,Inga,I don't have edit permissions
1520,1511796744.000169,Kareen,it's ok I'll edit your ticket
1520,1511796861.000259,Fe,ok :slightly_smiling_face:; I don't think I do either
1520,1511797055.000689,Randee,<@Kareen> Very curious how this could potentially be fixed since `Integer.` and `Long.` have different hash codes? Wouln't the compiler have to generate 2**n different cases for a match on a vector with `n` elements?
1520,1511797067.000625,Kareen,no; we could switch to hashEq rather than hashCode; which hashes equally for integers and longs
1520,1511797099.000582,Randee,Oh I see. :slightly_smiling_face:
1520,1511798690.000036,Sonny,<@Kareen> I think it is using hasheq?
1520,1511798695.000107,Kareen,it isn't; and it's not as straightforward as s/hashCode/hashEq/ unfortunately
1520,1511798733.000328,Sonny,I realize there are a lot of cases
1520,1511798764.000787,Kareen,prep-hashes implicitely assumes that on collision nodes h(h(v)) == h(v) where h = hashing and v = collision test; which holds true for hashCode of numbers but not for hashEq
1520,1511798806.000443,Sonny,"hmm, subtle"
1520,1511798809.000796,Kareen,yeah; I should have a patch ready in by the end of the day
1520,1511798831.000714,Sonny,"well, that’s a bug then"
1520,1511798834.000358,Kareen,yep
1520,1511798856.000204,Sonny,`(case (int -1) -1 true false)` is not doing what is implied right?
1520,1511798868.000012,Kareen,it is
1520,1511798883.000782,Sonny,"oh, that’s in the expr not the case"
1520,1511798884.000216,Kareen,the bug only happens when `case`  uses hashing comparison + a collision happens
1520,1511798923.000156,Sonny,"I read the (int -1) as a case of “int” and “-1"", but that’s the expression, so nvm"
1520,1511798928.000258,Kareen,hah; `case`'s grouping gets me way too often
1520,1511798980.000164,Sonny,"yeah, I’m sensitized to look for it now :)"
1521,1511800012.000134,Lovie,try your luck over <#C051WKSP3|onyx> 
1520,1511800722.000163,Kareen,"I've added a patch for CLJ-2275, pretty straightforward apart from quite a tricky line which I commented on"
1522,1511800885.00068,Lanie,"Thank you, i will check it :+1:"
1523,1511814706.000087,Herlinda,"This SO question came about because the person was re-implementing `zipmap` and rolling up their function args with `&amp;` instead of just naming them keys and vals. so the first answer says to overcome this by using `apply`, I suggested naming the args. Please vote on your preferred solution: <https://stackoverflow.com/questions/47517056/how-to-re-implement-zipmap-in-clojure/47518278>"
1521,1511818137.000295,Maryann,"`lein doo` gives me `Exception in thread ""main"" java.lang.RuntimeException: No such var: string/includes?, compiling:(cljs/util.cljc:157:13)`, followed by a long stacktrace with compiler internals. How do I know which `cljs/util.cljs` it refers to? It’s apparently from some dependency, not from my project."
1521,1511818268.000192,Berry,"I have a string of length 29. I want to create 10 strings of length 2, by dropping every 3rd char from the string.; Current idea is to convert to a list of chars, and use drop / partition, but I'm wondering if there ar better string functions."
1521,1511818469.000119,Willow,"partitioner has a `[n step coll]` arity so just `(parititon 2 3 &lt;your-words&gt;)`; `(map #(apply str %) (partition-all 2 3 ""abcdefghijklmnopqrstuvxyzabc""))`"
1521,1511819233.000194,Berry,(partition 2 3 ...) is nice
1524,1511825987.000063,Tameka,"Hi Clojurians. I’m trying to build a simple REST api + clojurescript with re-frame and reagent.. and sass.
So I was thinking to use chestnut template for this. Would it be an overkill?"
1524,1511826261.00025,Georgianne,<@Tameka> it’s useful to start from scratch but there’s a lot of instant gratification from using chestnut; either approach is fine; Does anyone have any experience using grpc/protobufs from Clojure? I want to use Google Cloud APIs and extract data out of them as persistent maps; I could use the Java API but that means writing a bunch of POJO&lt;=&gt;persistent data structure mapping code that I don’t really need. I guess what I’m saying is: is there a <https://github.com/portkey-cloud/aws-clj-sdk> for grpc?; If I was writing this from scratch I’d assume I’d write a grpc to gloss compiler
1524,1511826438.000076,Tameka,"I do want to start from scratch, but I’m scared of stuartsierra.component library :)) I still don’t quite understand why do I have to use it in the applications. And I’m thinking that I’ll be spending a lot of time figuring out where / how / why to use it in my application; whereas chestnut just has it all set up"
1525,1511827913.000408,Lovie,you can try compojure via the +handler
1525,1511828724.000028,Margaret,"<@Tameka> you don’t have to use it, but it prevents problems caused by global mutable singletons for application resources"
1525,1511828810.000271,Tameka,that’s what I don’t really understand. how is a server instance mutable?
1525,1511828841.000009,Margaret,"<@Tameka> at one moment in time, it’s running and you can use it to listen for connections, at another moment in time it isn’t; at one moment, it uses your handler to serve requests - at another moment it has a different handler, or different middleware; it’s a resource that has state; how do we avoid the situation where your server is still running and you want a different one?"
1525,1511828922.000132,Tameka,different server?
1525,1511828935.00013,Margaret,"it owns a resource that comes from the OS, what if you replace the global reference before stopping it?; component helps streamline these things, not just for your server, but for other things that own limited or unique resources, or manage a mutable internal state; including database connections, or user state, or even graphic windows; what if one mutable or resource owning thing needs to access another one? component helps"
1525,1511829081.000122,Tameka,hmm so it can be used on front end as well? in cljs?
1525,1511829093.000341,Margaret,"I meant OS windows, but yes, I also use it in cljs"
1525,1511829117.000084,Tameka,do you use it instead of re-frame?; doesn’t it have just start and stop methods?
1525,1511829135.000105,Margaret,"<@Tameka> another important usage is with tests - if your code is made to use components you don’t have to go redefining things in other namespaces to run tests - all you need to do is pass in data that is usable in the right way; <@Tameka> I use it to control the websocket connection, and ensure that when things try to send to the server via websocket and the socket is closed, the messages get saved to send later, and that all the messages go through once the handshake is done; <@Tameka> it ensures that the r/atoms that we create to manage state don’t have to be globals, instead they can be passed in from the component that initializes them on startup and owns them"
1525,1511829287.00002,Tameka,"if you have any public repos that show some simple usages, it would be very helpful to see please"
1525,1511829305.00013,Margaret,"similarly the router that acts on address bar changes - it gets passed routing rules via components, so that it doesn’t need to use globals and be tied to implementation details of the rest of hte app; <@Tameka> sadly this is a closed source app - it’s the product we sell; but there are definitely examples of components out there, and they work on the same principles: if something is mutable or owns a limited resource, make sure it has a specific owner, isn’t global, and gets passed as an argument to things that need it"
1525,1511829487.000116,Tameka,ok no problem :slightly_smiling_face: thanks for explanation. I think I’ll just need to see in action to actually understand what it does. I’m trying to understand it in other languages I know. perhaps it’s very Clojure related
1525,1511829571.000161,Margaret,how do the other languages work with limited or mutable resources?
1525,1511829582.000224,Tameka,maybe I should build this app from scratch and perhaps I’ll stumble upon the issue where I’ll have that ‘aah I see’ moment and use it
1525,1511829624.000219,Margaret,"<@Tameka> in my experience making something around a shared mutable global value, then trying to convert to use an explicit argument later, is a huge pain - it requires a lot of work; if you start with explicit arguments, it’s very easy to make it implicit (or even act like it’s global) in specific scopes if you later decide you need that; it’s not a two way thing - one way is easy, the other is hard"
1525,1511829701.000003,Tameka,"you mentioned the Websocket connection, so in simple terms do you mean that a mutable resource would be a global variable in `js` for example, that holds the connection instance?"
1525,1511829730.000242,Margaret,"yes - and attached logic that ensures that if some other part of the app starts to send, and we are not connected, the message is queued for later; and some data unpacking / packing, stuff like that; but when you use component, it’s not global any more; which means if you need to test it, or use things differently later, you can just replace an argument; instead of rewriting code or faking other namespaces or such"
1525,1511829956.000105,Tameka,"the way I’ve seen it written in some examples, it was assigned to something.. like `(def system (create-system))` where `create-system` returned a `component/system-map` or `component/Lifecycle`"
1525,1511829980.000054,Margaret,that’s convenient during development but isn’t recommended in an actual application
1525,1511829981.000161,Tameka,doesn’t that mean that `system` is global here ?
1525,1511829987.000137,Margaret,your code should not rely on that global; but it’s very useful to have that global in your repl
1525,1511830029.000262,Tameka,"ah so in a production - ready application, I would have something like
```(defn -main [&amp; _]
  (let [config (config)]
    (-&gt; config
        app-system
        component/start)))```"
1525,1511830031.000181,Margaret,"in fact, it’s recommended to only create that def in dev mode, and simply anonymously create the system in prod, without leaving any handle to it anywhere"
1525,1511830035.000168,Tameka,(copied from chestnut)
1525,1511830039.000166,Margaret,exactly
1525,1511830051.000073,Tameka,so basically it becomes just an argument to an application
1525,1511830079.000124,Margaret,"component/start automates the start up order of the parts of the app, and makes sure they can see the other parts they need"
1525,1511830103.000107,Tameka,damn :smile: I get it now
1525,1511830112.00036,Margaret,"that’s another advantage, instead of having to mentally juggle the order that things start up because of functional deps, it can just do a topo sort of the tree of deps"
1525,1511830118.000264,Tameka,you should write a blog post on this!
1525,1511830122.000261,Margaret,"glad I could help!; maybe I will some day, heh"
1525,1511830135.000176,Tameka,thank you so much; I guess I was complicating things in my mind
1525,1511830177.000039,Margaret,"if you think about it, it’s providing the same advantages that fp does over imperative code, on an app architecture level; immutable arguments instead of mutable resources (or at least pretend, as much as you can :smile:)"
1525,1511830217.000251,Daniell,<@Tameka> See if this simple example helps: <https://github.com/seancorfield/clojure-webapp-live-demo/blob/master/src/webapp/core.clj> -- it uses Component to start/stop a Jetty web server.
1525,1511830414.000229,Tameka,nice; thank you <@Daniell>
1525,1511830479.000127,Berry,"I know about Integer. and Float.
Is there a clojure function of type ""string -&gt; number _or_ nil""

which does

if full string parses to a number, return number
else, return nil"
1525,1511830536.000096,Margaret,I always use `#(try (Long/parseLong %) (catch Exception _))`; or Double/parseDouble as needed
1525,1511830657.000343,Berry,"I was under the impressions that exceptions are slow and should be avoided for simple tasks, but I hnever benchmaked it tobe sure"
1525,1511830681.000223,Margaret,"catching that exception and returning nil is much simpler than a reliable maybe-read-a-number; and honestly since I only do that parsing at system boundaries, it is guaranteed to never be in a hot loop; so I haven’t had to think about its performance"
1525,1511830733.000123,Tameka,I’ve got this 6 page SPA that I decided to re-build using clj + cljs. At the moment I’m using `Node.js + Elm` on that one and I’m so motivated to do it :smile: I’ve been playing around with clojure for a while now but haven’t built anything significant yet
1525,1511830752.000152,Margaret,if you think that your communication with the outside world is in a hot loop you need to optimize - statistically speaking it’s unlikely you shoudl be using clojure
1526,1511833887.000007,Sonny,Exceptions are not slow
1525,1511839692.000218,Berry,"is there a builtin for 'apply this function to last element of this vector' or is it a matter of peek, pop, and conj"
1526,1511839739.000144,Berry,"is count on a vector guarnttted to be constant time ?
<https://clojuredocs.org/clojure.core/count> says nothing; If I'm trying to compute f^n(x), is the best way simply

(first (drop n (iterate f x))) ?"
1526,1511840350.000043,Micha,"<@Berry> Here is the implementation of the method count() for objects of type PersistentVector in the Java source code for Clojure, which is the type that Clojure vectors are: <https://github.com/clojure/clojure/blob/master/src/jvm/clojure/lang/PersistentVector.java#L205-L207>; That is the method that clojure.core/count calls when you call count on a Clojure vector, because PersistentVector implements the Counted Java interface (through several intermediate subclass/implements relationships that I won't bore you with unless you want to know)."
1526,1511840416.000111,Sonny,"the fastest way to do this is going to be peep/pop, then transform, then push"
1526,1511840425.00022,Micha,"So for probably all versions of Clojure up to 1.9, you are guaranteed it is constant time.  Future versions?  Only Rich Hickey knows :slightly_smiling_face:"
1526,1511840445.000215,Sonny,"but really if you are asking this question, you are probably using the wrong data structure in the first place; you can see this in Clojure by using `counted?` which indicates a coll can be counted in constant time; if you’re doing something stack-like, use a list (and pop/peek/conj)"
1526,1511840602.000123,Berry,"so I'm building a parser, where the tokens are stored in a vector; most of the time, it's just conj to end of vector, but occasionally I have to modify the last conjed token"
1526,1511840822.00021,Sonny,"well, I’d recommend: `(defn transform-last [v f] (conj (pop v) (f (peek v))))`; peek is definitely the fastest way to get the last element of a vector"
1526,1511840964.000107,Berry,got it; thanks
1527,1511854667.000044,Mark,"I'm trying to download a dependency, jai_core, from here <https://repository.jboss.org/nexus/content/repositories/thirdparty-releases/javax/media/jai-core/1.1.3/>. I added the repository to my project.clj like this `:repositories [[[""jboss-third-party"" ""<https://repository.jboss.org/nexus/content/repositories/thirdparty-releases/>""]]]`. I still get an error message like this though `Could not find artifact javax.media:jai_core:jar:1.1.3 in jboss-third-party (<https://repository.jboss.org/nexus/content/repositories/thirdparty-releases/>)`; What am I doing wrong?"
1527,1511855401.000299,Shira,You need to request `jai-core` not `jai_core`
1527,1511855692.000322,Mark,"hm; I can't find any uses of jai_core though, I'm thinking  this is a transitive dependency; <https://mvnrepository.com/artifact/javax.media/jai_core/1.1.3> ah, there's jai-core and jai_core :slightly_smiling_face:; Thanks for the tip"
1528,1511863373.000078,Berry,"what's the cljs equiv of clojure.edn ?; do I need a separate library, or is this part of clojure?"
1528,1511863459.000337,Kareen,"it's transitively part of cljs; `cljs.tools.reader.edn`; or `clojure.tools.reader.edn`, as you prefer"
1528,1511863554.000102,Berry,"```
            #?(:cljs [cljs.tools.reader.edn :as edn]
               :clj [clojure.edn :as edn])

```
is there a better way to write this, or do I need the conditional ? (this is for a cljc file)"
1528,1511863942.000336,Kareen,you can use `clojure.tools.reader.edn` in both clj and cljs; otherwise what you have is ok
1528,1511864044.000399,Fe,yay for tools.reader!
1529,1511870643.000121,Fe,"I couldn't figure out how to start clojure 1.9. from the command line (sans boot tools) using `java -cp` because of the additional dependency (now that `java -jar clojure.jar` is not sufficient anymore). Specifically

- which version of spec is needed for clojure-1.9.0-rc2?
- is `java -cp clojure.jar:spec.jar clojure.main` the recommended way to start this?
- is this documented somewhere? This would be a good candidate for the release notes as it might catch users switching to 1.9 unaware"
1530,1511871540.000303,Idella,"hello, channel"
1530,1511872401.000039,Nilda,"&gt; If you’ve spent years learning tricks to make your [multi-threaded] code work at all, let alone rapidly, with locks and semaphores and critical sections, you will be disgusted when you realize it was all for nothing. If there’s one lesson we’ve learned from 30+ years of concurrent programming, it is: just don’t share state. It’s like two drunkards trying to share a beer. It doesn’t matter if they’re good buddies. Sooner or later, they’re going to get into a fight. And the more drunkards you add to the table, the more they fight each other over the beer. The tragic majority of MT applications look like drunken bar fights.
~ <http://zguide.zeromq.org/page:all>"
1531,1511873910.00006,Amado,"hello everyone, is there a function equivalent of haskells `partition :: (a -&gt; Bool) -&gt; [a] -&gt; ([a], [a]) ` in clojure?"
1531,1511873981.000201,Nilda,<@Amado>: <https://clojuredocs.org/clojure.core/partition-by>
1531,1511873984.000291,Randee,"<@Amado> Not really, but `group-by` is close; That's very different I think.; Many programming languages (also e.g. Kotlin) output only 2 vector for `partition`"
1531,1511874080.000496,Nilda,"Alright, my bad"
1531,1511874388.000293,Amado,"<@Nilda>, im not sure if ive understood the docs right"
1532,1511874393.000292,Kareen,"<@Fe> two options: 1- use the new `clj` script 2- the just released 1.9.0-RC2 has a standalone jar, it's documented in the readme"
1531,1511874445.000475,Amado,"```
(partition-by even? [1 2 3 4 5 6 7 8])
;=&gt; ((1) (2) (3) (4) (5) (6) (7) (8))
```"
1531,1511874450.000086,Sonny,"This will be documented on the Getting Started page on release but there are several answers.
1) use a build tool like lein, boot, maven, etc. If you include Clojure 1.9 as a dependency, it will also pull in its dependencies automatically (spec.alpha and core.specs.alpha).
2) use the new Clojure cli scripts doc’ed at <https://clojure.org/guides/deps_and_cli>. If you’re on a Mac this is as simple as `brew install clojure` then `clj`.
3) build a stand-alone jar from the Clojure git repo - git clone the repo and then follow the directions in the readme.
4) Download the jars for Clojure, spec.alpha, and core.specs.alpha and manually create the classpath. This is probably the most cumbersome"
1531,1511874473.000456,Amado,id like 2 lists as a result
1531,1511874479.000306,Nilda,"My suggestion is incorrect for what you have in mind, I misunderstood the purpose of partition in Haskell.; Give the `group-by` suggestion by <@Randee> a whirl, it’s more likely what you’re looking for."
1531,1511874570.000197,Amado,"found the solution, ended up with `(vals (group-by even? [1 2 3 4 5 6 7 8]))`"
1531,1511874572.000309,Kareen,group-by; yep; <@Amado> note that using vals is probably incorrect; group by returns an unordered map; no guaranteed that you'll get [truthy falsy] vs [falsy truthy]
1531,1511874649.000097,Jutta,+1 to `cloogle` with spec
1531,1511874880.000475,Amado,hmm
1531,1511876001.000448,Cecilia,"`(defn haskell-partition [f coll]
  (map (group-by f coll) [true false]))`"
1533,1511876009.000377,Cecilia,"(haskell-partition even? (range 10))
=&gt; ([0 2 4 6 8] [1 3 5 7 9]); (threads do not support inline code blocks, which sucks, try to bear with me); and I’m not 100% certain if that is actually what that haskell function does but I think it gets close enough; let me put my suggestion here, it’s now hidden inside a thread:

```
(defn haskell-partition [f coll]
  (map (group-by f coll) [true false]))

(haskell-partition even? (range 10))
=&gt; ([0 2 4 6 8] [1 3 5 7 9])
```; this way order is guaranteed"
1533,1511876378.000605,Amado,thank you!
1533,1511876383.00028,Cecilia,np; it is not always obvious that you can use maps as functions :slightly_smiling_face:
1533,1511877826.000035,Fe,Hm the rc2 link on <https://clojure.org/community/downloads> is broken
1534,1511877834.000615,Fe,"cc: <@Sonny>; <@Kareen>, do you know if the standalone jar is published somewhere?"
1534,1511877935.00037,Kareen,no; it's just a local build; as the build profile names suggests
1534,1511878116.000363,Fe,thanks for the reply! building the classpath manually is fine by me - looks like you can see the correct spec.alpha and core.spec.alpha versions here: <https://mvnrepository.com/artifact/org.clojure/clojure/1.9.0-RC1>
1534,1511878222.000408,Sonny,"Ah yeah, I need to update that page. This just changed as of yesterday.; Yep, but note that the reason for breaking these out is to allow them to change more quickly than Clojure so there won’t be one single version that is applicable necessarily"
1535,1511879093.000174,Celina,We have a weird issue where some go routines stop working after about 5hrs - any ideas what we can look at ?
1534,1511879130.000331,Fe,when I try to build the classpath manually I get `Could not locate clojure/spec/alpha__init.class or clojure/spec/alpha.clj on classpath`
1534,1511879131.00039,Kareen,look for blocking IO inside `go` blocks
1535,1511879155.000336,Celina,will that hold up all the go routines though ?
1534,1511879155.000718,Weston,blocking io is almost always the culprit
1534,1511879175.000295,Kareen,"<@Celina> go routines execute in a shared threadpool; if you block all the threads available in that threadpool, nothing will gets executed anymore"
1534,1511879205.000647,Weston,it's just 8 threads even so it's quite easy to break if you're not careful
1534,1511879234.000197,Kareen,<@Fe> how are you bulding that cp?
1534,1511879255.000156,Celina,thanks folks - off to debug
1534,1511879603.000481,Fe,"<@Kareen>, I had a typo; it works now - here's a simple script to download clojure manually: <https://gist.github.com/pesterhazy/afdfa47ac04d94ee16b5f2e8ddbb0bb1>"
1534,1511879680.000409,Kareen,don't do that
1534,1511879696.000805,Fe,"right, so the version in clojure's pom is essentially the minimal version of those extra deps"
1534,1511879715.00001,Kareen,use the new clj script instead
1534,1511879721.000218,Fe,no
1534,1511879733.000449,Kareen,why? it basically does that for you
1534,1511879797.000409,Fe,"I understand, but this is simple and I know exactly what it does - it's the moral equivalent of the standalone jar in clojure 1.8; clojure is just a jar, remember?"
1534,1511879832.000726,Kareen,so what?
1534,1511879833.000337,Fe,(or three jars)
1534,1511879837.000218,Kareen,"meh; feels like NIH tbh; I don't see any point in reinventing something that has now an official impl; but you're free to do as you think best :); all `clj` does is download your artifacts and build a cacheable classpath for you, nothing more than that or magical"
1534,1511880057.000178,Fe,"`clj` is wonderful, but that doesn't mean that it's not useful to build a shell script to understand how it works"
1534,1511880388.000396,Kareen,"I'm not saying it's not useful to build a simplified version of X to understand how it works, I'm saying if you need to use it, it's probably better to use X instead. in this case, your script will break when clojure adds a new dependency. `clj` would handle that automatically"
1534,1511880861.000536,Fe,it won't break so long as I don't update the clojure version :slightly_smiling_face:
1536,1511882074.000564,Jacalyn,"Hi, is `ex-info` json serializable?"
1536,1511882118.000385,Fe,"<@Jacalyn> ex-info can contain any java objects, so it depends on the contents"
1536,1511882128.000532,Jacalyn,"This doesn't seem to work:
```
(try (throw (ex-info ""testss"" {:a 3}))
                      (catch Exception e
                        (clojure.data.json/write-str (Throwable-&gt;map e))))
=&gt; Exception Don't know how to write JSON of class java.lang.Class  clojure.data.json/write-generic (json.clj:385)
```; What about that case though ^"
1536,1511882151.000011,Fe,get it using ex-data?
1536,1511882167.000481,Jacalyn,"Yeah, if I did that, I would lose the Message.; which in this case above is ""testss""."
1536,1511882813.000684,Tai,"it says right in the error message what the problem is; you’re trying to serialize an object of the class java.lang.Class, and your json writer doesn’t know how to do that"
1536,1511882888.000056,Jacalyn,"Ah thank you, it's a macro so I must evaluate it?
```
(try (throw (ex-info ""testss"" {:a 3}))
                      (catch Exception e
                        `(json/write-str (Throwable-&gt;map ~e))))
```"
1536,1511882952.000427,Tai,"no, being a macro doesn’t have anything to do with it. `(Throwable-&gt;map e)` produces something that has a java.lang.Class object inside it."
1536,1511883010.000599,Jacalyn,Ok but then how can you json serialize a generic ex-info?
1537,1511883538.000394,Guillermo,"Serialization libraries generally have a way to teach them how to serialize opaque objects.  cheshire allows you to extend a protocol to achieve that, not sure what c.data.json gives you as an extension point"
1536,1511883605.000751,Jacalyn,"Thank you, I see now that even a generic exception fails with the same issue:
```
(try (throw (Exception. ""hi""))
                      (catch Exception e
                        (json/write-str (Throwable-&gt;map e))))
=&gt; Exception Don't know how to write JSON of class java.lang.Class  clojure.data.json/write-generic (json.clj:385)
```"
1537,1511883705.000633,Guillermo,"looks like they allow a protocol too; ```
(extend-protocol JSONWriter
  java.lang.Class
  (-write [c out]
    (let [representation (do something to the class c)]
      (.print ^PrintWriter out representation))))
```; you'll need to import JSONWriter from c.d.json and PrintWriter from <http://java.io|java.io>; &gt; clojure.core/Throwable-&gt;map formerly returned StackTraceElements which were later handled by the printer. Now the StackTraceElements are converted to data such that the return value is pure Clojure data, as intended.; ^ Tidbit from the Clojure 1.9.0 release notes"
1537,1511884067.000444,Jacalyn,"Sounds good, thank you."
1538,1511900687.000354,Johana,"Is there something like `promise` where delivery can happen multiple times and deref just returns the last delivered value?; maybe core.async; but I want everybody to be able to deref, without emptying"
1538,1511900730.000596,Rebeca,atom and reset!; or any mutable value; mutable reference; that is just last write wins; the volatile reference might work great for that too; <https://dev.clojure.org/jira/browse/CLJ-1512>
1538,1511900839.000106,Johana,but atom reads don’t block and I need that too
1538,1511900842.000159,Aldo,"I think the implications behind ""delivery can happen multiple times"" rule out volatile. sounds like an atom though"
1538,1511900856.000111,Amado,"hello everyone, id like to to spawn 4 threads in paralallel to do some IO, i dont need to get data back from those threads, whats the best way to achieve this besides 
``` 
(thread ....)
(thread ..)
...
(thread ...)
```"
1538,1511900857.000215,Rebeca,"""delivery"" just means a write"
1538,1511900872.000098,Johana,"I need the deref to block; like with promise; I could use a promise with an atom, that would work; and double deref"
1538,1511900926.000621,Aldo,"I meant that ""delivery can happen multiple times"" says to me that it's multithreaded, meaning volatile is a bad choice :slightly_smiling_face:"
1538,1511900932.000107,Rebeca,if you are already using core.async (which I guess you are from the use of thread) I would look at pipeline-blocking
1538,1511901176.00031,Amado,"<@Rebeca>, my mistake, i was talking about `clojure.core/future` which spawns a thread ..
do you think its worth to turn my `vector` to a `core.async ` `queue` and use `pipe-line` blocking; ?"
1538,1511901250.000633,Rebeca,"it depends, I might start looking at using Executors directly too instead of using clojure.core/future; like, do you want to have 4 threads that a re-used for doing io, or do you want to spin up 4 threads each time, does the io return a result, and do you need those results in order or not"
1538,1511901365.000002,Amado,"i trully dont care about the result, and i wont reuse anything, those threads perform their work and die silently"
1538,1511901724.000313,Johana,"This works I think.
```
(let [p (promise)]
  
  (defn last-val [] @@p)
  
  (defn reset-val! [v]
    (or (deliver p (atom v))
        (reset! @@p v))))

(future (println (last-val)))

(reset-val! 10)
(reset-val! 11)
```"
1539,1511901753.000273,Quincy,"I feel like I'm missing something simple here, but has anyone ever implemented a file-tailing algorithm in Clojure? That is, as new lines are written to a file, you process them in your Clojure code? It seems that just opening a reader gets me a snapshot of the file at opening time."
1538,1511901781.000349,Guillermo,there are promise-chans in core.async that kinda resemble this
1539,1511901795.000042,Guillermo,you can fulfill them once and they provide their value immediately forever
1538,1511901827.000355,Johana,<@Guillermo> I need to ‘fill’ them multiple times
1538,1511901900.000027,Guillermo,<@Quincy> <https://commons.apache.org/proper/commons-io/javadocs/api-2.4/org/apache/commons/io/input/Tailer.html> or google Java file tailing
1538,1511901963.000231,Quincy,"ah, so basically I need interop. I guess I should go ask the planck folks then since I'm in a planck / cljs context. :slightly_smiling_face: Thanks for the pointer!"
1539,1511901985.000248,Guillermo,"no problem. cljs should be similar, but obviously asyncio; I'm with hiredman, sounds like last-write-wins with an atom"
1538,1511902041.000675,Johana,<@Guillermo> I need to block on the first deref when it’s still not initialized.
1539,1511902053.000359,Guillermo,promise an atom?
1538,1511902088.0005,Johana,"<@Guillermo> See my above code. It’s the other way around. Promise in atom doesn’t work, because you can only delivery to a promise once."
1538,1511902114.00006,Guillermo,I guess that's your example above. Seems like the xy problem -- I need to know _why_
1538,1511902276.000195,Johana,"Yeah, I might not need it, I’ll think about it some more. thanks."
1538,1511903488.000434,Margaret,"<@Johana> what about checking if the atom is nil, and if so putting a watch on the atom that triggers your thing if the new value is non-nil, and then removing the watch inside the watch callback?"
1539,1511903512.000279,Margaret,"or maybe you even want to always want to ignore the current value, and only run your action when the value changes, and `add-watch` is what you want directly"
1538,1511903566.000008,Johana,"&gt; what about checking if the atom is nil 
this is hard to make thread safe without compare-and-set! 
I don’t need a watch.; the xy about this: I need to prepare some data in the background and I want the first web request to wait for this thing to be ready. It might be refreshed later."
1538,1511903723.000098,Margaret,"with a watch, you can ensure your code doesn’t return until the value is ready; or, use an agent instead of an atom and use await; (well, watch plus delay or promise you can block on that is); and really, if all you need is to prepare data in the background, why not just use `future` ?"
1538,1511903844.000448,Johana,"&gt; just use ‘future’
a future cannot be updated"
1538,1511903864.000291,Margaret,"why does it need to be updated? why can’t you just make a new value?; and if you have async updates multiple threads wait on, that would happen repeatedly, `await` on an agent sounds like it maps directly to that"
1538,1511903992.000024,Johana,`(def a (agent)) (await a) ;;=&gt; nil`
1538,1511904001.000396,Margaret,"right, there are no pending actions on it"
1538,1511904034.000074,Cecilia,"atom and swap! with clojure.lang.PersistentQueue; oh crap, I was on history; forget that"
1538,1511904067.000839,Johana,"Maybe we should switch to a thread as to not flood this channel with this topic, it’s getting kind of long"
1538,1511904103.000319,Margaret,what I don’t understand is how you would know when a is “ready” and when it isn’t
1538,1511904117.000229,Johana,"<@Margaret> Everything after the first init is fine; This works: <https://clojurians.slack.com/archives/C03S1KBA2/p1511901724000313>
Just wondered if there is some other primitive I could use.; But I’m not even sure anymore if I want to do it like this, so it’s ok, I’ll think about it some more"
1538,1511904295.000131,Sandy,I think you're on the right track; maybe something with a count-down-latch? (I may be thinking of the wrong primitive)
1538,1511904359.000267,Margaret,I think you have an extra `@` on that reset! - but otherwise that is sensible
1538,1511904392.000082,Sandy,"Or if you want to drop to Java you could due this with Thread.wait, notify and clojure's `locking`; 1) get the value (non locking)
2) if the value is not a sentinel return it
3) Lock and check if the value is still a sentinel
4) If so, add yourself to a pending threads queue and sleep; the producer then simply sets the value to != a sentinel and wakes all the pending threads. Future writers can ignore the pending threads list"
1538,1511904775.000117,Kyung,might be worth looking at Claypoole even if your current requirements are minimal right now…. <https://github.com/TheClimateCorporation/claypoole>
1538,1511905019.000573,Gladys,"`(.setLevel (Logger/getLogger ""org.flywaydb"") Level/WARNING)` this works (silent DEBUG/INFO logs) unless add to project.clj `[org.slf4j/slf4j-simple ""1.7.25""]`.

How can i make silent this logs?"
1540,1511905741.000314,Johana,thanks! some stuff to consider
1541,1511906895.00041,Johana,Is there a reason why `zipmap` doesn’t a transient under the hood?
1542,1511907056.000056,Sandy,"probably not, there's a few places in Clojure that could still use some transient love"
1542,1511907131.000137,Aldo,yeah I think a patch with benchmarks for that would probably be accepted
1542,1511907345.000185,Johana,I ran a quick benchmark and for 1000 keys there’s only a drop from 250 to 213 ns; Probably because creating a new map from an existing map using assoc is very efficient already
1542,1511907467.000007,Aldo,yeah I got a measurable difference but not a particularly important one
1542,1511907552.000123,Johana,"I tested this because I wanted to know the performance difference between using map literals and zipmap:
```
(def f (fn [[a b num]]
    #_=&gt;         {:a a
    #_=&gt;          :b b
    #_=&gt;          :num num}))
(def g (partial zipmap [:a :b :num]))
(quick-bench (f [""a"" ""b"" 1])) ;;=&gt; 22 ns
(quick-bench (g [""a"" ""b"" 1])) ;;=&gt; 250 ns
```"
1542,1511907647.00033,Guillermo,"there's a ticket for this already; <https://dev.clojure.org/jira/browse/CLJ-1005>; There was a ticket for making `merge` faster CLJ-1458 but it could use some love, starting with a decent set of benchmarks; I would like someone to give that a whack.  Keeping in mind that merge 1) preserves metadata 2) and because it is based on conj, happens to take either a mapentry, vector, or maps as arguments; `(merge {} [:a :b] {:c :d}) =&gt; {:a :b :c :d}`; need to go back to basics with that ticket and just start with a benchmark harness.; <https://dev.clojure.org/jira/browse/CLJ-1458>; Oh why am I talking with prose: <@Sonny> do you have a `spec` lying around for c.c/merge?"
1543,1511909547.000196,Herlinda,"wow, I'm pulling my hair out over this issue, when I create a reader at the repl this form parses correctly, but when I call a function on the form it throws an error. I'm about to hit the road so hopefully the comments on the ticket are clear <https://github.com/gdeer81/marginalia/issues/165>; it's such an edge case but I can't let it go"
1544,1511912414.000197,Margaret,"```;; A symbol string begins with a non-numeric character and can contain
;; alphanumeric characters and *, +, !, -, _, and ?.  (see
;; <http://clojure.org/reader> for details).```; ~I would expect `:` inside a symbol to work by accident, and any bugs caused by having `:` in a symbol to be the fault of the one naming the symbol~; ```Symbols beginning or ending with ':' are reserved by Clojure. A symbol can contain one or more non-repeating ':'s.``` ugh - never mind then - that seems like a terrible choice to me, but it’s allowed"
1545,1511913170.000146,Rebeca,"well, time and again, in these kind of discussions a distinction has been made between legal symbols and readable symbols"
1544,1511913478.000167,Margaret,"right, but those docs seem to say that a single : in a symbol is readable; (and also legal); ```(ins)user=&gt; ,(def foo:bar 1)
#'user/foo:bar
(ins)user=&gt; foo:bar
1
(ins)user=&gt; {::a foo:bar}
#:user{:a 1}```"
1545,1511914420.000102,Aldo,stop this madness :scream:
1544,1511914850.000108,Margaret,<@Aldo> the docs specifically say it’s allowed… but it definitely *feels* weird
1545,1511915569.000111,Herlinda,"That's the thing about having a library that processes other people's code, it has to handle any possibility "
1546,1511916194.000302,Elliott,"Hey all.  If anyone else is interested in having official New Relic support for Clojure, please upvote my support ticket.  :slightly_smiling_face:  
<https://discuss.newrelic.com/t/feature-idea-current-state-of-clojure-instrumentation/53105>"
1546,1511917107.000195,Kyung,"I’d prefer to see this done via their <http://opentracing.io|opentracing.io> compatibility.  The opentracing api is pretty easy to deal with via java interop. I have been messing with a clojure wrapper as well, but pretty much it all converges to a `with-open` that opens the trace context, and some (still being debated) machinery to propagate tracing contexts in-process across threads and such.  ; <https://blog.newrelic.com/2017/09/13/distributed-tracing-opentracing/>"
1546,1511917508.000196,Elliott,"<@Kyung> Interesting.  Thanks, will check it out"
1546,1511918609.000198,Kyung,"The downside to opentracing is how early it is. Elements of the api are not settled, like the in-process propagation thing I mentioned, but basic tracing is in place and multiple backends are available. "
1547,1511921802.000038,Kathe,"warning: clojure n00b here.

i'm trying to process data from a gzipped file that has JSON documents concatenated together in it (no delimited, not even a newline).  so far I have two functions that can gunzip the file and produce a reader.  i've been trying to find ways to parse this into JSON.

one idea is to process the character stream from the reader, keep track of curly braces and emit/print when the i'm at the appropriate place (""}{"").  but I'm having a hard time keeping track of state in absence of mutable variables.

another idea is to use something like re-find but it works only on strings.  I don't want to read in the while file since the data I have is too large and I'd rather process it lazily since i plan to run this in aws lambda (limited memory).

the functions I have so far (apart various broken experiments):

```
(defn in [f]
  (-&gt;
   (<http://clojure.java.io/input-stream|clojure.java.io/input-stream> f)
   (java.util.zip.GZIPInputStream.)
   (<http://clojure.java.io/reader|clojure.java.io/reader>)))

(defn char-seq
  [^java.io.Reader rdr]
  (let [chr (.read rdr)]
    (if (&gt;= chr 0)
      (cons (char chr) (lazy-seq (char-seq rdr))))))
```

i could make the process and algorithm work in python (very slow) but would prefer to use clojure. i've spent too much time (2 days) trying to figure out a way but no luck so far.. any pointers/advice at all would be greatly appreciated."
1547,1511922326.000296,Guillermo,"You're on the right track <@Kathe>! You have the reader all ready to go. Let's focus on the other half of the problem: parsing a series of JSON values (i.e. concatenated); Take an example of concatenated JSON and represent it not as a stream but as a string:; ```(def example ""{}{}{}"")```; What you want at the end is a seq or vector like so:; ```(def expected [{}{}{}])```; i.e. a clojure sequence of 3 empty, clojure, maps.; To parse the example string, we want to turn this _back_ into a stream, because ~the~ most JSON parsers take a stream (i.e. java Reader) as their input. And you also said you want to parse this lazily.; So import cheshire (a common JSON reading library):; ```user=&gt; (require '[cheshire.core :as json])
nil
user=&gt; (doc json/parse-stream)
-------------------------
cheshire.core/parse-stream
([rdr] [rdr key-fn] [rdr key-fn array-coerce-fn])
  If multiple objects (enclosed in a top-level `{}' need to be parsed lazily,
  see parsed-seq.
```"
1547,1511922592.000255,Kathe,cheshire is ready :slightly_smiling_face:
1547,1511922608.000146,Guillermo,"I've elided some useless docs, and it's pointing us to `parsed-seq` for your/this use case.; ```user=&gt; (doc json/parsed-seq)
-------------------------
cheshire.core/parsed-seq
([reader] [reader key-fn] [reader key-fn array-coerce-fn])
  Returns a lazy seq of Clojure objects corresponding to the JSON read from
  the given reader. The seq continues until the end of the reader is reached.
```; OK, we got wheels.; Note that because it returns us a lazy seq, you'll have to consume it fully before closing the underlying Reader.; Usually you close the reader when it leaves lexical scope, using `with-open`; `(with-open [r (some-stream)] (do all the stuff))`; (This doesn't mean you have to load the whole stream eagerly into memory, we'll still be mindful of efficiency); Typical ways to consume the seq fully are:
1. do some collection operations using the seq, and wrap that code in `doall`
2. `reduce` / `transduce` (collecting accumulation)
3. `doseq`; 4.  `(into [])` or `vec` wrapping collection operations (variation of 1.); Ok... so to make this concrete let's parse that example above.  (I'll leave the task of glueing it to the GZipReader to you); ```
user=&gt; (with-open [r (java.io.StringReader. example)] (vec (json/parsed-seq r)))
[{} {} {}]
```; ```
user=&gt; (= *1 expected)
true
```"
1547,1511923502.000223,Kathe,"<@Guillermo> thank you so much!  this is very educational.  that `parsed-seq` function is great.  that combined with one of the 4 things you listed should do the trick.  

i'm trying to digest what you said and seeing some light.  i'll come back after a little while after I've tried a few things..   thank you again."
1547,1511923524.000121,Guillermo,ya <@Kathe>. clojure is stupidly fun; enjoy
1547,1511923616.000034,Kathe,it is but it's incredibly humbling too.
1548,1511923674.000207,Kathe,i really like how you built that small example to test and show the idea.
1547,1511923895.000108,Kathe,"my brain needs to be disinfected of procedural thinking. unlearning is hard.; i don't know whether to be happy or be sad... after hours upon hours of frustration, all of it works in just a couple of lines.; you're awesome! <@Guillermo>"
1547,1511926291.000042,Daniell,"<@Kathe> I think one of the things with Clojure is that simplicity is king. If you're struggling with a problem and your code seems overly complex, then there's probably a much simpler, more idiomatic solution :slightly_smiling_face:"
1547,1511926527.000034,Kathe,"i'll keep that in mind.; on that a related question.  i don't have any local user group or colleagues who do clojure.  i was super frustrated, had a headache on, dozens of tabs open and what not.. and had no one I could ask.  normally I hesitate to bother but i find that my progress is also super slow.  when is it appropriate (or inappropriate) to come ask for help here?"
1547,1511929162.000107,Cecile,<@Kathe> <#C053AK3F9|beginners>
1547,1511929877.000136,Kathe,sounds like the place for me. thanks <@Cecile>
1549,1511946817.00003,Marvin,"Edit: Sorry I notice that there's a dedicated aws-lambda channel, I'll move my question there"
1550,1511974891.000563,Willow,"i see that there's brandon bloom's backtick lib, but is there any way to make clojure not impose namespaces on syntax-quoted forms?"
1550,1511974999.00049,Aldo,"qualifying symbols with a namespace is half of the point of syntax quote; you can always regular quote the symbols you don't want syntax quoted
```
`(~'a)
=&gt; (a)
```"
1550,1511975065.000109,Willow,"i need it without it to send to datomic; so all of the unification symbols have to be marked. quite a pain and ugly; ```
`[:find [(~'pull ~'?task ~tasks/task-shape) ...]
    :in ~'$ ~'?docref
    :where
    [~'?task :property1 ~'?docref]
    [~'?task :property2 ~'?tc]
    [~'?tc :tags ""tag""]]
```"
1550,1511975659.000438,Aldo,why not use regular quote?
1550,1511975687.000415,Willow,the tasks/task-shape. I'm trying to put the query for what a task looks like in one place and then let others query against this common shape however they like
1550,1511975690.000239,Aldo,oh I see you're using one var in there
1550,1511975692.000759,Willow,so i need to resolve; yeah
1550,1511975849.00041,Aldo,"probably easiest to build it up in pieces I guess, but yeah bit annoying 
```
[:find [`(~'pull ~'?task ~tasks/task-shape) ...]
    :in '$ '?docref
    :where
    '[?task :property1 ?docref]
    '[?task :property2 ?tc]
    '[?tc :tags ""tag""]]
```"
1550,1511975888.000166,Willow,yeah good point. use the vectors and keywords to my advantage. still not sold on it. gonna roll it around a bit
1550,1511975989.000789,Margaret,"<@Willow> it seems like it would be easier to just not use ` at all there
```[:find [(list 'pull '?task tasks/task-shape) ...]
  :in '$ ?docref
  :where
  '[?task :property1 :docref]
  '[?task :property2 ?tc]
  '[?tc :tags ""tag""]]```"
1550,1511976057.000415,Randee,<@Willow> I just use <https://github.com/gfredericks/misquote/blob/master/src/misquote/core.clj> for that.
1550,1511976058.000095,Willow,thanks. that's looking the cleanest so far. just makes me nervous that this stuff just silently and happily fails on datomic if its namespaced. i'm deciding which is worse the super important syntax or the duplication of the structure; thanks <@Randee> i saw bblooms backtick as well. any reason to choose one over the other that you know of? I think i saw brandon handles gensyms but not sure how important that is for my purposes
1550,1511976214.000535,Randee,"<@Willow> Not sure, but I use the above for exactly that purpose: Creating datomic queries. It works well. Though I changed it slightly to make Cursive happy"
1550,1511976229.000437,Willow,well thanks for the suggestion. gonna mull on it
1550,1511976304.00064,Randee,<@Willow> Here the full example: <https://gist.github.com/rauhs/d2575e77e6e063ae94abbd9f1bca226d>
1551,1511982124.00036,Merrie,are type hints (in clojure) used only to avoid introspection?
1551,1511982226.000506,Raul,"yes, type hints are only to avoid reflection"
1551,1511982243.000434,Merrie,"or is there some way to enforce them, apart from `{:pre [(instance? MyRecord arg)]}`?"
1551,1511982276.000413,Raul,"if you're interested in enforcing types, you should probably consider spec or plumatic schema; or pre/post/raw assertions, if you're only using them on occasion"
1551,1511982347.000228,Merrie,"I use spec, but I also have a bunch of defrecords hanging around, wanted to squeeze some extra value out of those; right now I am getting familiar with a module in an app, and sprinkling type hints all over fn signatures helps to understand teh mess, also IDE's ""show usages""; but it seems like specs is the ultimate way to go, if records are not really used for extending protocols, etc."
1551,1511982554.000065,Guillermo,Spec is the way to go with this stuff.  You can turn it on and off. I think you are going to regret extensive manual assertions and hints.
1551,1511982570.000666,Merrie,"getting decent spec coverage and ""infrastructure"" is a project in itself, though"
1551,1511982591.000152,Guillermo,"it can be a lot of work, but pays off immensely"
1551,1511982597.000006,Merrie,"yeah, agree on manual assertions"
1551,1511982601.00013,Guillermo,esp. wrt generative testing
1551,1511982604.000118,Merrie,true
1552,1511984309.000362,Berry,"A :: map
B :: set

I want to remove all (k,v) pairs from A where k is in B

is the best way to do this `(apply dissoc A B)`

or is there a more efficient way ?"
1552,1511984614.000105,Owen,<@Berry> `(reduce dissoc A B)`
1552,1511984670.000084,Kareen,reduce won't perform better here
1552,1511984831.000189,Owen,"```
user=&gt; (def A {:a 1 :b 2 :c 3})
#'user/A
user=&gt; (def B #{:a :c})
#'user/B
user=&gt; (time
  #_=&gt;   (dotimes [_ 1000000]
  #_=&gt;     (reduce dissoc A B)
  #_=&gt;     ))
""Elapsed time: 120.139233 msecs""
nil
user=&gt; (time
  #_=&gt;   (dotimes [_ 1000000]
  #_=&gt;     (apply dissoc A B)
  #_=&gt;     ))
""Elapsed time: 335.459923 msecs""
```"
1552,1511985032.00039,Kareen,"interesting; I would imagine that with a larger sized B apply would evenually win, as the vararg version can iterate over the coll w/o having to pay an invocation price"
1552,1511985115.000486,Aldo,yeah seems heavily dependent on the size of A and B
1552,1511985119.00047,Kareen,but maybe the seq path is that much slower than the native reduce of sets
1552,1511985163.000577,Guillermo,from the peanut gallery over here: neither choice will/should dominate in your codebase
1552,1511985198.000154,Berry,"```

(def s1 (range 1000000))

(def s2 (map #(* 2 %) (range  500000)))

(def m (into {}  (for [x s1] [x x])))

(time  (do (apply dissoc m s2)
           nil))

(time (do (reduce dissoc m s2)
          nil))


```

I'm not getting a noticable difference"
1552,1511985258.000267,Guillermo,you're measuring cold code on the JVM; need some JITing action to make a better benchmark
1552,1511985291.000569,Berry,"yeah, using criterium bench now; i'm still getting used to the concept of having to 'warmup' the system first; ```

(def s1 (range 1000000))

(def s2 (map #(* 2 %) (range  500000)))

(def m (into {}  (for [x s1] [x x])))

(cc/quick-bench 
 (do (apply dissoc m s2)
     nil))

(comment
              Execution time mean : 456.384541 ms
    Execution time std-deviation : 69.565195 ms
   Execution time lower quantile : 411.034707 ms ( 2.5%)
   Execution time upper quantile : 545.198448 ms (97.5%)
                   Overhead used : 2.943666 ns)




(cc/quick-bench 
 (do (reduce dissoc m s2)
     nil))

(comment
              Execution time mean : 469.385020 ms
    Execution time std-deviation : 83.522059 ms
   Execution time lower quantile : 393.009549 ms ( 2.5%)
   Execution time upper quantile : 546.717419 ms (97.5%)
                   Overhead used : 2.943666 ns)


```; what surprises me most: (apply dissoc ...) doesn't cause a stack overflow for having so many args on the 'stack frame'"
1552,1511985507.000069,Aldo,I can explain that; <https://github.com/clojure/clojure/blob/master/src/jvm/clojure/lang/IFn.java>; after 20 arguments they just get shoved in an array
1552,1511985608.000094,Berry,"lol, there's something hilarious about that code"
1552,1511985952.00017,Owen,with criterium not seeing any cases where `apply` version outperforms `reduce` version; still seeing `reduce` version out-perform for small inputs by ~10%
1552,1511986099.000331,Berry,<https://github.com/clojure/clojure/blob/clojure-1.9.0-alpha14/src/clj/clojure/core.clj#L1501-L1513>; I'm disappointed the apply version doesn't end up using transients
1552,1511986165.000151,Aldo,"transients do actually give the reduce version a significant edge
```
(criterium.core/quick-bench (apply dissoc m s2))
Evaluation count : 6 in 6 samples of 1 calls.
             Execution time mean : 336.386302 ms
    Execution time std-deviation : 19.057339 ms
   Execution time lower quantile : 319.084193 ms ( 2.5%)
   Execution time upper quantile : 360.243222 ms (97.5%)
                   Overhead used : 1.529080 ns
=&gt; nil
(criterium.core/quick-bench (reduce dissoc m s2))
Evaluation count : 6 in 6 samples of 1 calls.
             Execution time mean : 330.780186 ms
    Execution time std-deviation : 30.145095 ms
   Execution time lower quantile : 291.699187 ms ( 2.5%)
   Execution time upper quantile : 360.677617 ms (97.5%)
                   Overhead used : 1.529080 ns
=&gt; nil
(criterium.core/quick-bench (persistent! (reduce dissoc! (transient m) s2)))
Evaluation count : 6 in 6 samples of 1 calls.
             Execution time mean : 226.415054 ms
    Execution time std-deviation : 7.032915 ms
   Execution time lower quantile : 217.464830 ms ( 2.5%)
   Execution time upper quantile : 233.430482 ms (97.5%)
                   Overhead used : 1.529080 ns
```; (for large inputs, for small they incur a small cost)"
1552,1511986482.000748,Berry,"<@Aldo>: you beat me to it, was just about to post transient code; ```

(def lst (for [x (range 1000000)] [x x]))

(defn massoc! [o [k v]]
  (assoc! o k v))


(cc/quick-bench (into {} lst)) 
(comment
              Execution time mean : 591.524037 ms
    Execution time std-deviation : 68.112686 ms
   Execution time lower quantile : 555.200521 ms ( 2.5%)
   Execution time upper quantile : 709.664574 ms (97.5%)
                   Overhead used : 2.943666 ns
Found 1 outliers in 6 samples (16.6667 %)
	low-severe	 1 (16.6667 %)
 Variance from outliers : 31.1510 % Variance is moderately inflated by outliers)




(cc/quick-bench (persistent! (reduce massoc! (transient {}) lst))) 
(comment
              Execution time mean : 515.178533 ms
    Execution time std-deviation : 69.452690 ms
   Execution time lower quantile : 482.675140 ms ( 2.5%)
   Execution time upper quantile : 635.692003 ms (97.5%)
                   Overhead used : 2.943666 ns
Found 2 outliers in 6 samples (33.3333 %)
	low-severe	 1 (16.6667 %)
	low-mild	 1 (16.6667 %)
 Variance from outliers : 31.7413 % Variance is moderately inflated by outliers)
```

Why doesn't clojure core use transients by default ?"
1552,1511990267.000065,Tai,<@Berry>: `into` *does* use transients
1553,1511990384.000088,Tai,"see here (relevant part of `into` source from `core.clj`):
```
(defn into
  ([to from]
     (if (instance? clojure.lang.IEditableCollection to)
       (with-meta (persistent! (reduce conj! (transient to) from)) (meta to))
       (reduce conj to from))))
```"
1553,1511990726.000023,Lori,"I have a long list of validation checks, and steps that happen interleaved among them. The validation checks can throw errors:

right now I have:

```
(let [_ (check)
      a (f)
      _ (check2)
      b (g)
      ...]
  z)
```
basically, those validations/throwing errors are a way to short circuit the logic
the main alternative I see is a series of `if` each with a nested `let`
is there a cleaner way of achieving this sort of `Either` monad pattern?"
1552,1511991556.000128,Berry,"<@Tai>: good call, thanks for the correction"
1554,1511993421.000885,Marx,<@Lori> `some-&gt;` ?
1554,1511993485.000592,Margaret,"yeah, I usually use some-&gt; or some-&gt;&gt; for that kind of thing; but reduce, then returning a reduced as appropriate can work too; `(reduce (fn [acc v] (if (borked? acc) (reduced acc) (frob acc v)) init coll)`"
1554,1511993567.000559,Marx,The nice thing about `reduce`/`reduced` is you can return something other than `nil` if any of the steps fail.
1554,1511993573.000311,Margaret,indeed
1554,1511993575.00085,Lori,"re `some-&gt;`, kind of, but I need to report details of where it failed
re `reduced`, interesting, I hadn't considered that, I kind of like that"
1554,1511993609.000404,Margaret,your coll is likely to be a vector of checks to run in that case
1554,1511993609.000421,Lori,I'm not really moving across a collection though...; oh
1554,1511993679.000325,Marx,"It’s that weird fp stuff, instead of reducing a function over a collection of args, you reduce an arg over a collection of fns. :wink:"
1554,1511993709.000358,Margaret,"so `(reduce (fn [context check] (let [checked (check context)] (if (OK? checked) checked (reduced checked)) {} [check1 check2])` sort of like this; and then the hash map can hold a, b, etc. under keys"
1554,1511993757.000068,Lori,"and then the collection I'm accumulating would be my otherwise `let` bound vars. ya, the `context`"
1554,1511993773.000459,Margaret,though at this point loop/recur might be easier to read?; your call
1554,1511993804.000029,Lori,"<@Margaret> that's a genius pattern, I'll see if it works for this, thanks"
1554,1511993813.000401,Margaret,:thumbsup:; it’s something I have used to success in my own code
1555,1511996344.000001,Sonny,you might also want to look at the new halt-when transducer in 1.9 (although it’s a little tricky to use well)
1556,1511998653.000552,Bibi,"Has anyone used a clojure wrapper around git's cli? There are some that wrap JGit, but as far as I can tell JGit does not yet support 'clone --mirror ...' and I need that functionality."
1556,1511998774.000056,Margaret,"<@Bibi> I’d generally look at doing interop before opting for a wrapper anyway - if the API is a total pain I then check for a wrapper, but often just using interop is fine"
1556,1511998807.000532,Bibi,"agreed, in that I don't need any more functionality other than 'clone --mirror' and then 'push --mirror'; maybe even running the shell command...; shell interop :slightly_smiling_face:"
1556,1511998847.000155,Margaret,"that’s straightforward to use, if it’s good enough"
1556,1511998850.000024,Bibi,"plus authentication; yeah, I'll try that out. Thanks! And by the way, you're absolutely one of the busiest sources of help here... really appreciated."
1556,1511998916.000412,Margaret,"oh, thanks"
1556,1511998959.00007,Bibi,"By 'busiest' I mean as soon as a see someone with a question, I see 'noisesmith typing...' :slightly_smiling_face:"
1556,1511999053.000214,Lily,I would be living on the street without <@Margaret>
1556,1511999065.000039,Margaret,haha
1556,1512000203.000184,Berry,"agreed, <@Margaret> is one of the most helpful people here; we should start tipping him in micro bitcoins or something :slightly_smiling_face:"
1557,1512008818.000202,Giovanni,Does anybody have any Emacs configs to expand upon this? <http://fgiasson.com/blog/index.php/2016/06/14/my-optimal-gnu-emacs-settings-for-developing-clojure-revised/> I adopted this config when I started just under a year ago and I never thought about it since
1558,1512016871.000096,Kyung,"I’ve switched to the `zenburn` theme because I find it easier on my eyes than `monokai`. I configured `erc-mode` because the leiningen developers hang out on IRC, and I have a pull request pending there. I’ve recently adopted `eshell` and added some config tweaks I needed, including a custom prompt for `virtualenvwrapper`. Up until very recently I used exclusively melpa-stable, but then I released a (silly) elisp package called `adafruit-wisdom` to melpa… As a result, I needed to figure out how to pin packages to a specific repository, that’s the stuff at the very top of my `init.el`.  Take a look, maybe some of this will appeal to you too. <https://github.com/gonewest818/.emacs.d>"
1557,1512023407.000071,Verna,<@Giovanni> you may take a look at my emacs config that I’ve been using for 5 years: <https://github.com/igrishaev/dotfiles/blob/master/.emacs>
1559,1512026214.000187,Randee,How come `coll-reduce` isn't implemented for `Iterator`?
1556,1512028781.000085,Berry,"1. I'm not using datomic.
2. I need to inspect a large eav store (about 10,000 items).
3. Anyone knows of a good tool for analyzing this?"
1559,1512030193.00009,Cecilia,10000 items isn’t exactly large; I think you can just load that into memory and use Datascript
1556,1512034942.000382,Berry,"no no, I meant I'm currently dumping it via println; and manually inspecting it by hand when something goes wrong"
1560,1512039906.000002,Anneliese,"(s/def ::delay (s/and (s/or :val pos? :val zero?) int?)); (s/valid? ::delay 0); gives false; if I restructure the ::delay to (s/def ::delay (s/and int? (s/or :val pos? :val zero?))); it then works; can anyone explain why; (s/def ::delay (s/and (s/or :val pos? :val zero?) int?))
(s/valid? ::delay 0) =&gt; false


(s/def ::delay (s/and int? (s/or :val pos? :val zero?)))
(s/valid? ::delay 0) =&gt; true"
1560,1512040542.000049,James,you can use `s/explain` in place of `s/valid?` to get more information; I tried it here and it seems like the first option passes `[:val 0]` to the `int?` pred; so this is probably what's causing it to fail
1560,1512040643.000255,Anneliese,is it normal behavior?; i think it shouldn't
1560,1512040705.000109,James,Seems that's the case as `(spec/def ::delay (spec/and (spec/or :val pos? :val zero?) #(int? (second %))))` works
1560,1512040708.00022,Rogelio,"<https://clojuredocs.org/clojure.spec/or>
""Returns a destructuring spec that returns a map entry containing the
key of the first matching pred and the corresponding value."""
1560,1512040740.000071,James,"and that I don't know enough to say; I thought that the above would only be true when conforming, didn't realize it would have this kind of implication; btw <@Anneliese> you can use `pos-int?` as well"
1560,1512040858.000082,Rogelio,"I think it makes sense. This way, you can check only specific keys in the following specs."
1560,1512040881.000251,James,or <https://clojuredocs.org/clojure.core/nat-int_q>; <@Rogelio> that is true
1561,1512053187.000393,Sherrie,I have something like this (reduce + (map #(* (first %) (last %)) …) that runs at 1500msecs. Then I tried it in a loop and it drops to 20msecs. Why does Rich hickey hate me so ?
1561,1512053456.000022,Rogelio,How did you do it in a loop?
1561,1512053544.000122,Sherrie,(loop [acc 0 item items] (if (seq item) (recur (+ acc (….))) acc); something like that
1561,1512053632.000033,Rogelio,"Still not clear. :slightly_smiling_face: It depends on what `items` is and how you recur on `item`.; In CLJS and `items` being a vector, `reduce` works about 8% faster than `loop`:
```(def items (mapv #(vector % %) (range 10000)))```
```
(simple-benchmark [] (reduce + (map #(* (first %) (last %)) items)) 1000)
[], (reduce + (map (fn* [p1__115369#] (* (first p1__115369#) (last p1__115369#))) items)), 1000 runs, 4812 msecs
```
```
(simple-benchmark [] (loop [acc 0, items items] (if (seq items) (recur (let [i (first items)] (+ acc (* (first i) (last i)))) (rest items)) acc)) 1000)
[], (loop [acc 0 items items] (if (seq items) (recur (let [i (first items)] (+ acc (* (first i) (last i)))) (rest items)) acc)), 1000 runs, 5219 msecs
```"
1562,1512054702.000667,Ha,"Just a suggestion. Is it because map creates a new list, before reducing on it? I wonder how this would perform:
(reduce #(+ (* (first %2) (last %2)) %1) 0 ....)
Skipping the creation of the intermediate list."
1561,1512054746.000535,Rogelio,There's no an intermediate list. `map` is lazy.
1562,1512055213.000747,Lorenza,I wonder what time you get with `first` and `peek` (instead of last) in the `map` version
1561,1512055466.000284,Randee,<@Rogelio> Use destructing instead of first/last. Last isn't all that fast and will create another intermediate sequence actually.
1561,1512055509.000419,Rogelio,"<@Randee> I know, I was deliberately repeating what laujensen provided."
1561,1512055521.000139,Randee,Oh I see! :slightly_smiling_face:
1561,1512055749.000017,Rogelio,"```(simple-benchmark [] (reduce + (map #(* (first %) (peek %)) items)) 1000)
[], (reduce + (map (fn* [p1__118806#] (* (first p1__118806#) (peek p1__118806#))) items)), 1000 runs, 2304 msecs```; By the way, `first` with `peek` is faster than destructuring by about 15%."
1561,1512055979.000518,Kareen,you can't destructure `last`
1561,1512056077.000007,Willow,items are a two element vector so you can in this instance but certainly not in the general sense of `last`
1561,1512056145.000237,Kareen,"<@Sherrie> also make sure your first reduce isn't actually realizing the lazy seq vs your loop using the already realized one; there's just way too much you haven't said about this to make a guess, but there's absolutaly no way that a 1:1 translation from reduce to loop results in 2 factors of magnitude perf increase; in fact, often reduce is faster than manual looping over a seq view"
1563,1512058427.000508,Sherrie,"Thanks for the input guys, I'll fiddle a bit"
1564,1512058626.000303,Amado,"hello everyone, im coding a scheduler which receives a function as a parameter, if the function execution raises an exception, id like to log the function name

is there a standart way of getting a function name in clojure?"
1561,1512058675.000542,Kareen,no
1564,1512058695.000361,Sherrie,(-&gt; func meta :name) ?
1564,1512058761.000673,Kareen,"that works if you pass a `Var`, not if you pass a function as a value"
1564,1512059031.000614,Hedwig,"```
;; get name of the created class for foo
((fn [f]
   (-&gt; f
       .getClass
       .getName)) clojure.string/replace) =&gt; clojure.string$replace
```; It's a bit hacky.; And expensive I believe, because you do a reflection."
1564,1512059582.000366,Kareen,"not all ""reflection"" is slow, this is not the case. but it's still a bad idea :)"
1564,1512059593.000115,Ha,(-&gt; func var meta :name)
1564,1512059619.000647,Kareen,that's not how `var` works
1564,1512059965.000113,Hedwig,"```
user&gt; (bench ((fn [f]
                (-&gt; f
                    .getClass
                    .getName)) clojure.string/replace))
Evaluation count : 10640280 in 60 samples of 177338 calls.
             Execution time mean : 5.649725 µs
    Execution time std-deviation : 123.414594 ns
   Execution time lower quantile : 5.453163 µs ( 2.5%)
   Execution time upper quantile : 5.886103 µs (97.5%)
                   Overhead used : 8.291648 ns

Found 1 outliers in 60 samples (1.6667 %)
	low-severe	 1 (1.6667 %)
 Variance from outliers : 9.4543 % Variance is slightly inflated by outliers
nil
```; 5µs, depending on the use case, can be a long time, i agree"
1564,1512060139.00096,Kareen,"well, there's 2 instances of reflection in this code, one is avoidable and it's the slow reflection, the other is `.getClass` itself which is fast; just rebench with `(fn [^Object f]` and you'll see what I mean"
1564,1512060175.000533,Hedwig,"I'll do.; ```
user&gt; (bench ((fn [^Object f]
                (-&gt; f
                    .getClass
                    .getName)) clojure.string/replace))
Evaluation count : 5075442000 in 60 samples of 84590700 calls.
             Execution time mean : 4.068115 ns
    Execution time std-deviation : 0.410098 ns
   Execution time lower quantile : 3.483281 ns ( 2.5%)
   Execution time upper quantile : 4.942832 ns (97.5%)
                   Overhead used : 8.291648 ns

Found 2 outliers in 60 samples (3.3333 %)
	low-severe	 2 (3.3333 %)
 Variance from outliers : 70.3505 % Variance is severely inflated by outliers

```"
1564,1512060338.00037,Kareen,"right, and that's essentially free"
1564,1512060344.000615,Hedwig,4ns? What happened? :flushed:
1564,1512060360.000891,Kareen,you got rid of the avoidable reflection :)
1564,1512060374.000109,Hedwig,I have to read about this reflection thing. Thank you!
1564,1512060418.000777,Kareen,"*this* is what in clojure we refer as reflection, but generally speaking my point was that in java lang, Object.getClass is technically reflection too; but when we talk about reflection in clojure, it's in the context of *reflective calls at runtime* which is a very narrow and specific instance of reflection; which is what your function was also doing, but unnecessarily"
1564,1512060553.000027,Hedwig,Do you have an example where you cannot avoid reflection?; Reflection in the wider sense.
1564,1512060606.000873,Kareen,if you want to do stuff like `(deftype Foo [x]) (deftype Bar [x]) (defn foo [a] (.-x a))` then that needs to be reflective; but generally speaking reflection is avaoidable in 90% of the cases
1564,1512060682.000432,Hedwig,Thx :simple_smile:
1564,1512060785.000396,Kareen,np
1564,1512062835.000063,Amado,<@Kareen> this means i should typehint my parameteres when possible? only functions? is there a way in which I can `clojure.spec`stuff and get type hints for free?
1564,1512062859.000284,Kareen,"no don't start type hinting everything; my suggestion is to `(set! *warn-on-reflection* true)` in your project at dev time and just type hints the warnings away; there's no way to get type hints from clojure.spec, type hints are compile time and spec is runtime"
1564,1512063235.000349,Amado,thanks :slightly_smiling_face:
1565,1512063667.000714,Margaret,"addendum about warn-on-reflection - if you use lein, `lein check` will show all your reflection warnings"
1565,1512063956.00016,Amado,maybe cursive may warn me about those with a little config?
1566,1512069825.000358,Gladys,"What do you use for data validation? Clojure spec looks great to generate and check data validation, but on the other hand it is totally not human readable. So using clojure spec i would have to validate twice, once with clojure spec and once for users with usability messages. It sound like something is wrong in this pattern. How do you do this? I would like to use clojure spec but something deep inside me saying i need complete solution to generate, validate, human readable information and spec doesn’t fit into this at that moment."
1566,1512069927.000516,Margaret,"<@Gladys> there are libraries for mapping from the spec errors to human readable messages, the intention for spec is to be easy to integrate with tooling for readability"
1566,1512069939.000002,Daniell,"<@Gladys> We use just spec -- and then `explain-data` for failures, and we map the data structure to our own custom error messages."
1566,1512070159.000798,Gladys,Do you have some public example?
1566,1512071192.000195,Daniell,"No, sorry. It's code at work."
1567,1512072141.00017,Willow,has anyone written a `let` style macro that puts the bindings at the end? I do like the haskell `where` syntax whereby the local definitions can follow after usage
1567,1512072231.000064,Sherrie,"dpsutton, does that have some benefit im not understanding?"
1567,1512072297.000459,Willow,just for clarity of reading. For example you define a function and have a bunch of stuff in the let bindings and there's a lot of details immediately and then the implementation. The `where` style let's you put some clear logic and then define the local bindings after their usage. A macro could simple rewrite this into a traditional let but i do like the usage first
1567,1512072398.000282,Rebeca,I did something like that in my raft implementation; <https://github.com/hiredman/raft/blob/master/src/com/manigfeald/raft/rules.clj#L131-L145>
1567,1512072404.00044,Willow,"ah thanks!; <@Sherrie> and example is the following:
```
levelorder :: (Ord a) =&gt; Tree a -&gt; [a]
levelorder t = step [t]
	where
		step [] = []
		step ts = concatMap elements ts ++ step (concatMap subtrees ts)
		elements Nil = []
		elements (Node left x right) = [x]
		subtrees Nil = []
		subtrees (Node left x right) = [left,right]
```; with good naming it can make the logic really clear and push the details down below but still close if you are interested"
1567,1512072552.000176,Rebeca,"it has these things I  called ""rules"" that have three parts, a true/false expression that determines if the body should be applied, a body that updates the passed in state, and then bindings (usually a big destructuring) that establish any bindings for the first two parts"
1567,1512072565.000334,Willow,"in clojure, the let puts all of the stuff above. i can see both having their benefits but sometimes just want to see a nice clear logic"
1567,1512072589.000449,Sherrie,<@Willow> I think Ive done too much Clojure and too little Haskell to find that order help. Looks upside down to me :slightly_smiling_face:
1567,1512072595.0004,Willow,that's the point
1567,1512072641.000564,Aldo,"one thing with the let ordering is that it's the same dependency order as defn/def ordering, so there's some consistency here. also with imperative language statement ordering"
1567,1512072866.000135,Willow,"yeah i'm thinking some syntax like 
```
(with-delayed-context
  (-&gt; (sanitize-data data)
    (filter incomplete?)
    (map complete-names))
  (with-bindings [sanitize-data (fn [data] ...)
                  incomplete? (fn [item] (and ...))
                  complete-names (fn [item] (or ...))]))
```; put the high level logic at the top and the details below; but better names than with-delayed-context and with-bindings"
1567,1512073023.000136,Rebeca,```(defn where [body bindings] `(let ~bindings ~body))```
1567,1512073052.000337,Willow,but you lose the implicit do i believe. that's why i was thinking a keyword to signal the end of the body; so keep taking forms as the body until you see the `with-bindings` or `where` and then invert
1567,1512073074.000659,Rebeca,or just use `do` if you need one
1568,1512074921.000429,Margaret,"```(defmacro where
  [&amp; body-and-bindings]
  `(let ~(last body-and-bindings)
     ~@(butlast body-and-bindings)))```
```user=&gt; (where (+ x y) [y 1 x (inc y)])
3``` ?"
1567,1512075043.000739,Willow,"ah, don't overcomplicate it. nice"
1568,1512075233.000518,Dede,"could anyone shed some light on why this doesn't work?
```
(mapcat :id
  [[{:id 1} {:id 2}]
   [{:id 3} {:id 4}]])
```; this works fine; `(map :id [{:id 1} {:id 2} {:id 3} {:id 4}])`"
1568,1512075302.000381,Margaret,"<@Dede> `[{:a 0}]` doesn’t have an :a key; it’s a vector containing an item with an :a key; mapcat unfolds after, not before, the input list; you could do `(map :id (apply concat coll))` instead; or `(into [] (comp cat (map :id)) coll)`"
1568,1512075383.000516,Dede,"awesome, thanks!"
1569,1512095083.000025,Jasmin,does anyone have experience with ssl on heroku?; i have an api running on immutant; apparently its stupid easy lol; ¯\_(ツ)_/¯
1570,1512107463.000079,Carlene,hello! I'm confused about project dependencies when linking to clojure from another JVM language; I've articled my problem/question fully here: <https://stackoverflow.com/questions/47586889/handling-clojure-project-dependencies-when-dynamically-linking-to-clojure-runtim>. If anyone could help that would be greatly appreciated :smile:
1570,1512108901.000006,Cristie,"<@Carlene> I have similar setup for two projects. I have Clojure code compiled as überjar, intended to be used as a library from Java (and some Java classes calling the Clojure code - :gen-class won't create javadoc for classes/methods and my colleagues would be upset :slightly_smiling_face: ). I ended up with embedding nREPL in the project. I copied code from this library: <https://github.com/jarohen/embed-nrepl> . From Java code I call the Clojure method to start repl during application start. Then I can connect to that from emacs."
1571,1512109237.000134,Daniell,"I'll second that. For a long time -- as we introduced Clojure into our stack -- we used the ""Java API"" to call Clojure from our legacy application and we started a REPL server inside that code which we could connect to from Emacs or the command line and have our regular fast-feedback Clojure workflow."
1571,1512109372.000098,Berry,"so to use clojure in a legacy codebase with coworkers who don't want to use java, you are:

1. compiling *.clj iknto uberjar
2. when the uberjar is called from java, firing up a nrepl
3. so now you have a clojure repl into your legacy java app (that still ""starts from java"") ?"
1571,1512109380.000181,Daniell,"One thing I'll observe is that we deliberately did *not* create an uberjar and deploy things that way -- we decided to deploy as source and put the `src` folder on the classpath of the legacy application (along with any Clojure libraries we needed). This meant we could modify source if needed and `require` `:reload` to pick up changes (I'll say that we rarely do this now, but it was common when we first started embedding Clojure).; The progression for us was that we started using Clojure as a small, isolated ""library language"" for low-level stuff and it gradually expanded until it became our primary language. Now we do all new development in Clojure and our legacy systems are shrinking as we replace functionality with pure Clojure microservices and applications."
1572,1512125451.000463,Danyel,"What is the best way to type hint an `Object[]` array in Clojure? I've seen this method `#^""[Ljava.lang.Object;""` here (<http://disq.us/p/1buoakl>), but I'm not sure it's officially supported."
1572,1512125771.000095,Randee,<@Danyel> Check out `to-array` source.
1572,1512126189.000243,Danyel,<@Randee> thanks
1572,1512132941.000036,Rosia,<@Danyel> ^objects works as well
1572,1512132979.000209,Danyel,<@Jacelyn> thx! weird that it's not in the official docs
1573,1512134440.000201,Sonny,"That will not work on vars by the way, only in signatures ; It’s supported"
1574,1512140320.000695,Johana,"What’s the rationale behind `nthrest`? Noticed it for the first time today. What about `(drop n ...)` wrapped in `doall` if you need it strict?; It seems to be born out of a refactor of `partition`:
<https://github.com/clojure/clojure/blame/b98ba848d04867c5542d50e46429d9c1f2472719/src/clj/clojure/core.clj#L3166>
(cc <@Dirk>)"
1574,1512140899.000045,Dirk,"Interestingly, they both seem to have a `recur` pattern that is eagerly done to consume the beginning of the sequence."
1574,1512141054.000476,Johana,so the difference is `nthrest` skips `n` immediately and `drop` only when the sequence is consumed
1574,1512141059.000194,Dirk,"`nthrest` is eager initially, while `drop` staves off the initial eagerness"
1574,1512141176.000462,Johana,"hmm yeah, so `(doall (drop ...))` would consume everything in the dots too, while `nthrest` leaves that to the consumer of the seq"
1574,1512141239.000307,Dirk,"You do have an interesting question regarding rationale, especially given that `nthrest` wasn't added until 1.3"
1574,1512141331.000515,Johana,"maybe `(drop ...)` caused an issue in the impl of partition?; I guess not, because that *was* the impl before: <https://github.com/clojure/clojure/commit/82c72549f455e68a314593c67436e7a14c64a931>"
1574,1512142060.000204,Dirk,"<@Johana> If you are curious as to my rationale for using `nthrest`: It was simply that I had used `rest` (instead of `(drop 1 ...)`, so when I needed to revise the code to drop more items, I reached for `nthrest` without thinking about it too deeply. I certainly wasn't thinking about laziness, whether to employ transducers, or any such deeper analysis."
1574,1512142115.000079,Johana,"Yeah, when I saw your code I started thinking about transducers. It lends itself well for it. But whatever, that’s not better or worse, just different and maybe overthinking a puzzle :slightly_smiling_face:"
1574,1512142285.000073,Dirk,"FWIW, I think your final solution using `drop` is the cleanest, easiest to read, especially given that the revised code needed to drop more than 1 item."
1574,1512142529.000405,Altagracia,"How would I write this more concisely? `(let [d {:a [{:b 1 :deleteme ""foo""}]} f #(dissoc % :deleteme)] (update-in d [:a] #(mapv f %)))`"
1574,1512142697.000702,Dirk,"There is also an argument that some functions are a bit esoteric (and perhaps should be avoided). `drop` is used 50 times more frequently than `nthrest`in the data in <http://www.lispcast.com/100-most-used-clojure-expressions>
My favorite example Var in that category is `when-first`. It is hard to justify using `when-first` given that it never became part of the ""idiom""."
1574,1512142723.000068,Johana,Never heard about it; nthrest is also not used in the rest of the clojure codebase
1574,1512142804.00082,Dirk,"Indeed, that's the problem with using Vars like that. It is like using a ""dictionary word"" in conversation, where the other participants in the conversation get stuck on what you just said."
1574,1512142814.000466,Guillermo,`update` is now in core for updating when the path `[:a]` only has one segment.; your code seems fine to me
1574,1512142843.00017,Dirk,Not good for readily understandable code. :slightly_smiling_face:
1574,1512142944.00056,Johana,Seems fine to me too with update.; Maybe that’s the problem with Specter too.; Or Clojure. :stuck_out_tongue:
1574,1512143459.000426,Owen,<@Altagracia> with specter: `(setval [:a ALL :deleteme] NONE data)`
1574,1512143536.000475,Johana,"Ah, <@Sonny> replied: it’s probably about holding the head"
1575,1512144646.00056,Sherrie,"Anyone here familiar with a javalib which compresses animated gifs, similiar to what Guetzli does to jpgs?; (clojure libs are valid too, but we're more of a wrapping kinda people)"
1575,1512146420.000526,Guillermo,"probably anything you find would be a wrapper.; I don't know of anything, but if there is a C library that does what you need, it's straightforward to wrap C, and pretty pleasant using JNR-FFI; you don't have to write any C glue manually"
1575,1512146596.000851,Sherrie,Name it
1575,1512147213.000529,Sonny,or simply avoiding calling first on anything for cases where that realizes things
1576,1512148530.000711,Gladys,What do you do in clojure spec to generate sample `(gen/sample (s/gen ::foo))` with unique value like `code`. Do you make own function for code generation or is some simpler way?
1576,1512149327.000764,Sonny,"you can use `s/with-gen` to supply a custom generator when you define a spec; or supply an override generator function when a spec is used in places like s/exercise, stest/instrument, etc"
1576,1512149511.000273,Gladys,"yes, i was thinking about `s/with-gen`. Not sure what you mean by override generator. Probably i don’t know about something :slightly_smiling_face:"
1576,1512149817.000234,Sonny,functions like s/exercise take a map of spec name to generator functions that can be used to override the generator for a spec just in the context of that call
1576,1512149927.000035,Gladys,"oh i see some things changed in the doc from last time when i saw it, thx"
1576,1512149999.000433,Sonny,"```clojure
user=&gt; (s/def ::i int?)
:user/i
user=&gt; (s/exercise ::i)
([0 0] [-1 -1] [1 1] [-1 -1] [-6 -6] [-6 -6] [-4 -4] [2 2] [-2 -2] [-56 -56])
user=&gt; (s/exercise ::i 10 {::i (fn [] (s/gen #{5 10}))})
([5 5] [5 5] [10 10] [5 5] [5 5] [10 10] [10 10] [5 5] [5 5] [5 5])```; the docs have been out of date for a very long time but I refreshed them last week"
1577,1512159338.0001,Giovanni,"In Stuart Halloway's talk Simplicity Ain't easy, at the end he mentioned that there is some interesting discussion about design foundations other than simplicity. I can't seem to find any more information on it. Does anybody know of any discussion on that?"
1577,1512162284.000315,Sonny,"<@Giovanni> the three ones from Rich and Stu are power, focus, and simplicity"
1578,1512162339.000264,Sonny,I think Stu has done talks on two of those (see also <https://www.youtube.com/watch?v=KZ8u_sWT9Ls> )
1577,1512162708.000226,Giovanni,<@Sonny> Thanks much!
1577,1512162998.000164,Sonny,Maybe some day he will complete the trilogy and then we can get into the prequels 
1578,1512163042.000217,Margaret,"just wait, he’ll use CGI to add realistic concrete inheritence when he re-releases the original"
1577,1512163234.000468,Sonny,#rich_shot_first
1579,1512166806.000234,Branda,"If you are directly indexing `:a` you might not mind numerically indexing its array using medley's `dissoc-in`:; ```(let [d {:a [{:b 1 :deleteme ""foo""}]}]
  (dissoc-in d [:a 0 :deleteme]))```; But if you have more than one element in `:a` I would just inline the lambda instead and use update as bork suggests:
```(let [d {:a [{:b 1 :deleteme ""foo""}]}]
  (update d :a (fn [m] (mapv #(dissoc % :deleteme) m))))```"
1580,1512190461.000016,Wendi,"I'm getting an error when using clj with a deps.edn including a :local/root.
```{:deps {org.clojure/java.jdbc {:mvn/version ""0.6.2-alpha2""}
        oracle/driver {:local/root ""./ojdbc7.jar""}}}
```
It says 
```Error building classpath. Wrong number of args (4) passed to: local/eval398/fn--400```; Based on ""Refer to a specific jar on disk"" in <https://clojure.org/guides/deps_and_cli>; I also tried full path etc.; (Also interested in how to debug stuff like this.)"
1581,1512202685.00004,Berry,"is there a simple way to do a https supporting web server in java? it feels silly that my clojure code is all doing http/ws, then I am running some node.js wrapper to tunnel https -&gt; http, wss -&gt; ws"
1580,1512203313.00006,Wendi,Answering my own question in part.  `clj -Sverbose` will show details.  In my case confirming my brew install wasn't the latest.  (not a fix but still useful).
1581,1512206893.000029,Danyel,"<@Berry> have you seen this? <http://www.luminusweb.net/docs/deployment.md#setting_up_ssl>; I personally just deploy to Elastic Beanstalk, which takes care of SSL and Nginx for me"
1581,1512208132.000041,Berry,"yeah, AWS makes SSL trivial; my situation is: I need this for local, with a self signed cert; some auth libs I'm talking to are unhappy unless the host url is ssl, thus, I need ssl even in my dev setup"
1582,1512209832.000011,Danyel,"I see, then yes I think Immutant is the way to go: <http://immutant.org/documentation/current/apidoc/guide-web.html#h3374>"
1582,1512210130.000032,Tisha,"i'm a clojure newbie and am trying to learn channels and agents.
Did a small tutorial about them here: <https://joaoptrindade.com/tutorial-clojure-agents-and-channels>

anyone interested in giving some feedback? see if i understood the concept correctly"
1583,1512210972.00009,Tameka,Hi. what’s the equivalent in clojure for ```hash_hmac('sha512')```
1584,1512211609.000068,Marty,what is the equivalent in java ? :stuck_out_tongue:
1585,1512222647.000115,Sonny,"Based on that error, it’s probably a bug based on one of the recent refactors. I will take a look. Also btw, this stuff is good for <#C6QH853H8|tools-deps> ; yep, had some signature drift. will be fixed in next release.; as a temp workaround, you can probably declare it in paths instead - 
`:paths [""src"" ""ojdbc7.jar""]`; that’s not what paths is for, but it should work"
1586,1512226941.000107,Leann,buddy includes that sort of thing <https://funcool.github.io/buddy-core/latest/#hmac>
1585,1512229511.000039,Margaret,"there are more reasons to use nginx as a reverse proxy - it has better security and more reliable security updates than most alternatives, and if set up properly can improve performance and balance your load for you"
1585,1512237788.000057,Berry,"as stupid as it sounds, neither performance nor load balancing matters

for production, I'm using AWS for SSL

this is literally for local, where there is just one user (me), and I need SSL because some auth libraries I'm playing with barf if my webpage isn't hosted in SSL"
1587,1512237980.000014,Margaret,oh - aws might be using nginx for your ssl for all I know (I know that is how it works for our app at least)
1588,1512246291.000031,Tameka,"when creating a restful api using ring + compojure, do I have to specify `{:body ..}` for every single handler? Is it not possible to make this automatic; ?; this is what I mean:
```
(defn index-page [req]
  {:body {:data [{:id 1
                  :name ""Some name""}]}})

(defroutes app-routes
  (GET ""/"" _ index-page))
```"
1589,1512253402.000031,Wendi,Thanks. 
1588,1512254962.000086,Tameka,"how can I make an http call in ring and return the result to the client? when I do this
```
(defn get-orders [req]
  (let [{:keys [sig uri]} (api-signature :get-orders)]
    (client/get uri
                {:async? true}
                (fn [response] {:body ""something""})
                (fn [exception] {:body ""error""}))))
```; it gives me this error
``` No implementation of method: :render of protocol: #'compojure.response/Renderable found for class: org.apache.http.impl.nio.client.FutureWrapper
```"
1588,1512256819.000061,Daniell,<@Tameka> you're making an async `get` call inside a _synchronous_ handler.; You could use Ring's async handler machinery -- or force a dereference on the `get` call -- or just do a synchronous `get` instead.
1588,1512257228.000023,Tameka,thanks <@Daniell>. Actually I removed `:async? true` along with callbacks and it works fine now; I just don’t get what’s the point of async in here :smile:; is it there just so it doesn’t block IO?
1588,1512257510.000063,Daniell,"If you were using Ring's async handlers, it would make sense to use the async version of `get` -- and, yes, async would not block while the HTTP call is processed."
1590,1512294214.000063,Tameka,"I’ve created a new project using `chestnut` template and when I do `lein install`, it throws this error:
```Cannot run program ""sassc"": error=2, No such file or directory```
once I remove this bit from my project.clj it works:
```  :sassc [{:src ""src/scss/style.scss""
           :output-to ""resources/public/css/style.css""}]

  :auto {""sassc"" {:file-pattern  #""\.(scss)$""
                  :paths [""src/scss""]}}
```"
1588,1512294235.000052,Tameka,is there something wrong with `sassc`?
1591,1512297876.000037,Berry,`(reduce * (int-array [1 2 3 4]))` &lt;-- why does this code work? what is causing the reduce to be able to handle what I believe to be a JVM object
1591,1512298922.000058,Randee,"<@Berry> It goes like this: reduce -&gt; coll-reduce -&gt; protocol on type ""Object"" -&gt; seq the given array -&gt; `ArraySeq_int` -&gt; Faster internal reduce on it.; <@Berry> Actually, this is wrong: Check out: 
```
(reduce (fn [_ _]
          (try (throw (Exception.)) (catch Exception ex ex)))
        0 (int-array [0 1]))
```; It'd would use a faster internal reduce if you seq your array beforehand, it's more than 2x faster with `(reduce ... (seq (int-array ...))`"
1591,1512300409.000029,Kareen,<@Randee> I don't understand what that snippet is supposed to show
1591,1512300472.000008,Randee,<@Kareen> It's just a little hack to see get the stacktrace so I could see how the reduce function is called. With `(seq (int-array ...)` it shows nicely it's called from `ArraySeq_int.reduce`
1591,1512300489.000014,Kareen,ah ok; nice hack :)
1591,1512300599.00008,Randee,<@Kareen> Do you think `(reduce ... ... some-array)` should also end up in `ArraySeq_int.reduce`? I could create a ticket for it..
1591,1512301487.000059,Kareen,sure
1592,1512303183.000074,Tameka,"has anyone ever had a problem with `clj-http` when using `:as :clojure`? i.e.
```(client/get ""<http://example.com/foo.clj>"" {:as :clojure})```
I’m getting the following in my browser
```  Invalid keyword: .```; and when adding ```[org.clojure/tools.reader ""1.1.1""]``` to my deps, CIDER dumps the following
```
WARN: org.clojure/clojure version 1.5.1 requested, but 1.8.0 already on classpath.
WARN: org.clojure/tools.reader version 1.1.1 requested, but 1.0.0 already on classpath.
Dependencies not loaded due to conflict with previous jars :
[[org.clojure/clojure ""1.5.1""] [org.clojure/tools.reader ""1.1.1""]]
```"
1592,1512303382.00005,Jodie,<@Tameka> The contents of foo.clj might be up for question
1592,1512303410.00005,Tameka,if I do `:as :json` then it works fine; could it be that clojure map just doesn’t like something in there?
1592,1512303448.00003,Jodie,"<@Tameka> but, valid clojure is not the same as valid json; Are you requesting a clj file, or a json file?"
1592,1512303477.000033,Tameka,"it’s a json response from a server; I thought it would convert automatically, but I guess that’s the issue yes :slightly_smiling_face:"
1592,1512303527.000008,Jodie,"`:as :clojure` is for taking a _clojure string_ and turning it into a data structure.; `:as :json` takes a json string, and turns it into a data structure."
1592,1512303551.00002,Tameka,"ah gotcha. thanks!; and I’m guessing there’s no way to convert json to clj map, right?"
1592,1512304052.000008,Olen,"Actually, there is…
<https://github.com/clojure/data.json>; <@Tameka> can you take a look at this."
1592,1512304144.000059,Jodie,<@Tameka> Does `:as :json` not do that for you already?
1592,1512304192.00009,Tameka,doesn’t seem to be doing so. it returns json string when I do `(:body response)`
1592,1512304330.00007,Jodie,<@Tameka> do you have a dependency on cheshire?
1592,1512304334.00008,Tameka,"as I read in `clj-http` docs, `:as :json` requires `cheshire` lib. and when I add that to my deps, I get
```
[[cheshire ""5.8.0""]
 [tigris ""0.1.1""]
 [com.fasterxml.jackson.core/jackson-core ""2.9.0""]
 [com.fasterxml.jackson.dataformat/jackson-dataformat-cbor ""2.9.0""]
 [com.fasterxml.jackson.dataformat/jackson-dataformat-smile ""2.9.0""]]
Dependencies not loaded due to conflict with previous jars :
[[org.clojure/clojure ""1.5.1""]]
```"
1592,1512304337.000006,Jodie,See <https://github.com/dakrone/clj-http#optional-dependencies>
1592,1512304359.000054,Tameka,and then the `clj-http` has that section for `jackson` thingy; and it says that it could be in conflict with `clj-json` but I can’t find this one in my deps
1592,1512304419.000008,Jodie,"```
❯ boot -d clj-http -d cheshire repl
boot.user=&gt; (require '[clj-http.client :as client])
nil
boot.user=&gt; (client/get ""<http://ip.jsontest.com/>"" {:as :json})
{:request-time 390, :repeatable? false, :protocol-version {:name ""HTTP"", :major 1, :minor 1}, :streaming? true, :chunked? false, :reason-phrase ""OK"", :headers {""Access-Control-Allow-Origin"" ""*"", ""Content-Type"" ""application/json; charset=ISO-8859-1"", ""X-Cloud-Trace-Context"" ""25dfdbec80312f279ee4fa15eb026444"", ""Date"" ""Sun, 03 Dec 2017 12:32:57 GMT"", ""Server"" ""Google Frontend"", ""Content-Length"" ""25"", ""Connection"" ""close""}, :orig-content-encoding nil, :status 200, :length 25, :body {:ip ""185.65.134.175""}, :trace-redirects []}
```

Running my repl with cheshire got the body coercion working with `:as :json`"
1592,1512304456.000024,Tameka,"```
[[org.clojure/clojure ""1.8.0""]
                 [org.clojure/clojurescript ""1.9.671"" :scope ""provided""]
                 [ring ""1.6.2""]
                 [ring/ring-defaults ""0.3.1""]
                 [compojure ""1.6.0""]
                 [environ ""1.1.0""]
                 [com.stuartsierra/component ""0.3.2""]
                 [org.danielsz/system ""0.4.0""]
                 [org.clojure/tools.namespace ""0.2.11""]
                 [reagent ""0.6.0""]
                 [re-frame ""0.9.4""]
                 [buddy/buddy-core ""1.4.0""]
                 [clj-http ""3.7.0""]
                 [cheshire ""5.8.0""]]
```; these are all the deps I have; I’m thinking, perhaps there’s a version conflict somewhere"
1592,1512304599.000012,Jodie,probably. `lein deps :show :tree` I think is the way to find out. I think you're cutting off part of the error message I'm afraid.
1592,1512304728.00001,Tameka,"```Wrong number of arguments to deps task. 
Expected [] or [command]```; ```lein deps :tree``` worked; ok I’ll go through these exclusion recommendations and will try again thanks :smile:"
1592,1512304927.000056,Jodie,<@Tameka> look for only the one you need. I've noticed the exclusions are very broad.
1592,1512305909.000042,Tameka,"ok so I had `lein-plz` in my `~/.lein/profiles.clj` and there were loads of exclusion recommendations for between clj-http and lein-plz. It’s one step to success I think because well, something’s working now :smile:
So basically I have this handler
```
(defn open-orders [req]
  (let [{:keys [sig uri]} (api-sig :open-orders)]
    (client/get uri {:headers {""apisign"" sig} :as :json})))
```
and then when I visit the url, it definitely outputs json because my chrome json plugin recognises it. The `json` looks something like this:
```
{
   success: true,
   result: { ... }
}
```
But if I do something like
```
(defn open-orders [req]
  (let [{:keys [sig uri]} (api-sig :open-orders)]
    (-&gt; (client/get uri {:headers {""apisign"" sig} :as :json}) :body)))) ;; notice the :body in here
```
then it returns just a text version of the response and therefore I can’t take out the `result` bit from it anymore. If I do
```
(defn open-orders [req]
  (let [{:keys [sig uri]} (api-sig :open-orders)]
    (-&gt; (client/get uri {:headers {""apisign"" sig} :as :json}) :result)))) ;; notice the :result in here
```
then it goes to 404 page; such a simple task is so complicated :sob: gonna have a major breakdown here haha"
1593,1512309525.000085,Inell,"have you tried to spin up a nginx docker container and proxying requests to your local server?

This is probably more than what you need, but you could use as reference to create your own config.

<https://github.com/jwilder/nginx-proxy>"
1592,1512318361.000059,Margaret,"to be pedantic, if you are using clojure on the jvm, *everything* in clojure is a JVM object"
1594,1512318405.000044,Margaret,"clojure happens to define its core functions in terms of some basic Interfaces and Classes, including Arrays"
1593,1512342313.00016,Kristy,"dream library: code coverage for :pre / :post

like:

- for each ns, 20% of defns should have preconditions, and there should be at least one pre'd defn in any case
- you cannot decrease coverage %

pre/post + spec + integration testing = a damn lot of code gets excercised/asserted!

better approach than unit tests in certain cases, e.g. a cljs SPA. would love to write that lib sometime in 2018"
1593,1512347624.00012,Sandy,except those pre/post conditions often come with a performance hit
1593,1512348721.000066,Daniell,"<@Tameka> You need `(-&gt; (client/get uri {:headers {""apisign"" sig} :as :json}) :body :result)` -- You are trying to get the `:result` element out of the `:body` of the `client/get` response."
1595,1512348812.000045,Daniell,The conversion to text happens when Ring is rendering the result.
1596,1512351211.000108,Charity,"Random brain firing - is there a way to capture the current function's actual object instance? There are some recursion patterns which would be a lot easier to implement if you could just recursively pass the current function with its closure and all.; Or is the ""right way"" to do this some partial/y-combinator trickery"
1596,1512357284.000026,Margaret,"<@Charity> I'm probably misunderstanding, but does this help? ```+user=&gt; (defn foo [] foo)
#'user/foo
+user=&gt; (= (foo) foo)
true
```"
1597,1512357326.000133,Margaret,does it need to be a way to automatically capture the current fn where you can't know the name (or even work in a case where a name is impossible like comp or partial) ?
1596,1512357400.000066,Charity,"oh iiiiinteresting; ```
user=&gt; (def a (fn [x] (fn foo [] (println x) foo)))
#'user/a
user=&gt; ((a 1))
1
#object[user$a$foo__135 0x542e560f ""user$a$foo__135@542e560f""]
user=&gt; (((a 1)))
1
1
#object[user$a$foo__135 0x1d730606 ""user$a$foo__135@1d730606""]
user=&gt; 
```; named lambdas can refer to themselves by instance using their name."
1596,1512357442.000145,Margaret,yup!
1596,1512357458.000054,Charity,guess I didn't need to patch the compiler to add `this` as an implicit local :stuck_out_tongue:
1596,1512357471.000054,Margaret,oh no I have become a tool of evil
1596,1512357488.000018,Charity,Oh no this is great; totally happy to not have to run some goofy patchset to get what I want; (it was a nice patchset tho)
1598,1512365899.000051,Stefany,"Hi, can anyone suggest me some small learning project which would give me some idea about handling concurrency in clojure. Something which can be finished in a week."
1599,1512367741.00013,Berry,I'm writing a macro in a *.cljc file. Is there a way to make it expand to different things depending on whether it is being expanded in CLJ or CLJS code ?
1599,1512367911.000091,Carolann,<@Berry> You may find this helpful: <http://blog.fikesfarm.com/posts/2015-06-19-portable-macro-musing.html>; Long story short is its a bit of a pain
1599,1512371723.000137,Berry,"actually, how is it painful?
```
(defmacro str-&gt;int [s]
  #?(:clj  (Integer/parseInt s)
     :cljs (js/parseInt s)))
```
looks straightforward -- and I was already doing this, without even realizing it"
1600,1512372053.000013,Kristy,"Sure, I turn them off in production in clj and cljs  - `(set! *assert* false)` / `:elide-asserts true` respectively; A small 'simulation' program where you model a world, with interacting 'actors' (not in the Erlang sense) of some sort.

- A toy factory, where many workers work independently and collaborate
- An aquarium, where creatures eat each other / survive / reproduce
- etc

Those are particularly suited for concurrency. For parallelism, try doing either a CPU-bound (math? parsing?) or IO bound (web crawling?) workload as efficiently as possible"
1599,1512380613.000372,Alla,"<@Berry> I think you example macro is not right, it’s evaluating the expression at compile-time.; You should return the code to do the work instead.; e.g. this fails:
```
(let [s ""1""] (str-&gt;int s))
```; also, you need to know what you are emitting from the macro: clj or cljs. There are hacks to get this info. And a awesome lib hiding the details: <https://github.com/cgrand/macrovich>"
1601,1512382705.000046,Berry,"```

(defn select-rename [m ks]
  (into {}
        (for [[old-k new-k] ks]
          [new-k (get m old-k)])))

(select-rename
 {:a 20
  :b 30
  :c 40} [[:a :foo] [:c :bar]])
```
Is there a builtin for this ?"
1601,1512382940.000356,Rogelio,<@Berry> There're two functions - `rename-keys` and `select-keys`.
1601,1512382943.000202,Basil,there's `clojure.set/rename-keys` and `select-keys`; Also note that you can implement this without an intermedia seq by using a transducer: (into {} (map (fn [[old new]] ...)) ks)
1601,1512383686.000101,Berry,"<@Basil>: I agree that unnecessary intermedaite seqs are bad. Can you clarify where my code is generating it ?; ```
(= 2 (+ 1 1))
(comment
 true)

(= (int-array [2])
   (int-array [(+ 1 1)]))
(comment
 false)
```

I'm okay with the int-array returning false. My question is: is there a way I can overload/hack equality so it returns true if they're elementwise equal ?"
1602,1512385127.000097,Stefany,"<@Kristy> thanks for the reply, this seems interesting."
1603,1512385140.000099,Vernice,"What is the best way to run all unit tests (assuming that they are in different namespaces) in a project, without requiring them first, from the repl?"
1603,1512385297.000324,Kristy,"I can take a look at the project as you progress on it, why not"
1603,1512385718.000068,Stefany,"thanks that would be great help, I have done some projects like parser &amp; interpreter in clojure but nothing related to concurrency; if you feel like taking a look:
<https://github.com/sumitkumar15/supergit>
<https://github.com/sumitkumar15/relisp> :slightly_smiling_face:"
1603,1512386721.000362,Vernice,<@Edwin> any idea ? :point_up:
1603,1512386862.000248,Jodie,"<@Vernice> why don't you want to require them?; You can't run a test, without require the namespace that test is in."
1603,1512386938.000005,Vernice,<@Jodie> say I have 10 test namespaces.
1603,1512387118.000225,Jodie,<@Vernice> tools.namespace will require all namespaces it can find.; This should solve your problem if you perform a refresh before running your tests.
1603,1512388496.000096,Vernice,Thanks <@Jodie>!
1604,1512388743.000303,Johana,"Count result of a transduction, which one is preferable?
```
;; 1
(count
   (sequence (map identity)
             [1 2 3]))
  ;; vs
;; 2
  (transduce (map (constantly 1))
             +
             [1 2 3])
```"
1603,1512388830.000273,Jodie,"<@Johana> the first one makes more sense to me. I think you could use `eduction` in place of `sequence` if this is the exact usage, as it will be faster."
1604,1512388877.000392,Johana,I get `count` is not supported on `eduction`
1603,1512389022.000308,Jodie,Really? I figured count worked on any reducible.; <@Johana> What are you optimizing for here? Performance or readability?
1603,1512389115.000526,Johana,<@Jodie> Both :slightly_smiling_face:
1603,1512389155.000416,Jodie,"In that case, use `sequence` if it's not fast enough, benchmark the transduce (but I wouldn't expect that to be faster, it's potentially slower!)"
1603,1512389203.000342,Johana,thanks
1603,1512389208.000187,Jodie,"last but not least, use `eduction` with a `fold` to parallelise the `count`, if your resulting collection will be large enough. Also benchmark this approach."
1603,1512389238.000145,Johana,"<@Jodie> This is just <#C0GLTDB2T|adventofcode> related, so I guess readability is slightly more important. I’ll go with sequence."
1605,1512391179.000233,Pat,sorry for the crosspost - has anyone seen this before? <https://clojurians.slack.com/archives/C075TNSSC/p1512387863000190>
1605,1512391776.00028,Heriberto,<@Pat> Try <https://confluence.atlassian.com/jira/connecting-to-ssl-services-117455.html> (see Resolution section); it tells how to get certificate for your url and to import into Java cert store to trust it
1605,1512393595.00005,Pat,"thanks, but I'm just trying to use `boot` or `lein`; which seems like it should work? it's not my servers"
1605,1512393715.000176,Heriberto,"<@Pat> those instructions are to be done at client computer; i. e. at your work machine; it's not required for it to be a server; to successfully run Portecle app, to get <http://github.com|github.com> certificate by it and to import that certificate to local cert store"
1605,1512394050.000443,Pat,"well, I fixed it by uninstalling and reinstalling `openjdk-8-jdk`constantly throughout the day; ¯\_(ツ)_/¯; FWIW, the last line I ran, from having no jdk installed, was ```sudo apt install openjdk-8-jdk```"
1606,1512395091.000223,Johana,<@Jodie> using net.cgrand.xforms: `(x/count xform input)`
1606,1512395120.000348,Jodie,"<@Johana> Yep, xforms is always the correct answer in these cases."
1605,1512395139.000527,Jodie,I'l have to remember that xforms has a count
1606,1512395150.000297,Johana,(thanks <@Almeda>)
1607,1512398576.000535,Kalyn,Any rumors about 1.9's stability and its final release? :slightly_smiling_face:
1607,1512398609.000561,Kareen,1.9.0-RC2 is pretty much what 1.9.0 should be in a short while
1607,1512398616.000562,Kalyn,Wow
1608,1512410226.00044,Sonny,I expect 1.9.0-RC2 is exactly what 1.9.0 will be :)
1608,1512412623.000145,Altagracia,"```
(let [a (if editing? edit-a (-&gt; data :foo :bar :a))
      b (if editing? edit-b (-&gt; data :quux :b format-b-for-display))
      c (if editing? edit-c (-&gt; data :otherkey :c))]
  [1 2 a b c 3 4])
```
Can I write this more concise without repeating `(if editing?)` so often?"
1607,1512412688.000722,Altagracia,(Without repeating the `1 2 3 4`.); I want to keep the readable `[1 2 a b c 3 4]` at the end.
1609,1512413176.000776,Adrien,"Using vectors and destructuring perhaps?
```
(let [[a b c] (if editing?
                [edit-a edit-b edit-c]
                [(-&gt; data :foo :bar :a) (-&gt; data :quux :b format-b-for-display) (-&gt; data :otherkey :c)])]
  [1 2 a b c 3 4])
```"
1610,1512414397.000107,Carolann,Good to know about this!; Agreed
1610,1512415331.000392,Daniell,<@Kalyn> Re: stability -- we've had all the 1.9 Alpha and Beta builds in production for ages. We have RC1 in production right now with RC2 going to production at 2pm Pacific today.
1611,1512416368.000395,Amado,whats the main difference between `float?` and `double?`; i want to validate input from a string and check if its content is a valid double
1610,1512416752.000342,Kalyn,<@Daniell> sounds good. but did you have a specific agenda in chasing the bleeding edge like that? I mean 1.8 was good and stable. care to clarify the motivations for this chase? I just can't help but wonder as most people won't go that far (or fast :) I guess..
1610,1512417338.000325,Sandy,"<@Kalyn> there's really not a reason not to. Clojure alpha/beta versions very rarely break existing features. Most of the time I upgrade, run the test suite, and if those tests pass we're good."
1611,1512417369.000238,Margaret,"to use either float? or double? here you’d need to do some conversion first. clojure.edn/read-string? will never return floats, only doubles"
1611,1512417401.000209,Sandy,"Last time I remember Clojure ""breaking"" something critical was when they changed the hashing algorithm back in 1.6. But even that wasn't Clojure's fault since order of items in sets is undefined (hence why they are unordered sets). So that was a bit painful to fix, but it was considered a code cleanup since the problem was in the code that used Clojure."
1611,1512417412.000005,Margaret,"if what you want is to know if a string is a valid floating point number, I think the best option is `(try (Double/parseDouble %) (catch Exception _))` - it’s ugly but it works - either a number or nil comes out"
1611,1512417427.000698,Sandy,But I can't even think of a time I've had my *correct* code break from a Clojure upgrade.
1610,1512417438.000439,Willow,weren't there some issues with 1.2 -&gt; 1.3
1611,1512417449.000716,Willow,i wasn't around back then so i don't know but i thought i remember hearing about that
1611,1512417457.000754,Sandy,"well yeah, I'm not going that far back. and I joined Clojure right when 1.3 was released :wink:; That was back in 2011, lol"
1611,1512417559.000208,Willow,well there's a good answer then. there haven't been breaking changes in an upgrade for 6 years or so
1612,1512419047.00017,Micha,"There are times where there were perhaps legitimate questions whether a change in a release was breaking or not, such as the hash change in 1.6 also leading to hash inconsistency between Java sets and Clojure sets that were clojure.core/= before and after, but no longer had the same hash any more.; Which then causes sets or maps containing those things not to be clojure.core/= any more.; Such questions usually lead to refinements in the definition of what was promised, and what wasn't."
1612,1512419342.000019,Aldo,"adding validation to the ns macro which subsequently stopped (ns foo (use bar)) being acceptable is another one of those things; no one said it would work, but it did, and now it doesn't. given the low number of people affected and how easy it was to fix I'm glad they went with locking it down though"
1612,1512419728.000162,Henry,"Hmmm,
```
&gt; (println '(and ""foo""))
(and foo)
```
I would expect that to print `(and ""foo"")`. Does anyone know why it doesn't? Is there a way to include the quotes?"
1612,1512419742.000487,Rebeca,prn
1612,1512419831.000658,Henry,"Indeed, thanks!"
1612,1512419899.00013,Aldo,"ya, println tries to be human friendly. prn is for serializing data"
1612,1512419936.000212,Daniell,"We've pretty much always used Alphas in production as they become available for over six years: because we want access to the latest features. We're using `clojure.spec` heavily in production, for example.; ISTR 1.4 ""broke"" some stuff around numeric overflow / representation? (didn't affect us) and 1.5.0 had a memory leak (fixed in 1.5.1 -- we were spared that as we were on a pre-release of 1.5 in production at the time, before the leak was introduced, and we went straight to 1.5.1 because of our release schedules at the time). And the hash code change in 1.6 didn't bite us either (I'm still not clear on how widespread that breakage was?).; We started with Clojure 1.3 (Alpha 7 or 8 in production) because we wanted to skip ahead of the big 1.2 -&gt; 1.3 Contrib split and the AOT compatibility issues around that. It's also how I ended up maintaining `clojure.java.jdbc` -- because `clojure.contrib.sql` needed a maintainer to bring it across the 1.2/1.3 divide :slightly_smiling_face:; We test our apps against Clojure's master SNAPSHOT as well as whatever version we're going to production with so we get a heads up of any breakage."
1612,1512424220.000019,Kalyn,"<@Sandy> <@Daniell> thanks for the perspectives and explanation ― I sure learned something new; As someone who does not maintain a clojure core library, I might be a bit more conservative myself :slightly_smiling_face: but testing against Clojure's master snapshot sure sounds nice (especially if it doesn't break the test suite very often)"
1612,1512424620.000666,Daniell,"One of Clojure's strengths, in my opinion, is how stable it has been across versions. The Clojure/core team are very serious about accretion rather than breakage :slightly_smiling_face:"
1613,1512425875.000317,Kalyn,"Something else ― roughly one week ago I asked about writing code for stream-processing of data, which gave rise to a short discussion suggesting that although collections are sufficiently lazy (only up to 32 items may be realized under the covers at any point in time), transducers should be strictly preferred for a streaming application. 

In streaming I mean, mainly, processing an input file using only a constant memory footprint, rather than consuming the entire (potentially humongous) file into memory and such. Then also processing the stream forward through whatever few processing steps, in a similar way, for the same reason.

Do folks here agree to that suggestion, about preferring transducers over plain lazy collections?"
1613,1512426192.000587,Jonas,lazy collections and transducers aren’t mutually exclusive
1613,1512426207.000025,Rebeca,right
1613,1512426219.000269,Jonas,transducers are a good option for describing and composing the individual steps; they also are useful for streaming because they don’t care about the source or the sink
1613,1512426290.000668,Rebeca,"in general, for streaming processing, you are going to be working with folds (a tree shaped process, the degenerate shape of which is a linear reduce)"
1613,1512426317.000212,Jonas,"as far as processing data with constant memory requirements, you can use lazy sequences, but there are other good options as well"
1613,1512426366.000394,Rebeca,"once you are working folds, using transducers and transduce is pretty much a no brainer"
1613,1512426375.000093,Jonas,there are also a lot of stream processing libraries to choose from that help provide a good story for how to put everything together
1613,1512426488.000105,Rebeca,"when you are using a fold like reduce (or transduce) you also get a pretty clear scope for managing resources (like closing db connections, or files, or whatever) which lazy-seqs don't really give you"
1613,1512427025.000149,Bibi,(interleave <@Jonas> <@Rebeca>) :slightly_smiling_face:
1614,1512427093.000322,Ferdinand,XD
1615,1512427976.000144,Sandy,"<@Kalyn> I prefer transducers in this case simply beacause it's *really* hard *not* to hold onto the head of a seq with lazy seqs. And with transducers its pretty much impossible to shoot yourself in the foot this way.; I've built too many systems that work fine until you get about 2GB of data through them then they fall over due to some sort of lazy-seq related memory ""leak"""
1616,1512428805.000115,Vicky,Hello Everyone. Are there any good resources to learn Clojure quickly and efficiently? 
1616,1512429418.000416,Micha,"If you don't mind paying some $, Clojure Programming is a good book: <http://shop.oreilly.com/product/0636920013754.do>    There are other fine books to learn from, also."
1616,1512429782.000058,Giovanni,"<@Vicky> I will also add Clojure for the Brave and true <https://www.braveclojure.com/> If you are looking for raw time to workflow, then brave clojure has the advantage there IMHO. If you want a more in depth resource, then the O'Reilly book is always a really safe bet. It just depends on where your priorities are."
1616,1512430225.000299,Daniell,"Or Living Clojure by Carin Meier, or Programming Clojure 3rd Edition... :slightly_smiling_face:; Clojure Programming is good for the basics but a little outdated now (it targets Clojure 1.5 I think?).; Nope, 1.4 (examples work on 1.3 and 1.4). So I'd be cautious to recommend Clojure Programming at this point (although I love it as an all-round introduction to the language and some common libraries -- it's `clojure.java.jdbc` section is outdated, due to lots of improvements in that library... I'm not sure it's example even work with recent `clojure.java.jdbc` versions).; <@Vicky> If you're new to Clojure, you'll find the folks in the <#C053AK3F9|beginners> channel are super helpful."
1616,1512430574.000439,Vicky,"I'm interviewing at a company that uses Clojure and React. I'm comfortable with React, just need to increase skills with Clojure. ; Thanks everyone for your help. "
1616,1512430748.000104,Daniell,Cool. Good luck with the interview! Are they using Clojure on the server or ClojureScript with React on the client?
1616,1512430803.000311,Vicky,I think Clojure on the server? They never mentioned ClojureScript. 
1616,1512430968.000257,Daniell,"'k ... we're React on the front, Clojure on the back too ... it's a good combination."
1616,1512431091.000271,Vicky,Where do you work....? Haha
1616,1512431139.000111,Giovanni,"<@Daniell> Is that React without clojurescript? If so, what were the motivators for that decision?"
1617,1512457903.000026,Kalyn,"Thanks <@Sandy> <@Jonas> <@Rebeca> for the excellent feedback. 
I'm just not sure I get it regarding the comments about folds or fold-like reducing. Am I missing something really deep here?"
1618,1512465520.000392,Jodie,"<https://clojure.org/guides/destructuring#_namespaced_keywords> Why does `:keys` use a keyword (`:person/name`) for destructuring namespaced keywords rather than a symbol (`person/name`)? Both work, but given this guide it seems the former is what you're expected to use."
1618,1512466149.000276,Rogelio,"<@Jodie> From the same page: ""The `:keys` key is for associative values with keyword keys, but there are also `:strs` and `:syms` for string and symbol keys respectively."""
1618,1512466217.000611,Jodie,"<@Rogelio> My question is about syntax, not about how to pull out symbols."
1618,1512470424.000096,Daine,<@Jodie> using a keyword allows you to use ```(:person/name person)``` to get the name
1619,1512471754.00024,James,"I believe he's talking about the distinction when using `:keys` destructuring.
```
(let [{:keys [:person/name b]} {:person/name ""Name"" :b 2}] 
    [name b])
=&gt; [""Name"" 2]```

vs

```
(let [{:keys [person/name b]} {:person/name ""Name"" :b 2}] 
  [name b])
=&gt; [""Name"" 2]```; The distinction between using `:person/name` as a keyword or `person/name` (as a symbol)
Why the first seems encouraged if both work and the second seems more in line with how we destructure unqualified keywords.; <@Jodie> I think it might be related to auto resolving keywords, possibly? Using `::some-ns/id` would work only if `some-ns` was available in that scope, but using symbols `some-ns/id` would be happily accepted either way."
1619,1512472222.00042,Jodie,alias resolving keywords is probably a good reason. I wonder if symbols are supposed to work? e.g. the same way that `(ns (require …))` worked until spec came in and caught everyone out.
1619,1512472439.000406,James,"That's a good question. I went with the flow of always using keywords according to what's in the available documentation, but I agree that it introduces a somewhat odd distinction."
1619,1512473206.000369,Kareen,symbols in `:keys` are supposed to work
1620,1512473263.000217,Kareen,destructuring syntax is already specced btw
1620,1512475139.000303,Jodie,<@Kareen> Should the guide be updated to mention that `ns/name` is supposed to work?
1620,1512482327.000515,Sonny,:keys destructuring intentionally takes keywords to support the use of autoresolved keywords (either :: or : with an alias)
1621,1512482407.000057,Sonny,Symbols are preferred though if you’re not leveraging those features
1620,1512482459.000181,Sonny,Symbols can be either namespaced or not - the name part of the symbol is always what the bound local name will be
1621,1512482483.000203,Noella,"on the topic of autoresolved keywords, is there a jira ticket for being able for namespace aliases for non-existing namespaces?; just curious :slightly_smiling_face:"
1621,1512482521.000163,Sonny,You mean as an enhancement?
1621,1512482526.000253,Jodie,"<@Sonny> I'm not familiar with `:` being used for autoresolved keywords, what do you mean by that?"
1621,1512482541.000668,Noella,"as an enhancement proposal, yes :slightly_smiling_face:"
1621,1512482616.000056,Sonny,"Re the enhancement, we have considered it (I actually implemented it) but Rich doesn’t want to change current state, however he has some ideas for an alternative for managing keyword aliases specifically; Sorry I meant :: with an alias. InsufficientCoffeeException"
1621,1512482674.000142,Noella,"cool, I’ll keep an eye out, thanks!"
1621,1512482707.000194,Jodie,"That's okay! That brings me onto my next question then, does that mean the guide is wrong in suggesting the use of `:person/name` and instead `person/name` should be preferred?"
1621,1512482735.000084,Sonny,"Feel free to file an issue or a pr! <https://github.com/clojure/clojure-site>; Symbols are preferred in my opinion. Either should work.; Either is valid, I’d say symbol is preferred; Usually we use symbols in :keys (as they then match the created locals); With qualified, it’s a little muddier"
1621,1512483307.000245,Jodie,"Yeah, until I knew about autoresolved keywords, the answer was very obvious. Now it feels like there's a special exception in `:keys`.; Done <https://github.com/clojure/clojure-site/issues/230> !; <@Sonny> I'm curious, could you give a hint as to what Rich would like this to look like?"
1621,1512483721.000206,Sonny,"Nope, I don’t know "
1620,1512483856.000505,Timmy,"what would you guys call this function?
```
(defn update-conj-vec
  ""Takes map and adds v to the collection at k. If value at k is currently nil v
  is wrapped in a vector and set as k's value.""
  [m k v] (update m k #(if (nil? %) [v] (conj % v))))
```"
1621,1512483890.000096,Timmy,I’m not happy with it’s name…
1620,1512483989.000487,Rogelio,`conj-at`?
1621,1512484079.000408,Jodie,"<@Timmy> I've found that when I need that kind of function, I'm usually doing something wrong."
1620,1512484149.000126,Timmy,hmmm `conj-at` is kind of nice….
1621,1512484221.000456,Timmy,<@Jodie> care to elaborate? I’ve got some maps with lots of lists in that need adding too…. what gives you that feeling?
1621,1512484257.000386,Jodie,"oh, I misread the docstring. Apologies.; <@Timmy> `(conj nil 1)` does work btw. Is it important that it's a vector?; <@Timmy> Not that you asked, but I'd write that like so:

```
[m k v]
(update m k (fnil conj []) v)
```; ""Takes a map and conj's v to the collection at k. If the value at k is currently nil, a vector will be used as the collection type"" is how I would word the docstring, the ""how"" of wrapping the v is too precise."
1621,1512484582.000672,Timmy,oh `fnil` looks kind of handy. Thanks!
1621,1512484716.000005,Jodie,"<@Timmy> however, if you're adding values to lots of keys, perhaps two generic functions would work together better? `(def vec-conj (fnil conj []))` and a function to `update-keys` for updating many keys with the same fn."
1620,1512484956.000231,James,"I see, thanks!!"
1621,1512484981.000587,Timmy,just `vec-conj` has tidied things up plenty. Cheers man!
1621,1512484998.000219,Jodie,"```
user=&gt; (def vec-conj (fnil conj []))
#'user/vec-conj
user=&gt; (defn update-keys [m ks &amp; args]
#_=&gt; (reduce (fn [m k] (apply update m k args)) m ks))
#'user/update-keys
user=&gt; (update-keys {:k nil :v [1 2] :c (list :a)} [:new :k :v :c] vec-conj :new-val)
{:k [:new-val], :v [1 2 :new-val], :c (:new-val :a), :new [:new-val]}
```

As I was toying around :slightly_smiling_face:"
1622,1512489341.000855,Blanch,Is `first` lazy?
1622,1512489481.000616,Xavier,"nope; ```(let [s (lazy-seq
          (println ""Called!"")
          (cons :foo nil))]
  (first s))
Called!
=&gt; :foo
```"
1622,1512490155.000889,Sonny,How could `first` be lazy?
1621,1512490377.000117,Willow,"`fst :: (a, b) -&gt; a` :slightly_smiling_face:"
1621,1512490470.0002,Sonny,"well, Clojure has eager evaluation semantics so it’s not lazy in that sense"
1622,1512490504.000162,Willow,"agreed. fst in haskell isn't lazy, _haskell_ is lazy"
1622,1512490563.000356,Sonny,"it just lays around all day waiting for something to happen, psh"
1622,1512491118.000303,Myles,so do I. it's a wonder haskell and I never got on
1622,1512491185.000068,Willow,you have to sufficiently motivate it. otherwise it just prints `nah` and dies in constant time
1622,1512491231.000042,Heriberto,<@Myles> you could also try <http://eta-lang.org/> if it's needed to run it on JVM
1623,1512492509.000271,Heriberto,"Is `trampoline`'s performance good? 

There's an JavaScript &lt;https://taylodl.wordpress.com/2013/06/07/functional-javascript-tail-call-optimization-and-trampolines/|article&gt; (Clojure `trampoline` implementation seems to be similar) and it says:
&gt;The trampoline implementation has essentially the same number of function invocations as the traditional recursive implementation. A TCO would eliminate these function invocations.
&gt;We’ve traded the work of creating stack frames with creating function bindings. Both operations consume time and memory. TCO doesn’t create function references due to its modifying the function implementation in place to transform the recursive 
implementation to a loop.

So it seems that `trampoline` isn't a substitute for TCO."
1623,1512492603.000447,Kareen,"while it is right that the number of function invocation stays the same, the big difference is that those stack frames don't exist in memory all at once but they exist one at a time; nobody claimed that trampoline is a substitute for TCO"
1623,1512492669.000163,Heriberto,"I see. Thank you, <@Kareen>!"
1623,1512492673.000341,Kareen,trampoline is a workaround for a problem that is also solved by TCO
1624,1512494360.000273,Willow,"isn't trampoline usually how TCO is implemented under the hood, as well?"
1623,1512494436.000654,Kareen,no; general TCO transforms function call and return into jumps
1624,1512496225.00025,Sandy,"<@Willow> it's interesting, on the x86 the place the code jumps to on a return is simply a pointer on the stack. So you can implement other models that patch up that value to do stuff like TCO or continuation passing. Sadly this is also fairly insecure, so the JVM abstracts all that away, and doesn't give you control over the return address."
1625,1512496485.000217,Rebeca,<http://repository.readscheme.org/ftp/papers/ai-lab-pubs/AIM-443.pdf>
1625,1512497106.000201,Sandy,"heh, and these days, with branch prediction, procedure calls are practically free :smile:"
1625,1512497430.000291,Rebeca,"sure, but the compilation strategy in the paper generates code where calls are just a jump without a pushed return address unless required (looks like cps or a precursor), of course it predates worrying about the x86 calling conventions, because people were still arguing about if subroutines were a good idea"
1626,1512498862.000803,Guillermo,"practically free... at the cost of huge silicon wastage; or higher power envelope; <http://www.iro.umontreal.ca/~feeley/papers/SaleilFeeleyECOOP17.pdf>; &gt; Interprocedural Specialization of Higher-Order Dynamic Languages Without Static Analysis
This looks like a promising avenue for optimizing functional languages like Clojure"
1627,1512503902.000175,Willow,is there an easy way to downgrade lein?; well apparently `lein updade 2.7.1` will upgrade to a specific version
1626,1512505029.000343,Shira,same works for downgrading; i.e. `lein update 2.5.0` will up/downgrade to that version
1626,1512505132.000696,Guillermo,"Just curious, why the downgrade?"
1626,1512505546.000073,Willow,"we have a plugin not working with 2.8.1, last known is 2.7.1; slothconfig i think is the culprit"
1628,1512514115.000506,Lonna,"Does anyone recommend a library for writing isomorphic data conversions/bijections?
Basically being able to write one implementation to go from `type a -&gt; type b`, and getting `type b -&gt; type a` ""for free"""
1628,1512514423.000241,Jonas,"is that even possible? it sounds kinda like <https://github.com/nathanmarz/specter>; where you can zoom in on part of a datastructure, perform transformations locally, and then zoom out"
1628,1512514657.000466,Sandy,"<@Lonna>, clojure prefers data (hashmaps vectors) instead of types, so I'm not sure this applies?"
1628,1512514821.000148,Rebeca,"there are a lot of libraries that do things like define some base conversion functions, then create a graph of all the types, then use the graph and base conversion functions to generate the rest of the conversion functions"
1629,1512515467.000178,Rebeca,<https://github.com/dm3/clojure.java-time/blob/master/src/java_time/graph.clj> is an example of something like that
1628,1512515489.000522,Lonna,"<@Jonas> possibly, and specter seems nice, but not quite it
<@Sandy> Clojure doesn't emphasize types, but they're still implicitly there. You'll see something like `(defn a-&gt;b [a] ...)`, which (by convention) is a typecast from a to b
<@Rebeca> I saw <https://github.com/twitter/bijection> which seems to fit. Know of any others?"
1628,1512515566.000266,Sandy,"<@Lonna> but what types are you trying to convert. If a and b are records, then (map-&gt;b a) is automatic; as is (map-&gt;a b)"
1628,1512515685.000004,Lonna,"I have two different representations of the same thing. I want to write a single set of rules that goes from a to b, and get the reverse function (b to a) automatically"
1628,1512515717.00019,Sandy,"That's what I'm getting at, why do you have two representations of the same thing? Why not store them in one format?; Keep the data in hashmaps, or even records, and then stuff just works."
1628,1512515766.000003,Margaret,"also - it really depends on what data transformation you are talking about, it’s provable that you can’t write a general function for such conversions so there must be other constraints implied here"
1628,1512515788.000029,Willow,"""two representations of the same thing"""
1628,1512515790.000027,Lonna,"Because the things in question are events, and the ""business event"" looks different from the event that's sent out to the external event service.
There's no magic solution of ""use the same format"" here"
1628,1512515791.000208,Willow,sounds good here
1628,1512515857.000336,Sandy,that sounds like a data modeling problem. Chances are that with namespaced keywords and hashmaps your required transformations would be quite minimal; {:event/timestamp ...} can exist in any hashmap that's an event with a timestamp; and if you have {:service.event/timestamp ...} then its a question if you really need to discriminate between a service event timestamp and a ui event timestamp
1628,1512515964.000361,Willow,"what does an ""event"" look like quest? I think i follow you and i see what you are trying to do"
1628,1512515977.000303,Sandy,I'm saying all this because the last time I needed a library like this I was in a C# app where a good 40% of all our code was nothing more than type conversions. Moving to Clojure removed the need for that.
1628,1512516004.000435,Willow,"sounds like there's a notion of ""add a customer"", and this app calls it `create-customer` and some other apps call it `customer-create`; and you just want to translate back and forth?"
1628,1512516056.00046,Lonna,"OK -- for instance, our business event contains various fields.
```
{:foo-id ""abcde""}
```
The external service we publish them to supports ""custom fields"" via a `facts` map.
```
{:facts {:foo-id ""abcde""}}
```; All I want a way to specify this transformation that will work ""forwards and backwards""; I can handroll this easy enough, just figured there was a ""declarative"" way to specify these transformations. I notice someone made <https://github.com/gfredericks/schema-bijections> which is the same idea"
1628,1512516303.000342,Margaret,it’s not a standard or built in thing - that lib is the closest thing I’ve seen
1628,1512516340.000192,Lonna,"fair enough. I can kinda imagine a way to do this via transducers if they each one in the chain was ""reversible"", but never seen that either"
1628,1512516353.000189,Margaret,"I misunderstood, thought you wanted to describe a one way transition and have the reverse defined automatically; clojure has no way to define, declare, or detect reversibility"
1628,1512516424.000276,Lonna,"yeah -- no way you could do this ""automatically"" without also having definitions of what (and how) things can be reversed; though if you limit yourself to purely isomorphic translations (and your library understands that), then it could generate the reverse for you"
1628,1512516467.00036,Margaret,"I wouldn’t be surprised if the haskell or idris compiler did such things, but clojure’s compiler doesn’t even aim to be clever like that; that’s true - you could make your own declarative language for transforms; might be a fun thing to try in eg. core.logic"
1628,1512516545.000256,Lonna,"hmm... that's true, and finding out how to mesh this with specs would be an interesting (and relevant) challenge for me. good idea :slightly_smiling_face:"
1628,1512516634.000079,Margaret,"having known gfredericks for a while, my instinct when something he wrote comes up is that either I’m on track of something very clever and useful or something very clever and … perverse; (known online that is, just hung out with him at a couple conferences); eg. <https://github.com/gfredericks/seventy-one>; <https://github.com/gfredericks/quinedb>; haha - I’ll stop now"
1628,1512516756.000175,Lonna,I get what you mean by perverse :grin:
1628,1512516906.000437,Jonas,"there’s a lot of overlap with what you’re describing and specter. basically you have a  bunch of reversible operations. the library has a specific use case in mind (manipulating immutable nested data structures), but you could in theory have navigators that are just reversible operations (i think); i’m not saying it’s a good fit for what you’re doing, but you may be able find/borrow inpirations"
1628,1512517015.00011,Lonna,"didn't even consider that. Specter does have _a lot_ of nice stuff going on under the hood, will also take a look at that"
1628,1512517051.000227,Jonas,it’s clear that you could use `select` and a path to go from one type to another; not sure if you could use `transform` to automatically do the reverse given the same path; (a path being a list of navigators); which you would be repurposing as reversible operations
1628,1512517433.000402,Lonna,"don't know enough about Specter -- but worst case, as long as there's a set of operations, I can manually denote which ones are reversible (and how). whether that ends up being an extension of specter, core.logic, or a different library entirely... we'll see"
1628,1512517476.00022,Jonas,seems cool
1630,1512518903.000198,Sarita,"hello again, all. been a while. I am back in a ruby shop, where I get quizzical looks when I say that a handful of functions can do what OOP does, but simpler, easier, and faster. how best to illuminate my co-workers?"
1628,1512519506.000279,Jonas,"I’ve found that I’ve grown more convincing as I’ve become better at explaining my thoughts. developing the right vocabulary for describing design tradeoffs has been a huge help. ie. rather than just saying something is better or worse, being able to describe design tradeoffs in terms of coupling, cohesion, or other code attributes. also being able to explain how a design makes tradeoffs in terms of quantifiable metrics can also help (eg. how a design makes tradeoffs in terms of latency vs throughput); I think the first book that helped me be more descriptive about how to describe the tradeoffs of different designs was code complete; with respect to ruby, rich hickey did give the key note at a rails conf, <https://www.youtube.com/watch?v=rI8tNMsozo0>; <http://aroma.vn/web/wp-content/uploads/2016/11/code-complete-2nd-edition-v413hav.pdf>; here’s a great list of different code attributes (with definitions!)"
1628,1512519929.000113,Keesha,"Any quick little way to convert `[[""a"" ""b""] [""c"" ""d""] [""e"" ""f""]]` to `[[""a"" ""c"" ""e""] [""b"" ""d"" ""f""]]`?"
1630,1512519940.000013,Margaret,"<@Keesha> (map vector c)
```&gt; (apply map vector [[""a"" ""b""] [""c"" ""d""] [""e"" ""f""]])
([""a"" ""c"" ""e""] [""b"" ""d"" ""f""])``` (apply here because it was all in one vec)"
1628,1512520058.000253,Keesha,That’s the one. Thanks guys
1628,1512520138.000186,Margaret,`(def transpose (partial apply map vector))` is a remarkable little chunk of code (I learned it on IRC I forget who from) (edit: better name)
1628,1512520246.000057,Keesha,Oh thats neat. Thank you!
1631,1512527349.000103,Lisabeth,"Have better debugging tools? I need parse multi-layer json object, it’s very easy wrong, I use Idea IntelliJ tool. "
1631,1512530737.000012,Daniell,<@Lisabeth> Can you be a bit more specific about what you're stuck on? Are you using Cheshire to parse the JSON?
1632,1512533650.000043,Kristy,what's `form`?; in the source I can see it serves some internal `Specize` protocol. still confused
1632,1512534204.000076,Sonny,it’s a literal form to use when reporting failures in lieu of the normal form of the spec; typically would not be something you would use as a user (which is why it’s not doc’ed I think); I think it may actually be vestigial at this point; I don’t think it’s either called or does anything useful now?
1632,1512534855.000059,Kristy,"thanks for the input <@Sonny>!

funny, I was implementing something similar right now, a `check-with-explanation-value` helper; use case:

`{:post [(check-with-explanation-value some? % coll)]}`; because `some? nil` cannot give useful information, so we use `coll` (a defn argument) as the explanation value"
1632,1512535930.000095,Sonny,"there’s a ticket with a patch for something like that if it’s useful to you; actually, I guess it isn’t what you want, nvm"
1633,1512542386.000145,Heriberto,"<@Lisabeth> 
&gt;Have better debugging tools? I need parse multi-layer json object, it’s very easy wrong, I use Idea IntelliJ tool.
Why current Intellij tools are not enough? I use CIDER debug and it's good enough so far (it shows values of all expressions starting from inside ones)."
1634,1512547793.000032,Tari,"Hi, I have a problem with my clojure backend project. When my project starts `jetty` server, the whole nginx on this linux, including static resources which are out of the clojure project, starts to slows down for accessing. It shows a long orange `Initial connection` time in Chrome. What can this kind of problem be? Thanks!"
1634,1512549273.000213,Jami,"<@Tari> do you see some high resource usage on your system (CPU, RAM, IO) ?"
1634,1512549289.000316,Tari,"no; I used `# netstat -anpl | wc -l` to see tcp connections. some 300-500 counts.; ```
# uptime
 16:36:34 up 474 days,  1:13,  7 users,  load average: 2.71, 1.92, 2.17
```; and something like this:
```
# top
  PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND
11450 works     20   0 1627m 498m  14m R 98.9  3.1   2:14.78 grunt
 4035 works     20   0 6748m 1.7g  16m S 88.3 11.2  13:44.59 java
```
but it seems natural in my server.  we have 4 cpu cores."
1634,1512549530.00027,Jami,is is a shared or a dedicated server ?
1634,1512549577.000017,Tari,It is a cloud server. <https://www.aliyun.com/>
1634,1512549859.000218,Jami,can you run sudo iotop -a on your server ?
1634,1512549875.000192,Tari,yep
1634,1512549903.0003,Jami,"maybe the two processes compete for the IO resources, otherwise I don't see why they would slow down each other; you can also do a curl from the server (localhost) to see if it is slow as well"
1634,1512550022.000175,Tari,"we run ssh between cloud servers and it is fast. Only when we do remote ssh, or access https service in browsers, it is slow.; and if we stop the clojure(java) process that runs `jetty`, it recovers.; Does that mean `jetty` do a lot of io that slows down the server?"
1634,1512550635.000002,Jami,"it can be jetty or the JVM. One of them can take too much memory/IO and exceed your cloud provider quotas; try to use an alternative to see if it changes something: <https://github.com/ztellman/aleph> <http://www.http-kit.org/>; if you use ring/compojure, they can be used as drop-out replacements"
1634,1512551317.000054,Tari,<@Jami> Thank you very much.
1635,1512559352.000365,Marcos,"In my project
`ring-middleware-format:jar:0.7.2` imports `org.clojure:tools.reader:jar:1.0.5`
And
`immutant:jar:2.1.9`'s dependency tries to import `org.clojure:tools.reader:jar:0.10.0` which is omitted for conflict
What to do in such situation? Can bad things happen due to omit of this dependency?"
1635,1512560585.000183,Jodie,"<@Marcos> There's very little you can do. The bad thing that can happen, will only happen is tools.reader changes it's API between 0.10 and 1.0.5. Rich has firmly committed to not breaking APIs, ever. And I suspect org.clojure/tools.reader will follow this pattern."
1635,1512560682.000391,Marcos,"<@Jodie>, thanks!; Okay, also. In project I have dependency `[clj-time ""0.14.2""]` and `ring:ring:jar:1.6.3` want `clj-time:clj-time:jar:0.11.0`. what to do here? I should use `clj-time 0.11.0`?"
1635,1512561859.000157,Jodie,<@Marcos> I _personally_ tend to use latest as much as possible. I've not had an issue doing this.
1635,1512561866.000131,Shameka,"<@Marcos> whatever works - i tend to try the later dependency first and exclude the earlier on the presumption that the later version will have bugfixes, but occasionally you have to do it the other way around and occasionally you are stuffed and have to go make PRs for some of your dependencies"
1635,1512561949.000268,Marcos,"But I think, what there maybe api changes between 0.14.2 and 0.11.0 versions.; Here is clj-time changelog <https://github.com/clj-time/clj-time/blob/master/ChangeLog.md>
I didnt see any api change mentions; So Ill use 0.14.2; Thanks, <@Shameka> <@Jodie>"
1635,1512562934.000075,Lisabeth,"I need process it, eg:add avg etc... Probably because I have just started. Thanks for you’re help, I have solved the problem, and I known the Cheshire project.:+1:"
1636,1512563773.00003,Isabell,"hello, does anybody here is aware of a currently maintained libray like prismatic.plumbing (specially its graph related facilities) ?"
1636,1512564089.000277,Jami,<@Isabell> you have <https://github.com/aysylu/loom> and <https://github.com/Engelberg/ubergraph>
1636,1512564132.000312,Isabell,<@Jami> thank you! i will look at those
1637,1512568074.000499,Jone,Can anyone recommend a Clojure library for calling into an external C library?
1637,1512570662.000075,Sonny,Clojure can use Java JNI to call native code
1638,1512572137.000558,Glory,"So there are quite a few a ways to approach writing more reliable, evolvable software.

* specifications: schema, spec
* doc enhancers like literate programming (marginalia) and interactive viewers (klipse, Dynadoc)

I think each has a set of trade offs. Has anyone written about this subject at a meta level. I think spec does a great job of allowing a user to add more reliability as it becomes more important. But i think growing software has to do with building a human narrative about a system, which, i think is worth creating non code documentation to create. I would like to see a tool which creates a narrative about a system, and can leverage existing ways of communicating: spec, unit tests, doc strings… and also grow and be viewed in different ways as the system evolves. Does anyone know of anyone interested in this, or any works on this subject?"
1637,1512573133.000486,Sandy,"<@Jone> I'd recommend JNA, it's super seamless with Clojure; (.invoke (Library/getFunction ""libc"" ""sin"") [0.42]); That's about the extent of the psudeocode you need with JNA"
1637,1512573241.000233,Weston,"jni is much faster tho (last time I used it, few years back)"
1637,1512573339.000432,Sandy,"<@Weston> define ""much faster"" :slightly_smiling_face:"
1637,1512573360.00023,Weston,"in my case it was an order of magnitude faster; I was interacting with a lib related to rf cavity simulation, so quite fast internally"
1637,1512573499.000363,Sandy,"As always the problem is:
* JNA gives you almost instant access to C libs a a slight perf cost (we're talking about 10x slower over the cost of a function call, that's not much)
* JNI gives you near native function call speeds, but you have to write/generate/maintain a wrapper and all the associated build code"
1637,1512573501.000019,Weston,"but jni requires more ceremony for sure, I had to write some java on the side and then call from clojure; exactly as you said; not sure what you mean about the build code, a simple lein file was good enough, I had the java wrapper and the clojure code living in the same project, with the .dll (windows... *sigh*) in question (I guess it works the same with .so files)"
1637,1512573969.00078,Jone,"<@Sonny> Thank you. I was hoping for a more painless way though as I am going to use a C/C++ library with a lot of functions. I already started wrapping it in C, Java and Clojure but it is not much fun.
<@Sandy> Thank you for the suggestion. I guess that is as good as it gets right now in the general case. Could not find any maintained pure Clojure libraries. I am actually the author of clj-native and the bits in Leiningen that link native libraries into projects. But I abandoned that years ago because I stopped doing Clojure development and now I don’t like that declarative approach any more so I am not going to revive it.
For my particular need though (LLVM) I did find this, which seems to work out of the box with Clojure. Very nice! <https://github.com/bytedeco/javacpp-presets/tree/master/llvm>"
1639,1512575458.000125,Guillermo,"I've used JNR successfully, and it claims to be close to JNI, but still high-level."
1639,1512576240.000392,Fe,"When using the new `clojure` cli tool, is there a way to pick a clojure version from the command line?; Using a `deps.edn` with `{:deps {org.clojure/clojure {:mvn/version ""1.9.0-RC2""}}}` works, but I'm wondering if there's a cli switch"
1639,1512576312.000617,Kareen,you can use aliases in deps.edn and then pick which clj version to use by picking a different alias
1639,1512577961.000224,Fe,<@Kareen> but no way to pick the clojure version from the command line *without* a deps.edn?
1640,1512577976.000657,Kareen,what do you mean?
1639,1512577977.000612,Kareen,no
1639,1512577978.000843,Fe,sorry
1639,1512577980.000025,Kareen,not without; afaik
1639,1512577995.000115,Fe,I think that would be a useful feature (boot can do it); especially given the intended use case of playing around with code from the repl; which version does it pick anyway - is it hardcoded to 1.8.0?
1639,1512578082.000675,Kareen,yes
1639,1512578187.000422,Sonny,"no; nothing is hardcoded; please see the reference page for more details <https://clojure.org/reference/deps_and_cli>; there are a series of configuration files that are combined - the default is defined in the installation deps.edn; if you wanted to, you could define a set of aliases in your config-level deps.edn (usually in ~/.clojure/deps.edn) - then you could use them from anywhere by specifying them at the command line; ```{:aliases {
   :1.7 {:override-deps {org.clojure/clojure ""1.7.0""}}
   :1.8 {:override-deps {org.clojure/clojure ""1.8.0""}}
   :1.9 {:override-deps {org.clojure/clojure ""1.9.0-RC2""}}
}}```; then do `clj -R:1.7` / `clj -R:1.8` / `clj -R:1.9`; or I guess, nothing is hardcoded *in the tool*. The installation files do hardcode the default version.; also btw, there is a <#C6QH853H8|tools-deps> room where I watch for questions on this stuff"
1639,1512578576.000015,Fe,"<@Sonny> cool, I'll move it over there then"
1641,1512583082.00011,Domingo,<http://clojurians-log.clojureverse.org|clojurians-log.clojureverse.org> seems to have stopped logging about a month (2017-11-16) ago. Is this expected?
1642,1512587572.000671,Daniell,<@Jasmine> is the person to ask about that I believe?
1642,1512587888.000373,Guillermo,"<@Crystal> instrument's argument needs backtick not single quote; That way you are instrumenting user/myinc not myinc; ```
`myinc not 'myinc
```"
1642,1512588322.000026,Crystal,"oh, didn't know that. But tried now by reloading the whole code in the REPL with backtick, still no instrumentation...; (st/instrument `myinc); I must be doing some silly basic mistake, since I'm the only one having this problem :slightly_smiling_face:; The return value from instrument is `[]`, is that correct?; I think I figured it out now, the backtick was  the solution, I just had some issues referencing vars correctly in repl ns. Thanks so much, <@Guillermo>!"
1643,1512595749.000243,Cecile,"Wow, that is troubling. Does anyone know who maintains that?"
1643,1512596077.000381,Berry,"this seems true in practice, but is it guaranteed that the `name` function, when applied to a qualified keyword, always strips off the namespace, so that (name ::foo/bar) is always equiv to (name :bar) and always equiv to ""bar"" ?"
1643,1512596200.000559,Daniell,"<@Berry> Given the docstrings for `name` and `keyword`, I'd say yes...; ```clojure.core/name
([x])
  Returns the name String of a string, symbol or keyword.
clojure.core/keyword
([name] [ns name])
  Returns a Keyword with the given namespace and name.  Do not use :
  in the keyword strings, it will be added automatically.```; and ```clojure.core/namespace
([x])
  Returns the namespace String of a symbol or keyword, or nil if not present.```; They are consistent about what they called ""name"" and what they call ""namespace""."
1644,1512597651.000708,Kristan,"If I `partition` over a sequence, and the 'n' I'm using is larger than the size of the sequence, partition returns an empty list.
```
(partition 100 (range 10)) =&gt; ()
```
I can see how that's important if you're expecting your groups to be a fixed size, but is there a similar function that returns any remainders?; I wanted the return to be:
```
((0 1 2 3 4 5 6 7 8 9))
```; Ah, there's actually a comment from Rich Hickey on this: <https://groups.google.com/forum/#!msg/clojure/ZK0zRhAjeJ8/4sM2tDz4_iAJ>
""The current logic pushes the onus on the producer of the data, where it 
belongs, rather then the consumer.""
I'll go with that."
1644,1512598039.000069,Guillermo,"see `partition-all`; there are other arguments to `partition` that can help, too."
1644,1512598519.00038,Lavenia,"<@Kristan> you can get the behavior you want by providing an empty padding collection. You need to specify a step size to satisfy the arity, so it'd be `(partition 100 100 [] (range 10))`"
1644,1512598555.000526,Wilda,Is there an idiomatic/performant way to select a random element from a hash-set? (rand-nth (seq set-value)) doesn't feel right.
1645,1512598687.000246,Marcos,"Hi all. I want to write function to get data with `(require '[korma.core :as kc])`.
```(defn get-message*
  ([query] (kc/select message (kc/where query)))
  ([query &amp; fields] (kc/select message (kc/where query) (apply kc/fields fields))))```
It looks ok, but. select is a macro and it want to use it like this:
```(kc/select message (kc/where query) (kc/fields field1 field2))```
And as result it breaks here: `(apply kc/fields fields)`. 
How to deal with this?"
1644,1512598741.000274,Margaret,"to generate a call to a macro, you usually need to create another macro"
1644,1512598767.000059,Marcos,"Yeah, I thought about macro-apply. Is there one? I dunno how to write it"
1644,1512598793.000138,Margaret,"```
`(kc/select ~message (kc/where ~query) (kc/fields ~@fields))
```"
1644,1512598799.00038,Marcos,ah
1644,1512598800.000258,Margaret,"no, but there is ~@"
1644,1512598813.000263,Marcos,"Yeah, I forgot about ~@.; Cool! Thanks, <@Margaret>"
1644,1512598846.00021,Margaret,just remember that to do a multi-arity macro you need to make a macro that expands to another call to the macro; you can’t just call it the normal way
1644,1512598866.000653,Marcos,"Okay, thanks"
1644,1512598918.000435,Margaret,"oh, looking again, I probably did `message` wrong there"
1644,1512598934.000072,Marcos,"Yeah, I noticed; Also. How I should to eval this? Call eval?"
1644,1512598971.00024,Margaret,oh - right - to do this with runtime generated data…
1644,1512599010.000012,Marcos,"```(defn get-message*
  ([query] (kc/select message (kc/where query)))
  ([query &amp; fields] (eval `(kc/select message (kc/where ~query) (kc/fields ~@fields)))))
```"
1644,1512599018.000431,Margaret,"ideally you can find a version of this that doesn’t require macros on runtime generated collections, but if that’s the best option all things considered yeah you end up with eval"
1644,1512599060.000283,Marcos,I also can create raw sql query without macros.. Ill think about this later
1644,1512599773.000444,Wilda,Is there an idiomatic/performant way to select a random element from a hash-set? (rand-nth (seq set-value)) doesn't  seem to perform very well. It is about the same as shuffling a seq and taking the first element.; It feels like there should be a much faster way of doing this.
1644,1512600176.00032,Daniell,"<@Marcos> Another option is to stop using Korma (it's no longer maintained, is it?) and use HoneySQL instead with `clojure.java.jdbc` -- HoneySQL is designed to let you compose query fragments together.; <@Wilda> a hash set doesn't implement anything with an O(1) access guarantee, just O(n), so I don't think there's anyway to access those elements except sequentially..."
1644,1512600394.000558,Wilda,"I see, thanks!"
1644,1512600737.000233,Marcos,"<@Daniell>, I like korma for table relationship definitions and as result some features like ""with"". Is there something like korma what is still maintaining ?"
1644,1512600845.000134,Daniell,<@Marcos> I think that whole entity-relationship thing kinda flies in the face of Clojure's raw data approach... I suspect there are ORM-like alternatives to Korma but I doubt any of them are well-maintained: it's just not really idiomatic (IMO).
1644,1512600906.000135,Marcos,"hm.. Okay. <@Daniell>, honeySQL only library what I should consider to use?"
1644,1512601206.000584,Daniell,<https://github.com/jkk/honeysql>; (and then `org.clojure/java.jdbc` for executing the queries -- which you're almost certainly already using under the hood via Korma)
1644,1512601342.000257,Marcos,"yeah, I use jdbc in korma. Very old version of jdbc (0.3.7 instead of last 0.7.3)"
1644,1512601367.000426,Daniell,"Lots of changes since then -- another reason to avoid Korma!; 0.7.3 brings reducible queries, for example!"
1644,1512601422.000268,Marcos,"uhh, I already want to switch to HoneySQL; Okay. Another question, It is still related to korma; ```$ psql testdb
testdb=&gt; \d message
                                         Table ""public.message""
     Column      |           Type           | Collation | Nullable |               Default               
-----------------+--------------------------+-----------+----------+-------------------------------------
/* snipped */
 time_sent       | timestamp with time zone |           | not null | 
/* snipped */

$ lein repl
project.scratch=&gt; (require '[korma.core :as kc]
             #_=&gt;          '[clj-time.core :as t]
             #_=&gt;          '[clj-time.coerce :as tc])
nil

project.scratch=&gt; (let [timestamp (tc/to-sql-date (t/now))
             #_=&gt;       msg {:time_sent timestamp, /* snipped */}]
             #_=&gt;   (println ""Trying to insert: "" (:time_sent msg))
             #_=&gt;   (println ""What is inserted: "" (:time_sent (kc/insert message (kc/values msg)))))
Trying to insert:  #inst ""2017-12-06T22:43:58.074-00:00""
What is inserted:  #inst ""2017-12-06T22:00:00.000000000-00:00""
nil```; Im using postgresql.
Im trying to insert timestamp into table, but I get time without minutes and seconds. Why?; Could it be Korma?"
1644,1512601670.000237,Rebeca,I am  immediately suspicious of /* snipped */
1644,1512601701.000164,Marcos,"Okay, Ill return snipped now"
1644,1512601711.000317,Daniell,I suspect because you're converting it to a SQL Date rather than a timestamp and the JDBC conversion strips the time portion (modulo the TZ adjustment)
1644,1512601715.000035,Rebeca,or where the timestamp is being generated and written
1644,1512601754.000194,Marcos,<@Rebeca> Timestamp generating in let.
1644,1512601771.000293,Rebeca,"yeah, but where is it written to the database?"
1644,1512601801.000085,Marcos,<@Rebeca> last println; `(kc/insert ...`
1644,1512601840.000345,Rebeca,and what does kv/values return?; kc
1644,1512601854.000518,Marcos,"Hm, ill chek it now; <@Rebeca> 
```project.scratch=&gt; (kc/values message {:account_id 3, :dest_account_id 4, :time_sent (tc/to-sql-date (t/now)), :content ""hello""})
{:table ""message"", :name ""message"", :pk :id, :db nil, :transforms (), :prepares (), :fields [], :rel {""account"" #object[clojure.lang.Delay 0x47aa5b5b {:status :pending, :val nil}], ""chat"" #object[clojure.lang.Delay 0x2b69f1d1 {:status :pending, :val nil}]}, :values [{:account_id 3, :dest_account_id 4, :time_sent #inst ""2017-12-06T23:11:24.302-00:00"", :content ""hello""}]}```; It contains not stripped time; <@Daniell>, how can I check this?"
1644,1512602054.00034,Rebeca,<https://github.com/clj-time/clj-time/blob/master/src/clj_time/coerce.clj#L54>; <@Daniell> is right of course; <https://github.com/clj-time/clj-time/blob/master/src/clj_time/coerce.clj#L85-L89>
1644,1512602095.000153,Daniell,FWIW <@Marcos> We use `tc/to-date` rather than `tc/to-sql-date` in our code.
1644,1512602116.000536,Rebeca,<https://docs.oracle.com/javase/7/docs/api/java/sql/Date.html>
1644,1512602198.000456,Marcos,"<@Daniell> with to-date it throws an error
```project.scratch=&gt; (kc/insert message (kc/values {:account_id 3, :dest_account_id 4, :time_sent (tc/to-date (t/now)), :content ""hello""}))```
`PSQLException Can't infer the SQL type to use for an instance of java.util.Date. Use setObject() with an explicit Types value to specify the type to use.  org.postgresql.jdbc2.AbstractJdbc2Statement.setObject (AbstractJdbc2Statement.java:1934)`"
1644,1512602213.000198,Daniell,(but then we have our app servers and DB servers all set to UTC and our MySQL DB configured to run in UTC as well -- pretty much the only sane setup!); Seriously? The PostgreSQL JDBC driver can't convert from a Java Date to a timestamp with time zone? Wow...
1644,1512602264.000273,Marcos,=-(
1644,1512602296.00049,Daniell,Then try `tc/to-sql-time` which will produce a `java.sql.Timestamp` instead...
1644,1512602447.00009,Marcos,"Hurray. this works. 
_btw, it was very dumb to confuse with to-sql-date and to-sql-time_; thx <@Daniell> and <@Rebeca>"
1644,1512602502.000246,Daniell,"Nah, not dumb. Java's various dates and date/times are ... peculiar and annoying."
1646,1512607785.000104,Micha,"<@Wilda> If you knew in advance that you wanted to generate random elements from the _same_ set many times, you could improve performance by creating a vector of the set elements one time, then calling rand-nth on that vector many times.  That doesn't improve performance if you only want to do it once per set, though."
1646,1512612838.000081,Lisabeth,"I send message lost yesterday:cry:. I’m beginner  and I just start use idea tool, thanks for your help, I will learn it."
1647,1512615462.000124,Shira,Is there going to be a state of Clojure survey this year?
1648,1512618848.000048,Sonny,"Yeah, we may slip into the new year. Kind of focused on 1.9"
1649,1512625593.000046,Berry,"`(swap! some-atom func)`

suppose func decides to throw an exception (i.e. it can't do the update), what is the proper way to signal this ?"
1649,1512643721.000261,Beulah,<@Berry> throw the exception
1650,1512649714.000272,Jena,"i'm using an agent to queue tasks, and want to wait on the task to complete, what is the proper way to do this?; i'm now using this: ```(let [p (promise)
      a (agent 0)
      task-fn (fn [x] (let [new-val (inc x)]
                       (deliver p new-val)
                       new-val))]
  (send a task-fn)
 @p)```; but this delivers the promise before the task fn completes, so it not completely waterproof; in theory, it could happen that `(not= @p  @a)`"
1650,1512650197.000114,Rosia,<@Jena> you can't make waterproof assumptions on an agent deref
1650,1512650247.000307,Jami,<@Jena> could you use core.async for this case ?
1651,1512651609.000402,Sonny,Use `await` or `await-for`
1650,1512652434.000284,Jena,"i only need to wait until the submitted task completes, with await it would wait for all dispatched tasks; maybe an agent is not the right solution for my problem, i'll think about it; Found a solution: i can add watch, and pass the delayed deliver to it. As watches are called after the state is updated, this ensures that once the promise is delivered, the task has updated the agent state; ```(let [p (promise)
      a (add-watch (agent {:x 0}) :force-deliver (fn [_ _ _ new-val] (force (:delayed-deliver new-val))))
      task-fn (fn [{:keys [x]}]
                (let [new-val (inc x)]
                  {:x new-val
                   :delayed-deliver (delay (deliver p new-val))}))]
  (send a task-fn)
  [@p @a])```"
1650,1512653703.000114,Rosia,that doesn't guaranteed the state has not been updated by another task meanwhile
1650,1512653712.000361,Jena,"true, but thats acceptable for my use case"
1652,1512658657.00013,Rosia,"I would like some advice about bytecode generation.
I have a java class with a public primitive int field I want to assign with `set!`, however I can't manage to get rid of intermediate boxing no matter what I hint.
The decompiled bytecode for assignment is always something like :
```
((TheClass)the_instance).the_field = RT.intCast((Number)Numbers.num(value));
```
This looks suboptimal, I'm not sure the runtime is clever enough to bypass this kind of stuff. Am I missing something ?"
1652,1512659421.000734,Kareen,you'll have to show us the code that's producing that
1653,1512659626.000431,Xavier,"<@Marcos> you probably solved it already, but take a look at `select*` instead of `select`, it returns a query object that can easily be composed later"
1652,1512659645.000257,Xavier,"and then realized with `exec`; ```(select tbl
  (where conditions)
  (fields ...))```

```(-&gt; (select* tbl)
    (where conditions)
    (fields ...))
```; you can put parts of queries in functions
```
(defn where-thing-active
  [query]
  (where query ({:expires [&gt; (sqlfn :now)]
                 :deleted [= nil]})))
```

and then compose them easily like

```(-&gt; (my-base-select)
      (where {:user_id user-id})
      (cond-&gt; only-active? where-thing-active
              type (where {:type (-&gt; type name upper-case)}))
      exec))```"
1652,1512659875.000501,Marcos,"<@Xavier>, thanks!"
1652,1512660766.000595,Rosia,"here is a minimal example
<https://gist.github.com/leonoel/b7e8e4b93e7d14fcbdd3fbdac4921223>"
1654,1512660923.00041,Kareen,use unchecked-inc-int
1654,1512660991.000157,Rosia,"```
Integer var10002 = Numbers.unchecked_int_inc(RT.intCast(0L));
var10000.field = RT.intCast((Number)var10002);
```"
1654,1512661208.000594,Kareen,`(set! *unchecked-math* true)` and `(unchecked-inc-int (int 0))`
1654,1512661330.000423,Rosia,"```
Integer var10002 = Numbers.unchecked_int_inc((int)0L);
var10000.field = 
RT.uncheckedIntCast((Number)var10002);
```; no warnings"
1654,1512661406.000903,Kareen,that's not the code in your gist; `(def ^:const your-var (unchecked-inc-int (int 0)))` is the closest you'll get; you can't store primitive values in a var; so that will box to Integer and unbox
1654,1512661526.000604,Rosia,"that's not what I want to do; what I want is to perform arithmetic operations on a primitive instance field and avoid boxing. Local bindings only, no vars involved"
1654,1512661901.000478,Kareen,"right I see what you mean; doesn't seem to be possible ATM. I'll take a look at the compiler this evening, should be an easy fix"
1654,1512661984.000594,Rosia,great; thank you for your time anyway
1654,1512662021.000377,Kareen,I suspect this might be a regression since I assumed it would work
1654,1512664770.000832,Sandy,"I've been using HugSQL lately, <https://www.hugsql.org/>"
1655,1512664796.000466,Sandy,"Kindof the best of all worlds, imo. The more you try to make SQL act like Clojure or any other languge, the more pain you're going to have; better to use SQL for what its good for (Querying data) and Clojure for what it's good for."
1656,1512669349.0003,Shavonda,"I have a directory of files from a jar I'm using and I want to do some filtering before reading them. I would like to do:
```
(file-seq (io/resource ""com/thejar/foo-directory""))
```
but I cannot because of a `ClassCastException java.net.URL cannot be cast to java.io.File`"
1656,1512669467.000392,Margaret,things inside jars are not files; but io/resource should be returning a file url if the jar was extracted to disk; you can get a seq on the resources inside a jar if you prefer not to extract - just remember that File is never the general or abstract thing in the jvm - it’s specifically and only for entries in file systems
1656,1512669775.000513,Shavonda,"<@Margaret> it looks like i can do something like `(io/file (.getPath (io/resource ...)))`, yeah?"
1656,1512669790.000723,Margaret,if it’s a file - but only if that file has been extracted to disk
1656,1512669798.000717,Shavonda,indeed it is
1656,1512669804.000411,Margaret,:thumbsup:
1656,1512669804.000833,Shavonda,otherwise i would need to openConnection or something on it right?
1656,1512669902.000426,Margaret,"<@Shavonda> I don’t know how you’d get that error if it was on disk though; no, resource returns resource urls inside jars for things that are not extracted; ```user=&gt; (<http://clojure.java.io/resource|clojure.java.io/resource> ""config/development.clj"")
#object[java.net.URL 0x74a744e9 ""file:/Users/justin/sprinklr/peregrine/resources/config/development.clj""]
user=&gt; (<http://clojure.java.io/file|clojure.java.io/file> (<http://clojure.java.io/resource|clojure.java.io/resource> ""config/development.clj""))
#object[java.io.File 0x6cb513bc ""/Users/justin/sprinklr/peregrine/resources/config/development.clj""]``` - no error, because it is actually on disk; that error should mean that the url points to a thing inside a jar, which you can’t make a File out of"
1656,1512670009.000593,Shavonda,"```
user=&gt; (io/resource ""models"")
#object[java.net.URL 0x7f165eee ""jar:file:/Users/me/.m2/repository/com/amazonaws/aws-java-sdk-models/1.11.244/aws-java-sdk-models-1.11.244.jar!/models""]
```; This is a directory containing a bunch of model files which I would like to iterate over"
1656,1512670027.000028,Margaret,"see, that’s something inside a jar"
1656,1512670054.00016,Shavonda,"ah my bad, i saw `file:` and missed the `jar:file:`"
1656,1512670054.000499,Margaret,"that’s what the ! there means; replicating your error: ```user=&gt; (<http://clojure.java.io/resource|clojure.java.io/resource> ""clojure/core.clj"")
#object[java.net.URL 0x3d6b1a48 ""jar:file:/Users/justin/.m2/repository/org/clojure/clojure/1.8.0/clojure-1.8.0.jar!/clojure/core.clj""]
user=&gt; (<http://clojure.java.io/file|clojure.java.io/file> (<http://clojure.java.io/resource|clojure.java.io/resource> ""clojure/core.clj""))

IllegalArgumentException Not a file: jar:file:/Users/justin/.m2/repository/org/clojure/clojure/1.8.0/clojure-1.8.0.jar!/clojure/core.clj  <http://clojure.java.io/fn--9416|clojure.java.io/fn--9416> (io.clj:61)```"
1656,1512670091.000433,Shavonda,"so, question is: how can I extract that stuff so I can work with it like a collection of files?"
1656,1512670107.000122,Margaret,"by unzipping the jar (it’s a zip file) or iterating resources instead of files; you can do everything you want on resources, you just can’t tell the jvm they are files, because they aren’t"
1656,1512670185.000674,Shavonda,What do you mean by iterate resources?
1656,1512670218.000322,Margaret,"I mean, instead of using file-seq get an iterator on the resources; <@Shavonda> - this should be a decent start ```user=&gt; (.getResources (.getContextClassLoader (Thread/currentThread)) ""clojure"")
#object[sun.misc.CompoundEnumeration 0x77c12409 ""sun.misc.CompoundEnumeration@77c12409""]
user=&gt; (def es (enumeration-seq *1))
#'user/es
user=&gt; (count es)
22
user=&gt; (first es)
#object[java.net.URL 0x6be8723d ""jar:file:/Users/justin/.m2/repository/org/clojure/tools.logging/0.3.1/tools.logging-0.3.1.jar!/clojure""]```; this is based on some quick googling about java, plus looking at the source for <http://clojure.java.io/resource|clojure.java.io/resource>"
1656,1512670504.000505,Shavonda,"<@Margaret> much obliged. i've been using clojure for a good long while and never have used `enumeration-seq`; thanks!; unfortunately there looks to be no way to do what i actually want to do, however, which is iterate over the files found in the directory named ""clojure"" without knowing their names; so i suspect ill need to find the jarfile on disk, unzip it to a temp dir, and read from there"
1656,1512671255.000679,Margaret,hmm… I know there’s a way to do it. I’ll check if I can make a simple example.
1656,1512671360.00076,Shavonda,<@Margaret> I was just peeking at <https://docs.oracle.com/javase/7/docs/api/java/net/JarURLConnection.html#getManifest()> but no dice so far
1656,1512672591.000456,Margaret,"<@Shavonda> I decided I need to know how to do this - here’s the result ```user=&gt; (ir/zip-seq ""/Users/justin/.m2/repository/org/clojure/tools.logging/0.3.1/tools.logging-0.3.1.jar"")
(#object[java.util.zip.ZipEntry 0x78ffe63f ""META-INF/""] #object[java.util.zip.ZipEntry 0x49f430fe ""META-INF/MANIFEST.MF""] #object[java.util.zip.ZipEntry 0x5c01b068 ""clojure/""] #object[java.util.zip.ZipEntry 0x1b63e89b ""clojure/tools/""] #object[java.util.zip.ZipEntry 0x1c2a3bd6 ""clojure/tools/logging/""] #object[java.util.zip.ZipEntry 0x74b19b6d ""clojure/tools/logging.clj""] #object[java.util.zip.ZipEntry 0x25e2e763 ""clojure/tools/logging/impl.clj""] #object[java.util.zip.ZipEntry 0x21c1e474 ""META-INF/maven/""] #object[java.util.zip.ZipEntry 0x6cf88f11 ""META-INF/maven/org.clojure/""] #object[java.util.zip.ZipEntry 0x146a1b10 ""META-INF/maven/org.clojure/tools.logging/""] #object[java.util.zip.ZipEntry 0x26012f01 ""META-INF/maven/org.clojure/tools.logging/pom.xml""] #object[java.util.zip.ZipEntry 0x84d8df1 ""META-INF/maven/org.clojure/tools.logging/pom.properties""])```; <@Shavonda> code : ```(ns org.noisesmith.iterate-resources
  (:import (java.util.zip ZipFile)))

(defn zip-seq
  [file]
  (let [zip (ZipFile. file)
        entries (enumeration-seq (.entries zip))]
    (mapv #(.getInputStream zip %) entries)))```"
1656,1512672834.000509,Shavonda,"<@Margaret> i was trying to get clever by resolving the jarfile through the resource and opening it with openStream, then using ZipInputStream to getNextEntry, but that failed :disappointed:; gonna try yours out"
1656,1512672890.000795,Margaret,I just changed it to return input-streams… but really the best might be a hash-map from entry name to function that returns input stream(?); are you trying to use ~ ?
1656,1512672982.000838,Shavonda,"no, i was still trying to grab the path to the jar via the resource and there must be something off with that path; gonna compare them; ha! there was a trailing `$1` OOPS"
1656,1512673412.000268,Margaret,"<@Shavonda> this was fun to play with from first principles, but this might just do what you want <https://stackoverflow.com/a/5419767> - it’s better than my example above in a few ways; that link is to a specific answer"
1657,1512674082.000318,Sonny,"This is not correct. The docstring says “Blocks the current thread (indefinitely!) until all actions dispatched thus far, **from this thread or agent**, to the agent(s) have occurred.”"
1656,1512674113.000071,Sonny,unless you really want this single task
1657,1512674191.000459,Sonny,"in which case, agents are probably not a great solution. Just use a `future` and wait for it to finish.; FileSystem is an abstraction and you could create one that worked directly on a zip/jar file as if it were files (like the demo at <https://docs.oracle.com/javase/7/docs/technotes/guides/io/fsp/zipfilesystemprovider.html>). Not sure that helps you here though… :)"
1656,1512674928.000072,Margaret,"ha, fair enough"
1658,1512676204.00031,Jodie,"Using schema, is it possible to validate against 2 keys, that one of those keys is valid?

For example validate that password-confirm is the same as password, and if they're not, error password-confirm.; The key thing is really the error location."
1658,1512676263.000438,Margaret,"if you mean plumatic/schema yeah I typically use schema/conditional for that - or more specifically constrained eg. `(s/constrained {:pw String :pw-c String} #(= (:pw %) (:pw-c %)))`; that way if the keys are missing, you get a simple error - also, if you use a named function the error will show the name of the function if the function is what fails"
1659,1512682467.000386,Willow,does anyone know of a good datomic docker image? first foray fo rme
1659,1512682629.000056,Jena,"yeah, agents are not ideal, but i need to execute the tasks sequentially, one at a time, so futures will not do"
1660,1512683684.00067,Sonny,"if you’re only executing tasks one at a time and waiting for them to finish, then why are you using concurrency features at all?"
1658,1512684152.000229,Jodie,<@Margaret> but where does the error message end up in the resulting map? The locations are being used programmatically to communicate error messages. So I would want to result to be: `{:pw-c (not (…))}`
1658,1512684407.000466,Margaret,"<@Jodie> I like how it does it ```user=&gt; (require '[schema.core :as s])
nil
user=&gt; (defn a=b [x] (= (:a x) (:b x)))
#'user/a=b
user=&gt; (def a=b-schema (s/constrained {:a Number :b Number} a=b))
#'user/a=b-schema
user=&gt; (s/check a=b-schema {:a 1 :b 1})
nil
user=&gt; (s/check a=b-schema {:a 1 :b 0})
(not (user/a=b {:a 1, :b 0}))
user=&gt; (s/check a=b-schema {:a 1})
{:b missing-required-key}
user=&gt; (s/check a=b-schema {})
{:a missing-required-key, :b missing-required-key}```; `(not (user/a=b {:a 1, :b 0}))` is as direct as it can get - since the arg was an arbitrary function; and without an arbitrary function I don’t know how to check two keys at once"
1658,1512684522.000397,Jodie,"<@Margaret> Yeah, I explicitly need it to be under `:b` unfortunately, just due to a downstream consumer."
1658,1512684550.000154,Margaret,a custom reify of the apropriate schema protocol just to generate the message / return value it wants?
1661,1512684584.000543,Ezequiel,Hi ! I'm starting a bunch of futures and I'd like to block the main thread until all of them are finished. Is there a way to do that cleanly ?
1658,1512684592.000295,Margaret,"or something that checks :b explicitly, using the value under :a as a second input?; <@Ezequiel> (doseq [f futures] @f) will do that; (and return nil once all have returned)"
1658,1512684653.000225,Jodie,"I started poking around the protocol, but I couldn't see how to do it unfortunately. Maybe I need to look at that more closely.; I was hoping somebody might have figured it out."
1658,1512684785.000256,Margaret,"<@Jodie> what about something like `(let [to-check m] (s/check {:b (s/pred (fn [b] (= b (:a m))))} m))`; the error message isn’t as nice, but it shows up under the b key"
1658,1512684872.000124,Jodie,I could hack it with a dynamic var or something :joy: Which is not a style I'm usually keen on.
1661,1512686024.00031,Jena,"to have the choice to wait for task completion, or to fire-and-forget; to give you some context, i'm trying to solve this issue <https://github.com/vvvvalvalval/datomock/issues/2>"
1661,1512686251.000119,Jodie,"I suppose with a custom schema on the parent, the dynamic var becomes far more isolated."
1661,1512687213.000462,Raul,"what's the best way to select a couple values from a sorted-map in the order that they're stored in the map? (i.e. `(unknown-fn (sorted-map :1 ""1"" :2 ""2"" :3 ""3"") [:2 :1]) ==&gt; [""1"" ""2""])`)"
1661,1512687276.000097,Margaret,"<@Raul> as an aside, the reader in clj lets you create the keyword `:1` but it’s evil and the docs say it isn’t valid and some readers reject it; you are allowed to use `1` as a key"
1661,1512687323.000553,Raul,"good to know. Those aren't my real keys or values, just something I could use as an example to help people see the ordering"
1661,1512687327.000221,Margaret,<@Raul> wouldn’t select-keys do that?; OK
1661,1512687357.000011,Raul,"select-keys uses `ret {}` to put it's values into, so I don't think it keeps the order of a sorted map?"
1661,1512687366.000063,Margaret,"oh, right; `(fn [m ks] (into (empty m) (select-keys m ks))` - I’ll leave the fancy name up to you; I don’t know of a better option"
1661,1512687523.000274,Raul,"<@Margaret> ```((fn [m ks] (into (empty m) (select-keys m ks))) (sorted-map 3 ""3"" 1 ""1"" 2 ""2"") [1 3])``` returns ```{1 ""1"", 3 ""3""}```, which 1.) still includes the keys (easy fix) and 2.) isn't in the same order as the original sorted-map"
1661,1512687534.000055,Margaret,"except maybe rewriting select-keys to use `(empty map)`; wait, that sorted map literal is not the same order as the sorted-map"
1661,1512687569.000134,Raul,"actually no, that's fine"
1661,1512687571.00021,Margaret,"maybe you want something different, like an insertion ordered map"
1661,1512687574.000336,Raul,sorted-map doesn't work like I thought it did :smile:
1661,1512687586.000494,Margaret,haha - there’s a lib with an insertion-sorted map out there
1661,1512687588.000455,Raul,"eh...this is small enough, I'm just going to use a vector and iterate over values; (current size of vector: 2, expected size ~5); performance isn't really an issue on that size"
1661,1512687620.000103,Margaret,"also if you use the insertion-ordered one, you can just iterate and filter for the keys you care about since seq would return them in order"
1661,1512687626.000181,Raul,"thanks for the input, <@Margaret>"
1661,1512687630.000338,Margaret,np
1662,1512690365.000352,Berry,"if I need to overwrite ""print"" and ""equality"", is deftype the right way to go ?"
1662,1512690433.00023,Margaret,by print do you mean print-method (what pr uses) or toString (what str and print use)
1662,1512690449.000072,Berry,I wasn't even aware of that distinction.
1662,1512690476.00013,Margaret,"print-method is a multimethod that decides how pr / prn show things - this is used for return values in the repl and is meant to be readable by the reader if possible; this can be extended at any time (like any multimethod); toString is a method on object that is used for str and print / println, and it isn’t meant to be clojure readable, and needs to be defined when defining your class as a method on Object; IIRC while defrecord does give you a nice toString you can override it…"
1662,1512690581.00001,Berry,the XY problem is: I need t define toString/equality on int-array / float-array
1662,1512690587.000047,Margaret,"<@Berry> ```(ins)user=&gt; (defrecord Foo [] Object (toString [this] ""hello""))
user.Foo
(ins)user=&gt; (Foo.)
#user.Foo{}
(ins)user=&gt; (str (Foo.))
""hello""```; oh - well you can’t change arrays but I guess you could make a thing that acts like one with new toString - I think you might need a more powerful tool than deftype for that since deftype can’t do concrete inheretance; so you’d likely need proxy, or gen-class, or some java code"
1662,1512690667.000137,Berry,"I was thinking of creating an object, via deftype, which has one field, the array.; Then, I define print/equality on the deftype ... okay, so technically I'm not overwriting int-array float-array"
1662,1512690684.00009,Margaret,"but you can’t make other people think it’s an array, is the problem"
1662,1512690693.000083,Berry,I'm defining a wrapper around them.
1662,1512690715.000355,Margaret,"right - if you dont’ need to fool a consumer about the type, then that should work OK I think; the trick might be methods on array you can’t extend; or things like aget / aset etc. which… dunno how you would make those work without extending the class itself"
1662,1512690765.000273,Berry,"I'm writing an interpreter, like poor-man's matlab/numpy. These ""virtual rrays"" can only be accessed by interfaces I define."
1662,1512690776.000296,Margaret,oh neverm ind you should be fine then
1662,1512690781.00004,Berry,I think we are loudly agreeing. :slightly_smiling_face:
1663,1512694091.000184,Marcos,Uh. Switching to HoneySQL. Can't find how add RETURNING into query builder. Can anyone help?; Found! <https://github.com/nilenso/honeysql-postgres>
1664,1512733805.000149,Kayleigh,"To scan a whole file system (collecting information about file sizes), is recursively applying `.listFiles` the fastest option available to me? I couldn't immediately work out whether it was based on nio2 which seems to be the lowest level option available in Java? Anecdotally my approach seems orders of magnitude slower than, for example, DaisyDisk (I am on a Mac) which appears (although maybe they have some way of deferring the fetching of individual file information for a folder?) to be able to gather the same information in under 30s. -- digging around in the Java I see `java.nio.file.Files#walkFileTree` and I don't think `.listFiles` is using that so I guess I should start digging there."
1665,1512735703.000374,Lois,"Hello all, how do I convert this? 
```        SSHClient ssh = new SSHClient(); 
        ssh.addHostKeyVerifier( 
                new HostKeyVerifier() { 
                    @Override 
                    public boolean verify(String s, int i, PublicKey publicKey) { 
                        return true; 
                    } 
                }); ```"
1665,1512736180.000281,Kristy,<@Lois> `reify` for `new HostKeyVerifier() { ` which seems the only non-straightforward part
1665,1512736474.000062,Tameka,"how can I do `traverse` in clojure? So I have an array of `[1 2 3 4]` and I’d like to call let’s say `get-user` function, which accepts a user ID and does an http call and then I want to end up with an array of results basically; if I use map, will that hold the computation that happens afterwards, before everything is resolved?"
1665,1512736954.000038,Jami,"<@Tameka> yes, as long as you realize the computation; you could even use <https://clojuredocs.org/clojure.core/pmap>; and use doall to ensure you produce the side effect <https://clojuredocs.org/clojure.core/doall>"
1665,1512737014.000194,Tameka,"gotcha, thank you!; that’s cool :smile:"
1665,1512737735.00012,Kayleigh,Hrmm... even using `hara.io.file.list` which seems to be nio based is glacially slow. I guess apps like DaisyDisk must be using OSX specific apis not available to Java.
1665,1512737890.000164,Joette,"trying to wrap my head around fully qualified keywords, would the following be a valid way to refer to a spec in another namespace: 
```
(ns foo
  (:require [clojure.spec :as s]))
(s/def ::layout-string ...)

(ns bar
  (:require [clojure.spec :as s]))

(s/fdef parse-layout-string
        :args :foo/layout-string
        ...)
```
? (I ask since I’m getting an interesting ‘Call to clojure.core/ns did not conform to spec’ error)"
1665,1512738006.000233,Jami,"yes, ""::"" resolves to your current namespace; but you should put (:require foo) in ns bar"
1665,1512738437.000003,Joette,"<@Jami> thank you!; <@Jami> seems my error was an incompatibility in my dependency chain with clojure 1.9…could be I’m a bit thick here, but I don’t always find those spec error messages entirely easy to grok"
1666,1512739200.000435,Cecilia,they certainly take some getting used to; there is this <https://github.com/bhb/expound>
1665,1512739254.000537,Jami,you can try to make them more readable with <https://github.com/bhb/expound>
1666,1512739518.000225,Joette,"<@Cecilia> <@Jami> thanks for the pointer, I’ll take a look at expound; problem is this was the clojure compiler complaining about code I didn’t write. Not sure it would be possible to force the clojure internal spec conform calls to use expound…"
1666,1512739617.000187,Cecilia,yes it is; <https://github.com/bhb/expound#explain-out>; if that is set then spec uses expound to do it’s error printing
1666,1512739773.000321,Joette,"would it be possible to inject this early enough in the build process so that when clojure checks my transitive dependencies, it would use expound/printer? (I’m using leiningen)"
1666,1512739851.000427,Cecilia,"not sure, haven’t tried it. But you can execute arbitrary code within Leiningen. The problem is though, that if the exception actually does truly happen during dependency resolution then it is kinda too early since spec itself is a dependency; and so is expound; I would be super surprised the problem would surface during dependency resolution though; after dependencies you can execute code via leiningen `:injections`, see example here <https://github.com/technomancy/leiningen/blob/master/sample.project.clj#L182>; argh"
1666,1512739928.000541,Sonny,You could put it in user.clj - thats loaded pretty early
1666,1512739998.000345,Cecilia,"user.clj is another option, that comes later than `:injections` but if that is enough then it would be preferrable."
1666,1512739999.000197,Joette,"I think one of my dependencies was not built to work with clojure 1.9 and fails a few checks when it is, I have solved the issue by upping the dependency to a version which is built for 1.9 so this is somewhat academic for the purposes of my immediate issue, but interesting nevertheless"
1666,1512740023.000309,Cecilia,"right, well that would not break during dependency resolution"
1666,1512740024.000418,Joette,thank you both for the pointers
1666,1512740029.000187,Cecilia,"but more when it gets loaded; so, you have plenty of time to hook expound as spec error printer"
1666,1512740110.000056,Joette,"and here my clojure newbieness shines through a bit. Would not the dependencies be loaded on “first refer” or something, i.e. probably before the code in core.clj etc is executed?"
1666,1512740143.000293,Cecilia,"if your code is not AOT compiled then dependencies etc are loaded when you require them; so, if you add the expound hook into user.clj - which is the very first thing Clojure loads - and there only refer spec and expound then you will get that code executed before another piece of code gets executed which will try to require the offending library"
1666,1512740206.000002,Joette,"which would normally be in the ns block at the top, so the error printer hooking would have to happen before that at least; <@Cecilia> ok, thank you again!"
1666,1512740296.000001,Cecilia,"np, the dynamic nature of Clojure is really powerful, it has a slight drawback of relatively high startup time but in general it’s benefits far outweigh the downsides; you pretty much cannot do stuff like that in most of the languages"
1667,1512742397.000121,Elmira,"It is ok to seek feedback for a library idea here? Its a rather big idea so before releasing anything I and investing too much I want to make sure its not totally wrong!
edit: <https://www.reddit.com/r/Clojure/comments/7if66b/objection_another_component_alternative_is_this_a/>
gh: <https://github.com/riverford/objection>"
1666,1512742454.000684,Cecilia,why wouldn’t it be? :slightly_smiling_face:; tell us about your idea and we’ll evaluate it; I might not have time right now but someone will
1666,1512742530.000296,Elmira,"I've attached a reddit thread/github link :slightly_smiling_face:; Any comments would be greatly appreciated, just so I know whether to invest in it - I have lots of open-source work that I want to do and want to get a feel for whether its worth the risk on this one (as it seems very risky)"
1666,1512742660.000339,Cecilia,"ok, I read the github page; really doesn’t look that different from mount to me; for example, the “lazy construction instead of explicit single start! fn.” is not strictly totally true, you can specify which components you want started with mount when you call it’s start!"
1666,1512742772.000364,Elmira,I've started a thread.
1666,1512742809.000708,Cecilia,"so, I would say that would look great if there were no mount available, since it is however I do not see any real value I would get out of that"
1666,1512742824.000225,Elmira,<@Cecilia> could you paste your stuff here? :slightly_smiling_face:
1666,1512742837.000276,Cecilia,"ah, sorry; Empperi [4:17 PM] 
ok, I read the github page


[4:18] 
really doesn’t look that different from mount to me


[4:18] 
for example, the “lazy construction instead of explicit single start! fn.” is not strictly totally true, you can specify which components you want started with mount when you call it’s start!


[4:20] 
so, I would say that would look great if there were no mount available, since it is however I do not see any real value I would get out of that; so, I wouldn’t say “don’t do it” but as it is now it doesn’t look compelling enough to me to justify a new library; I would prefer seeing some PRs in mount to improve it if you find it lacking; but, I got to go and cannot give you any more relevant feedback. Do not kill your idea based on just what I said :slightly_smiling_face:"
1666,1512743095.00039,Elmira,"I do not use mount, I have looked at it in the past - in fact a lot of this came out of a lack of satisfaction with mount/integrant/component for certain kinds of system.

I do appreciate 'yet another component/mount/bla' alternative, and one of the main reasons why I am apprehensive. I'll adjust the readme a bit to try and help demonstrate why its different, and where the value prop is of this over the others. Thanks for taking the time to give it a look :slightly_smiling_face:"
1666,1512743437.000004,Kareen,looks like clojure 1.9 is out :)
1668,1512743537.000022,Marx,Where?
1666,1512743799.000276,Kareen,<https://github.com/clojure/clojure/releases/tag/clojure-1.9.0>
1668,1512743810.000384,Kareen,"doesn't seem like it's in maven central yet, but it should be soon"
1666,1512744150.000298,Jutta,"` while [[ ""$(curl -s -o/dev/null '<https://mvnrepository.com/artifact/org.clojure/clojure/1.9.0>' -D - | awk '/^HTTP/{ print $2  }')"" -ne ""200"" ]]; do sleep 2; done; echo 🎉;`"
1668,1512745253.00032,Lavenia,"Congrats to the core team -- nice work, y'all :clap:"
1668,1512745658.000541,Elmira,For any that are interested I put a bit more in the readme to attempt to explain things a bit better
1666,1512745843.000617,Jami,:champagne:
1666,1512746446.000637,Dirk,"Cool, also just noticed this: <https://github.com/Homebrew/homebrew-core/pull/21470/files>"
1668,1512746542.000453,Heriberto,But <http://clojure.org|clojure.org> still has nothing about release
1666,1512746738.000265,Joette,"```
$&gt; lein test
Retrieving org/clojure/clojure/1.9.0/clojure-1.9.0.pom from central
Retrieving org/clojure/clojure/1.9.0/clojure-1.9.0.jar from central
```
: )"
1666,1512746867.00043,Kareen,give the core team some time :)
1669,1512756642.000314,Sandy,"<@Elmira> (pinging him here to add him to this thread); The big difference vs mount is that this doesn't use global singletons, which is what I absolutely can't stand about mount.; It looks like objection is a global (singleton) registry of any number of components.; So if you need more than one DB connection you can simply start up and register multiple connections. All components seem to have their own UUIDs keeps components from getting lost, as well as allows for multiple instances of the same component.; <@Elmira> I don't *not* like it, and the more I think about it the more I like it. :slightly_smiling_face:"
1669,1512756862.000468,Margaret,"for recursively looking at the fs, check out `file-seq` - it returns a lazy seq of files; also I would assume DaisyDisk is exploiting your mac’s spotlight cache, or you have a very small file system and the clojure approach was extremely inefficient"
1669,1512758687.000277,Elmira,"Thanks <@Sandy>; Singletons aren't always bad (e.g queue and threadpool used as some internal optimization, no effect on api, want flexibility to change locally) - so I do support them.; Not sure about using them for all state though, so I wanted to make the dynamic/open case the primary one.; I've always been a component/integrant user too, not really used mount - though I tried it a couple of times"
1670,1512759468.000198,Glory,"I have been doing some brain storming on how to make more understandable software. I’m trying to turn those ideas into something actionable, maybe a clojure library. The current idea is to give projects more of a narrative. I wrote up a quick proposal of what this might look like here: <https://github.com/drewverlee/narrative/blob/master/ideas.md>

I welcome any feedback. Thanks"
1669,1512760239.000663,Margaret,"I think good tests read like a commentary track dvd extra for the code - so it should have at least that level of narrative; there’s some interesting ideas here, thanks"
1671,1512761198.000699,Berry,"```

(merge nil {:a 2})
(comment
 {:a 2})

(merge (persistent! (transient nil)) {:a 2})
;; ==&gt; exception


```

is this because transient can't figure out if nil should become {} () [] or #{} ?"
1671,1512761260.000473,Kareen,you can't make a transient out of nil
1671,1512761268.000562,Sandy,so yes; What you want is (transient (empty {:a 2})) or something like that
1671,1512761305.000065,Kareen,"well, thinking that it's because ""transient can't figure out if nil should become [] () [] or #{}"" is a bit of a mis-statement"
1671,1512761361.000124,Sandy,"Right, ""can't create transient from null"" is the technical reason. ""can't figure out if..."" is the reason that it's not fixed"
1671,1512761368.00064,Berry,"the context is that I wrote this function:
```
(defn merge-drop-vEmpty [a b]
  (persistent! 
   (reduce (fn [old [k v]]
             (if (or (= v nil) (= v {})) 
               (dissoc! old k)
               (assoc! old k v)))
           (transient a) b)))
```; and it's a bit weird, since `(merge nil {...})` is fine but `(merge-drop-vEmpty nil {...})` is bad"
1671,1512761415.000618,Sandy,"Well you can do the same, you just need to give it a default if a is nil; (transient (or a {}))"
1671,1512761530.000631,Glory,"Thanks noise, I think good tests can do that too. But that still wouldn't be the same as telling a story about the project ... Or do you disagree? I think this kind of narrative usually gets put in the readme. 

It also just occurred to me that I should be clear the narrative I had in mind is aimed at developing on the project not being a end user... Though you could probably use the same mental framework too construct one towards that end as well."
1671,1512761534.000031,Kareen,"taking this to a thread as this is going to be a bit nit-picky -- the reason why I wouldn't reply ""yes"" to that question is that often people that don't really understand how nil is treated in the clojure stlib think that e.g `(merge nil {1 2})` works is because they think that `nil` can ""act"" as an empty collection of all types, when in reality that's only true in the case of seqs, and accepting that interpretation could be a bit confusing; when the reality is that `merge` and other functions explicitely filter out nils or replace them with the appropriate empty coll, not that they know how to ""interpret nil"" as the correct empty coll"
1671,1512761639.000348,Berry,"<@Kareen>: I see, thanks for the clarification. This is precisely the mental model mistakes I was making."
1672,1512763899.000609,Margaret,"<@Berry> another possible version (not so sure it’s an improvement but it lets me demo transduce) ```(defn merge-drop-vEmpty
  [a b]
  (transduce
   identity
   (fn
     ([] (transient (or a {})))
     ([v] (persistent! v))
     ([old [k v]]
      (if (contains? #{nil {}} v)
        (dissoc! old k)
        (assoc! old k v))))
   b))```; I do like the fact that it has a completing arity instead of needing the completion function to wrap the call; but using identity as an xform makes me think this might be silly; oh wait we could skip a bunch of BS by just using into here, because into already does the transient/persistent! thing for you; hmm…; but you can’t edit the first arg to into"
1673,1512768727.00035,Kareen,<https://dev.clojure.org/jira/browse/CLJ-2282>; feel free to vote
1674,1512769825.000382,Petronila,"I was actually never sure if `(merge nil {:a 1})` working was reliably supported behavior; The doc string does not indicate that it should work; It is fairly annoying to not utilize it though at times; ```
clojure.core/merge
([&amp; maps])
  Returns a map that consists of the rest of the maps conj-ed onto
  the first.  If a key occurs in more than one map, the mapping from
  the latter (left-to-right) will be the mapping in the result.
```"
1674,1512769937.000054,Aldo,"that description seems to imply it shouldn't in fact; because 
```
(conj nil {:a 1})
=&gt; ({:a 1})
(merge nil {:a 1})
=&gt; {:a 1}
```"
1674,1512769975.000469,Guillermo,"it is supported, but yeah it makes somethings difficult"
1674,1512769978.000218,Petronila,<@Aldo> good point
1674,1512770003.000189,Guillermo,"merge uses conj internally, but protects against nil"
1674,1512770011.000464,Petronila,"Just because a fn happens to do some behavior with nil now, doesn’t give me a lot of confidence that I’m not relying on an impl detail; I wish it’d be in the docs for these sorts of edge cases; There are plenty of cases like this though. The `merge` one is just one I’ve wrestled with in my head a few times.; Also, I’m thinking it’d be a pretty harsh change to have `merge` stop supporting this behavior - so not likely to change anymore :stuck_out_tongue:"
1674,1512770098.000326,Guillermo,"core specs will help with this, can almost guarantee it won't go in the docstring; merge supports a couple other surprises, see the last comment in <https://dev.clojure.org/jira/browse/CLJ-1458>"
1674,1512770168.000215,Aldo,I feel like if a spec is added to merge that says (s/nilable m) then a subsequent docstring PR that clarified what happened in the case of nil would prob be accepted
1674,1512770225.000269,Petronila,<@Guillermo> good point on the core.specs. I just took a look over at that (haven’t looked in a while). It still has a lot more functions to cover still right? At least from what I see so far.
1674,1512770297.000152,Guillermo,"It's mostly the main macros right now, <@Sonny> has more stuff pending somewhere, and there are a couple of github users that have their own specs of core"
1674,1512770311.000276,Petronila,ah ok
1674,1512770362.000149,Guillermo,"generally clojure docstrings don't comprehensively specify edge-cases, but <http://clojuredocs.org|clojuredocs.org> or whatever the thing-du-jour is certainly can; ""Someone should"" add an API to third-party clojuredocs and integrate them with tooling"
1674,1512770488.000348,Petronila,"I’m typically ok with that idea; Then other times I have a hard time deciding whether I’m relying on an odd impl detail or not; hah :stuck_out_tongue:; Interesting Jira though, read through the CLJ-1458 one"
1674,1512770739.000281,Micha,"The stricter interpretation you take of the doc strings, the less likely you are to be relying on an odd impl detail.; I know that is still pretty vague advice, but at least in the case of merge, if you never pass it nil, you are safe.  If you do, maybe it could return anything at all or raise an exception in Clojure 1.13; Not saying it is likely, given the backwards compatibility effort Rich et al put into Clojure."
1674,1512770876.000174,Petronila,"<@Micha> yeah, and I’ve found myself a few times being defensive about it out of that sort of worry
```
(update x merge {:a 1}) ; not this
(update x (fnil merge {}) {:a 1}) ; this
```; that sort of thing; I then just start to wonder if it is worth the nil-guarding efforts"
1674,1512770905.00014,Guillermo,"and (generally) the more the docstring promises, the narrower a future path might be"
1674,1512770947.000356,Petronila,"the trade-off, make more verbose code to not rely on things vs hope for the best, but be prepared for potentially more difficult upgrades in the future; and perhaps watch the Jiras carefully and fight for whatever obscure use-case you see that someone is about to break :stuck_out_tongue:; I’m not saying what is right vs wrong here. Just explaining my internal conflict and struggle"
1674,1512771002.000188,Margaret,"<@Petronila> total aside: that update could just use assoc ```=&gt; (assoc nil :a 0)
{:a 0}```"
1674,1512771017.000487,Petronila,"<@Margaret> hah thanks, I didn’t intend to make something realistic"
1674,1512771027.000107,Margaret,that’s what makes it an aside haha
1674,1512771027.00033,Petronila,wasn’t a great example :stuck_out_tongue:
1674,1512771033.000115,Guillermo,(and `nil` in merge is only problematic in the first argument)
1674,1512771058.000193,Margaret,oooh `(fnil merge {} {})` is also valid though
1674,1512771107.000473,Guillermo,What is a spec for `merge`?; at least the :args part; and ignoring the GIGO cases
1674,1512771176.000062,Margaret,"it’s one of my pet clojure style issues, I just had to say something, I compulsively replace calls to merge that use a map literal as a second arg with calls to assoc (or instruct co-workers to do so when doing code reviews)"
1674,1512771524.000155,Deandrea,"seems like `if-not` could just ditch the expansion with `not` i.e.
```
(defmacro if-not
  ([test then] `(if ~test nil ~then))
  ([test then else] `(if ~test ~else ~then)))```; right, it’s just `if` with the args flipped.; minor thing."
1675,1512771726.000023,Kareen,shouldn't m0 be nilable?
1674,1512771734.000461,Guillermo,"nope, that's the GIGO"
1675,1512771750.00018,Deandrea,what is GIGO?
1674,1512771756.000495,Guillermo,garbage in garbage out
1674,1512771761.000172,Kareen,"ah, I thought you were speccing the current behaviour :)"
1675,1512771762.000333,Deandrea,oh god…
1674,1512771789.000223,Deandrea,GIGO is such a punitive perspective.
1674,1512771822.000299,Guillermo,"Ah, you are right <@Kareen>"
1675,1512771858.000161,Kareen,am I? and to think you just convinced me that you were right..
1674,1512771888.000253,Guillermo,"i am definitely wrong, it's 530PM EST on friday."
1674,1512771921.000095,Kareen,TIL `(merge)` works
1675,1512771926.000143,Charity,go home ghadi
1674,1512771933.000247,Guillermo,"(I think I confused myself with the metadata propagation, which only happens when the first arg is not nil); But `:m0` should be `(s/nilable (s/keys))`"
1674,1512771972.000107,Margaret,<@Kareen> the best parge is that `(merge)` returns nil
1674,1512771978.000231,Guillermo,haha yes ^
1675,1512771978.000298,Kareen,yeah haha
1674,1512771991.000456,Kareen,I have a feeling that part is definitely gigo
1674,1512771992.000277,Guillermo,it is a strange implementation; the `some identity` check at the beginning
1674,1512772007.000259,Kareen,and it's not really supposed to work
1675,1512772014.000257,Kareen,oh; ¯\_(ツ)_/¯
1675,1512772039.000298,Deandrea,can someone explain to me what is attractive about the GIGO rationale?
1675,1512772047.000219,Kareen,I'll just write `nil`  as `(merge nil nil nil nil nil)` from now on
1674,1512772048.000168,Deandrea,i’ve always found it punitive.
1674,1512772079.000255,Aldo,"there's nothing particularly attractive about it, it's just reality in a dynamic langauge. spec is moving us towards Garbage In EXCEPTION"
1674,1512772089.000449,Margaret,<@Kareen> merge -&gt; (merge nil nil nil nil) get -&gt; (get get get get)
1674,1512772093.000394,Guillermo,it can be <@Deandrea>... I think spec will _really_ help with that.
1675,1512772109.000385,Kareen,hah
1674,1512772115.000244,Guillermo,"```
user=&gt; (merge [] {})
[{}]
```"
1674,1512772126.000157,Kareen,no matter how many times I see that get over the years it always makes me chuckle
1674,1512772147.000161,Margaret,it’s probably one of my greatest discoveries
1674,1512772157.000254,Kareen,one of many
1675,1512772170.000003,Deandrea,<@Aldo> can you clarify your claim that it’s a “reality in dynamic languages”. it’s not clear to me how typing discipline plays a role here.
1674,1512772187.000351,Deandrea,"<@Guillermo> yes, that is one thing i find attractive about it (spec)."
1674,1512772195.000292,Kareen,somebody should work on a dialect of swearjure that only uses weird stuff like this
1674,1512772213.000345,Margaret,"for those who are unfamiliar ```=&gt; (= get ((get get get get) {get get} get))
true```"
1675,1512772218.000131,Kareen,gigjure
1674,1512772319.00031,Aldo,"well, how would you prevent gigo in clojure? spec! what happens if you don't do something like that? gigo! ie, gigo is just the default case in a dynamic language where data is passed around in structures with uniform interfaces"
1674,1512772369.000359,Deandrea,<@Aldo> that may be true from some cases but that has more to do with the programmer who wrote the source. it’s not inherently a problem in dynamic languages.
1674,1512772395.000008,Aldo,another option would be to sanity check all inputs manually. I'm glad no one took the time to do that seeing as spec exists now and that code would just be noise
1674,1512772438.000247,Deandrea,"<@Aldo> i disagree. `:pre` and `:post` checks, which i use heavily, are useful."
1674,1512772449.000355,Guillermo,but they're super noisy; and slow
1674,1512772459.000149,Deandrea,for development.; and only when `*check-asserts*` is true. instrumentation with spec is extremely slow as well.
1674,1512772493.000373,Aldo,"they're certainly useful. but they're noisy, and quite a lot of work. I think spec is a much more elegant solution because it gives you some sort of structural documentation and errors as well as validation; if someone had gone through core and :pre'd every function then the current work of going through core and spec'ing every function would feel a bit redundant"
1674,1512772553.000042,Deandrea,"so basically, the argument in favor of GIGO is “i don’t want to write the sanity checks for my code because it’s noisy”?"
1674,1512772560.000287,Charity,pretty much
1674,1512772578.000311,Aldo,"""I don't want to write the sanity checks because it's noisy and I have more important things to write"""
1674,1512772583.000137,Deandrea,"that seems like a weak argument against clearly expressing your domain, range, semantics, etc."
1674,1512772592.000383,Aldo,and that's why spec has been created?
1674,1512772597.000267,Deandrea,yes.
1674,1512772600.000363,Guillermo,Leverage
1674,1512772604.000335,Margaret,not just that - overly strict preconditions can make later extensions tedious or incompatible
1674,1512772629.000121,Deandrea,"<@Margaret> i can see that, although, i’ve never come up against that in practice."
1674,1512772678.000132,Margaret,"<@Deandrea> simple example - imagine whitelisting the allowed keys in a hash-map - you now need to rewrite your code as soon as code around it is extended, even though it shouldn’t have to care; other cases are more subtle but often just as tedious"
1674,1512772699.000115,Deandrea,"<@Aldo> i’ve seen that attitude fail catastrophically though, enough so that `:post (some? %)` has saved me hours of debugging."
1674,1512772778.000412,Margaret,"you can get future proof code without a bunch of complex incantations by failing to validate, once you validate future proofing is more work, and adds complexity in which bugs can hide; (unless the validating comes from the outside, eg. spec)"
1674,1512772812.000172,Aldo,I don't think anyone disagrees that some validation can be very useful. which is presumably why schema became so popular and why spec was created. I personally think on balance :pre and :post don't give enough extra value to go along with the validation to make them worth it the vast majority of the time. schema gave a bit more value and now spec gives even more to help tip the scales towards making it worth doing
1674,1512772817.000253,Deandrea,"<@Margaret> i suppose my argument there would that, to your point, the constraint is too tight. spec doesn’t alleviate you from that either."
1674,1512772849.000211,Charity,if only there were technologies for late-parameterizing specifications with additional requirements
1674,1512772879.000174,Margaret,<https://i.imgflip.com/20r5et.jpg>
1674,1512772884.000399,Deandrea,:joy:; lol
1674,1512772897.000239,Charity,&gt;.&gt;
1674,1512772949.000223,Deandrea,so GIGO is not salient when constraints are and vice-versa?
1674,1512772956.000232,Kareen,"I don't understand what we're arguing about, clojure had a GIGO problem and now we have spec to avoid that"
1674,1512772957.000432,Micha,I thought GIGO in Clojure was purely motivated by run-time efficiency ?
1674,1512772985.000409,Kareen,I wouldn't say purely but that's the biggest reason
1674,1512772987.000369,Deandrea,<@Kareen> i was simply trying to understand the attraction to the GIGO rationale.
1674,1512772996.000272,Micha,"And have any core Clojure developers ever called it GIGO, or is that something originated by others?"
1674,1512772999.000265,Aldo,"GIGO isn't a philosophy or a rationale, it's just a statement. if you pass nonsense in that there's no validation checks around you can expect to get nonsense out"
1674,1512773018.000215,Kareen,<@Micha> I'm sure I've seen alex call it GIGO more than once :)
1674,1512773036.000143,Deandrea,i’ve seen that too.; <@Aldo> in some cases it is a rationale.
1674,1512773065.000233,Aldo,I would like to see one of those cases
1674,1512773073.00026,Margaret,"while GIGO is just a fact, there’s a rationale to prefering code with GIGO behavior over defensive code - which does describe clojure code before spec"
1674,1512773117.000287,Aldo,"yeah but that preference is because of ""performance"" or ""cleaner code"" or ""whatever"". it's not like anyone is specifically trying to write code to silently fail"
1674,1512773142.000231,Deandrea,<@Aldo> <https://clojurians.slack.com/archives/C03S1KBA2/p1512771734000461>
1674,1512773163.000415,Kareen,"meh, you make it sound like most GIGO in clojure was a *design decision* when in reality it is just lack of validation to avoid:
- runtime performance costs
- having to manually write explicit checks for everything"
1674,1512773173.000437,Micha,"<@Aldo> If you mean an example of GIGO being a rationale to avoid adding run-time type checks, the clojure.set operators are the biggest example in my mind, e.g. <https://dev.clojure.org/jira/browse/CLJ-1953>"
1674,1512773181.000285,Kareen,<@Deandrea> ghadi isn't a core developer
1674,1512773199.000299,Deandrea,<@Kareen> what does that have to do with the discussion?
1674,1512773210.000089,Kareen,that's what andy asked
1674,1512773219.000442,Aldo,"they're using ""gigo"" to describe ""that's a case where the function does something unintended because you passed in something unintended"". I don't see anyone saying ""it should be that way cuz gigo"""
1674,1512773221.000099,Deandrea,i was merely interested in why GIGO is floated as an answer ever.
1674,1512773253.000023,Aldo,because it's a succinct and accurate one?
1674,1512773254.000179,Kareen,"look, s/GIGO/undefined behaviour/; gigo is just shorter to type"
1674,1512773293.000124,Deandrea,"<@Kareen> ah, okay.; <@Aldo> accurate?; :joy:"
1674,1512773319.00023,Aldo,"<@Micha> no one is saying they're not validating clojure.set ""because gigo"". If you were to specifically ask my guess would be ""because performance and can't be bothered"""
1674,1512773340.000235,Deandrea,<@Aldo> i’m pretty sure that’s been floated as a rationale in that discussion.
1674,1512773361.000242,Kareen,"no; core members have said in multiple forums that spec will ""solve"" the gigo issues of clojure.set; so clearly gigo is not a rationale"
1674,1512773394.000232,Aldo,"in one of the linked tickets ""Now that `set` is faster for sets, I think we could actually add checking for sets in some places where we might not have before. """
1674,1512773405.000401,Kareen,or that ^
1674,1512773411.000408,Aldo,"so the previous reason was performance. and the current reason is ""better things to do so far""; also, lucky they did those better things, because they made spec! and now that validation is trivially added in a uniform way rather than ad-hoc"
1674,1512773624.000027,Deandrea,<@Kareen> my line of question was in general not with respect to only core members.; it’s was more of “i’ve seen this GIGO thing be used as a rationale in the context of the clojure community and i’m curious what motivates it.”
1674,1512773681.000169,Kareen,"right, I was assuming we were specifically talking about core"
1674,1512773740.000292,Micha,"<@Deandrea> The community cannot change clojure.core without the approval of one person.  If someone else gives a rationale for what changes in clojure.core, or does not change in clojure.core, it is based on their interpretation/guesstimate of the reasons."
1676,1512773846.000237,Sonny,"hey, someone write specs for the clojure.set functions and file a patch"
1674,1512773864.000253,Kareen,there you go :)
1674,1512773872.000244,Micha,"My interpretation is that ""can't be bothered to add the checks"" seems unlikely for things like clojure.set functions, since many people would have been happy to provide patches for those years ago if they were desired by the core developer team.  spec being a far more general tool is fantastic, and I'm glad it was created."
1674,1512773879.000059,Sonny,"that’d be like, useful; you don’t even have to wait for them to be in core to use them"
1674,1512773896.000345,Deandrea,"<@Micha> i understand that, however, my question was more broad in scope. i’m not calling out clojure core, the libraries, or the members. it was a question for the room in the context of the community purely because i’ve seen it be a rationale for doing something not bound by the performance reason."
1674,1512773900.000034,Sonny,just put ’em in a namespace and load them
1674,1512773953.000132,Deandrea,"the typing thing, well, that’s effectively a fallacy (in my opinion).; to say “i won’t do _x_ because typing” can be a fine argument in certain situations but in general it’s very weak."
1674,1512774059.000054,Aldo,the point was simply that you see that kind of beahaviour less in typed languages (at an unacceptable cost). again. not a rationale. a statement
1674,1512774060.000243,Sonny,"in my experience, writing specs for core stuff can bring out many subtle questions. going through those and teasing apart what is expected, what works but is unexpected, and what doesn’t work now but we might want to work in the future has some measure of art to it."
1674,1512774064.000223,Deandrea,the way i read that argument is “my program won’t/will have this set of properties because (not) typing”.
1674,1512774108.000346,Kareen,"I don't understand what ""typing"" you mean here :) the fingers on a keyboard one or the holy war one"
1674,1512774127.000066,Deandrea,<@Kareen> fingers on the board.; i don’t believe in arguing about static vs dynamic typing. it’s a pointless endeavor. folks should be open to good ideas period and stop obsessing about typing discipline.
1674,1512774181.000395,Johana,congrats on clojure 1.9.0!
1674,1512774214.000081,Deandrea,i’m actually filled with a bit of dread now because it means i have to finish garden 2.0.0. :joy:
1674,1512774223.000087,Sonny,I’m celebrating with some Templeton Rye 6 year myself :)
1676,1512774294.000028,Bibi,Your rye should be older than your programming language :slightly_smiling_face:
1674,1512774313.000072,Johana,I celebrated by upgrading our dev branch and pushed to staging
1676,1512774315.000289,Bibi,Or scotch
1674,1512774337.000341,Sonny,"I have some scotch that would qualify, but I keep coming back to this Templeton lately"
1674,1512774367.000022,Charity,"3pm PST, I’m in for 1.9.0 scotch :smile:"
1676,1512774383.000172,Sonny,line ’em up
1676,1512774387.000071,Charity,Congratulations Alex
1674,1512774402.000214,Micha,"""Ahhh, the 1.9.0 --- that was a good version for Scotch..."""
1674,1512774408.000217,Deandrea,ahaha
1676,1512774411.000186,Charity,:smile:
1676,1512774417.000055,Sonny,they really don’t know how to do version numbers well in scotch; branching strategies are crazy
1674,1512774451.000092,Sonny,it’s like they were all drunk or something; on to Clojure 1.10 :)
1676,1512774479.000156,Johana,"<@Sonny> Out of curiosity, was it just waiting for bug reports or actually still fixing stuff in the last few weeks?"
1674,1512774501.000317,Sonny,well the last few weeks has mostly been me rewriting the docs over and over at Rich’s direction :)
1674,1512774523.000335,Micha,Gotta make sure the docs don't over-promise :slightly_smiling_face:
1674,1512774526.000037,Sonny,but also giving it some soak time in case anything came up
1674,1512774536.000173,Micha,"Sorry, I couldn't resist.  Bad me["
1674,1512774545.00033,Sonny,"no, that’s true :)"
1676,1512774553.00009,Johana,<@Micha> as long as the specs are valid :wink:
1676,1512774561.000052,Sonny,may all your specs be valid
1674,1512774573.000042,Sonny,scottish blessing I think
1674,1512774615.000187,Deandrea,:thumbsup_all: to the CLI stuff.
1677,1512774724.000318,Audie,"Hi! Can you guys give me an idea of how to try to resolve this?

I have a test that calls a functions. This functions executes an async task. Locally if I use a `(Thread/sleep 4000)` I can assert my data just fine.

But, after I build my application on travis, the build stop in this test and never finalize the build. Someone hava already seen this?"
1674,1512774843.000124,Deandrea,"<@Audie> are you able to patch your test (or code) in such a way that it does not require the task to be executed asynchronously? i know that’s not answering your question, however, it’s one i would ask myself in that situation."
1674,1512774997.000219,Audie,"<@Deandrea> I don’t see a way to do that. I have to call this async function and wait for the entire process to finish. Otherwise, when I go to the database the data is not there yet"
1677,1512775080.000254,Audie,`(Thread/sleep)` is the only way I thought how to do it
1674,1512775111.000336,Deandrea,<@Audie> you could use a promise or a future.
1677,1512775268.000253,Deandrea,"<@Audie> actually i think a promise sounds like it might do the trick. you could create a promise, then execute your async task and, upon completion, deliver a value to the promise. at the end of the test you could simply dereference the promise as to block the thread and keep the build from exiting.; ```
(let [p (promise )]
  (do-async-stuff
   ,,,
   (deliver p some-val))
  (deref p))
```"
1674,1512775377.000164,Deandrea,someone else might have a more elegant solution.
1677,1512775391.000288,Audie,but if use promise i’ll have to change the async task to put a value in the promisse right?
1674,1512775414.000077,Deandrea,"sounds like that’s the place in the code you need to patch.; so, yes. you need to be able to deliver to the promise when the async task completes. i’m guessing there’s probably a function or something that gets handed to whatever does the async work."
1677,1512775521.000101,Deandrea,i hope i’m helping… :sweat_smile:
1674,1512775778.000098,Audie,I see.. thanks for the help! I’ll try to fix this
1678,1512776114.000023,Daniell,```(defn foo [x] {:post (some? %)} x)``` may look like it works but it actually asserts `some?` (truthy) and then asserts `%` (the value returned from `foo`) so it needs to be ```(defn foo [x] {:post [(some? %)]} x)``` although the following actually works too -- but looks odd: ```(defn foo [x] {:post (%)} x)``` (`[%]` works the same as `(%)` here -- it's just a sequence of forms to evaluate with `%` bound to the function result. _This was a surprise to me when I tried it in the REPL!_
1679,1512776413.000041,Berry,"for implementing a forth interpreter, is vector or list better matched for storing the stack ?"
1674,1512776430.00003,Deandrea,"<@Daniell> yes, that was a typo.; thank you for catching that."
1674,1512776481.000211,Kareen,"<@Berry> if you use conj/peek/pop, vectors and lists behave the same as stacks"
1674,1512776494.000149,Daniell,"<@Deandrea> I was genuinely surprised it ""worked"" -- I rarely use `:pre`/`:post` so I nearly always have to look up the syntax!"
1678,1512776510.000112,Berry,"<@Kareen>: sure, but I suspect they have different performance characteristics"
1674,1512776512.000171,Kareen,I tend to use vectors as stacks just because `pop-n` and `peek-n` are easier to implement efficiently on vectors
1674,1512776521.000107,Deandrea,<@Berry> +1 for vectors. and enjoy the concatenative journey. :slightly_smiling_face:
1674,1512776527.00009,Kareen,"<@Berry> no, all those operations are constant time on both vectors and lists"
1674,1512776551.000019,Berry,"<@Kareen>: I think vector is log_32 #-elemes, which is &lt;= 5 in most caeds, but technically log n"
1678,1512776581.000135,Daniell,"Hey <@Berry> If you want Clojure + Forth, take a look at <https://gershwin.github.io/> :slightly_smiling_face:"
1674,1512776631.000099,Daniell,"I was actually sufficiently awed by Gershwin at one point that I tried it out at work and wrote a few functions in the ""Forth"" style of Clojure! :slightly_smiling_face:"
1674,1512776652.000247,Kareen,"<@Berry> no that's not correct, conj/pop/peek on vectors are amortized constant time, not log_32, nth/assoc are log_32 on vectors"
1674,1512776656.000167,Berry,<@Daniell>: I've lost track the # of afternoons I've lost due to you providing fasicnating links.
1674,1512776671.000204,Daniell,"(but since it relies on a fork of Clojure and wasn't being updated, I quickly went back to pure Clojure)"
1674,1512776715.00002,Berry,<@Kareen>: conj has to be log_32 time as it has to create a new node for every level of the b-tree
1674,1512776736.000319,Kareen,clojure's persistent vectors are not b-trees
1674,1512776758.000254,Berry,"I thought they were btrees with 32 fanout -- if not btrees, what are they?"
1674,1512776785.000004,Kareen,<http://hypirion.com/musings/understanding-persistent-vector-pt-1>
1674,1512776810.000266,Deandrea,"<@Berry> if you’re interested have a look at factor, joy, cat, and kitten in this space as well.; factor is a ton of fun."
1674,1512776837.000098,Kareen,<@Berry> in particular <http://hypirion.com/musings/understanding-persistent-vector-pt-3>; this is the optimization that makes conj amortized constant time; same for pop/peek
1674,1512776911.000363,Berry,"1. the depth of the tree is log_32 n
2. when we do a conj, we have to create a new node at each level of the tree

^-- which is the two above statements is false ? -- because if they're both true, it's log_32 n time EVERY TIME"
1674,1512776947.00029,Kareen,2 is not true
1674,1512776995.00025,Berry,"```
Instead of keeping the rightmost leaf in the tree itself, we keep a direct reference to it in the vector header: That's the last block which has been added to the vector head since last blogpost. The reference to the rightmost leaf node is called the tail.
```
ah; that's clever; bronsa++"
1674,1512777015.000146,Kareen,well I didn't come up with any of this
1674,1512777033.000086,Berry,"thanks for correcting me on this time, I've been thinking conj was log_32 n time"
1674,1512777033.000299,Deandrea,:smile:
1674,1512777049.000176,Kareen,"wrt ""what are they"", I've heard the clj vector impl called bitmapped vector trie, not sure if there's a better name"
1674,1512777137.000298,Berry,"<@Daniell>: I feel like we can get most of forth in clojure by defining macro `f-&gt;`, where it behaves like `-&gt;` except

1. if it sees a constant (number, kw, string), it pushes it to the stack
2. all functionsin it take stack as input and produces stack as output"
1674,1512777428.000126,Deandrea,"<@Berry> the thing is though you’ll need to come up with a way to call out how much of the stack to consume for fn’s that have multiple arities.; e.g. how do you interpret `[""foo"" ""bar"" ""baz"" str]`?"
1674,1512777491.000004,Kareen,<https://twitter.com/brandonbloom/status/528262785642545153> this is still my favourite impl of stack programming in clojure :); <https://github.com/brandonbloom/factjor> for a more useful impl
1674,1512777593.000016,Deandrea,:+1:
1674,1512777652.000297,Berry,"<@Deandrea>: afaik, forth doesn't support var-arity functions, so f-&gt; won't either; all functions passed to f-&gt; take a single arg (the stack) as input and produces a stack as output"
1674,1512777743.000049,Deandrea,<@Berry> right but you could imagine something like `[a b c ^{:argc 2} str]` as way to tell the compiler to take 2 args from the stack when applying str to it.
1674,1512777793.00007,Berry,"(f-&gt; a b c (mod 2 str)), where mod :: int -&gt; func -&gt; func , specifies how many args to take and use"
1674,1512777820.000183,Deandrea,oh nice. i like that.
1674,1512777820.000215,Berry,"except instead of calling it mod, we should call it m! or something"
1674,1512777923.00015,Deandrea,"heh, i sometimes wish clojure had that in core. when mapping over a list of lists (for example) i often want something that takes a number `n` and function `f` and pulls `n` many arguments from each list and applies them to the `f` rather than writing the function that unpacks the arguments by hand. it’s easy to write but i sometimes i wish i didn’t have to. :slightly_smiling_face:; <@Berry> `ap` might be a nice shorthand there. `[a b c str 2 ap]`"
1674,1512778892.000174,Berry,<@Deandrea>: how does 'str know to delay evaluation?
1674,1512778936.000045,Kareen,i'm assuming nothing but `ap` applies anything
1674,1512779030.000094,Berry,"the model I had in mind was: if you get a constant, you push it, if you get a function, you eval it; but in this model, it appears to be ""push until you hit ap"" ?"
1674,1512779049.000058,Kareen,how would you do HOF then?
1674,1512779069.00003,Berry,can you give me a concrete example you have in mind ?
1674,1512779081.000063,Kareen,write `(map inc [1 2 3])`
1674,1512779099.000026,Berry,"is [1 2 3] a single arg on the stack, or is it a stack of 3 items ?"
1674,1512779109.000139,Kareen,"that's clojure; write that in your stack based dialect; if your semantics are ""if the top element in my stack is a function, apply it"", then you have no way of using a function as a value"
1674,1512779204.000033,Berry,"I was going to do all function combinators in clojure; the model I had in mind for `f-&gt;` is:

1. f-&gt; gets a list of args
2. eval each arg
3. if arg is a constant, change it to a push
4. if it's a function, apply it"
1674,1512779267.000072,Kareen,"well good luck, keywords symbols vectors maps sets are functions too"
1674,1512779279.000202,Berry,F---
1674,1512779970.000039,Deandrea,@qqq let me get back to you. :wink: I've gotta play with my kids right now. I will be back to meditate on this some more. :smile:
1680,1512800750.000076,Jami,"Hi, I just saw the changelog of Clojure 1.9. Do you know why the deps and cli tools were added to the language ? <https://clojure.org/guides/deps_and_cli>; as far as I understand, this is a new improvement on resolving dependencies, but what about building clojure apps ?"
1680,1512800792.000016,Margaret,because clojure.core can't run without the clojure.spec.alpha library that is packaged separately
1680,1512800801.000004,Jami,will it replace or complement lein/boot ?
1680,1512800804.000019,Margaret,"it's not a build tool, it just helps use deps; the goal was that people should be able to run clojure directly using a simple tool from the clojure team - clj is designed for that, and just that"
1680,1512800894.00004,Jami,"so do you think there will be a need to create a new build tool ?; in other language, you usually have a compiler/interpreter and a build tool"
1680,1512800924.000024,Margaret,clj isn't mandatory and isn't a build tool; leiningen and boot are still build tools; it doesn't replace leiningen or boot but there are plans to use it from boot at least
1680,1512801023.000005,Jami,"I when I begin using clojure, I was confuse about boot and lein. I didn't know if these tool where the interpreter/compiler"
1680,1512801032.000025,Margaret,that's a common problem
1680,1512801060.00004,Jami,"ok, i see the picture; the goal is to have: 1) clj as the main interpreter, 2) deps.edn as a format to specify dependencies 3) boot/lein as build tool; but at the moment, boot and lein does everything"
1680,1512801133.000003,Margaret,even if you run boot or lein clojure is still the compiler and runs the repl itself
1680,1512801146.00002,Jami,"so they might just ""wrap"" (1) and (2) from boot/lein instead of providing them as they do now"
1680,1512801167.000015,Margaret,they might - but you can run clojure 1.9 from lein or boot without clj
1680,1512801359.000097,Jami,"I see, but I'm curious how the boot/lein team will address the overlap"
1680,1512801415.000065,Margaret,"they might find it useful, but they don't have to address it - everything still works the old way"
1680,1512801672.000077,Willow,"what's the best way to get the distinct by value of a collection. `(?? [[:a 1] [:b 1] [:c 2] [:d 1]]) =&gt; [:c 2]`; i've got some really gross partition by, filter, first, second, first threading going on"
1680,1512801766.000031,Margaret,"maybe group-by, then test which values are 1 element long?"
1680,1512801801.000007,Willow,"yeah but it ain't pretty
```
          partitions             (-&gt;&gt; edges
                                      (map (fn [kid] [(node-weight adjacency kid) kid]))
                                      (group-by first))
          [size distinct-edge]   (-&gt;&gt; partitions
                                      (filter (fn [[p-size nodes]] (= 1 (count nodes))))
                                      first
                                      second
                                      first)
```; was hoping there was a better way; maybe some instead of filter but it's not much prettier"
1680,1512802061.000009,Margaret,```(-&gt;&gt; [[:a 1] [:b 1] [:c 2] [:d 1]] (group-by second) (filter (comp #{1} count val)) (first) (val) (first))```
1680,1512802101.000051,Willow,that's certainly better; i always forget about the #{1} style checking
1680,1512802181.000038,Margaret,"it's more fun to write, but there's also `#(= 1 (count (val %)))` which performs better; of course"
1681,1512806711.000055,Jami,"what about (-&gt;&gt; [[:a 1] [:b 1] [:c 2] [:d 1]] (map reverse) (map vec) (into {})) =&gt; {1 :d, 2 :c}; or `(-&gt;&gt; [[:a 1] [:b 1] [:c 2] [:d 1]]  clojure.set/map-invert) =&gt; {1 :d, 2 :c}`"
1682,1512815190.000076,Kayleigh,"Thanks <@Margaret>, I did start with `file-seq` but noticed it was based on `.listFiles` and since the laziness didn't seem to be an advantage to me used that directly. I've also tried an nio based approach. There's 458GB of files in on my file system and DaisyDisk is scanning that in ~13s, my approach doesn't complete in less than 15 mins (at which point I abort it).; I'm sure DD must be using something but cannot yet see how it might be the spotlight cache since my researches so far suggest that it doesn't contain a complete list of files on the file-system"
1681,1512821331.000002,Mark,"I'm having a strange problem. I'm working on a problem from the advent of code, and I need to copy an input string from the webpage, and transform it into a data structure. A basic `(#{:a :b} :a)` comparison was returning nil, which prompted me to take a closer look at the result of the transformation. If I call `(transform raw-input-string)`, the printed result looks fine (and in fact, works fine!), but if I compare the printed result to the value returned by the function call `(= (transform raw-input-string) &lt;previous result&gt;)` I get `false`!; I'm guessing there's some hidden special characters in there, that get dropped when the output is printed into the repl; Is there a way to remove them..? I'm already removing non-breaking spaces, and using trim (which doesn't really do much I guess); I've tested this in cursive's repl inside Idea, lein's repl, and planck; Eh, I `spit` the data structure into a file, and then `(-&gt; file slurp read-string)`; And apparently the special characters are gone"
1681,1512822396.00003,Heriberto,"<@Mark> `(clojure.string/replace ""your string"" #""[^\p{Print}]"" """")`; or `(clojure.string/replace ""your string"" #""[^\x00-\x00]"" """")` with range of characters (replace `00` with proper values)"
1681,1512822622.000027,Mark,"I tried the first one, I don't think it did anything. I'm probably not going to bother with the second one for now, since I got it working with that hacky file workaround. Appreciate the help though :slightly_smiling_face:"
1683,1512823581.000039,Beulah,"I've never ""installed Clojure"" before (always used lein) but I was curious - is there an update for MacPorts rather than Brew ?"
1681,1512823736.00012,Heriberto,"<@Beulah> <https://github.com/macports/macports-ports/blob/master/lang/clojure/Portfile>; ```
version             1.8.0
maintainers         nomaintainer
```"
1681,1512823857.000034,Beulah,<@Heriberto> yeh I was thinking of Clojure 1.9 the latest
1683,1512823866.00017,Beulah,oh I see
1684,1512824668.000007,Sonny,"I’m not sure what that is in MacPorts, but it’s not published by the Clojure core team"
1685,1512833451.000014,Alexander,"Hi, Clojurians! I have a question about Java Interop.

I'm trying to translate some of the examples from [web3j](<https://docs.web3j.io/getting_started.html#start-sending-requests>) into Clojure.

The synchronous requests work fine:

```
// Java
Web3j web3 = Web3j.build(new HttpService());
Web3ClientVersion web3ClientVersion = web3.web3ClientVersion().send();
String clientVersion = web3ClientVersion.getWeb3ClientVersion();
```

```
; Clojure
(def http (new HttpService))
(def web3j (Web3j/build http))
(-&gt; web3j
    (.web3ClientVersion)
    (.send)
    (.getWeb3ClientVersion))

; ""Geth/v1.7.3-stable-4bb3c89d/linux-amd64/go1.7.3""
```

But my asychronous requests aren't working, and I think it has something to do with the Java 8 lambdas:

```
// Java
Web3j web3 = Web3j.build(new HttpService());
web3.web3ClientVersion().observable().subscribe(x -&gt; {
    String clientVersion = x.getWeb3ClientVersion();
    ...
});
```

```
; Clojure
(def http (new HttpService))
(def web3j (Web3j/build http))

(defn callback [x]
  (println ""received value:"" x))

(-&gt; web3j
    (.web3ClientVersion)
    (.observable)
    (.subscribe callback))

; CompilerException java.lang.IllegalArgumentException: No matching method found: subscribe for class rx.Observable
```

The [rx.Observable docs](<http://reactivex.io/RxJava/javadoc/index.html?rx/Observable.html>) say the subscribe method takes an argument of type Action1, which extends the Action interface, which extends the Function interface.

Any ideas as to what I should be passing to a Java function that expects to receive a lambda?

Thanks!"
1681,1512834157.000006,Heriberto,You need to use `reify` but I'm not sure which interface it's needed to implement here
1685,1512834231.000017,Rosia,"java lambdas are just syntactic sugar, at the bytecode level they're equivalent to anonymous classes
there's no way to infer a conversion between clojure functions and Rx functions so you have to explicitly pass an instance of Rx expected type Action1; ```
(def callback
  (reify Action1
    (call [_ x] (println ""received value:"" x))))
```"
1685,1512834511.000062,Alexander,<@Rosia> <@Heriberto> Thanks! I will try this out and report back :thumbsup:
1685,1512834512.000104,Heriberto,"no, they are not anonymous classes
<https://softwareengineering.stackexchange.com/questions/177879/type-inference-in-java-8/181743#181743>"
1685,1512834961.00012,Alexander,"<@Rosia> After figuring out which class to import (it was `rx.functions Action1`), it worked flawlessly!  Going to write up a blog post with my adventures when I have something a bit more substantial, and I will give you the credit for helping me out with this one.  Thanks for the lesson!"
1685,1512835371.000004,Rosia,"thanks, I was unaware of that; <@Alexander> np but have look at <@Heriberto>’s link in the thread, my comment is inaccurate"
1686,1512836077.000019,Olen,"I have a question;
```clojure
(list? (cons 'do '((identity x) bla-bla)))
=&gt; false | In Clojure
=&gt; true  | In Clojurescript
```; What makes the difference ?; I am sorry if it’s a newbie question or it’s obvious. But I really wondering, why…"
1687,1512837405.000044,Petronila,I always found it sneaky that a `cons` returns something that isn’t a `list?` in clj. It can trick you in situations like macros. Especially involving syntax quote because you don’t always know when it might return a `cons`. So really I end up just avoiding using `list?` for these sorts of things (so mostly just never use it); It’s odd that cljs would be different though. I didn’t know that
1687,1512837432.000063,Olen,Yea it did.; So what are you using as a pred ?
1687,1512837496.000043,Margaret,<@Petronila> often when you think you want `list?` the right predicate is `sequential?`; though that is true for vectors
1687,1512837517.000024,Petronila,Typically `sequential?`; Yeah if you don’t want vectors perhaps just `not` `vector?`
1687,1512837555.000039,Olen,"Oh, I did it right. :innocent:"
1687,1512837576.000034,Sandy,"Yeah, I think that's a holdover from lisp? <@Petronila>; Seems like the real predicate is `seq?`, and sometimes `sequential?`; Often, outside of lisps, `list?` implies something that has O(1) counting."
1687,1512837640.000143,Rosia,"you rock !
it's definitely a huge win for me, my benchmarks are almost on par with java with your patch."
1687,1512837682.000024,Petronila,<@Sandy> interesting. I’d have to check out something like Common Lisp to compare on that one. 
1687,1512837823.000046,Olen,"As a sub-routine, doesn’t it bother anyone ?"
1688,1512841845.000137,Alexander,Done and done!  <https://ajpierce.github.io/posts/ethereum-blockchain-clojure/>; Thanks again for the help! :slightly_smiling_face:
1688,1512842809.000119,Twyla,does anybody know of any nice documentation around creating a custom implementation of Spec/Specize from clojure.spec.alpha? I can find one gist in all the web of someone that's attempted it.
1689,1512847999.000033,Sonny,"it’s not documented because we don’t want to encourage you to do that; in general, you should either be plugging predicates into the specs (use any predicate you like) or combining the things that are provided, which cover the possible data structures appropriately; while I expect the spec api to stay pretty similar, the internals of spec are going to change, so whatever you write is almost certain to be broken. when we consider spec final, there may be more docs at that time on how to create custom spec types."
1690,1512849936.00008,Vernice,What's with those new cli tools released with clojure 1.9? What Gap are they trying to fill?
1689,1512850070.000056,Sonny,Have you read <https://clojure.org/guides/deps_and_cli> and <https://clojure.org/reference/deps_and_cli> ? They try to answer this question.
1689,1512850257.000107,Vernice,"<@Sonny> skimmed :simple_smile: . But, are they trying to replace lein/boot?"
1689,1512850268.000081,Sonny,No; They do not build or deploy artifacts; They are for building classpaths and launching Clojure programs
1689,1512850362.000069,Vernice,Thanks <@Sonny> . I'll read it through.
1691,1512857193.000045,Clifton,"<@Olen> The answer to your earlier question -- about the difference in behavior of `(list? (cons stuff))` in clj and cljs -- is basically due to how the `Cons` type is defined on both sides. In clj, `(list? thing)` asks if `thing` implements `IPersistentList`. clj `Cons` is `java.lang.Cons`, which does not implement that interface, or inherit from anything that does; that's why it returns false on the clj side. In cljs, `(list? thing)` asks if `thing` ""implements"" (`satisfies?`) `IList`. cljs `Cons` is explicitly defined to implement that interface, so it returns true.; <@Olen> see <https://github.com/clojure/clojure/blob/master/src/jvm/clojure/lang/Cons.java#L17> for the definition on the clj side; <@Olen> <https://github.com/clojure/clojurescript/blob/master/src/main/cljs/cljs/core.cljs#L3180> for the cljs"
1691,1512858082.000057,Petronila,<@Clifton> good explanation. That brings up something I’ve wondered - why `java.lang.Cons` doesn’t impl `IPersistentList`
1691,1512858833.00001,Sandy,<@Petronila> because IPersistentList is counted and that demands O(1) counting. Cons cells can be lazy and are O(n) counted.
1691,1512858902.000052,Petronila,"<@Sandy> where in `public interface IPersistentList extends Sequential, IPersistentStack` are they counted?; I know it has the `IPersistentCollection.count()`"
1691,1512858932.000072,Sandy,that's it
1691,1512858953.00006,Petronila,"however, I didn’t think that was the same as `clojure.lang.Counted`; I didn’t know it had any sort of stipulation that is"
1691,1512859037.000087,Sandy,"yeah all the interfaces are O(1), Clojure papers over that with `count` in clojure.core"
1691,1512859051.000073,Petronila,"Either way, I guess I’m getting the general idea that a `Cons` can be some unbounded lazy thing, where a “list” is expected to not be, I guess"
1691,1512859063.000074,Sandy,exactly; all that is a bit cleaner in ClojureScript; sideffect of reimplementing the lib
1691,1512859143.000053,Petronila,"sure; Well, good to know. Thanks for the insight"
1692,1512859867.000041,Olen,"<@Clifton> I looked the documentations before but your message is so clear and it helped me to clear some questions on my mind. If you know any tricks like that. Please mesaage me, I am documenting these tricks. "
1693,1512880014.000049,Berry,Is there a standard way of storing a Directed Acyclic Graph in an Entity-Attribute-Value store ?
1693,1512880073.000059,Margaret,an adjacency list would be a simple way to do it
1693,1512880175.000028,Berry,"do you store the child list as a single vector, and when you add/del one child, overwrite the entire vector ?"
1693,1512880231.000001,Margaret,"that's an implementation decision, the totally denormalized version would be to make each child relation a separate entry; I think"
1694,1512880530.000031,Cleopatra,"hello every one, I'm starting to learn clojure (my first real functional language) after doing some functional JS"
1693,1512880572.000007,Cleopatra,"do you recomend any sql abstractions to use in my project with postgres?; I saw korma, but looks like it is abandoned, and I didn't like the yesql and hugsql approach"
1694,1512882379.000031,Daniell,"<@Cleopatra> I'd recommend HoneySQL which lets you compose query fragments, on top of `clojure.java.jdbc` which is the Clojure Contrib library for JDBC operations.; Also <@Cleopatra> since you're new to Clojure and interested in SQL, I'll recommend the <#C053AK3F9|beginners> and <#C1Q164V29|sql> channels."
1695,1512882826.000055,Berry,"Is there a clojure tool that will take a codebase, and show me all defns / defs taht are not used?

It can assume I'm not doing something weird via string-&gt;symbol-&gt;resolve-in-ns"
1694,1512882873.000009,Daniell,Yagni.; <https://github.com/venantius/yagni>
1695,1512882901.000047,Berry,"is boot-check the closest for boot ?; yagn ieems to depend on lein; $ boot check/with-yagni
latest report from yagni.... [You Rock!]"
1695,1512882937.000067,Daniell,"Yes, `boot-check` runs Yagni"
1696,1512890544.000053,Lawerence,Gorilla REPL crashes every time when I use it on my Mac. ; Does anyone else have the same problem?
1696,1512892050.000009,Heriberto,"<@Lawerence> Use `:plugins [[lein-gorilla ""0.4.0""]]` instead of `:plugins [lein-gorilla ""0.4.0""]`"
1697,1512894051.000015,Martina,"How do people feel about doing things like http requests inside of `dosync`, for example?; I find myself in a situation where I am receiving many (kafka) messages asynchronously, any of which triggers a particular http call. But I only want to make that call once.; So, I receive the message, `dosync` to assoc something under a key and trigger a request *only if that key doesn’t exist yet*; Can I do this without triggering a request inside the dosync?; Ah, `dosync` may retry anyway, so that doesn’t work; Hmmm, how do I avoid the race condition here: `deref` to see if key exists, if not `dosync` to add key and then (at some point) trigger request; Multiple threads could `deref` and see the missing key, both add the key and trigger request, unless those are somehow a single transaction; I guess in a single `dosync` it can check the key and add it in, no need for a separate `deref`; the question is when the request is triggered to guarantee it only happens once; Maybe this is finally a use case for agents; Ah that is actually a quite elegant solution; I finally understand what agents are for"
1697,1512896398.000048,Joette,"generic question. Say I’m building a library and in the default namespace I need an instance of a parser. I will need this parser for every call into the library. I could have a `(def parser ...)` directly in the main namespace of the library, but for some fuzzy reason this makes me feel slightly dirty and I would  feel more pure with lets say a memoized function returning the parser. Opinions? Is it ok and good style to just `(def ` things or is it indeed somehow better to keep things in functions? One difference I see is that the def gets potentially  ’unnecessarily` evaluated on load. The user of my lib might elect to not call any functions in my namespace etc..."
1697,1512896715.000032,Heriberto,<@Joette> Could use <https://github.com/stuartsierra/component> to avoid re-defining global variables on load.; That's what was recommended to me instead of global atoms
1698,1512900893.000072,Berry,"cloc dumps ttl lines, ttl white space, ttl comments
is there some other tool that will dump ttl + also summaries for each file ?; i.e. I want a table of four columns: file name, comments, whitespace, line-count // though two clumns of just filename and line-count is fine, if it's better than wc -l"
1698,1512908571.000073,Lawerence,"I do that. The repl starts and works for some time and then it stops working. 

Now I don’t seem to have that problem. "
1699,1512908855.000034,Noella,"`cloc --by-file`?; or use <https://github.com/Aaronepower/tokei>, much much faster; `tokei -f` gets you a per-file summary"
1699,1512925826.000007,Magda,Good Morning Everybody :slightly_smiling_face:
1699,1512930787.000118,Berry,<@Noella>: `cloc --by-file` is awesome; thanks!
1700,1512933715.000014,Berry,"besides fn -&gt; `\lambda` is there a standard set of ""prettify these clojure keyword"" setup ?"
1700,1512933787.000053,Kristy,some setups also prettify `#{}`
1700,1512934070.000014,Vernice,Sorry guys but I still cannot understand what those cmd line tool just released <https://clojure.org/reference/deps_and_cli> here are for. What gap did I have that they are trying to fill?
1700,1512934108.000051,Margaret,they are for people who have never tried clojure and want something minimal to fire it up
1700,1512934166.000015,Vernice,"<@Sonny> pointed me to <https://clojure.org/guides/deps_and_cli>.
But if I have leiningen, what do i need those for?"
1700,1512934177.000061,Margaret,"you don't, and it's not for you; it's for people who haven't used clojure and want a simple way to fire up a clojure repl. Or people who want something ligher weight / more targetted than lein or boot for running a repl."
1700,1512934241.000071,Jodie,I also get the impression that they provide an official solution from the clojure team for launching a clojure repl. Previously it was sufficiently simple to not matter.
1700,1512934249.000083,Margaret,"in the past we could use clojure.jar for that, clojure.jar no longer runs standalone because of clojure.spec.alpha"
1700,1512934303.000059,Vernice,Like people have a python repl 
1700,1512934315.000135,Margaret,"right, python just runs as a standalone command"
1700,1512934362.000001,Berry,dumb question: why does clojure.spec.alpha prevent clojure.jar from being standalone ?
1700,1512934381.000096,Margaret,"because it's not part of clojure.core, it's a separate artifact; so you need to construct a classpath with at least three artifacts to make it work iirc"
1700,1512934443.000093,Berry,"you can't just 'stuff it in the *.jar"" ? I thought jars were just zips/tar files and you could throw stuff into it"
1700,1512934467.000003,Jodie,<@Berry> That leads to a classpath conflicts.
1700,1512934473.000077,Vernice,And tools.deps.alpha?
1700,1512934491.000117,Margaret,"deps.alpha knows how to resolve deps, that is why it is there; it helps construct a classpath and download jars that you might need"
1700,1512934517.000137,Vernice,Isn't that what mvn is for?
1700,1512934530.000103,Margaret,"but unlike lein or boot it isn't for packaging or deploying and doesn't have tooling for plugins; yes, you could use mvn for that, but then you need an mvn command for running clojure; and mvn is also a packaging and plugin and deployment tool like leiningen or boot are"
1700,1512934622.000022,Vernice,Thanks <@Margaret> I was afraid I am missing something here.
1700,1512934856.000116,Berry,"is there a builtin for
(magic [f1 f2 f3 f4] [x1 x2 x3 x4]) =&gt; [(f1 x1) (f2 x2) (f3 x3) (f4 x4)] }"
1700,1512935051.000134,Margaret,the closest thing would be `(map #(%1 %2) ...)`
1701,1512937189.000082,Berry,"```

(def a-z 
  (mapv int-&gt;char  (range (char-&gt;int \a) (inc (char-&gt;int \z))))) 
(def letters-lower ""abcdefghijklmnopqrstuvwxyz"")
```

besides listing out the answer, is there a way to make the def of a-z shorter ?"
1702,1512941712.000037,Kristy,"Is there something like `(binding [*ns* 'afsdfsd] ::a)` but that works?

('work' -&gt; result in `:afsdfsd/a`)"
1702,1512941732.000106,Kareen,no; read time happens too early for that to work
1702,1512941797.000045,Kristy,"yeah, guessed so...

thanks for the confirmation! useful coming from tools.analyzer author :slightly_smiling_face:"
1702,1512941818.000006,Kareen,np
1703,1512945416.000004,Tameka,"hey everyone, how can I lowercase the keys in map? :smile:
I have the following:
```
{:CurrentGame 1
 :Score 30}``` and I want to lowercase the keywords; this response comes from the server as json and when it is converted from json using clj-http, that’s how it shows up; solved it like this
```
(defn lower-case-keys [result]
  (if (map? result)
    (into {}
          (for [[k v] result]
            [(keyword (lower-case (name k))) v]))
    (map lower-case-keys result)))
```"
1703,1512945995.000008,Daine,(reduce-kv #(assoc %1 (keyword (lower-case ( name %2))) %3) {} json-response) something this
1703,1512946021.00002,Tameka,"I like that one too!; I just needed my fn to support vectors / lists too; didn’t know about reduce-kv, thanks!"
1703,1512946870.000106,Leann,"personally I like to use my own syntax sugar; ```
(defn map-keys [f m]
  (-&gt;&gt; m
       (map (fn [[k v]]
              [(f k) v]))
       (into {})))

(defn map-vals [f m]
  (-&gt;&gt; m
       (map (fn [[k v]]
              [k (f v)]))
       (into {})))
```"
1703,1512948895.00008,Owen,"<@Tameka> with specter: `(transform [MAP-KEYS NAME] clojure.string/lower-case m)`; also does not change the type of the map and much higher performance than other approaches, especially for small maps"
1704,1512950395.000162,Toi,"you can also do it with transducers and avoid creating the intermediate seq like this <@Tameka>
```(defn lower-case-keys [m]
  (into {} (map (fn [[k v]] [(-&gt; k name lower-case keyword) v])) m))```"
1704,1512969443.000127,Berry,"I'm sure I've asked this before. Is <https://clojuredocs.org/clojure.core/count> constant time? if not, what is ?"
1704,1512969474.000005,Margaret,count is constant time if the object you call it on is counted?
1704,1512969487.000035,Berry,I'm counting a vector.
1704,1512969500.000009,Margaret,"yes that's constant time; ```+user=&gt; (counted? [])
true
```"
1704,1512969706.000039,Berry,"to be pedantic, that proves that the empty vec is counted, it says nothing about vecs in general :slightly_smiling_face:"
1704,1512969789.000056,Margaret,there are no collections that special case- counted? is checking for implementation of an interface
1705,1512972477.000017,Berry,does clojure have an insert-at-index ?; I want '(1 2 3) ':a -&gt; '(1 :a 2 3); where I want to insert into thedlist at the ith-index
1705,1512972672.000155,Margaret,there's a finger tree library that works that way
1705,1512973297.000061,Berry,"yeah, I guess with either vector or list, insertion at arbitrary index can be expensive"
1706,1512976933.000106,Cecilia,"Hmm, I kinda wonder what is the reasoning to add the CLI tools into Clojure 1.9? I kinda get the “clj” command to easily launch a Clojure REPL without first having to create a leiningen/boot project but rest of the stuff is kinda not-so-necessary to me?; Not saying it isn’t ok that it is there now but I would have prioritised things differently for 1.9 release :sheep:; it’s like a poor man’s Leiningen or Boot; maybe it’s there to lower the barrier of entry for newbies?"
1705,1512981205.000217,Berry,"is there a more idiomatic way to write:
`(vec(apply concat (for ...)))`; `(vec (apply concat (for ...)))`"
1706,1512981578.000154,Jami,"<@Cecilia> I think it makes sense if you consider other ecosystems. We need at least 3 tools to work with a language: an interpreter/compiler, a dependency manager and a build tool"
1705,1512981714.000375,Jami,"before, we had boot and lein to implement all these tools. But now, we can have a clean separation with CLI tools providing the interpreter and dependency manager, and lein/boot providing the build tool; I also like that tools.deps.alpha attempts to standardize the dependencies in Clojure project; and I remember how confuse I was when I tried to learn Clojure. I didn't understand why there was no ""clojure interpreter"", and we had to rely on leiningen; it would be like for C++, we had to install cmake to use the language; <@Berry> you could use `mapcat` instead of the for loop `(vec (mapcat f coll))`"
1707,1512983208.000053,Cecilia,was just about to say the same thing to qqq :slightly_smiling_face:
1707,1512983260.000108,Joette,"is there an idiomatic way of replacing every `:f` in `[\a \b :f \c \d :f \e \f :f]` with `[1 2 3]` to give `[\a \b 1 \c \d 2 \e \f 3]`, i.e. find occurence of a specific element (keyword) in a vector an replace with element at index in another vector. I have a somewhat convoluted reduce for this right now but I get the feeling there might be something better"
1708,1512983750.000126,Jodie,I couldn't see how to insert at index with finger tree. Am I missing something obvious?
1707,1512983847.000188,Jodie,"Oh, derp, I just noticed the `assoc`"
1708,1512983902.000418,Daine,"Don’t really see anything else then reduce being simpler, you can start the reduce on [0[]] and either conj the value to the second part, or add and to the first value and add both the new first value and conj it?"
1707,1512984364.000321,Evelyne,<@Cecilia> have you seen <https://www.youtube.com/watch?v=sStlTye-Kjk> already? This might give some additional insights about the introduced CLI tooling.
1708,1512984388.000024,Joette,<@Daine> more or less what I'm doing. Thanks for the sanity check.
1707,1512984443.000044,Cecilia,"<@Evelyne> nope, will check"
1707,1512984467.000015,Evelyne,"and then there is also the documentation, e.g. <https://clojure.org/reference/deps_and_cli>; here would be an entry point into the talk specifically for clj: <https://youtu.be/sStlTye-Kjk?t=18m19s> but for context it might be best to watch from the beginning"
1707,1512985407.000298,Cecilia,"<@Evelyne> the core thing I got out of that thing is that Clojure 1.9 is actually 3 jars these days, so based on that it does make sense to build dependency management into Clojure itself to avoid the hassle that would create for users"
1707,1512986067.000042,Evelyne,"<@Cecilia> yeah and as <@Sonny> also said in the talk it (for now) serves as a hassle-free entry point for newcomers as well as a quick way to “just start a REPL”. But I think it fits into the larger picture about dependency management quite well, untangling that from other tasks that for example boot and lein take care of and also I suspect that this might be a step towards solving issues that were outlined in  <https://www.youtube.com/watch?v=oyLBGkS5ICk> Maybe <@Sonny> wants to elaborate a bit on the future of `clj`? :slightly_smiling_face:; aaaaand I am already using it for real to programmatically get a Clojure environment to eval code in :slightly_smiling_face:"
1707,1512987021.000464,Heriberto,"<@Evelyne> What could be easier than this?
```
brew install leiningen
lein repl
```
When I started learning Clojure I was surprised to discover how easy it is to get working REPL and to install clojure-mode and inf-clojure (that's what Rich Hickey uses)."
1709,1512987749.000141,Berry,<http://www.eff-lang.org/handlers-tutorial.pdf> &lt;-- has anything like this been implemented in clojure ?; why do we have `empty?` and `not-empty` but no `not-empty?`
1710,1512989275.00016,Lavera,"Hi, does anyone have a good idea how to turn a stream of events into a lazy sequence of tails? e.g. `(tails odd? [1 2 3 4 5])  ; =&gt; ((1 2 3 4 5) (3 4 5) (5))`"
1709,1512989293.000477,Jodie,<@Berry> `not-empty?` is `seq` iirc.
1709,1512989965.000023,Berry,"```
(defn lwhile [cur test update]
  (loop [cur cur]
    (if (test cur)
      (update cur)
      cur)))
```; is there a builtin for the lwhile defined above ?"
1709,1512989988.000532,Lavera,"Maybe something like this?
```
(defn partition-tails [pred col]
  (let [[matching &amp; rst :as tail] (drop-while (complement pred) col)]
    (if matching
      (lazy-seq (cons tail (tails rst)))
      ())))
```"
1710,1512990048.000453,Lavera,Don't you need a recur in there somewhere? :thinking_face:
1709,1512990110.000407,Lavera,"And if it is where I suspect, then I don't think there is a builtin... It's something I have been missing quite a few times as well; Don't have much experience with explicit lazy sequences..."
1709,1512990346.000171,Joette,"granted, somewhat unorthodox use of core async...; oh and my solution with partition-by and interleave above was crap"
1711,1512991174.00023,Daine,"```(def test-vec [\a \b \c :f \d:f \e \f :f]) 
(second (reduce #(if (= :f %2)(let [n (+ 1 (first %1))][n (conj (second %1) n)])[(first %1)(conj (second %1) %2)]) [0 []] test-vec))
[\a \b \c 1 \d 2 \e \f 3]```"
1712,1512991713.000266,Berry,"sorry, it's `(recur (update cur))`"
1709,1512991769.00007,Joette,"<@Daine> doesn't that just increment the 1, 2, 3? the thought was that those values would come from a second vector and could be anything, i.e. the second vector could be `[:x :y :z]` and give `[\a \b \c :x \d :y \e \f :z]`?"
1711,1512991843.000249,Daine,"yes, sou your looking for something else"
1709,1512992126.000013,Joette,"guess I'm starting to like channels for this, feel free to rid me of my infatuation with my newfound use of channels if this is for some reason a bad idea; guess the general question would be if it is bad style to pull in core.async just to manage state even in the absence of any concurrency aspects"
1709,1512992376.000019,Randee,<@Joette> You never do anything in your first benchmark. `map` is lazy.
1709,1512992553.000347,Joette,"<@Randee> - doh, thank you. Not sure how many times I've done this now"
1709,1512992568.000257,Randee,"Also: You have to recreate your channel among interations. The second loop you'll just insert nil all the time.; If you want something stateful and avoid core.async hack you can just create a function like that:
```
(defn make-iter
  [x]
  (let [idx (atom -1)]
    (fn []
      (nth x (swap! idx inc)))))
```"
1709,1512992697.000129,Daine,```(second (reduce #(if (= :f %2)[(rest (first %1)) (conj (second %1) (first (first %1)))][(first %1)(conj (second %1) %2)]) [[1 2 3] []] test-vec))```
1713,1512993953.000072,Joette,"Ok, Monday, making too many mistakes,  signing off"
1713,1513004525.000015,Johana,"Does it make sense for clojure to support this kind of type hinting?
```
(defn f [^longs [x y z]]
    (+ x y z))
```; so for individual elements it will be inferred that they are longs?"
1714,1513004903.000325,Sandy,<@Elfreda> has been working on a lot of that sort of stuff for some time. IIRC he got some of it working with stock clojure
1709,1513004909.000117,Kareen,no ; ^longs means long array
1709,1513004947.000291,Sandy,"But sadly, to implement multi-shot handlers in Clojure you'd need some sort of delimited continuation support. The JVM makes that close to impossible (as does almost every other VM on the planet); you can do that with reduce I think"
1709,1513005017.00081,Johana,"<@Kareen> 
&gt; What about when you have a sequence of values, all of a uniform type? Clojure provides a number of special hints for these cases, namely ^ints, ^floats, ^longs, and ^doubles.
<https://github.com/clojure-cookbook/clojure-cookbook/blob/master/08_deployment-and-distribution/8-05_type-hinting.asciidoc>"
1709,1513005035.000339,Sandy,but a loop may be easier.
1709,1513005054.000074,Johana,"also `(apply + ^longs (list 1 2 3))` works, maybe just by luck"
1709,1513005063.00045,Sandy,"And actually I don't think you need the loop in there ethier; ```
(defn fix-point [cur test update]
  (if (test cur)
    (recur (uprate cur) test update)
    cur))
```"
1709,1513005157.00012,Dirk,"That lets you do this without reflection for the `Math/abs` call FWIW:
```
(defn f [^longs arr] (Math/abs (aget arr 0)))
(f (into-array Long/TYPE [-1]))
```"
1713,1513005337.000127,Kareen,"<@Johana> the line after the one you posted: 
&gt;Hinting these types will allow you to pass whole *arrays* as arguments to Java functions and not provoke reflection for sequences; the fact that your apply expression works is because the type hint is just never used there"
1709,1513005385.00051,Kareen,"no, don't use type hints on vectors; it just doesn't do anything; at best"
1709,1513005396.000417,Johana,"good point, thanks — text is a bit ambiguous about it"
1709,1513005400.000453,Kareen,at worse it can cause the compiler to crash
1709,1513005740.000097,Mallie,"Is there any handy function in Java or Clojure to coerce numbers *and* strings to long? We're parsing json, and there are fields we know are numerical, but sometimes they're strings and sometimes they're raw numbers. The json lib (Cheshire) converts the raw numbers to Integer, not Long, so we then can't use `(Long. ...)` on that, but equally `(long ...)` doesn't work when the value is a String rather than a number"
1709,1513006052.000407,Johana,"One minor question:
1:
```
(defn f [[x y z]]
  (apply + [x y z]))
```
2:
```
(defn f [[x y z]]
  (+ x y z))
```
why does Clojure give an uncheked warning on the last one, but not the first?"
1709,1513006060.000073,Randee,`Long/valueOf`? <@Mallie>
1709,1513006065.000199,Heide,"Since you mention “developing”, it seems to me that you want to communicate the (eventually shared) _mental model_ of the project. I remember reading an article on the need for this, and how different mental models over time cause problems or technical debt, but can’t find it."
1709,1513006192.000344,Mallie,"There's still no `(Long/valueOf ...)` that takes an Integer, sadly"
1709,1513006227.000579,Johana,<@Mallie> `#(Long/parseLong (str %))` ?
1709,1513006268.000936,Mallie,"That would work, yes. It's just a bit horrible :wink: But it would work..."
1709,1513006438.000533,Johana,<@Mallie> or something with `number?` or `string?` would work
1709,1513006532.00025,Mallie,Indeed
1709,1513006574.000086,Kareen,`(cond-&gt; x (string? x) (Long/valueOf))`
1709,1513006594.000317,Mallie,Just before I wrote something to wrap `Long.` for string and `long` for number I was wondering if there was something that already did that for me
1709,1513006598.000437,Necole,kinsky or franzy for working with kafka?
1709,1513006616.000487,Mallie,TBH we just have a very thin shim over the Java native stuff; For Kafka I mean
1709,1513006736.000382,Necole,"<@Mallie> That's an approach I often like to take too, with other libs"
1709,1513006881.000701,Angela,"<@Mallie> if you know the keys for which u want this (str or int -&gt;long ) conversion, I think cheshire supports supplying custom decode functions to specify types"
1709,1513007394.000515,Mallie,Will have to see if they think it's interesting enough to let me talk :wink:
1715,1513007854.000505,Daine,"What’s it about? I used to work with Kafka, did not yet work with it from clojure yet."
1709,1513010513.000483,Mallie,"We're doing a whole series of inverse ETL pipelines. Instead of extracting data from diverse systems, transforming it, and loading it into a common system we have 1 complex write system and a whole load of read-only clients with different requirements who don't want to have to understand the complexities of it; So we extract from the 1 system, do a whole load of transforms using Kafka topics to connect lots of microservices in a pipeline, then load to somewhere easily client-accessible like S3; The microservices are commodity a lot of the time, so we have the same code with a slightly different defined config in multiple pipelines"
1709,1513010996.00089,Heriberto,"Is that true that using functional programming usually has memory usage overhead?
For example, consider a typical task and typical FP solution for it (it was suggested by consultant).
Task: count all values equal to 10 in an array.
FP solution: `(count (filter #(= % 10) values-array))` which includes creation of intermediate array with all 10's.
What do you think?"
1709,1513011105.00079,Johana,"Generally true for operations on sequences creating more sequences, because it all has to be garbage collected, but if that becomes a problem you can either write a more efficient version using reduce, or use transducers, or use transients; E.g. using <@Marla>'s xforms lib: `(x/count (filter #(= % 10)) seq)`"
1709,1513011231.000112,Heriberto,<@Johana> Thank you! That means that Clojure is in better position here than Java 8+. There's <https://github.com/cognitect-labs/transducers-java> but it's not maintained anymore
1709,1513011945.000393,Sandy,"<@Heriberto> I've written versions of that count that use very little memory, and some in other VMs (JS, PyPy) that are allocation free.; Basically instead of counting via a seq you can use reduce and add to the accumulator. So it's something like (reduce inc 0 coll); (that's psudeo code though ^^)"
1709,1513012444.000763,Heriberto,<@Sandy> Actually I'm asking this to implement handling of map of vectors better. Looks like the best version would be to do reduce-kv which calls reduce in lambda function.
1709,1513012480.000527,Elfreda,"Yeah, at <@Sandy> says, this is definitely something I’ve explored a bunch. Unfortunately, the various multi-shot tricks are never going to work, but aborting (zero-shot?) is possible via exceptions, and the standard one-shot is pretty easily replicated by simple mutable state. Better yet, 1-shot can be modeled with dynamic variables pretty directly.; just like you can bind *out*, you can just bind a ^:dynamic function if you want; and you can play games with bound-fn, with-bindings, and macros and such to create reusable handlers"
1709,1513012769.00023,Sandy,<@Heriberto> not sure I understand? How does this change with a map of vectors?
1716,1513012787.000672,Johana,maybe he/she means map on vectors?
1716,1513014057.000724,Alline,is there a nice clojure wrapper for the twitter api that’s more up-to-date than <https://github.com/adamwynne/twitter-api> (which is missing `media/upload`)?
1716,1513016238.000281,Xavier,"I stumbled upon the fact that `aset-int`/`aset-long` are ~20x slower than `aset`. I googled around, but the best I could find was 
<https://groups.google.com/forum/#!topic/clojure/pZB501dQwjk>
and <http://www.brool.com/post/aset-is-faster-than-aset-int/>

does anyone have a reasonable explanation as to what’s going on?"
1709,1513016320.000708,Heriberto,"<@Johana> 
```
(ns etl
  (:require [clojure.string :as str]))

(def values {1 (re-seq #""\w"" ""AEIOULNRST"")
2 (re-seq #""\w"" ""DG"")
3 (re-seq #""\w"" ""BCMP"")
4 (re-seq #""\w"" ""FHVWY"")
5 (re-seq #""\w"" ""K"")
8 (re-seq #""\w"" ""JX"")
10 (re-seq #""\w"" ""QZ"")})

(defn transform  [dataset]  (-&gt;&gt; dataset
       (reduce-kv (fn [result score letters]
                    (apply assoc result
                           (flatten (for [letter letters]
                                       [(str/lower-case letter) score])))) {})))

(transform values)
;; output:
{""a"" 1 ""b"" 3 ""c"" 3 ""d"" 2 ""e"" 1
""f"" 4 ""g"" 2 ""h"" 4 ""i"" 1 ""j"" 8
""k"" 5 ""l"" 1 ""m"" 3 ""n"" 1 ""o"" 1
""p"" 3 ""q"" 10 ""r"" 1 ""s"" 1 ""t"" 1
""u"" 1 ""v"" 4 ""w"" 4 ""x"" 8 ""y"" 4
""z"" 10}
```; that's what I'm talking about; doing transformation of map {score: [letter1..letterN], score2: [...],...} to map {letter1: score1, ..., letterN: scoreN,...}; i.e. from map of scores to list of letters to map of letter to score; <@Sandy> 
&gt;not sure I understand? How does this change with a map of vectors?
I mean it would be great to have some super-reduce which could handle nested structures. I still find functions new for me in Clojure."
1709,1513016964.000544,Xavier,there is `tree-seq` and `clojure.walk`
1709,1513016998.00052,Johana,can you give an example of the output? it doesn’t compile
1709,1513017055.000067,Sandy,"Yeah, one thing that should be pointed out, is that seqs do allocation, and create garbage, but they are also *really* fast. Don't worry about using seqs at this point. You'll be surprised how fast something like `for` comprehensions work."
1709,1513017161.000187,Heriberto,"Try <https://github.com/chbrown/twttr> (up to date)
and <https://github.com/yusuke/twitter4j> (a bit outdated); <@Xavier> I'll try them.
<@Johana> It compiles, just requires clojure.string
<@Sandy> I'll take your word for it. :slightly_smiling_face: Speed is the main characteristic. And this method isn't processing gigabytes of data to worry about memory too much."
1709,1513017445.000408,Johana,"<@Heriberto> I got that, but I get  “Don’t know how to create ISeq from: java.lang.Long”. I’d rather have the expected output than the code."
1709,1513017566.000446,Heriberto,"<@Johana> Sorry for that, added `ns`, corrected input values and added output to code above."
1709,1513017665.00063,Johana,"<@Heriberto> What if there are duplicates? 1 -&gt; “abc”, 2 -&gt; “bxz” ?"
1709,1513017717.000343,Heriberto,"<@Johana> It's assumed that there are no duplicates.; just in case, `re-seq` here is just a shortcut for list of letters"
1709,1513017799.000023,Johana,"no need to use re-seq there, you can handle strings as a seq in most functions; Here’s how I would do it:
```
(defn transform  [dataset]
  (into {}
        (mapcat
         (fn [[k vs]]
           (for [v vs]
             [v k]))
         values)))
```"
1709,1513018094.000219,Heriberto,"<@Johana> Amazing, that's much better! Thank you a lot!
<@Xavier>, <@Sandy> Thank you very much too!"
1709,1513018345.000509,Margaret,"you can do this with drop-while and iterate ```=&gt; (first (drop-while #(&lt; % 100) (iterate #(* 2 %) 3)))
192```"
1717,1513018659.000019,Alline,"I checked twttr, which looks nice; it doesn’t support `media/upload` either, but it might be a nicer place to start for adding support for it."
1718,1513020836.000724,Berry,"<@Elfreda> <@Sandy>: is there a nice talk of this somewhere? regardless of whether it can be implemented in clojure, I want to understand how it works"
1718,1513021808.000402,Elfreda,<@Berry> <https://github.com/papers-we-love/papers-we-love/issues/9>
1718,1513022555.000464,Berry,"1. `:` does NOT appear to be a valid keyword
2. (keyword """") returns `:`
is this intended ?; <@Elfreda>: would you recommend installing <https://github.com/matijapretnar/eff> and playing with it for a weekend ?"
1718,1513022736.0004,Elfreda,¯\_(ツ)_/¯ if you want
1718,1513022738.00052,Charity,"Yes. `clojure.lang.Keyword/intern` does no validation. Not all possible keywords are readable.; Eg. `(keyword ""foo bar baz qux :/."")`"
1718,1513022760.000149,Elfreda,"if you already know ml/ocaml, it’s reasonable to play with it, but last i tried it, it was obviously academic demoware"
1718,1513022834.000656,Berry,"not for production use, the full question is:

suppose I wanted to spend a weekend learning how Effects work

would the most efficient route be to download eff and work through a few tutorials in it?; <@Elfreda>: ^^ // also, is this the same ""eff"" system that purescrit uses ?"
1718,1513022901.000222,Elfreda,"i can’t really answer that question, since i already had a grasp on the fundamental topics via the various analogies i describe in my talk - you’ll have to figure out a learning path that works for you"
1718,1513022917.000063,Eliana,"<@Xavier> regarding <https://clojurians.slack.com/archives/C03S1KBA2/p1513016238000281> `aset-int` (and similarly for the others) expands into something like:

```
(import '(java.lang.reflect Array))
(defn aset-int
  ([a idx v] (. Array (setInt a idx (int v))) v)
  ([a ^int idx v &amp; vs] (apply aset-int (aget a idx) v vs)))
```

which uses Array reflection. Apparently, it's a long standing JVM issue to improve performance in this area (<https://bugs.openjdk.java.net/browse/JDK-8051447>)."
1718,1513022937.000204,Elfreda,"I’m not super familiar with PureScript, but I believe it is a haskell-like and therefore Eff in Purescript is the “Eff Monad” which is more or less the same concept, yes; there’s also Oleg Kiselyov’s writings on “Extensible Effects”, “Extensible Interpreters”, “Freer Monads”, etc"
1718,1513024079.000397,Xavier,"Thanks for the insight!
Would be nice if that was mentioned in the docs. 
Is there any usecase for the `aset-*` functions over `aset` as it stands?"
1719,1513024744.000519,Margaret,<@Xavier> I think it lets you skip coercing the argument you want to set I guess?
1719,1513025198.00037,Eliana,"I guess similar to what array reflection is used in Java, building arrays at runtime with the type dependent on some params"
1720,1513026784.000218,Lois,"hello all, I have long waiting process in `(-&gt;&gt; [""<http://www.google.com|www.google.com>"" ""<http://www.microsoft.com|www.microsoft.com>""] (mapv #(future (ping-host %))) (mapv #(deref %)))`. How do I stop it in the middle of running?"
1720,1513026814.000481,Guillermo,you could deref with a timeout
1720,1513026918.000713,Lois,"how come? I want to force interrupt any time, not with timeout; is there any way?"
1720,1513026971.000172,Daniell,You can `cancel` a future.
1720,1513027005.000306,Lois,but I have to own the `future` references?
1720,1513027045.000177,Guillermo,a general good practice is to always enforce a timeout. it's better if you own the lifecycle of the future but not required
1720,1513027072.000244,Lois,is there any `cancel` all?
1720,1513027080.000254,Margaret,"future-cancel can be iffy, though it exists"
1720,1513027083.000374,Guillermo,`future-cancel` or call java interop
1720,1513027088.000492,Margaret,only certain methods are cancellable
1720,1513027093.000505,Guillermo,^
1720,1513027129.000669,Margaret,"but most code you would want to cancel is eventually hitting a sleep or an IO op, and those are the cancellable things; that reminds me I should figure out if a cancel will lead to a future exiting if it is doing a non-cancellable thing at that moment the cancel happens but then does a cancellable thing"
1720,1513027205.000618,Lois,"yes, I´m reading a socket; bot outside process can say stop to it; *but"
1720,1513027234.00041,Margaret,"but then you need the logic around when to future-cancel, and that’s where the time out arg to deref is convenient; if you have that logic already, sure, just hold onto the future and then cancel when needed I guess"
1720,1513027412.000193,Lois,"ok, but how do I have the future references from here? `(-&gt;&gt; [""<http://www.google.com|www.google.com>"" ""<http://www.microsoft.com|www.microsoft.com>""] (mapv #(future (ping-host %))) (mapv #(deref %)))`; change map to other looping function?"
1720,1513027447.000266,Margaret,"no, the references are what gets passed to deref; maybe you want a loop inside a future, where the future calls ping-host repeatedly"
1720,1513027482.000459,Lois,"oh, I see"
1720,1513027492.000283,Margaret,"what was the deref for, did someone need to consume the return value or wait for the pings?"
1720,1513027511.000452,Lois,wait for all the pings
1720,1513027537.000219,Margaret,"yeah, waiting for all the pings is weird if the pings are looping…"
1720,1513027603.000066,Lois,"well, is there any way to pass reference futre itself to ping-host?; so I have all futures references and kill them all from outside"
1720,1513027702.000283,Margaret,"maybe you want core.async or something - it sounds like your flow of data / execution design is still fuzzy?; because if there’s a loop in a future, what does someone wait on when waiting on a ping?"
1720,1513027761.000466,Lois,It´s in that way because I have to compare all the results with each other
1720,1513027795.000125,Margaret,but if it’s a loop you have multiple results to compare -
1720,1513027873.000437,Lois,the loop is only when waiting ssh session until ends; If I understand what you mean :slightly_smiling_face:
1720,1513027978.000034,Margaret,"so really what you want is one function that simultaneously opens an ssh connection and also loops on a ping, and then based on the ping time conditionally restarts the ssh connection?; so one thread does `(ssh host)` and the other does `(when (ping-takes-longer host reference) (restart-ssh host))` ?"
1720,1513028063.00072,Lois,"this is happening already, I want to know how to stop it when it´s runnig, any time I want"
1720,1513028123.000118,Margaret,"so the thread you want to cancel isn’t the ping, it’s the ssh"
1720,1513028173.000156,Lois,"I´m saying ping and ssh because it´s remote ssh ping; I have to ssh to some router/firewall and get the output ping from it; this is working already, but I have stop control from outside; that came from kill sign"
1720,1513028321.000132,Margaret,then store the future somewhere that the code that wants to cancel can call `cancel-future` on it?
1720,1513028373.000326,Lois,"yes, but how can I get the references of `futres` from that maps?; `(-&gt;&gt; [""<http://www.google.com|www.google.com>"" ""<http://www.microsoft.com|www.microsoft.com>""] (mapv #(future (ping-host %))) (mapv #(deref %)))` using other function outside future?; `(-&gt;&gt; [""<http://www.google.com|www.google.com>"" ""<http://www.microsoft.com|www.microsoft.com>""] (mapv #(store-future (future (ping-host %)))) (mapv #(deref %)))` ?"
1720,1513028601.000163,Margaret,"you need a let block to get the future itself; `(let [hosts [""<http://www.google.com|www.google.com>"" ""<http://www.microsoft.com|www.microsoft.com>""] futures (mapv #(future (ping-host %)) hosts)] {:futures futures :results (mapv deref futures)})`; that way you can get results you can check, and also the futures"
1720,1513028824.00024,Lois,"yes, you right, but I have to use some atom passed from outside to use it in other stoping function. Thanks alot"
1721,1513030694.000601,Berry,"```
(defn update-something [stack f]
  (conj (pop stack) (f (peek stack))))
```

how should I name this function? neither -last nor -first makes sense since stack can either be list or vector; update-top ? is that the best?"
1721,1513030911.000394,Bibi,<@Berry> poke?; or some combination of that with another word
1722,1513039766.00029,Alline,"In case anyone cares, I’ve submitted a pull request to `twitter-api` that adds support for `media/upload`, including chunked upload, which means you can now post tweets with images, videos and animated gifs from clojure: <https://github.com/adamwynne/twitter-api/pull/77>"
1723,1513064983.00004,Catharine,"so i notice that my code has this pattern around quite a bit

```(if (some? x)
 (do-stuff x)
 x)```

what's the idiomatic way to address this more elegantly ? am i simply oblivious to a function that exists for this ?; i guess ```(some-&gt; x do-stuff)``` does the trick ?"
1723,1513067532.000034,Buck,"`some?` returns true if its argument isn't nil … depends on whether you really care about nil or logical false. If logical false is ok:
```(when x
  (do-stuff x))``` 
also works"
1722,1513067571.000207,Buck,"it will return nil in the case where the test doesn't return logical true, so be aware of that ..."
1722,1513068170.000062,Jodie,"Your else case always returns nil here I guess, so there's that."
1723,1513068206.000167,Catharine,yeah i think i gave a bit wrong example
1722,1513068233.000302,Jodie,"<http://clojuredocs.org/clojure.core/when-some>

This is useful if there's an expression involved"
1723,1513068243.000401,Catharine,"i think this better illustrates the pattern:

```(if (condition x)
  (do-stuff x)
  x)```"
1722,1513068325.000242,Catharine,"i ended up rewriting this as

```(cond-&gt; x
 (condition x)
 (do-stuff))```"
1724,1513070119.000164,Renata,"Struggling to get `clj` / tools.deps to work, getting: `Error building classpath. Unknown coordinate type for org.clojure/clojure: {:type :mvn, :version ""1.8.0""}` Anyone know why that could be?"
1724,1513071347.000372,Jodie,"Yeah, I find myself doing that a lot, don't like it either."
1724,1513071378.000055,Fe,<@Renata> what's your command line?; and your deps.edn?
1724,1513071403.000053,Jodie,There's a macro by a JUXTer called condas-&gt; which solves this a little I think. 
1724,1513071408.000283,Renata,"<@Fe> just `clojure` or `clj`. I do have a deps.edn which contains this: 
```
{:deps
 {clj-time {:mvn/version “0.14.2”}}}
```"
1724,1513071425.000143,Fe,does it work from an empty directory?
1724,1513071429.000076,Renata,(which is copied from the guide); same error in empty directory
1724,1513071451.00025,Fe,is it the latest version? (`brew upgrade clojure`)
1724,1513071474.000011,Renata,I did reinstall / make sure it’s up to date
1724,1513071484.000156,Fe,what's the output of `clojure -Sverbose`; (also `which clojure`); check the files in ```config_paths = /usr/local/Cellar/clojure/1.8.0.193/deps.edn /Users/me/.clojure/deps.edn deps.edn```; you may need to delete `~/.clojure`
1724,1513071536.000469,Renata,"that was it, thanks!"
1724,1513071541.000316,Fe,:information_desk_person:
1724,1513071574.000328,Renata,I looked for the user config but didn find it (thought I never created one so probably just didn’t look hard enough); Would be nice if the error indicated which file the error comes from
1724,1513071633.000042,Fe,"The config is an overlay of the 3 edn files laid on top of each other, so this might be difficult; But maybe it could say ""Error: ... - the config files used were x, y and z"""
1724,1513071791.000026,Renata,yeah I guess that would already be a good improvement
1724,1513071814.000156,Fe,there's <https://dev.clojure.org/jira/browse/TDEPS>
1724,1513072035.000348,Renata,"<@Fe> do you know if the `clj` command does any preprocessing of the deps.edn file?; ```
(tools-deps/resolve-deps (read-string (slurp ""deps.edn"")) {})
```
trying this but getting `Unknown coordinate type for clj-time: #:mvn{:version “0.14.2”}`; just running `clj` works fine"
1724,1513072136.000267,Fe,"is it because of the overlay effect I mentioned?; Try using this instead: ```(-&gt;&gt; ""/usr/local/Cellar/clojure/1.9.0.273/deps.edn /Users/me/.clojure/deps.edn deps.edn"" split-by-space (map slurp) (map read-string) (apply merge))```; (pseudo-code); not sure how that explains the error message though"
1724,1513072327.00002,Renata,same issue
1724,1513072363.000091,Fe,not sure then
1724,1513072369.000259,Renata,FWIW all files seem to be using the same syntax as my local `deps.edn`
1724,1513072470.00034,Fe,There's <#C6QH853H8|tools-deps> as well btw - Alex is hanging out there
1725,1513083586.00009,Berry,"```

(defn vec-&gt;map [v]
  (into {} (reverse  (for [[i k] (keep-indexed vector v)]
                    [k i]))))

(vec-&gt;map [:a :b :a :d])
(comment
 {:d 3, :a 0, :b 1})


```
is there a builtin for this/ it builds a map of ""first of index"" for each value"
1726,1513086055.000026,Jodie,I actually just wrote this code for a coercer.
1725,1513087867.000244,Joette,"<@Berry> 
```
(vec-&gt;map [:a :b :c])
=&gt; {:c 2, :b 1, :a 0}
(zipmap [:a :b :c] (range))
=&gt; {:a 0, :b 1, :c 2}
```
but I assume I'm missing some aspect of the requirement here?"
1725,1513087922.000474,Noella,<@Joette> that will give you the last index instead of the first if you have duplicates in the array
1725,1513087941.00043,Joette,"ah, ok just saw the second `:a`"
1725,1513088286.000432,Noella,"here’s my variation:
```(reduce (fn [m [i k]] (if (get m k) m (assoc m k i))) {} (map-indexed vector [:a :b :a :d]))```"
1725,1513088484.000309,Joette,"you could still go zipmap:
```
(defn f[v]
    (zipmap (reverse v) (reverse (range 0 (count v)))))
```"
1725,1513088572.000155,Noella,that will be slow if you have large sequences though
1725,1513089061.000859,Joette,"how about: 
```
(defn f[v]
    (zipmap (rseq v) (range (dec (count v)) -1 -1)))
```
?
`rseq` is constant time, range is fast as it's bound and not explicitly reversed etc; a simplistic bench seems to put them more or less on equal footing, though it seems that rseq is picky and &lt;edited&gt;only lkes vectors and sorted maps&lt;/edited&gt;: 
```
(def my-v (mapv (comp keyword str) (range 1000000)))
=&gt; #'user/my-v

(defn f[v]
    (zipmap (rseq v) (range (dec (count v)) -1 -1)))
=&gt; #'user/f

(defn g [v]
  (reduce (fn [m [i k]]
            (if (get m k)
              m
              (assoc m k i)))
          {}
          (map-indexed vector v)))
=&gt; #'user/g

(take 2 (time (f my-v)))
""Elapsed time: 504.559267 msecs""
=&gt; ([:821597 821597] [:323982 323982])

(take 2 (time (g my-v)))
""Elapsed time: 744.353442 msecs""
=&gt; ([:821597 821597] [:323982 323982])
```"
1727,1513091988.00058,Noella,neat benchmark!; can you give it a shot with a `transient` map for the `reduce` version?
1728,1513095027.000862,Sandy,"Might also consider using reduce-kv:
```
(reduce-kv assoc
           {}
           [4 3 2 1])
```"
1729,1513097713.000168,Jonnie,"I am trying to extend a Java class (add a new method) and call a private method of that class inside it.
I tried with `proxy`, I can override an existing method (not a new one) - but can’t seem to access `this` in the overridden code.
Is `gen-class` my only option?"
1728,1513098726.000619,Sandy,"With this sort of OOP gook, it's often better to write your code in Java and then call that via Clojure.; Or use gen-class, but that's rather hard to get right; <@Jonnie> if you go the java route, I highly suggest trying this lein plugin: <https://github.com/ztellman/virgil> it autoreloads Java classes when the .java files change. Makes playing with Java/Clojure interop a lot faster."
1728,1513098888.00061,Jonnie,"Appreciate the advice, thanks :smile:
(yeah gen-class doesn’t look like the most welcoming bit of Clojure)"
1728,1513098930.000544,Kareen,"yeah stay away from gen-class; there's <https://dev.clojure.org/jira/browse/CLJ-1255> which would help in most cases where people now reach for proxy/gen-class; if you care, vote for it"
1728,1513099189.000443,Margaret,"it’s an option to define a protocol with the method you want to implement, then proxy the class and also that protocol"
1728,1513099293.000178,Jonnie,"yes the real problem is access to `this` private methods (overriding an existing method is fine, performance is not a problem)
I am actually considering a thin separate Java wrapper library now; I would probably have used `CLJ-1255` if it was there already - so will upvote even though I can’t comment on the actual implementation (EDIT - will upvote once I find my login back); Thanks all :smile:"
1728,1513099478.000389,Rebeca,bronsa: do you think you could write that as a macro and release it as a library outside of core?
1728,1513099486.000648,Kareen,"I could; it's not worth it tho; I mean, the current impl reuses half Compiler.java; I really don't have it in me to reimplement it"
1728,1513099533.000448,Jonnie,(I must admit I eyed the patch to check if it was self-contained in a ns :stuck_out_tongue: )
1728,1513099535.000065,Rebeca,(again)
1728,1513099573.000284,Kareen,"but yeah, I've thought about it"
1730,1513100542.000311,Eleonore,"anyone have insight into this behavior? I am really at a loss here; ```
=&gt; (do (defrecord Foo []) Foo)
user.Foo
=&gt; (identity (do (defrecord Bar []) Bar))
CompilerException java.lang.RuntimeException: Unable to resolve symbol: Bar in this context, compiling:(null:1:10) 
```"
1730,1513100588.00046,Kareen,yes; it's commonly called the gilardi scenario; see <https://technomancy.us/143>
1730,1513100724.000174,Eleonore,"ahhh interesting. That's a very helpful link, thanks!"
1730,1513100819.000578,Kareen,"tl;dr: clojure's compilation unit is the top level form, the compiler explodes top level `do`s and treat them as N compilation units. From within a single compilation you don't see the effects of runtime operations on namespaces like `require` (in the case of that blog post) or `import` (in your case)"
1731,1513106793.000339,Berry,"<@Sandy>: iirc, in one of your odin videos, you take an XML tree, flatten it into eav triples, and use a mini-logic language to query over it

this seems to be like ""collection oriented programming"", in the spirit of SQL/APL

do you know of other examples / tutorials of doing ""collection oriented programming"" ? (it s'like mapfilter/..., but more 'structured')"
1731,1513107003.000227,Sandy,<@Berry> there's some stuff like that in core.logic.; And it's all fairly close to XSLT; <https://github.com/clojure/core.logic/blob/master/src/main/clojure/clojure/core/logic/pldb.clj>
1731,1513107712.000109,Berry,"<@Sandy>:

1. is <https://en.wikipedia.org/wiki/XSLT> XSLT ? (I'm not drawing the connection, and not familiar with XSLT)

2. I've been looking at APL + SQL a lot lately, and it seems possible to write general purpose (for some def) programs in those languages, and they have this notion of ""everything is a tensor . everything is a table of rows"" that is a bit stronger than clojure collections, but I can't quite understand it"
1731,1513107720.000857,Myles,seems like everyone gave up on xslt which is too bad; xslt is great
1731,1513107761.000128,Sandy,"<@Berry> yeah, XSLT is a query/transformation language for XML written in XML ( :neutral_face: )"
1731,1513107798.000366,Myles,"the syntax is mindboggling, but you can do some very complex translations in an incredibly simple way; unfortunately, pretty much everyone left it behind 10 or 15 years ago"
1731,1513107825.000572,Berry,"that's not too bad right? xml is basically
`(foo ...)` -&gt; `&lt;foo&gt; ... &lt;/foo&gt;`"
1731,1513107832.000719,Sandy,"Exactly, convert all the XML to EDN and it wouldn't be half bad.; So those are the big ""query arbitrary nested data"" techs I'm aware of.; There's also JQuery and libs like Specter, but they differ a little in their lack of joins and multiple data sources."
1731,1513108030.000472,Berry,"I'm interested in using APL / SQL for things beyond 'querying databases', and then porting the style to Clojure. For example, things like dijkstras algorithm / topological sort can get implemented in a particular way in APL, as well as game of life.; And translating that over would get clojure code very different in style from 'common/idiomtic clojure style'"
1731,1513108210.000242,Petronila,"&gt; Exactly, convert all the XML to EDN and it wouldn’t be half bad.
Sort of funny in the use of the word “half” here; It’d be about half; (well better really, but close enough :stuck_out_tongue: )"
1731,1513108252.00061,Sandy,":slightly_smiling_face:; funny enough though, whenever I work with XML I *really* want something like XSLT in Clojure. Especially something where I can feed it 20 queries and an optimizer will compile it all down to a single fast gather function"
1731,1513108367.000369,Petronila,sounds like a TODO for someone
1732,1513109725.00001,Elijah,"Well, this might be too literal of an interpretation of ""XSLT in Clojure"", but <https://github.com/eerohele/sigel> :stuck_out_tongue:; &gt;xslt is great

Must be the first time I've ever heard anyone say that. Not quite everyone left it behind, though — it's still quite heavily used in the wonderful world of technical documentation and publishing."
1733,1513111256.000374,Williemae,love the headshot that goes with it
1732,1513111285.000198,Elijah,"It's pretty obnoxious to see your own face like that, I always forget that happens when you paste a GitHub link here… sorry about that."
1733,1513111310.000354,Williemae,"haha well it’s github’s fault really; &gt; xslt is great
I feel like this might have been more common to hear pre-json.; i seem to remember finding it to be neat back in college, but we’re talking early-&gt;mid 2000's."
1734,1513111612.000361,Billi,"Hi all: I'm working on a boot based web-app. The environment is set up in a way that allows me to develop and deploy it directly, but I would also like to be able to use it as a basis for derived apps that would extend the core tech. It seems there would be two approaches to this:
1) fork the repo, and use standard distributed git workflows to merge features between the core and derived apps
2) package the core app as a library to be consumed by other projects
The first would seem to make it pretty trivial to merge features back and forth between the different forks, but would eliminate the distinction between upstream and downstream. The second would maintain a very clear distinction about where features are coming from to make a coherent system, but makes integrated development a little more cumbersome. I'm wondering if folks have had experience with deriving one app from another, and what approach they used to do integrated development (either the first or second approach above, or some third approach)."
1733,1513111669.000389,Williemae,"could use git submodules instead of forking; not everyone likes them though, but it’s a matter of taste"
1733,1513111752.000444,Elijah,"<@Williemae>: Just curious, did the headshot disappear for you? Wondering whether what I did to remove it works for just me or everyone…"
1733,1513111775.000088,Williemae,yeah looks like whatever you did removed your profile image
1733,1513111778.000407,Elijah,Awesome.
1733,1513112038.000337,Williemae,<@Billi> for #2 i think the question becomes how often are the sdk and clients developed in tandem?  If the workflow is very often going to be the client dev is also working on the core sdk to create their features then perhaps doing a lib distribution is not the most efficient way of doing it..at least at the beginning.  If your core sdk doesnt change much and may occasionally need updates maybe the extra overhead is something you can live with. Maybe it’ll also encourage more thoughtful api design since it’ll be a pain to work on the core sdk :wink:
1733,1513112719.000521,Billi,"<@Williemae>: thanks for the submodules rec, I haven't used them in a while, so I will have to do a bit more reading. In another channel, someone recommended the use of ""checkout"" dependencies, which I had not heard of, but also looks like an interesting alternative."
1732,1513112736.000675,Heriberto,<@Elijah> How did you removed that picture? Wherever I paste Github link it always looks like that.
1733,1513112818.000157,Williemae,ah yeah i guess that’s a boot-specific thing
1733,1513112879.000308,Billi,Think also for lein as well: <https://github.com/technomancy/leiningen/blob/master/doc/TUTORIAL.md#checkout-dependencies>
1732,1513114208.000104,Tameka,"how can I format
```0.0115```
to be
```0.01150000```
?
I was trying like this:
```(format ""%.8f"" 0.0115)```; but throws an error all the time; hmm it seems to be working in repl :confused:; ah nvm, found this
<https://stackoverflow.com/questions/34667532/clojure-clojurescript-e-g-the-format-function>"
1733,1513116924.000309,Jodie,"<@Sandy> you seem to give a lot of value to logic programming. But I don't ever seem to find a practical use for it in my work, so I presume I'm missing something. Any hints?"
1735,1513147534.000177,Elijah,"If you hover over the area where the picture is, an X icon appears to the left of the gray border. Click there and Slack asks you whether you want to remove the attachment."
1736,1513150129.00001,Berry,"given a vector `v` and an int `n` what is the fastest way to drop the last `n` elements of `v` i.e. 

`v=[1,2,3,4]` `n=1` -&gt; `[1,2,3]`"
1736,1513150181.000147,Randee,`drop-last`?
1736,1513150221.0002,Berry,"oh, ahd I need a vector, not a lazy sedq back; basically, I want pop-n"
1737,1513150772.000128,Heriberto,"Thank you, <@Elijah>!"
1736,1513151041.000198,Isabel,"Nothing ready AFAIK, and I don't know how fast (apply vector (drop-last 1 [1 2 3 4])) would be."
1736,1513151655.00023,Noella,<@Berry> with Specter: `setval (srange (count v) (- (count v) n) NONE v)`; there is probably a better way to figure out the indexes; that will give you a vector back
1738,1513155737.000146,Mallory,hello guys
1739,1513156550.000491,Mallory,what is the best to handle deeper maps in clojure with only make affect on the most inner map for example:; {:t1 {:f1 {:l1 {:name :hello}}} :t2 {:fff2 {:ll2 {:name :world}}}
1739,1513156644.000037,Evelyne,<@Mallory> did you have  a look at <https://github.com/nathanmarz/specter> already?
1739,1513156662.000359,Mallory,nope; what i want to achieve is handle the last map without affecting other
1739,1513156788.000026,Maggie,"(assoc-in map [:t1 :f1 :l1 :name] ""goodbye"")"
1739,1513156825.000246,Mallory,<@Maggie> that's true if the keys are equivalent; but they aren't; are transducers helpful here?
1739,1513156858.000204,Maggie,what are trying to change?
1739,1513156871.000247,Mallory,most inner map only without affecting the outer structure
1739,1513156899.000355,Maggie,clojure.walk/postwalk should do it; recursive traversal of the tree
1739,1513156965.000012,Mallory,okay good; thanks guys
1739,1513157146.000024,Evelyne,"If you have more cases like this, I would still like to encourage you to check specter. But of course it might also be that you prefer to keep going with vanilla Clojure! :+1:"
1739,1513158742.000164,Mallory,"<@Evelyne> thanks, seems specter very cool, and i guess it solve my issue with handling inner data structures, is there any connection between specter and transducers ?"
1740,1513158834.000335,Kareen,no need for specter to drop n elements of a vector; just use subvec
1740,1513159309.000418,Mallory,<@Kareen>?
1740,1513159385.000483,Kareen,?
1740,1513159503.000072,Noella,"<@Kareen> ahh, true! forgot about that one, much better fit in this case"
1739,1513160186.000231,Evelyne,"haha, lol. I didn’t see that there was a reference to specter already just a few lines above. :smile: Wow, I was confused :smile:"
1739,1513163214.000141,Mallory,<@Evelyne> can you help with specter question
1741,1513163258.000178,Mallory,"(s/select [MAP-VALS MAP-VALS MAP-VALS :title (filterer (fn [s] (empty? s)))] res), i'm trying to select hash maps which has non-empty :title; i got this: IllegalArgumentException Don't know how to create ISeq from: java.lang.Character  clojure.lang.RT.seqFrom (RT.java:542); oh got it; (s/select [MAP-VALS MAP-VALS MAP-VALS :title (fn [s] (empty? s))] res); without filterer; <@Evelyne> thanks for referring this nice lib to me; another question; (s/transform [MAP-VALS MAP-VALS MAP-VALS (fn [h] ((comp not nil?) (re-find #""wow"" (:title h))))] identity res) why not i got all titles with ""wow"" string and got all values ?; i only want to filter those which has wow string"
1742,1513165534.000496,Jena,"is there a good way to measure how many threads are calling a function at the same time?; i'm now abusing java.util.concurrent.Semaphore with more permits than i will ever need, does anyone know a better way?"
1743,1513167649.000135,Jodie,"I notice that <https://clojure.org/guides/getting_started> uses an unversioned install script, this is problematic for reproducible builds. Is there an alternative url?; Looks like the expectation is that the linux install script will not be used by packages. But the contents will be replicated into a build step. Got it."
1742,1513170607.000389,Sonny,"It is versioned and there is a actually a versioned script in the same location as well. I would like it to be used by packages if possible rather than replicating stuff. If you’re working on something, please let me know."
1744,1513173139.000045,Owen,<@Mallory> what's the input data for that code?
1744,1513176250.000053,Mallory,"<@Owen> Hello; i'm in another situation now, if i have set of hash maps like this:
 [{:s1 ""cool"" :p1 [{:name ""hello""} {:name ""world""}]},  {:s2 ""cool2"" :p1 [{:name ""wow""} {:name ""world""}]}]; how can i get the full hash maps which contain ""wow"" in this paths [MAP-VALS :p1 :name] ?; so in this case i should get : [{:s2 ""cool2"" :p1 [{:name ""wow""} {:name ""world""}]}]"
1744,1513176625.000364,Owen,"i think this is what you're looking for: `(select [ALL (selected? :p1 ALL :name (pred= ""wow""))] data)`"
1745,1513177777.000771,Sandy,"Logic programming is a tool I use in what I call ""code compression"". As time goes on and a codebase grows I tend to see high level patterns that I would like to compress. For example, I may have a large XML structure that I'm parsing and I'm using tons of `get-in`s, reducing over the results and emitting them into some other format.; So at a basic level what I try to find are ""code compression"" algorithms that allow me to express the ""what"" without the ""how"". Often this goes beyond stuff like `get-in` or specter as I also need aggregation, advanced predicates, etc.; Most of the time what I end up using is an ad-hoc engine that does just enough to fulfill the needs of a given client, but I'd love to see something more advanced.; Once you have a DSL of sorts that expresses declaratively what you want to do, the next question is ""how do I optimize the output of this engine"". This also then allows me to separate the ""what"" from the ""how to do it fast"".; Instaparse follows this, you express the ""how"" in the EBNF language, and then the parser engine figures out how to make it fast. If in the future Instaparse figures out how to optimize some construct, I don't have to change my code, I just pull down their new lib.; The same thing could be done in a very simple way with something like get-in. Perhaps get-in could take many paths and then find common sub-paths in the arguments only traversing into children once per unique subpath."
1746,1513178146.000032,Mallory,<@Owen> very good thanks :slightly_smiling_face:
1745,1513178176.000349,Mallory,and thank you for specter
1746,1513178307.000046,Owen,"<@Mallory> sure thing, feel free to jump into the <#C0FVDQLQ5|specter> channel if you have more questions"
1747,1513179912.000376,Renata,"```
Caused by: java.lang.OutOfMemoryError: Java heap space
        at java.util.Arrays.copyOf(Arrays.java:3332)
        at java.lang.AbstractStringBuilder.ensureCapacityInternal(AbstractStringBuilder.java:124)
```
Running into this ^ in a project where I previously never had issues with heap space. The stacktrace seems to indicate that I’m trying to print an infinite seq or something like that but there’s nothing in the stacktrace telling me where it’s coming from — anyone suggestions how I could debug this? (full stacktrace: <http://sprunge.us/UUGN>)"
1747,1513180125.000551,Eliana,"<@Renata> I'd be tempted to say to look into a sudden grow in size of some external data dependency, assuming your code depending on some and you didn't change anything"
1747,1513180191.000136,Weston,"could be something leaking slowly; having metrics on jvm heap usage helps to spot this kind of things; then you can also reduce the size of the heap then enable heap dumps and be ready to crawl into logs, but the few times I had to deal with that, correlation with metrics/commits when it started was enough"
1747,1513182204.000981,Renata,"To my surprise I can’t find any commit that does not produce an OOM exception. :disappointed: I did take a heap dump and there are about 1.1M maps with dates and all kinds of things so these seem to be retained somehow, either because they are printed as the stacktrace seems to indicate or because I’m somehow holding on to the head of a sequence. Do you have any recommendations to figure out where this is happening?; I’m really stunned that this issue seems to appear even with older commits"
1748,1513182484.000604,Sandy,"<@Renata> do you have access to a memory profiler (like yourkit?) they can often perform memory retention analysis. ""1.4mil dates, held by these two references..."""
1748,1513185293.000617,Renata,"I have no idea what happened but the issue seems to just have gone away, what the heck? :flushed:"
1748,1513185837.000215,Bibi,"Heisenbugs, the worst kind."
1748,1513185969.0003,Margaret,you could benchmark `(into [] (subvec v ...))` vs `(nth (iterate pop v) n)`; I wonder if vectors are smart about using subvecs via structural sharing
1748,1513186180.000039,Daniele,"Is there a variant of `partition` that, instead of asking for partitions of size N, I can ask for N partitions?"
1748,1513186421.000078,Kareen,no but it's easy to write one
1748,1513186425.000788,Raul,"<@Daniele> Not that I'm aware of, you'll have to make it yourself. It's presumably not included because in order to have exactly N partitions of roughly equal size, you have to know the size of the entire collection ahead of time, which means it's inherently unable to be lazy"
1748,1513186437.00072,Kareen,"the reason why it's not in core is that your function needs to know the lenght of the collection; well, what <@Raul> said :)"
1748,1513188812.000415,Daniele,"<@Kareen> <@Raul> thanks guys. Ended up here:
```
;; adapted from <https://stackoverflow.com/a/2135920>
(defn chunkify
  [values n]
  (let [cnt (count values)
        [k m] [(quot cnt n) (rem cnt n)]]
    (for [i (range n)]
      (subvec values
              (+ (* i k) (min i m))
              (+ (* (inc i) k) (min (inc i) m))
              ))))
```"
1749,1513188834.000312,Daniele,"Not nearly as pretty as the Python version, but it works :slightly_smiling_face:"
1749,1513188924.000035,Margaret,"wait, am I missing something, why concat?; oh, if I’m not mistaken that concat is a noop"
1749,1513188972.000263,Daniele,Ah! Yes you're right.
1749,1513189034.000545,Randee,<@Daniele> Why not just compute the `n` that you'd need for `partition-all`?
1749,1513189151.000447,Raul,"something like ```(defn partition-n-groups [n coll]
  (partition-all (int (/ (count coll) n)) coll))```"
1749,1513189191.000298,Daniele,"<@Raul> counter example:
```
(partition-n-groups 3 [1 2 3 4])
```; Returns:
```
((1) (2) (3) (4))
```; <@Randee> I actually was initially, but I was running into edge cases like above"
1749,1513189226.000176,Margaret,"yeah, I think you want to round up instead of down"
1749,1513189298.000111,Raul,"agreed ```(defn partition-n-groups [n coll]
  (partition-all (Math/ceil (/ (count coll) n)) coll))```"
1749,1513189347.000053,Margaret,"it’s still off ```(ins)user=&gt; (defn partition-n-groups [n coll]
  (partition-all (Math/ceil (/ (count coll) n)) coll))
#'user/partition-n-groups
(ins)user=&gt; (partition-n-groups 3 [1 2 3 4])
((1 2) (3 4))```"
1749,1513189365.000388,Daniele,"Mhm...I'm afraid rounding just trades one edge case for another :confused:; Which led me to asking you all, and arriving at that Python implementation."
1749,1513189442.000201,Randee,<@Daniele> Well what should it return? The last el dropped or the last element merged into the last collection?
1749,1513189466.000046,Daniele,"<@Randee> it should ideally keep all elements, like `partition-all` does; As far as grouping goes, I'm not too picky. It's fine if an element ends up in any grouping."
1749,1513189506.000009,Raul,<@Daniele> are you trying to guarantee that you 1.) don't drop any elements and 2.) have exactly `n` groups in the output?
1749,1513189540.000271,Daniele,"<@Raul> exactly that. I'm specifically dealing with `n = 3`, and there are guaranteed to be `&gt;= 3` elements in the input coll; I should add that the sort order should remain intact"
1749,1513190208.000385,Margaret,"<@Daniele> interesting problem - I think this solves it ```(defn partition-n
  [n coll]
  (let [c (count coll)
        r (rem c n)
        q (quot c n)
        N (+ q (if (zero? r) 0 1))]
    (partition-all N coll)))```; perhaps N should be `(if (zero? r) q (inc q))`"
1750,1513190253.000675,Margaret,(same result)
1750,1513190336.000217,Deneen,"Can I have a spec conformer for a map that will cherry-pick required keys? Something like:
```
(s/def ::bid (s/merge (s/keys :req-un [::title ::value])
                      (s/map-of #{::title ::value} any?)))

(s/def ::safe-bid
  (s/and
   (s/conformer #(select-keys % #{::title ::value}))
   ::bid))

(s/conform ::safe-bid {:title ""reveal"" :value 0.1 :extra ""foo""})
```
That would return:`=&gt; {:title ""reveal"" :value 0.1}`"
1749,1513190348.000204,Daniele,<@Margaret> ah that's _much_ cleaner
1749,1513190374.000365,Margaret,"could maybe use longer names, but hey it’s so mathy maybe one letter names are OK haha"
1749,1513190478.00039,Daniele,"<@Margaret> hmm...I'm getting:
```
=&gt; (partition-n 3 [1 2 3 4])
((1 2) (3 4))
```"
1749,1513190494.000107,Margaret,hmm; clearly I didn’t try enough test cases
1749,1513190519.000504,Daniele,_runs to get test.check_
1749,1513190849.000324,Margaret,<@Daniele> aha - there’s no way for partition-all to return a collection of length 3 if given a collection of length 4; d’oh
1749,1513190916.00068,Daniele,Thaaaat could be a problem haha
1749,1513190930.000417,Margaret,I bet there’s still an elegant solution though…
1749,1513190946.000058,Daniele,Python makes it look so nice...; Practically a one-liner
1749,1513190979.000196,Raul,what is the python version?
1749,1513191388.000321,Daniele,"<@Raul> hm, not sure; Looks to be pretty standard python list comprehension"
1749,1513192772.000632,Berry,<https://clojuredocs.org/clojure.core/subvec> &lt;-- O(1) time according to docs
1751,1513192883.0002,Berry,"Is there a Clojure DSL for specifying parallel computations on tensors that:

on Desktop, compiles to Cuda/OpenCL and on CLJS, compiles to WebAssembly? :slightly_smiling_face:"
1749,1513192905.000467,Berry,"""parallel Tensor Ops"" seems like it should be high enough level that it's possible to efficiently target all those platforms"
1751,1513192943.000772,Margaret,right what I am asking is how expensive making a vector out of a subvec is; that may or may not be faster than making a vector out of a list
1751,1513193079.000385,Berry,"I thought subvec returned a vector. If so, where is the problem of 'how expensive making a vector out of a subvec is"""
1751,1513193766.000475,Margaret,"it doesn’t; oh wait, it isn’t a vector, but might as well be one, never mind!"
1752,1513194004.000104,Glory,Are there clojure x videos up anywhere?
1751,1513194601.00056,Rene,<https://skillsmatter.com/conferences/8783-clojure-exchange-2017#skillscasts>; Thanks for the reminder - I haven't had a chance to watch them yet and was looking for something to watch later :slightly_smiling_face:
1753,1513196883.000532,Giovanna,"<@Daniele> I made a sequence version of `n-partitions`, by re-using the math from the python/vector version. I wouldn't really call it an improvement in clarity though.
```
(defn n-partitions
  [n coll]
  (let [cnt (count coll)
        [q r] [(quot cnt n) (rem cnt n)]
        partition-size (fn [i]
                         (- (+ (* (inc i) q) (min (inc i) r))
                            (+ (* i q) (min i r))))]
    (-&gt;&gt; (range n)
         (reductions (fn [[_ more] i]
                       (split-at (partition-size i) more))
                     [nil coll])
         (rest)
         (map first))))
```"
1754,1513199890.000112,Ahmad,"at the current state of clojure.spec, is it possible to spec multimethods?"
1754,1513200295.000168,Johana,"I found a weird thing with `some`. I rewrote it using `reduce` and found it was much faster:
```
(defn find-first
  [pred vals]
  (reduce
   (fn [_ v]
     (when (pred v)
       (reduced v)))
   nil
   vals))
(time (some       identity (repeat 10000000 nil))) ;; 250 ms
(time (find-first identity (repeat 10000000 nil))) ;; 40 ms
```"
1754,1513200747.000386,Randee,<@Johana> Don't use repeat to benchmark things. Real code barely uses it.
1754,1513200772.00008,Johana,"<@Randee> ok, I tried it with other collections too, same thing"
1754,1513200810.000509,Randee,<@Johana> Yeah some uses first/next which isnt' all that fast. Reduce is usually faster. I see a 2x factor
1754,1513200974.00053,Johana,"```
(time (some #(when (&gt; ^long % 10000000) %) (range))) ;; 558 ms
(time (find-first #(&gt; ^long % 10000000)    (range))) ;; 95 ms
```"
1755,1513202831.000268,Cecile,re: find-first transducer version: <https://github.com/weavejester/medley/blob/1.0.0/src/medley/core.cljc#L6>
1754,1513203061.000238,Johana,cool
1756,1513203984.000161,Heriberto,"Is there a Clojure killer applications? For example, Scala has a renowned Akka."
1754,1513204073.000016,Daniell,I can't think of anything that would cause people to switch to Clojure just to use it...
1755,1513204091.00005,Daniell,"(mind you, Akka and Play are both probably used more by Java devs now?)"
1756,1513204373.000426,Berry,"(fn [v n]
  [(take n v) (drop n v)])
^-- is there a builtin for this? to 'split' a vector at a specified index"
1756,1513204497.000234,Leann,"we have Datomic and Onyx, and of course ClojureScript, which has the obvious advantage of allowing you to avoid JS :stuck_out_tongue:"
1755,1513204831.000476,Jodie,"I would presume this kind of thing can only come in later in a project then, after the patterns have emerged. That would explain why our experiences differ. I've spent more time in the greenfield part of a project, and very little time in the stage where you're extending existing code.

We have a few places where we achieve something of a similar goal with data, e.g. defining schemas related to a graphql request, and allowing a small bit of code extract that.

I think the scariest part of what you said was ""[building] an ad-hoc engine"", I don't even know where I'd start really. Reading through odin, I find terms like ""unification"" and ""tabling"" quite intimidating. I should perhaps purchase your series where you build odin to try and learn more about Karen and such."
1755,1513205038.000321,Charity,<@Berry> clojure.core/split-at
1755,1513205295.000212,Jodie,"Fwiw, I really like Odin so far. I'm trying to use it for querying REST apis. I've had to put a memoize in though (I want to replace this with a ctx cache), as Odin was ""forking"" (my term for the separate paths after doing an additional query) queries when I didn't expect it to, as there was no overlap in the inputs.

I'm not sure if I'm using it properly, or even if I'm benefiting from it.

I initially reached for datalog/datascript to do this, but being unable to make arbitrary rest queries made it difficult (having to commit to a db after doing part of the query I'm interested in probably doesn't give me much benefit.; I'm struggling now with something in odin, which is something to the effect of:

- I've fetched all members from API
- I've fetched all tasks from API
- I want to find the assignee of a task
- I want to find the owners of a task

I seem to keep filtering all the members, instead of creating a list of members named ""assignee"". The closest way I came to achieving my goal was `(o/and (= (:assignee_id ?task) (:id ?member))`, which obviously doesn't involve any bindings. I wondered if I'd need to use `o/==` but I wasn't certain how I'd do that."
1755,1513205741.000571,Margaret,"also you could use subvec if you want a faster op that retains vectorness; ```ser=&gt; (let [v [1 2 3 4 5 6]] [(subvec v 0 3) (subvec v 3 (count v))])
[[1 2 3] [4 5 6]]```"
1755,1513206466.000203,Jodie,"Maybe I should be ""re-fetching"" a list of members for assignees."
1757,1513215025.000067,Micha,"OK, probably a deep dark corner of Clojure functionality I haven't seen before, but can anyone explain what ('subset? ...) is doing in this line of code within the Clojure tests? <https://github.com/clojure/clojure/blob/master/test/clojure/test_clojure/rt.clj#L97>"
1757,1513215073.000219,Rebeca,map look up; looking up the symbol 'subset in the map returned by ns-publics
1757,1513215160.00009,Micha,"I just figured that out from REPL experimentation, which I probably should have done before asking.  I knew that worked with a keyword as the first value in the form, but don't think I've ever used it with a symbol as the first value in the form."
1758,1513218015.000158,Buck,"<@Micha> `clojure.lang.Symbol` implements `clojure.lang.IFn` just like `clojure.lang.Keyword`, and seems to implement it in basically the same way, invoking `RT.get` on the argument passing itself as the lookup key"
1758,1513218067.000002,Micha,"I will most likely forget this, and not miss the knowledge because I wouldn't want to see this in my code :slightly_smiling_face:"
1758,1513218102.000051,Buck,yeah it's a bit niche isn't it
1758,1513218123.000302,Micha,"I've only ever written Clojure as a hobby, but a lot of hours have gone by without me seeing this in people's code."
1758,1513218304.000073,Buck,"would be interesting to mine crossclj for the most rarely used features. I don't think I've ever seen :strs or :syms destructuring in the wild, for instance; now I'm kind of sad that there's no clojure.lang.String that also implements IFn. Then we'd have three types you can both destructure and use to look themselves up."
1758,1513219368.000133,Daniell,<@Buck> We have `:strs` destructuring in our production code... :slightly_smiling_face:
1758,1513219553.000204,Buck,"secretly I think I have this in my code too ...; but it's not ""in the wild"" so I think I escape on a technicality. `ag` reveals I actually have used it twice in just this one project I checked :flushed:"
1759,1513220736.000199,Silas,"Spec question: If I have a function that takes a destructured map, what's the best way to spec that function, so that the values of the keys in my map are also specced? The best I've got right now is `(s/keys :req-un [::a ::b ::c])` given `(defn foo [{:keys [a b c]})`; But, I'd kind of want the names of the keys for my function to not match the spec name of their value. And I'd rather define the spec for them inline. Any easy way to do that?; Would be nice to have something like `(s/map :req [:a int? :b string? :c ::other-spec])` for this scenario"
1760,1513222334.000228,Eugenie,Is there a way to make this point free `#(assoc %2 :id %1)`
1759,1513222637.000179,Silas,"Clojure is the killer application. It sells itself, you don't really need anything else. For example, since you mentioned Akka, you'd probably be interested in core.async, though its just a part of Clojure."
1760,1513222959.000011,Berry,"lol, I don't think it'd be shorter in any point free style"
1760,1513223337.000223,Eugenie,I get that. This was a just a challenge based on a discussion we are having internally at my company.
1759,1513223966.000035,Silas,"In terms of things made in Clojure to be used as frameworks from other languages, I guess <@Leann> pointed to some: Datomic and Onyx. I'll add Apache Storm, Overtone, Cascalog, Riemann, Puppet, Metabase, Alda, Transit, Datascript and Quil to that list."
1759,1513224392.000059,Berry,"maybe something involving merge, apply, and reverse, and rotating; (apply assoc (reverse (interpose :id %))); (-&gt;&gt; args (interpose :id) reverse (apply assoc)) :slightly_smiling_face:"
1759,1513224471.000024,Daniell,That's not point-free...
1759,1513224506.000103,Berry,"What is point-free? I thought it merely meant ""don't use variable names, and chain together functions"""
1759,1513224585.000141,Daniell,But `args` and `%` are variables.
1759,1513224618.000159,Berry,"right, so we need to get rid of the ""args"" field; the line before that was me working out intermediate steps; we need to removeargs from `(-&gt;&gt; args (interpose :id) reverse (apply assoc))` and then we're good"
1759,1513224745.000051,Daniell,"Here's a point-free version: `(comp (partial apply assoc) reverse (partial interpose :id) vector)`; ```boot.user=&gt; ( (comp (partial apply assoc) reverse (partial interpose :id) vector) 123 {} )
{:id 123}```; <@Eugenie> ^ does that answer the challenge?"
1761,1513225076.00022,Eugenie,<@Daniell> Sure does! Thanks!
1762,1513227250.00015,Andra,"The :clj: page on transients says that:

&gt; In Clojure 1.6 and earlier, transients would detect any (read or write) use from a thread other than the one that created them and throw an exception. *That check was removed in 1.7* to allow for more flexible use in frameworks like core.async go blocks that enforce the single-threaded constraint via other means.

Emphasis mine. But under summary it still says:

&gt; Thread isolation - enforced

I tried the following in :clj: 1.8:

```
(dotimes [_ 5]
  (def tv (let [tv (transient [])]
          (future (Thread/sleep (rand-int 3))
                  (conj! tv 1))
          (future (Thread/sleep (rand-int 3))
                  (conj! tv 2))
          tv))
  (Thread/sleep 3)
  (println (persistent! tv)))
;; =&gt;
;; [2 1]
;; [2 1]
;; [2 1]
;; [2 1]
;; [1 2]
```

So it clearly _is_ possible to modify a transient from different threads. What, then, does ""thread-isolation--enforced"" mean?

<https://clojure.org/reference/transients>"
1762,1513228958.000124,Berry,"[just guessing] perhaps it means that with respect to a transient, conj! pop! push! are all atomic -- i.e. if you run them from different threads, its as if they're beintg run from the same thread in some order - they won't 'trample' on each other due to race conditions; also, the above example confuses me, as I thought you were supposed to look at the return value of conj! ... instead of printing the 'original transient'"
1762,1513229381.000157,Andra,IIUC `conj!` modifies in place but returns the modified value.
1762,1513229529.000152,Berry,"quoting: <https://clojuredocs.org/clojure.core/assoc>!
```
;; The key concept to understand here is that transients are 
;; not meant to be `bashed in place`; always use the value 
;; returned by either assoc! or other functions that operate
;; on transients.
```
not sure if ""other functions"" includes conj!; I'm looking for a clojure DSL that lets me output C code.
Is <https://github.com/aaronc/c-in-clj> (5 years since last commit?) the best we've got ?

Pre-emptive: why not just use C?: C's macro system is lacking. I want to use the full power of Clojure amcros for my macro system."
1763,1513232700.000218,Sandy,"There are several cases where conj! May not change the input, and instead may return a new collection; So yes, treat transients like persistent collections. ; Not that I know of, it’s not really a easy thing to pull off since C lacks almost everything Clojure would need; But writing a AST to C layer wouldn’t be *that* hard. I know of several projects that do that"
1764,1513234534.000041,Weston,Carp? It transpiles to c so I guess it would fit; Not sure how mature it is tho
1763,1513239454.000094,Berry,"<@Sandy>: I'm not trying to do Clojure -&gt; C . I'm trying to do ""Clojure data representing a program -&gt; C""."
1765,1513239510.000308,Berry,"I have some code which deals with nothing but tensors of floats -- no other data structure, no gc-ing, nothing else

and I want to represent this code as 'clojure data', and then generate C from it (which will let me hit both WebAssembly and Cuda afterwards)"
1765,1513239968.000338,Debby,"if I'm dealing with a java class that extends a HashMap, is there an easy way to cast a map into it? ```public class RowData extends HashMap&lt;String, Object&gt; {
}
```; would love to do `(cast RowData (java.util.HashMap. {:a 1}))` but that raises a `ClassCastException`"
1766,1513247277.000188,Deneen,"I'm playing with function specs and I wondered if one could use it to emulate type checking, during compile time, something like this:

```
(s/fdef divide
        :args (s/cat :x integer? :y integer?)
        :ret number?)

(defn divide [x y] (/ x y))

;; should throw when compiled?
(defmacro divide-by-foo []
  (eval `(divide 6 :foo)))
```
yet this namespace doesn't throw, why?"
1767,1513248489.000356,Daine,"Interesting Idea, but probably needs some time to become doable. For example if? in the future Kotlin can compile to web-assembly it will become easier.; Actually not that far away, <https://blog.jetbrains.com/kotlin/2017/11/kotlinnative-v0-4-released-objective-c-interop-webassembly-and-more/>"
1767,1513248929.000243,Mallory,hi guys; why this work in second case and not work in the first; ?
1767,1513249272.000254,Retta,"<@Deneen> you need to have instrumentation enabled to have it throw; <@Deneen> something like <https://github.com/jeaye/orchestra>; <@Deneen> by default, clojure spec doesn't circumvent evaluation to perform spec analysis, you need to tell it to check your specs"
1767,1513249477.000034,Deneen,so just `(:require [clojure.spec.test.alpha :as st])` and `(st/instrument 'divide)` ?
1767,1513249691.000371,Retta,"you'll have to read over the docs, and mess around with it; think it's after you define your specs, but before you evaluate your function that you want spec analysis for; hmm; your defmacro is never going to throw a spec error until it's been evaluated; note that instrumentation was turned on after the specs have been introduced and evaluated"
1767,1513249971.000301,Jutta,"(into (new RowData) my-map)?
Into uses conj "
1767,1513249984.000349,Retta,"I could have put it at line 7 or 9; the divide-by-foo case should probably fail, none of this has been tested"
1767,1513250452.000483,Berry,<@Daine>: I think we are discussing different problems. What problem do you think I am trying to solve?
1767,1513250488.000099,Deneen,"this is my problem - I don't understand why at compile-time the macro doesn't become `(eval (/ 6 :foo))`, which should still throw. The divide-by-foo will fail for sure (with an exception or spec validation error depending on whether instrumentation is turned on), like you say."
1767,1513250805.000468,Jena,"if i want to display some quick charts from the repl, is incanter the best option?; i just want to quickly visualize some line charts, no fancy processing is needed"
1768,1513251147.000121,Berry,"Does either ""lein repl"" or ""boot repl"" have a web interface?

I want something like ""boot web-repl"" or ""lein web-repl"" to
1. open up a webserver on port 8081
2. I can go to <localhost://8081> and interact with the repl
3. have certain forms of output render nicely into HTML tables / SVG diagrams / ..."
1767,1513251247.000355,Daine,You want some way to go from clojure to WebAssembly right?
1768,1513251391.0001,Jutta,"You can do a plug-in with it 
<https://github.com/yudai/gotty>"
1768,1513251450.000094,Angela,<@Berry> gorilla repl can do that; <http://gorilla-repl.org/start.html>
1769,1513252886.000397,Cecilia,or to CUDA which kinda makes it invalid approach to go for Kotlin
1767,1513254127.000085,Daine,Can you run CUDA in the browser?
1767,1513254144.000099,Danille,is there a tool for formatting end files?
1767,1513255728.000208,Maggie,<https://github.com/weavejester/cljfmt>
1767,1513255792.00019,Danille,.. why did I not just try running cljfmt on it earlier. I keep running it on my .clj files; thanks :slightly_smiling_face:
1770,1513257540.00007,Kalyn,"Hi, I am transducing over a lazy sequence that reads from a file (hurray). However I am having some trouble figuring efficient ways to debug or any plausible way to debug at all. Maybe you can comment?

Here's code:

```
(ns cleanser.dictionary-test
  (:require
     [clojure.pprint :refer [pprint]]
     [puget.printer :refer [cprint]]
     [clojure.inspector :as inspect :refer [inspect-tree]]
     [cleanser.dictionary-search :refer :all]
     [<http://clojure.java.io|clojure.java.io> :as io]
     [clojure.set :refer :all]
     [clojure.math.combinatorics :refer [cartesian-product]]
     [clojure.test :refer :all]
     [<http://clojure.java.io|clojure.java.io> :as io]
     [clojure.string :refer [split]]))

(defn text-file-reader [filepath reader]
   "" return a lazy sequence for streaming through the file contents ""
   (with-open
      [file-reader (reader filepath)]
      (line-seq file-reader)))


(deftest names-dictionary
  (let
    [text (slurp ""resources/names/hebrew-wikipedia-content.txt"")

     names-dump-filter  (remove #(re-matches #""# &lt; &gt; \[ \] \{ \} / @ \*"" %)) 
     names-dump-breaker (mapcat #(split % #""\|""))                            

     names
       (sequence
         (comp names-dump-breaker names-dump-filter)
         (text-file-reader ""resources/names/user-names-unique.txt"" <http://clojure.java.io/reader|clojure.java.io/reader>))

     dictionary (build-dictionary names)]

     (println (search text dictionary))
     (println (type names) ; a lazy stream
     (println names))))   ; java.io.IOException: Stream closed
```

printing `names` seems futile, the stream has been expended by then. Any suggestion for a better design for stream-processing file contents with transducers?

Any best practice for debugging within the transduction itself is very welcome as well

Many thanks!"
1770,1513257797.000223,Jami,<@Kalyn> you could use trace to monitor the input/output of your transducer functions <https://github.com/clojure/tools.trace>
1770,1513258236.000337,Kalyn,"actually, I am not very sure how I'd `trace` very elegantly in transducing code like above"
1770,1513261512.000773,Jami,"<@Kalyn> I though it would be easy with trace, but it doesn't work as expected in my case; instead, you could define your own transducer for logging purpose; ```
(defn xflog []
      (fn [rf]    
       (fn       
       ([] (rf))                          
       ([res] (rf result))                
       ([res input] (println input) (rf res input)))))
```; `(sequence (comp (xflog) (filter odd?) (map inc)) (range 5))`; it works as expected, but you could extend it to include a tag (e.g. ""before filter odd?"")"
1770,1513262760.000736,Cecilia,Who did say anything about running stuff explicitly in browser? o_O; This is <#C03S1KBA2|clojure> not <#C03S1L9DN|clojurescript>
1771,1513262826.000094,Sandy,Do it with a socket repl and it'd be pretty easy
1771,1513262943.000879,Cecilia,"and besides, CUDA was specifically mentioned as a potential target"
1772,1513264711.000922,Giovanna,"<@Kalyn> Or use the debug atom trick. Something like
```
(defonce a (atom []))

(def dbg-xf (map (fn [x] (swap! a conj x) x)))

(comment
  ;; The atom now contains every value that passed through dbg-xf
  @a
  )
```"
1771,1513264794.000029,Giovanna,Or just `(def logging-xf (map (fn [x] (prn x) x)))`
1770,1513269539.000669,Daine,"True, but qqq clearly asked for a way to go both to cuda and webassembly."
1772,1513271375.000445,Danyel,"<@Kalyn> you can also just use a plain old debugger like the one available in Cursive. You can also use scope-capture as a more powerful version of the debug atom trick, which also supports a form of breakpoint (disclaimer: I'm the author!): <https://github.com/vvvvalvalval/scope-capture>"
1773,1513273563.000326,Petronila,`scope-capture` is great; I’m using it a lot nowadays
1770,1513278044.000124,Berry,"I'm not asking for ""Clojure -&gt; Cuda"" or ""Clojure -&gt; WebAssembly""

I want ""very restricted DSL -&gt; Cuda"" and ""very restricted DSL -&gt; WebAssembly""

this ""very restricted DSL"", expressed as Clojure Data, is NOT FULL CLOJURE -- in particular, I do NOT want to emscriptsen the entire JVM

I want a very restricted DSL for describing manipulations on tensors of floats -- and compiling this DSL to WebAssembly / CUDA

the main relation to CLojure is that I want to implement this very-restricted-dsl via clojure data"
1774,1513285288.000029,Lenita,I have a system.edn file that needs a database url that I don't want to check in to source control. How can I introduce a variable into an edn data structure?
1774,1513286011.000462,Noella,"<@Lenita> there are a bunch of config libs for Clojure, here’s some examples:; <https://github.com/tolitius/cprop>; <https://github.com/juxt/aero>; <https://github.com/levand/immuconf>; they all manage secrets, different environments etc"
1774,1513286152.000773,Lenita,<@Noella> those all look like good options. thanks!
1774,1513286245.000179,Leann,cprop is nice!
1774,1513287318.000035,Malissa,<@Noella> I've always used environment variables. That way I can have an .env.example file people can copy and modify to their likings and not check it in
1775,1513287793.000621,Basil,the environment-variable approach is also great when paired with direnv <https://direnv.net/>
1776,1513290570.000247,Silas,"This is exactly what spectrum does: <https://github.com/arohner/spectrum>; Still in early alpha. Show your support if you like it.; I think eval runs in its own environment, which means within eval, you have not instrumented the divide function. That's my guess at least.; Try:
```
(defmacro divide-by-foo []
  (divide 6 :foo))
```
Instead, after having instrumented divide. This will make a call to divide at macro-expansion time which should fail validation of the spec by instrument."
1777,1513291354.000424,Sidney,"I’m using jvisualvm to successfully profile my app, locally, on macOS 10.12. It works correctly through several jvm reboots, and jvisualvm suddenly fails to connect with “Failed to create JMX connection to target application.” I wasn’t explicitly creating JMX connections beforehand. Rebooting my mac fixes it, but is there any way to solve it without rebooting?"
1777,1513292078.000043,Rebeca,are you using the same version of the jvm each time?; <https://bugs.openjdk.java.net/browse/JDK-8023786>
1777,1513292293.000022,Sidney,"I should be. I’m just in the same terminal window and `lein repl`ing each time; once it’s hosed, restarting both my clojure jvm and the visualvm process doesn’t fix it; and then after rebooting my mac, it works until I reboot my clojure app ~5 times"
1777,1513292484.000007,Charity,is visualvm forking something off that’s sticking around?; That’s super spooky
1777,1513292506.000015,Sidney,"could be, but I’m not finding anything obvious; there are no `java` processes running"
1777,1513292525.000417,Rebeca,what version of the jvm?
1777,1513292529.000184,Margaret,something about port acquisition logic?
1777,1513292542.000317,Sidney,"```$ java -version
java version ""1.8.0_144""
Java(TM) SE Runtime Environment (build 1.8.0_144-b01)
Java HotSpot(TM) 64-Bit Server VM (build 25.144-b01, mixed mode)```"
1777,1513293146.000171,Berry,"I feel like this code can be much shorter: I'm trying to tokenize a string via . a list of regexps:

```

(defn- token-len [t]
  (count (:str t)))

(defn lex [pats s] 
  ""lex :: obj.pats -&gt; string -&gt; [obj.token]""
  (let [regexps (mapv pat-&gt;regexp pats)] 
    (loop [tokens [] 
           s      s] 
      (if (empty? s)
        tokens 
        (let [token (first (keep #(regexp-match % s) regexps))] 
          (assert token (str ""failed to tokenize substring: "" s))
          (assert (&gt; (token-len token) 0)
                  (str ""empty token: "" token "" s: "" s))
          (recur (conj tokens token)
                 (subs s (token-len token)))))))) 
```; <https://clojuredocs.org/clojure.core/subs> &lt;-- does clojure not offer an O(1) time substring ?"
1777,1513293719.00019,Charity,No. Clojure doesn’t have a string type and just uses Java’s strings. If Java’s strings don’t have it Clojure doesn’t have it.
1777,1513293790.000215,Margaret,you’d think with immutable String you could make an immutable CharSequence that used an indexed range of a string - except of course unicode we can’t have it because unicode; since you can’t guarantee that the index of a string by character starts at any given byte; (without an O(n) scan that is)
1777,1513293876.000196,Charity,ztellman has a new immutable strings implementation in his bifrucan library that gives you log(n) substringing I think
1777,1513293883.000213,Margaret,cool
1777,1513293920.000074,Rebeca,"the problem with java's strings is the lack of a tree structure, so you can can't  just hold a reference to the parts you need, your substring ends up holding a reference to the whole string; which was causing enough of a memory  issue that they switched from what you propose (substring returning a special string that refers to the other string with offsets) to substring returning a copy"
1777,1513294060.000116,Berry,"seems like a case of ""people cut self with scissors; let's ban all scissors""; I don't see an argument against .substring-ref and .substring-copy"
1777,1513294083.00035,Margaret,but you could make a CharSequence that is cheap to construct from a String and uses a simple tree of some sort - and if code breaks when you use CharSequence instead of String the code is bad
1777,1513294089.000191,Berry,instead of just deciding upfront that all has to be copies
1777,1513294181.000108,Rebeca,<https://dev.clojure.org/jira/browse/CLJ-112> I  opened this issue in assembla before clojure was on jira (after asking rich about it on irc)
1777,1513295396.000003,Silas,"I think you can with UTF-16, which is what java uses no?"
1777,1513295721.000043,Margaret,```UTF-16 requires either 16 or 32 bits to encode a character```; you have to walk the string up to the point of your index to find its byte offset; cite: <https://en.wikipedia.org/wiki/Comparison_of_Unicode_encodings>
1777,1513296410.000073,Micha,"Indexes into Java strings are indexes of 16-bit values, whether they are in the middle of a 32-bit code point or not."
1777,1513296419.000101,Berry,"Does Clojure have a library for ""generalized regular expressions""

standard regular expression:
input = string (pretend its a vector of chars)
regex = option ?, repeat *, atleast-one +, way to specify single char / set of chars

generalized regular expression:
input = vector of arbitrary clojure data
regex = option ?, repeat *, atleats-one +, predicates ... that given an element, returns true/fase, indicating whether it's 'in the set' or not

is there any library for this?"
1777,1513296429.000368,Micha,"so indexing is O(1), but isn't guaranteed to be the index of a full Unicode character."
1777,1513296441.000043,Berry,"I guess spec kind of does it, but it'd be nice if there was a library dedicated to this"
1777,1513296448.000099,Margaret,oh - so `subs` can return garbage?
1777,1513296452.000018,Micha,sure
1777,1513296491.000081,Margaret,"TIL ```=&gt; (subs ""💩"" 1)
""?""```"
1777,1513296493.000252,Micha,"There have been bugs related to this in Windows applications, I've heard."
1777,1513296522.000217,Margaret,I’m not surprised in the least - I would have expected subs to index by character not by pair of bytes
1777,1513296559.000211,Micha,"There are libraries that can turn Java strings into sequences of Unicode code points, but then there are also complexities in Unicode like modifying graphemes (I think they are called) that can require understanding sequences of multiple Unicode code points, if you want to know how many ""graphical things to display""; I have heard that Perl for about a decade has strings that are something like UTF-8 in memory, but if you index them by integer, they actually take the variable-number-of-byte encoding into account and give you the index of the i-th Unicode character.; I suspect that they might even implement some kind of caching of 'character index' -&gt; 'byte offset' under the hood if you index the same string many times, but haven't looked."
1777,1513296760.000243,Rebeca,why do you say spec kind of does that? spec internally uses parsing with derivatives which can parse context free languages which are a super set of regular languages
1777,1513296828.000295,Micha,"There might be something like that out there that may be more performance-optimized than spec's current implementation.  Certainly I have heard of such things in languages other than Clojure.; I don't know how optimized the implementation is, but Racket has something like this: <https://docs.racket-lang.org/reference/match.html>; Maybe core.match does this?  I haven't used it myself."
1777,1513297159.00006,Debby,"thanks, that results in ```ClassCastException hex.genmodel.easy.RowData cannot be cast to clojure.lang.IPersistentCollection  clojure.core/conj--5112 (core.clj:82)
```; ended up with this, suboptimal but works: ```(defn -&gt;row-data [m]
  (let [row (RowData.)]
    (doseq [[k v] m]
      (. row put k v))
    row))```"
1777,1513298515.000171,Micha,"<@Berry> <http://clojuredocs.org/clojure.core/subs>; The older Java versions, pre 7u6, effectively gave you the choice between reference or copy, by substring always creating a reference, and String constructor allowing you to manually create a copy, if you knew you wanted one.  With newer versions of Java, they changed the default, and without a library implementation that works via references you can't get the reference behavior.  I suspect they did a lot of performance-testing on real applications before making such an implementation change."
1778,1513299168.000181,Sandy,<@Berry> considered using instaparse ?; Or are you writing a parser to get experience writing parsers?
1778,1513299209.000298,Glory,"I asked before, then lost the response. Are the clojure d videos up somewhere?"
1778,1513299219.000155,Edelmira,instaparse only supports strings; I think he was asking about what spec currently does
1779,1513299773.000204,Daniele,<https://groups.google.com/forum/#!topic/clojure/BBWc3c40RDI>
1777,1513299777.000156,Daniele,Seems not :confused:
1778,1513302673.000068,Berry,"<@Sandy>: yeah, what <@Edelmira> said: I want things that can do ""regex"" over arbitrary data, instead of just strings"
1780,1513302683.000025,Berry,"""regex"" over vector of arbitrary data"
1780,1513302802.000043,Sandy,one of these days I really should finish my implementation of OMeta in Clojure
1780,1513302858.000087,Berry,is that the VRPI project ?
1780,1513302859.000286,Sandy,"That sounds like what you're looking for, a generalized parsing system for both strings, and sequences of stuff; ?"
1780,1513302904.000105,Berry,"I believe OMeta was from this lab: <http://www.vpri.org/>; But yeah, you should finish your OMeta in Clojure project. I feel like 90% of my clojure needs can be solved by ""if only <@Sandy> finished those projects ...."""
1780,1513303025.000077,Sandy,Last I worked on it was before spec existed. I think there's a lot of overlap there. OMeta is a bit like a DSL for spec and conform with polymorphism added
1778,1513304050.000211,Berry,"<https://en.wikipedia.org/wiki/OMeta> is confusing me. Is OMeta a Turing-Complete language, or is it on the same laevel as regex/cfg ?"
1781,1513308218.000091,Ahmad,"sad :( at least in the end i ended up refactoring the code to use simple functions instead, because multimethods wasn't the correct approach; thanks for taking your time!"
1778,1513318827.00011,Berry,"I recall reading somewhere that due to some design decision, Clojure runs into problems if one has top-level files, i.e.

`src/a.cljc` -&gt; `(ns a)` results in problems

can anyone point me at the article I'm referring to?"
1780,1513319986.000089,Sandy,"It’s not so much Clojure, as it is the JVM; I don’t think that’s a fully valid package name"
1782,1513329279.000267,Kalyn,<@Giovanna> thanks :slightly_smiling_face: the logging xf was indeed my best shot before coming back here!
1780,1513329859.000422,Kalyn,"<@Sandy> <@Foster> me too :slightly_smiling_face: and preferably regex builders rather than using the old-school regex language, which is horrible for maintaining code written in it IMO"
1782,1513329924.000001,Kalyn,Could be nice :slightly_smiling_face:
1783,1513330327.000066,Tari,"Hi, I want to get the meta data attached to a function var without knowing the name of the function var at compile time, I tried to do this:
```
user=&gt; (defn ^::a-meta ttt [])
#'user/ttt
user=&gt; #'ttt
#'user/ttt
user=&gt; (meta ttt)
nil
user=&gt; (meta #'ttt)
{:user/a-meta true, :arglists ([]), :line 11, :column 1, :file ""NO_SOURCE_PATH"", :name ttt, :ns #object[clojure.lang.Namespace 0x52d645b1 ""user""]}
user=&gt; (meta #'(symbol ""ttt""))
CompilerException java.lang.ClassCastException: clojure.lang.PersistentList cannot be cast to clojure.lang.Symbol, compiling:(NO_SOURCE_PATH:15:1)
```
It failed because the `#'` is a reader macro. If the function name is defined at runtime, are there any ways to get a function's meta data?"
1783,1513330472.000429,Noella,"<@Tari> `(meta (var (symbol ""ttt"")))`?"
1783,1513330500.000363,Kareen,that's not how var works ; use resolve 
1783,1513330545.000241,Noella,"true, `ns-resolve` is what you want: <http://clojuredocs.org/clojure.core/ns-resolve>"
1783,1513330671.000479,Tari,Thank you. <@Noella> <@Kareen>
1784,1513333940.000305,Kalyn,<@Jami> thanks; <@Danyel> coolest stuff <https://github.com/vvvvalvalval/scope-capture> thanks!
1785,1513334453.000519,Berry,"1. most `if ...` I write are atleast three lines: one for condition, one for then, one for else branch
2. C has test ? true : false
3. does clojure have a nice macro for that ?"
1785,1513334491.000371,Kareen,if itself?; how is `test ? true : false`  any different than `(if test true false)`
1785,1513334507.000504,Berry,it's hard to read
1785,1513334512.000017,Kareen,how?
1785,1513334513.000442,Berry,"when squished on a single line; I like the ? and : to separate the conditions; in practice, do you write single line `(if test true-expr false-expr)` code ?"
1785,1513334552.000138,Kareen,yes
1785,1513334553.00028,Berry,maybe I'm just not used to eading them
1785,1513334786.000185,Kalyn,"Is there any standard file reader transducer?
Something that can be used to stream-read from a file, that can be used within a transducing process? (meaning e.g. composed with other transducers) (edited)
Or should I work up a transducer around lazy file reading myself, i.e. from something like this?; ```
(defn text-file-reader [filepath reader]
  (with-open
    [file-reader (reader filepath)]
    (line-seq file-reader)))
```"
1785,1513334946.000531,Berry,"(empty? 23) throws an exception
is there a wa to say:

(and (.... is a collection) (empty? ...))"
1785,1513335021.000333,Angela,"there is `seq?`; also, u can use a `seq` to check for empty or nil values. `(seq [])` returns nil"
1785,1513335611.000025,Kareen,<@Berry> one of `coll?` `seq?` `seqable?` depending on what you need
1785,1513335924.000431,Kalyn,"Adding to my transduction question three hops above :slightly_smiling_face: is there a core library test function for a newly-written transducer ""playing by the rules""? (the rules as per ""<https://clojure.org/reference/transducers#Creating> Transducers"")"
1786,1513338878.000337,Krystina,"given something like
```
(def myv [:a :c :b])
(def mym {:a :anew})
```
I need a function to simply do the replacement and get
```
(:c :b :anew)
``` (the order doesn't matter); something like this works but it's a bit insane `(keys (clojure.set/rename-keys (zipmap myv (range 3)) mym))`; any better alternatives?"
1786,1513339158.000196,Noella,time for another Specter solution :smile:; `(transform ALL #(get mym % %) myv)`
1786,1513339181.000101,Krystina,ah nice can't use it in this project though; we have `medley` at least; but not sure it helps in this case
1786,1513339221.000006,Noella,are you not allowed to add dependencies?
1786,1513339237.000199,Kareen,"```user=&gt; (def myv [:a :c :b])
#'user/myv
user=&gt; (def mym {:a :anew})
#'user/mym
user=&gt; (replace mym myv)
[:anew :c :b]```"
1786,1513339242.000124,Krystina,"well we have to agree on which to add, and it was agreed not to add specter"
1786,1513339253.000134,Kareen,I get that people like specter but clojure.core is often more than enough
1786,1513339268.000502,Noella,did not know about replace!
1786,1513339269.000031,Krystina,ah nice yes replace is what I needed :smile:
1786,1513339283.000013,Noella,there are too many functions in core to remember them all :slightly_smiling_face:; btw I also prefer sticking to core as much as possible
1786,1513339462.000052,Jami,"I started to learn Specter today, the lib is amazing !; it becomes less scary when you read the List of Macros and List of Navigation on the wiki"
1786,1513339693.000408,Krystina,"and similar thing (still without Specter), from
```
{:a 1
 :b 2}

{:a inc}
```
I want to map to the values but depending on the key, so
```
{:a 2
 :b 2}``` in this case; there is `map-values` in medley but it's not quite the same; I could split the map many submaps, apply the transformations and merge them all maybe; this works for example
```
(into {}
      (for [[k v] (seq mm)]
        [k ((k tr identity) v)]))``` but other suggetions welcome"
1786,1513339961.000137,Noella,I think that one’s readable :+1:
1787,1513340062.000224,Kareen,"```user=&gt; (def a {:a 1 :b 2})
#'user/a
user=&gt; (def b {:a inc})
#'user/b
user=&gt; (reduce-kv update a b)
{:a 2, :b 2}```"
1786,1513340117.000087,Krystina,nice another point for <@Kareen> :+1:
1787,1513340172.000012,Noella,slick :+1:
1786,1513341653.000031,Krystina,"and last one, from
```
(def m {:a 1 :b 2})
(def order [:b :a])
```
to `[2 1]` ?; I just did ```
(for [f fields]
    (f m))```; mm can just do `(map #(% {:a 1 :b 2}) [:b :a])` actually"
1788,1513342364.000211,Jami,do you know a function that executes a form and returns nil on Exception ?
1786,1513342376.000149,Jami,"I though I knew it, but I can't remember ..."
1788,1513342603.000135,Weston,hmmm try
1786,1513342620.000143,Weston,if you really need a fn you can easily wrap it
1786,1513342818.000185,Jami,"<@Weston> got it
```
(defmacro ex-nil ""Return nil if body throws an Exception""
  [&amp; body] `(try ~@body (catch Exception ex#)))
```"
1789,1513344393.000266,Joette,"a bit late to the game but finally got time to take a look at scope-capture - really cool and extremely useful, can definitely see myself using this going forward"
1789,1513344481.000102,Kareen,"or even better, `(map {:a 1 :b 2} [:b :a])`"
1789,1513344949.000618,Jami,"is someone familiar with clj-time ? Why is this not valid ```(f/parse-local (f/formatter ""EEE MMM dd HH:mm:ss yyyy z"") ""Thu Apr 24 10:27:52 2014 CEST"") =&gt; Invalid Format: is malformed at ""CEST""```"
1789,1513345073.000025,Joette,I think the last time zone spec needs to be more z's
1789,1513345157.000052,Jami,"OK ... apparently, joda time cannot parse 'z' zone name <http://www.joda.org/joda-time/key_format.html>"
1789,1513345366.000185,Joette,"wow, did not know that, that's a pretty major omission"
1789,1513345398.000458,Jami,"yes ... I couldn't agree more !; I think the format was meant for human, not machine"
1789,1513345594.000277,Joette,"doesn't solve the abbreviated ""CEST"" parsing, but there is <http://joda-time.sourceforge.net/apidocs/org/joda/time/format/DateTimeFormatter.html#withOffsetParsed%28%29>; <https://stackoverflow.com/questions/1327229/how-can-i-parse-a-date-including-timezone-with-joda-time>"
1789,1513345936.000102,Jami,"<@Joette> thanks for the help, I think there is no answer to deal with the text timezone properly"
1789,1513345950.000294,Joette,"yeah, seems like it"
1789,1513345959.000176,Jami,"so this is the ""hack"" I found:
```
(def CERT_DATE_PARSER (comp (fn [x] (f/parse (f/formatter ""EEE MMM dd HH:mm:ss yyyy"") x))
                            (fn [x] (str/replace x #""(\w+ \w+ \d+ [0-9:]+) (\w+) (\d+)"" ""$1 $3""))))
```"
1789,1513345984.00013,Joette,"just wrote something to set the time zone on the formatter, but 1. CEST is not one of the ids and 2. if you get the time as a string it doesn't exactly solve your problem; ```
(def fmt (.withZone (f/formatter ""EEE MMM dd HH:mm:ss yyyy"") (org.joda.time.DateTimeZone/forID ""Europe/Paris"")))
(f/parse-local fmt ""Thu Apr 24 10:27:52 2014"")
```
works, but like I said, no CEST; <@Jami> you always have SimpleDateFormat: 
```
(.parse (java.text.SimpleDateFormat. ""EEE MMM dd HH:mm:ss yyyy zzz"") ""Thu Apr 24 10:27:52 2014 CEST"")`
```"
1789,1513346605.000154,Jami,"it works :slightly_smiling_face: thanks !; I discovered specter yesterday, it's hard not to become addict; I wonder if there is something similar in Python"
1790,1513351284.000587,Mallie,"<@Joette> Try asking in <#C0744GXCJ|cursive> ? Might get a better response there; Aah, you have :wink:"
1790,1513351467.000134,Joette,"yeah, realized a tad late that there was a channel for cursive"
1789,1513352871.000066,Sonny,"That will work fine, but it’s not recommended as you have not included any namespace qualification and will be potentially colliding with every other user creating a namespace `a`. Rather, Clojure follows the Java recommendation of starting your package with a reverse DNS of a domain you control or a trademarked name or some other thing that has a chance of disambiguating your code across all the other code in the world.; it’s totally fine (just not recommended) - see my comment on prior message"
1789,1513352965.000541,Kennith,"I am trying to implement a algorithm that updates objects in a list. The update function takes each object and the list itself (the other objects) as updated so far. With an imperative approach this is easy using mutability (a for loop and indexes), but what is the best approach to doing this in Clojure? I have tried a reduce, but that of course only passes the original list to the reducing function."
1790,1513353097.00019,Heriberto,"<@Kennith> `reduce` doesn't pass the original list, it passes to function each element and result of previous function evaluation; <@Kennith> based on original message I guess `map` nested in `let` would work here"
1790,1513353165.000444,Kennith,"<@Heriberto> Yeah, I get that I meant to write the objects (maps in this case) from the original list."
1790,1513353211.000244,Heriberto,could change elements in function if they're atoms or volatiles; also there's `doseq`
1789,1513353926.000237,Daniell,<@Kennith> can you explain a bit more about what the algorithm actually achieves?
1791,1513353951.000506,Daniell,The approach in Clojure is usually to take one step back from the (traditional) implementation and think about the problem holistically instead.
1789,1513354172.000239,Kennith,<@Daniell> I can. It updates the position of planets. The new position of a planet depends on its own previous position and the position of the other planets - new position if they have already been updated and old if they have not.; <@Daniell> This is the js equivalent: <https://gist.github.com/maacl/b958c97a417527f4ee4dad19b361ae9f>
1790,1513354411.000153,Kareen,```(reduce-kv (fn [planets i planet] (assoc planets i (new-pos planet planets))) planets planets)``` something like this; you can use planets as both accumulator and collection over which to reduce
1791,1513354519.000084,Willow,"```
(defn new-position [solar-system planet]
  ...)
(defn update-solar-system [solar-system-state]
  (map (partial new-position state) solar-system-state))

(def universe-time (iterate update-solar-system initial-universe))
```; depending on how you store the state of the solar system. as a list, a map, etc"
1790,1513354696.000582,Jami,"```
(defn reposition [planets]
    (map (partial new-position planets) planets))
````"
1791,1513354716.000513,Jami,but you have to define `new-position` to take the list of planets first
1791,1513354776.000334,Kareen,"no, using map is not correct"
1789,1513354793.0003,Kareen,"note that in <@Kennith>'s js version, each invocation of newPosition takes the updated planets map, not the original one"
1791,1513354852.000189,Willow,good point.
1791,1513354866.000728,Kareen,reduce is the natural way to express this in clojure
1791,1513354932.000559,Jami,"<@Kareen> <@Willow> agreed, I though the planet object did not change after each iteration"
1791,1513354941.000119,Kennith,"<@Kareen> Yes, that is correct. This is actually what tripped me up. Planets is a vector of maps, but reduce-kv works anyway as far as I can tell."
1791,1513354969.000492,Kareen,yeah reduce-kv supports vectors
1789,1513355098.000833,Daniell,`reduce` is the traditional solution for `state` + `rules for state change` =&gt; `new state` <@Kennith>
1791,1513355234.000415,Daniell,"(for a given set of events -- in this case the set of planets acts as both the initial state and the set of ""events"" that trigger state change)"
1791,1513355845.000148,Kennith,"<@Daniell> Yes, I was missing the idea of using  planets as both the accumulator and collection over which to reduce, as mentioned by <@Kareen>."
1792,1513357915.000054,Priscilla,"<@Kennith> are you doing gravitational dynamics?; because if so you're making it unnecessarily difficult from a programming standpoint; since from a physics standpoint you'd like to do one pass over the planets and calculate force; and then another pass to update momentum; and another pass to update position; although for speed probably the best thing to do is to solve for the gravitational potential on a grid and then interpolate to get forces, depending on how many planets you have; i doubt there's a good poisson library in javascript, haha"
1792,1513358243.000155,Kennith,"<@Priscilla> I am, I am trying to reimplement this: <https://github.com/raisoman/de-for-children/blob/master/processingjs/p5/mars-trip.html> in cljs."
1792,1513358479.000672,Priscilla,"ya, from a physics POV, that code would be better if it accumulated `xpp` and `ypp` in arrays; and only actually moved the planets after it had calculated that for all of them; splitting hairs, probably; the errors from doing it as linked take many orbits to be visible; `(comp (map #(update-position planets)) (map get-force))`; would give you pretty much what you need"
1792,1513358852.000343,Kennith,"<@Priscilla> I also had a sneaking suspicion that my original was actually more correct, but the constants are calibrated to work with the js version, which is quite sensitive to starting conditions since it is  inserting a tiny space-ship into orbit around mars. Not that I really understand the physics very well :slightly_smiling_face:"
1793,1513359655.000124,Gladys,"```
(def queue (agent []
                  :error-mode :continue
                  :error-handler (fn [a ex]
                                   (l/error ex ""slack agent failed""))))
```

Is there easy and simple way to achieve `:error-mode :retry` ? :slightly_smiling_face: Just from time to time sending messages to slack fail and I don’t want lose them.

* It can be achieve in whatever way. `:retry` example was to easy describe my needs."
1792,1513360306.000162,Rebeca,"`(send-off ... (retry fn) ...)`; ```
(defn retry [f] (fn x [&amp; args] (try (apply f args) (catch Throwable t (apply x args)))))
```"
1794,1513361380.000144,Margaret,"there’s a gotcha also if you use defrecord, defprotocol,  gen-class etc. because that creates classes in the default package which is poorly behaved on the jvm right?; or are clojure’s classes exempt from those problems?; eg. class loading problems if two deftypes both use the default package…; I just tried, using deftype and gen-class with namespaces producing items in the default package and yeah it works (likely would have caused problems if I tried to use import though)"
1792,1513365387.000354,Berry,"inside a (fn [] .... ) is there a way to ""refer to self, i.e. the function being defined"" -- and this is not via recur"
1792,1513365444.000347,Erlene,Why are you not able to use recur?
1792,1513365461.000393,Felix,you can name a fn (fn f [] …)
1792,1513365805.000463,Berry,"because I need to call the function two/three times, in a tree like fashion, it's not a loop"
1792,1513365841.000257,Margaret,"yeah, that’s why the `(fn f [] ...)` syntax exists, it’s the straightforward way to do this; though if two functions need to do this mutually, `letfn` exists for that purpose and no other"
1792,1513365897.000354,Berry,"ah, the `(fn f [] ...)` syntax gives it a name I can refer to it by; no idea howI missed it all these years; thanks!"
1792,1513365919.000447,Margaret,extra bonus - when you use (fn f [] …) the name “f” will show up in a stack trace; sometimes I name my fn even if it doesn’t self call just so my stack traces will make a little more sense; it makes me want versions of partial and comp and complement and fnil etc. that take a “name” parameter too frankly
1795,1513367545.000211,Thu,"How does the keyword-as-accessor syntax actually work in the language?  E.g. `(:b {:a 1, :b 2})`  Is this just special syntax built into the language or is there some reason why keywords can act as functions in this way?"
1792,1513367558.000151,Margaret,"it is not a syntax, keywords are functions; symbols, hash-maps, sets, and vectors are also functions; at one point they argued about making regexes functions too but they opted not to do that"
1792,1513367614.000307,Myles,"specifically, keywords implement IFn"
1792,1513367625.000343,Kareen,ah? do you remember when ?
1792,1513367635.000391,Margaret,@chris right when I say “is a function” about clojure that means “implements IFn”; no - I have seen discussion about it but forget the details
1792,1513367704.000548,Thu,But there must be something special about them because there are an infinite number of them and they spring forth whenever you use them
1792,1513367722.00054,Margaret,@Justin how’s that different from fn?
1792,1513367727.000452,Myles,is that different from how a function works?
1792,1513367731.000478,Margaret,haha
1792,1513367735.000109,Kareen,or a symbol
1792,1513367738.000435,Rebeca,"I've never seen serious discussion about it, just perennial whinging about how nice or how cool it would be if it was the case"
1792,1513367752.000366,Kareen,the reader interns symbols/keywords; yeah same
1792,1513367774.000285,Margaret,but symbols can have metadata so they do something different about the interning right?
1792,1513367802.000153,Kareen,"yeah symbols just have their internal string interned; actually since a few versions ago that might not be true, I can't remember"
1792,1513367836.000751,Margaret,one possible answer “pattern is a final class” <https://groups.google.com/forum/#!topic/clojure/LiWT7NIJOdQ>
1792,1513367997.000518,Rebeca,and interning has nothing to do with being used as a function
1792,1513368053.000048,Kareen,"true, I was just answering how they ""pop out of existence"""
1792,1513368069.000131,Rebeca,"`(foo a b c)` in clojure is something like `((IFn)foo).invoke(a, b, c)` in java"
1792,1513368090.000144,Thu,I previously just thought of them as identifiers that had some concrete unique representation that allowed them to be used as keys in a map. But then they can also be used in the first position in a list (which I think of as “function” position but I’m sure it has a more precise name).  I suppose the point is that they are instantiated as lookup functions the moment the reader sees them and the reference to that lookup function is what is used as a key?
1792,1513368113.000379,Rebeca,they are instances of clojure.lang.Keyword; which implements IFn; clojure.lang.IFn
1792,1513368146.000205,Thu,oh right.  okay got it; thanks all
1792,1513368160.000258,Margaret,"@Justin also, regarding “allowed to use them as keys in a map” that’s true of literally any value in clojure; as an aside"
1792,1513368194.000202,Kareen,"`(:foo {:foo 1})` becomes something like `new Keyword (""foo"").invoke ( {:foo 1 })`"
1792,1513368204.000093,Rebeca,any object on the jvm that doesn't replace Object's hashCode and equals with methods that throw execeptions
1792,1513368220.000638,Kareen,which is implemented roughly as `{:foo 1}.get(this)`
1792,1513368247.000338,Rebeca,clojure values just make better keys then most objects on the jvm
1792,1513368288.000444,Myles,immutability is a good idea™
1792,1513368332.000352,Margaret,"ahh right-  you can use a mutable thing as a key, but if the mutation changes the hash or equality you will have a bad time haha"
1792,1513368367.000684,Thu,"<@Margaret> Right that was phrased awkwardly.  Keywords are a little interesting because unlike something like a let binding or a formal parameter, what you call the keyword actually changes something in memory.  I guess that’s no different from a string literal but it has always felt unusual to me because a keyword looks like a formal name rather than data.; At least I think that’s right."
1792,1513368391.00061,Kareen,"keywords are data, not labels; just like a string or a number"
1792,1513368428.000067,Rebeca,same with symbols
1792,1513368444.000207,Thu,Thanks yea that’s important to remember.  Because to my C/C++/JS mind they look like names.
1792,1513368454.000347,Rebeca,"(in fact they are listed under data_structures on <http://clojure.org|clojure.org>, <https://clojure.org/reference/data_structures>)"
1792,1513368494.000372,Kareen,"apart from reader macros, there's no labels or language syntax that's not reified as a value"
1792,1513368654.000346,Margaret,"let bindings are sneaky to find, and even sneakier to do anything with as data haha but yeah <https://gist.github.com/noisesmith/3490f2d3ed98e294e033b002bc2de178>"
1792,1513368695.000162,Thu,omg
1792,1513368735.000329,Petronila,Beyond the `(keys &amp;env)` I wouldn’t really consider let-bindings to be “reified” (officially) in clj
1792,1513368754.000218,Margaret,right - but that snippet proves they are reified
1792,1513368762.0001,Petronila,sort of; hah
1792,1513368762.000454,Rebeca,no; you are reading compiler state using the macro and generating code to reproduce it at runtime
1792,1513368810.000012,Margaret,oh… that is different OK
1792,1513368844.00029,Rebeca,"what bronsa meant is `(let [a 1] a)` is not ""syntax"" as such, it is a list containing a symbol, a vector, and another symbol; ```
user=&gt; ((fn [x] ((x {:a {:a 1}}) x)) :a)
1
user=&gt; 
``` might be interesting to puzzle out when learning about keywords"
1796,1513369864.000518,Tuyet,anyone know why ```:1``` is a valid keyword but ```:foo/1``` is not?; ( or maybe they’re both invalid and :1 just happens to work? )
1796,1513369934.000203,Kareen,correct; they are both invalid literals; :foo/1 happens to work but it's still invalid
1796,1513369963.000198,Margaret,<https://clojure.org/reference/reader> - yeah my “read” of this is that :1 is illegal but accidentally works in some cases
1792,1513369968.000632,Rebeca,"well, no, right? because the reader doesn't determine what a valid keyword is"
1796,1513369986.000306,Kareen,"yep, I said literal"
1796,1513370229.000135,Margaret,"maybe a strict reading of that reference would also imply `:<http://google.com>` is bad, and keywords of that form are used in core libs (and it’s neither here nor there but the reader does accept them); it was unsettling to see that being used on purprose"
1792,1513370491.000368,Micha,"If an implementation doesn't stop you, someone somewhere will do it. :slightly_smiling_face:"
1792,1513370515.00004,Rebeca,and think it is a great idea
1792,1513370645.000129,Sonny,"there is a lot of background on this - the regex for keywords in the reader is actually wrong, which is why it works; we “fixed” it in 1.6 and found out it broke a lot of existing code; so we unfixed it"
1792,1513370712.000055,Micha,"Taking advantage of such behavior does put you at some kind of risk of a future version of Clojure reserving characters for other purposes, and now either you update your application or don't run it or its data with that version of Clojure.  Given sensitivity to backwards compatibility by core team, I doubt they would break such things for fun."
1792,1513370736.000171,Sonny,"I’d say at this point that there is no chance we will take that away; we did break it, and it wasn’t fun"
1792,1513370905.00039,Edelmira,"I notice one can now override `*reader-resolver*` in Clojure 1.9. Has anyone tried this? What scenarios is it useful for?; If I wanted to write a utility that overrode `*reader-resolver*` to do cool stuff, I would have to `alter-var-root` it rather than `bindings` it so that I can load code with that new reader resolver in place, right?"
1792,1513371050.000329,Gladys,"thx, after all I did this:
```
(def queue (agent []
                  :error-handler (fn [a ex]
                                   (l/error ex ""slack agent failed"")
                                   (restart-agent a @a))))
```"
1792,1513371056.000156,Sonny,it’s useful if you want to have control over how namespace-sensitive things resolve (like autoresolved keywords)
1792,1513371092.000406,Edelmira,"Looks like I can affect the behavior of `read-string`:
```
user=&gt; (binding [*reader-resolver* (reify clojure.lang.LispReader$Resolver (resolveAlias [this sym] 'blah))] (read-string ""::a/b""))
:blah/b
```; It seems to me that that's the only thing I can do with `binding`; Just want to make sure that's accurate"
1792,1513371124.000296,Sonny,yes; really best for programmatic reader cases where you are creating the environment (not for general code loading in the RT)
1792,1513371167.000298,Edelmira,"gotcha, that's what I wanted to confirm; thanks; I was hoping I could write myself a `with-aliases` macro that lets me define arbitrary aliases in local scope or something"
1792,1513371256.000059,Sonny,I think reading has already been done at macro time so that wouldn’t work
1792,1513371268.000602,Kareen,yep
1792,1513371272.000425,Edelmira,yep; unless I use `push-thread-bindings` and `pop-thread-bindings`....; then I could write a `defalias` macro that pushes a new `*reader-resolver*` for the remainder of that file; but then I don't know when to pop it
1792,1513371583.000312,Kareen,having a `push-thread-binding` escape its lexical context is not a good idea anyway
1792,1513371613.000533,Edelmira,"```
(ns my.ns)

(defalias o other.ns)

::o/a-keyword

(end-aliases!)
```
:troll:"
1792,1513371667.000056,Kareen,"if your `push-thread-binding` gets executed from within a `binding`, that `binding `ill pop the wrong thing"
1792,1513371687.000392,Rebeca,"if you are going to be gross, hijack the dispatchMacros table in the reader"
1792,1513371726.000163,Kareen,haha
1792,1513371733.000402,Edelmira,brb forking Clojure
1797,1513375372.000047,Mari,"Am I missing something, or does Clojure not have a way to refer to a piece of code from a docstring? I’m hoping to hyperlink between namespaces when an implicit dependency exists. I’ve considered using #_ macros but that invokes a (requires) clause I’d rather avoid.; IDE stack is Cursive with a close fallback of Emacs/etc"
1797,1513375482.000122,Jonas,you could use metadata
1797,1513375620.000165,Charity,<@Mari> there is no standardized docstring markup for referring to symbols.
1797,1513375632.000291,Jonas,instead of encoding it in the doc string and then having a way to parse it out; you could just be explicit with meta data `(defn ^{:refers-to 'other.name-space} foo [] 42)`
1797,1513375650.000175,Mari,<@Charity> okay! glad to know it for sure
1797,1513375675.000332,Charity,Some authors use Markdown style `backtick` blocks. I personally like to use `#'foo` or `#'other-ns/foo` var notation in backtick blocks in docstrings.
1797,1513375679.000121,Mari,"<@Jonas> okay that is interesting. I can do it without require, then? I’ll see whether cursive/etc pick up on it"
1797,1513375694.000101,Charity,Some of the tools support wiki-style `[[my.other/thing]]` references.
1797,1513375694.000347,Mari,"`#'` is also a good point, thanks; lessee…"
1797,1513375734.000252,Jonas,"the meta-data keyword is completely made up by me, so if you wanted ide support, you’d have to add it"
1797,1513375783.000074,Mari,ah
1797,1513375786.000045,Jonas,just trying to say that this isn’t a standardized practice. just a suggestion for how you could start one if you wanted
1797,1513375794.000494,Mari,"Cursive is trying hard to resolve it, though. just failing…; hm. of course the real problem is that this is across Clojure/ClojureScript code where I can’t exactly write cljc.; maybe I will find a way to cljc it, but for now, I have to keep the people reading the code aware.; Where would I RFC on such a thing?; I’ll take it to <#C0744GXCJ|cursive> in case it appeals…"
1798,1513376410.000034,Floretta,"Hey all, I'm wondering in clojure since there aren't really object methods how do I know what functions I can use on something?; For example, how do I know all the methods I can use on a channel made from core.async's (chan)?"
1797,1513376459.000313,Berry,"Clojure seems to follow this philosophy:
<https://stackoverflow.com/questions/6016271/why-is-it-better-to-have-100-functions-operate-on-one-data-structure-than-10-fun>"
1797,1513376539.000459,Floretta,"thanks, but that doesn't really answer my question. For example, I'd expect from that philosophy to be able to do ""nth"", ""count"", ""map"", etc"
1798,1513376555.000245,Floretta,But none of these actually work so I'm wondering what are the methods that work for chan
1797,1513376611.000042,Berry,"I'm not sure if this helps either: you can lookup all the protocols that chan implements, then look at functions that depend on those protocols"
1798,1513376633.000453,Berry,"also, I'm pretty sure you can do something map/transducer like on chans"
1798,1513376814.000227,Jonas,"for channels specifically, most of the functions that work with channels can be found at <https://clojure.github.io/core.async/>"
1799,1513376815.000074,Kalyn,"hey guys, is there any file reader transducer in any core library? Something that can be used to stream-read from a file, as part of a transducing process? Or should I work up a transducer around lazy file reading myself (which is what I'm about to be doing now)"
1799,1513376925.000295,Eliana,"<@Kalyn> not sure is worth a lib, is this something useful? <https://gist.github.com/reborg/2d9b31f2209f9b3afd1dc401b3dffc2c#file-split-by-clj-L55>"
1797,1513376928.000021,Floretta,"<@Berry> I'm not really sure what you mean. How would Iook up all the protocols for channel?; <@Jonas> Those are just functions within the core.async namespace, NOT functions that I can use on a ManyToManyChannel"
1799,1513377044.000275,Kalyn,"<@Eliana> yes, but doesn't that snippet show a transduction that is specific to the file reader? doesn't it go against the motivation for transducers? as in being generically applicable regardless of the actual input source"
1797,1513377053.000288,Jonas,"<@Floretta>, there’s not really a great way to obtain a list of every function that takes a ManyToMany channel as it’s first argument"
1799,1513377148.000027,Kalyn,<@Eliana> mmm on second thought maybe you are right and this is just trivial
1798,1513377264.000003,Floretta,whynot
1797,1513377307.000255,Jonas,"a couple things, 1) ManyToManyChannel is a concrete type, <https://github.com/clojure/core.async/blob/0498ba69fda5d930e3e7568cc90ca933c19c42ca/src/main/clojure/cljs/core/async/impl/channels.cljs#L30>; and you often want to program against abstract types instead of concrete types"
1798,1513377341.000181,Jonas,2) since clojure’s protocol system is open
1797,1513377372.000197,Jonas,"at runtime, more protocols can be extended to work with the concrete type of ManyToManyChannel"
1798,1513377391.000276,Eliana,Do you have a specific idea about how a possible API would look like in this case? Trying to understand if there is room for improvement
1797,1513377412.000122,Jonas,"3) in addition, anyone could write a function that takes a ManyToManyChannel as it’s first argument; or if the ManyToManyChannel was added to more protocols, then at any point, any protocol can start working with ManyToManyChannel; for most clojure functions, the types that functions expect aren’t annotated anywhere; so even if you went through every function in every namespace, there’s not typically a good way to ask if a particular function accepts a particular type; basically, clojure tends to adopt an approach that is dynamic and open which makes it more difficult to answer questions like “which functions work with the type?”; but makes a lot of other designs easier"
1797,1513378622.000315,Lester,I was under the impression that things like `(take 1 (drop 40000000 (iterate inc 1)))` would take constant memory but it doesn’t appear so. Could somebody explain what exactly happens here?; I get “Out of memory” on a constrained system while running this
1797,1513378975.000246,Jonas,"<@Lester>, how constrained?"
1797,1513379002.000193,Lester,"it’s <http://repl.it|repl.it> so I have no idea, but the memory assigned there must be somewhat small; but that shoudn’t matter if my assumption that this will take constant memory is correct"
1797,1513379079.000277,Jonas,I think it does take constant memory
1797,1513379109.000244,Lester,"my thinking was that `iterate` will return a lazy seq, `drop` will basically throw away elements as it goes and `first` will just cut the remaining lazy-seq and everything will be garbage collected; and those 40M elements won’t be allocated anywhere"
1797,1513379229.000196,Jonas,that was my impression as well; the one common issue is “hanging onto the head”
1797,1513379294.000193,Lester,I fail to see that in my example; <https://repl.it/repls/CultivatedAridStegosaurus>
1797,1513379298.000065,Jonas,for eg. `(def xs (take 1 (drop 40000000 (iterate inc 1)))`; sometimes the repl messes things up; since it assigns the whole sequence to `*1`; which means it is hanging onto the head; try `(first (take 1 (drop 40000000 (iterate inc 1))))`
1797,1513379418.000127,Lester,but `(println (take 1 (drop 40000000 (iterate inc 1))))` will also run out of memory; same; hm; puzzling
1797,1513379551.000243,Rebeca,will it?
1797,1513379570.00002,Jonas,it does; on the <http://repl.it|repl.it> site
1797,1513379578.000337,Rebeca,"oh; who knows what <http://repl.it|repl.it> does; as someone who runs a publicly accessible code sandbox, I can tell you they are never vanilla and extrapolating behavior to the ""real"" thing is fraught"
1800,1513382839.000143,Williemae,is core.async still active?; or is there a preferred alternative now
1800,1513382858.00011,Margaret,there’s definitely nothing that replaces it
1800,1513383082.000009,Williemae,"i guess there’s a little activity, going through the commit history.   It’s always a little disconcerting when you look at a repo and the only thing that’s changed in the last few months is the version number :stuck_out_tongue:"
1800,1513383148.000099,Margaret,one factor here is how strong clojure is for compatibility - which means clojure libraries don’t need to churn to stay compatible; (comparatively at least to other ecosystems)
1800,1513383181.000132,Williemae,yeah fair enough.
1800,1513383245.000157,Margaret,and core.async is not something that would be getting many security updates - if outside data is directly driving core.async that’s your security problem right there; it’s mainly a bunch of macros
1800,1513383934.00001,Daniell,"<@Williemae> Many people new to Clojure are surprised that a lot of heavily used libraries seem to be ""inactive"" based on the commit history. This is often due to a library being stable, mature, and ""complete"" -- since it is common for libraries to have a narrow focus and therefore they are often smaller and simpler than you might find in other languages."
1800,1513384051.000198,Thu,"It also seems like some stable libraries that have been in use for years and are still maintained are still at a sub-one version number, which I find disconcerting."
1800,1513384080.000012,Williemae,hard to imagine “complete” software ;)
1800,1513384171.000203,Floretta,So if you can't necessarily go by commits or github stars how can you tell? 
1800,1513384222.000174,Margaret,<https://crossclj.info> is useful for seeing which libs are used by open source projects; and anything from the clojure.core team will say prominently that it isn’t ready for usage if that’s the case
1800,1513385041.000262,Buck,<@Williemae> here's my take on the same question from several months ago. It comes up a lot in the Clojure community: <https://www.reddit.com/r/Clojure/comments/5vjq54/whats_the_reason_of_clojure_having_lots_of/de2w8vx/>
1801,1513385770.000127,Silas,How often do Java standard libs change?
1801,1513385824.000137,Daniell,<@Thu> I think that's mostly a weird historical quirk. Leiningen templates typically create a 0.1.0-SNAPSHOT project (I think?) and so folks start from there and go to 0.1.1 etc...
1801,1513385865.000108,Silas,"I do feel something in Clojure which is sometimes weird is certain things are like half standard libs, yet library. Like core.async, you can pretty much consider it a part of the standard library, yet you need to pull it in as a dependency to use it."
1801,1513385891.000056,Margaret,I’ve had people look askance when I update to a 1.x.x release - my reasoning being that this means bumping to that promises that the public facing api won’t change until that 1 becomes a 2
1801,1513385917.000127,Daniell,"...also, we used to have a monolithic Clojure Contrib library which was versioned along with Clojure itself and was at 1.2.0 when it was deprecated and broken up into the seed of what we have today -- and they all started out at 0.1.0(!). I believe one of them has reached 1.0.0 (maybe more than one? but only a few)."
1801,1513385919.000102,Margaret,"(that is, when I bump up my own project version from 0.x.x to 1.x.x)"
1801,1513385956.00003,Daniell,`clojure.java.jdbc` for example just released `0.7.4` yesterday after about six years of updates.
1801,1513385977.000037,Thu,I just happen to be coming over from the javascript/node community where 0.x.x means “use at your own risk” and “1.x.x” means “ready for public consumption”
1801,1513385986.000094,Margaret,any particular reason to never call a release 1.0.0 ?; @Justin yeah in my experience version strings are much less meaningful in the clojure ecosystem
1801,1513386024.000006,Thu,"I see lots of libraries that seem to be asymptotically approaching 1.0.0, which is fine as long as you understand what the convention is."
1801,1513386086.000005,Margaret,"for context, clojure.data.json had an incompatible api change before 1.0.0 and there was an uproar about the incompatibility (we wouldn’t have nearly as many cheshire users today if that had never happened I think)"
1801,1513386105.000199,Thu,"But if you are just casually investigating, say, a react javascript stack vs. a reasonml stack vs. clojurescript, you can be left with the impression that everything is half-assed and broken because nothing has reached a “stable” release, which I think is a mistaken impression."
1801,1513386161.000131,Buck,"It's definitely mistaken, that's basically software astrology; ""well you were born in the year 1.0.0, so that means you're still young but your API is stable"" - sure, ok :slightly_smiling_face:"
1801,1513386333.000148,Daniell,"<@Thu> There's also a cultural thing in Clojure about version numbers -- best seen in Rich Hickey's Spec-ulation talk (but he's hinted at it in a few other talks) -- that they don't really matter: libraries should grow through accretion of functionality (only) and never break backward compatibility for a particular group/artifact. So Clojurians don't ""care"" that a library has a low version number, as long as it provides the functionality they want...; ...and libraries are often small and focused so it's also often easy to switch out a single library, and of course you end up with a large combination of libraries."
1801,1513386534.000062,Thu,"If the community really thinks that version numbers don’t matter, why not change them to what a lot of programmers expect?  Just lop the 0 off if the library is stable.  Boom, easy change in perception.  Just my 2 cents as a newbie."
1801,1513386544.000145,Berry,"```
(defn fu [obj funcs]
  (reduce (fn [val [k f]] (update val k f)) obj funcs))

(fu {:a 1 :b 2 :c 3 :d 4}
    {:a inc :b dec :d #(* % %)})
```

I created this function, `fu`, short hand for `function update`, is there a builtin like it takes two maps as arguments; the second specifies how to update the first"
1801,1513386585.000106,Daniell,Here's a great thread about backward compatibility (on a library that has reached 0.14.2 after close to seven years of development) <https://github.com/clj-time/clj-time/issues/196>
1801,1513386831.000127,Thu,<@Daniell> I think the backwards-compatibility culture is great.  No arguments there.
1801,1513387011.000034,Buck,"<@Thu> essentially, Clojure has a different set of cultural norms when it comes to software compatibility that get us the result we're after. It's rare for people to be burned by breakages between versions, so there is literally no pressure on the community to organize around a version number scheme, because it would convey no useful information.; Other communities (especially extremely large, diverse communities) use version numbers as a mechanism for signaling how much confidence you should have in their software"
1801,1513387128.000088,Daniell,"<@Thu> The specific issue in that thread is that we all decided that we couldn't change the implementation since it would change the API and so it would need to use a different group/artifact in order not to cause problems (because an application can easily pull in multiple versions of the same group/artifact and only one will win -- so that must provide an API that _every library you pulled in_ can still use).; (and the transient dependency conflict issue is also partly why folks are so conservative about change here -- since small, focused libraries get widely used by other libraries!)"
1801,1513387316.000121,Thu,"<@Buck> <@Daniell> Yea I totally get what you guys are saying, and I think all that is really great and commendable.  What I’m saying is instead of sticking on 0.x.x forever, just bump to 1.x.x.  That communicates “stable, use me” to every potential recruit from JS/node and probably lots of other communities as well.  You don’t have to go full semver, since, as you guys are pointing out, that isn’t useful given the cultural norms."
1801,1513387464.000128,Williemae,"&gt; for context, clojure.data.json had an incompatible api change before 1.0.0 and there was an uproar about the incompatibility (we wouldn’t have nearly as many cheshire users today if that had never happened I think)

I guess if you’re not using major versions to indicate breaking changes then your versioning system may be somewhat arbitrary.  In that case maybe think about using the Ubuntu versioning system."
1802,1513387490.00014,Williemae,"<@Buck> thanks for the link, i’ll give it a read; I understand what you’re saying there but it’s often difficult to know if you’re looking at a timeless `g722.c` or someone’s half-baked lib that they haven’t touched in 3 years unless you have greater context on the community."
1801,1513387644.000107,Buck,"The reason why not is pretty simple. If I went to the JS community and said ""please just write software that is generally backwards compatible so I don't have to care about the version number"", it would not fly very far. Not because there's anything wrong with the JS community, it's just that I'm asking them to change a cultural norm to suit myself.; The kubernetes project for instance has yet another set of cultural norms that differ from JS and Clojure communities. It goes on and on.; (which is an interesting read, by the way: <https://kubernetes.io/docs/reference/deprecation-policy/>)"
1801,1513387750.000006,Williemae,"but yes i would rather have something that works and is stable than something that has bugs and people are constantly fiddling with, if those are my options."
1801,1513387761.000016,Thu,<@Buck> Except that the suggestion is that you could change something that you yourself are saying doesn’t matter to you and is arbitrary anyway and might help people use clojure.
1801,1513388114.000025,Buck,"Clojure has areas that need help much more seriously :slightly_smiling_face: The person it would be helping is the newcomer who is initially confused, but pretty quickly learns the ropes. If anything I think this cultural norm has become a source of pride and rite of passage. And from a technology perspective, we're starting to explore a world where we leave version numbers behind *entirely*, if you read between the lines of Rich's keynote from last year.; I think all your comments are perceptive though, you are totally right that it's confusing to a newcomer more accustomed to different norms. There are many more things in Clojure that will bake your noodle than just this, trust me :wink:"
1801,1513388310.000029,Williemae,"Personally I don’t mind the version numbers so much. In a lot of cases they’re pretty arbitrary/meaningless. Sometimes it’s useful to indicate that stuff will break (or at least stop your package manager from updating to the breaking changes) but for the most part the numbers are not terribly valuable information.; I’ve been updating the DigitalOcean API last night/today to add some new features to it that they’ve added in the past couple years and it’s pretty remarkable how little code it is.  I’ve only really toyed around with Clojure a bit but now that I’m more independent I want to use it more seriously.  It’s pretty nice having a rest api wrapper that is only, you know, ~3 lines of code per call"
1801,1513388540.000049,Buck,"Really the only time I'm properly alert for a sense of ""abandonment"" is when the code interfaces with another system that I know has evolved a great deal since then. Like, a Kafka wrapper that's several years old.; But oftentimes I'll open that project up and read the source (because most of the time it's 3 lines long so it's quick to read :wink: ) to see what approach they took. The cost of spinning my own, updated take on it is often pretty low."
1801,1513388645.000078,Williemae,(I mostly do C++ to pay the bills though so the levels of verbosity are quite different heh)
1801,1513388704.000079,Buck,My office mate is trying to convince me of the virtues of modern C++ template metaprogramming because now there are control structures or some such in there; So I'm quietly waiting for the right moment to re-implement his thing in a couple of lines of macro :wink:
1801,1513388830.000021,Williemae,"well, constexpr makes templates nicer so you can do stuff like `if constexpr (std::is_same&lt;T, U&gt;()) { .. } else { ... }` instead of having specialization or doing the integral constants hack.; so there are some nice things in modern c++, but it’s still pretty verbose compared to clojure; that said you gotta pick the right tool… I doubt I’m gonna write any media servers in Clojure anytime soon, likewise I doubt I’m going to make a rest service in C++ anytime soon."
1801,1513388935.000029,Berry,"Is there a Clojure function that will take:
as input: 
```

float sum (int n, float * in)
{
 float  ans = 0.0
 ...
 return sum

 }

```

then, compile this function, and let me call it, passing it an int and float-array ?"
1801,1513389022.000093,Buck,<@Berry> compile it such that you can invoke it from java?
1801,1513389042.000102,Berry,"yeah, I want it to take the string, compile it as a . function, then load it so I can invoke it from Clojure via Java"
1801,1513389197.000107,Silas,"I think something like crossClj is actually a better way to judge maturity, reliability etc. Would be nice if there was a little github badge thing that would show the number of projects that have a dependency on the current repo. And maybe show how many new things took a dependency on it in the last month."
1801,1513390226.000072,Krysta,I'm having a hard time wrap my mind over this code
1803,1513390241.000037,Krysta,How exactly does this code work?
1801,1513390270.000008,Krysta,"also `(def fib (concat [1 1] (lazy-seq (map + (rest fib) fib))))`; I can write it, but I don't fully understand it"
1801,1513391109.00008,Daniell,"<@Krysta> I'll attempt to explain the `fib` definition... It's an infinite lazy sequence that starts with 1, 1, ... so that's `fib` within the body, so `(rest fib)` is 1, ... and so you're asking `map` to apply `+` to successive elements of both sequences (`map` produces its results in lazy chunks) so it'll produce 1 + 1 = 2, so now `fib` is 1, 1, 2, ... and we move on to the next element of each sequence argument to map and it produce 2 + 1 = 3, so now `fib` is 1, 1, 2, 3, ...; and now `map` adds 3 (from `(rest fib)` ) to 2 (from `fib`) and gets 5... `fib` is 1, 1, 2, 3, 5, ... and so on, step-by-step; The `lazy-seq` call just ensures that what's inside it doesn't try and evaluate anything until that part of the sequence is realized (asked for).; Does that help <@Krysta>?"
1801,1513392225.000004,Krysta,<@Daniell> it helps a lot~ thx~
1804,1513401648.000024,Berry,"what's a good color for comment on a white background? I'm starting to find it's really important ot read the comments I write, they're just as important as code"
1804,1513401826.000001,Buck,"<@Berry> maybe check out the Nord color scheme for inspiration: <https://github.com/arcticicestudio/nord>; or any solarized theme for your editor; More inspiration here, esp. if you use IntelliJ: <http://color-themes.com/>; If you want really general color stuff, you can visit <http://www.colourlovers.com> and find colors that are complementary, suggested palettes, etc"
1804,1513401954.000045,Berry,"maybe the right _emacs_ solution is to have a command taht toggles comments betseen #888 and #000 , depending on whether I want to read comments or not"
1804,1513401999.000024,Buck,"There's a ton of stuff you can do in emacs, including using org-mode in your comments, which supports folding"
1805,1513404567.000062,Berry,"I don't know if anyone else is doing this, or is this is intentional:

I'm currently reading a book on type theory, taking notes in the form as comments --- and then IK convert these comments into SPEC definitions; so spec is turning into ""executable invariants""; can `|` be used in clojure at all? I want a way to separate elments in a vector, say

`[:a :b :c | 1 2 3 | ""more info"" ]`"
1806,1513411449.000014,Kalyn,"<@Eliana> thanks for having responded! I am not sure why most experts ignored, is it because they seldom write transducers or they considered the topic too basic to their taste; looks like the site is down today? (?!)"
1805,1513411842.000033,Jami,"<@Berry> why don't you use comma for that ?; it seems that '|' is a vaid symol, like + or -"
1806,1513412465.000018,Kalyn,"Your implementation looks flawless in also closing the file ""the transducer way"""
1807,1513424875.000018,Andra,Is there any reason :clj: uses `2 + Runtime.getRuntime().availableProcessors()` for `Agent/pooledExecutor` (<https://github.com/clojure/clojure/blob/clojure-1.9.0/src/jvm/clojure/lang/Agent.java#L50>) and `pmap` (<https://github.com/clojure/clojure/blob/clojure-1.9.0/src/clj/clojure/core.clj#L6941>)? Why the `2 +`?
1808,1513427858.000038,Beulah,"<@Daniell> that code seems to defy the normal order of compilation, in that it refers to `fib` in its own `def`inition, and it's not obvious how the compiler handles that!"
1808,1513429835.000002,Rosia,<@Beulah> symbols referring to vars are implicitly dereferenced by the compiler
1808,1513431032.000126,Beulah,<@Beulah>which means ?; <@Rosia> which means ?
1808,1513431149.000069,Rosia,"it means you are allowed to self-refer the var you're defining, as long as the access is deferred (what lazy-seq does); when the root value is evaluated, the var has already been created"
1808,1513431494.000047,Beulah,<@Rosia> what do you mean by 'root value' ?
1808,1513431531.000092,Rosia,the value held by your var
1808,1513431561.000082,Beulah,which in this case is `(concat [1 1] (lazy-seq (map + (rest fib) fib)))`
1808,1513431650.000055,Rosia,"yes, but during the evaluation of that, the root value is undefined, that's why you need to defer; try e.g `(def a a)`"
1808,1513431747.000079,Beulah,"ok, just to be clear, a var has a value, are you saying it also has another value called its 'root value' ? i.e. does a var have 2 values: its value and its root-value and if so what's the difference ?"
1808,1513431792.000006,Rosia,"no, the difference is meaningful only for dynamic vars"
1808,1513431811.000076,Beulah,but this isn't a dynamic var
1808,1513431880.000004,Rosia,static vars have always one value and this value can be a sentinel if this var has not yet been bound
1808,1513431898.000061,Beulah,ok so we could just say 'value' in this case
1808,1513431994.000001,Rosia,I guess so
1808,1513432031.000096,Beulah,"alright so the point is that `lazy-seq` defers evaluation (until realized by `take` or something); so what appears to be an intractable self-reference isn't really because at the time the `lazy-seq` is realized the var `fib` has a value, which is `(concat...)`; and when the `def` is evaluated, the `lazy-seq` isn't actually realized, it's only created"
1808,1513432205.000094,Rosia,right
1808,1513432266.00007,Beulah,it's confusing because it doesn't read like that; it reads as an atomic definition; there's no indication as to the 2-pass evaluation; I think it's hard to reason about time in that code
1808,1513432402.000004,Rosia,it's not that much common afaik
1808,1513432423.000038,Beulah,no I've only ever seen that example - it's lovely though!
1808,1513432452.000044,Randee,The only way --in really most programming languages-- to write code that isnt' evaluated is to put it into a function. Naturally `(def x (foo))` is different to `(def x (fn[] (foo))`; So that's exactly what the `lazy-seq` does (it's a macro that wrapps the code in a function)
1808,1513432498.000021,Beulah,<@Randee> or `delay`
1808,1513432503.000126,Randee,"It's just a function definition. Under the hood lazy seqs hide that.; <@Beulah> Again, delay is JUST a function under the hood; Try writing a lazy seq in Javascript. Totally possible since you have functions. You're API would just be a little different accessing that lazy seq."
1808,1513432587.000033,Beulah,that doesn't sound enjoyable
1808,1513432736.000038,Randee,"Your mind probably woulnt' have a problem with that code: `(def foo [0 1 (fn [] [2 3 (foo)])])`, right?"
1808,1513432741.000008,Margaret,it's pretty straightforward - you just need an object that holds a function and an optional value
1809,1513432752.000128,Marcos,Hi. What lib you would recommend to use with GraphQL? I found several and don't know which I should to choose
1808,1513432758.000003,Marcos,I understand right what I need to use GraphQL both in cljs and clj sides of my site?
1809,1513436359.000029,Marty,<@Marcos> lacinia; is maintained by walmart
1809,1513437470.000082,Marcos,"<@Marty>, thanks"
1810,1513437522.000104,Daine,there is also <#C4DLZKR9T|graphql> which could be interesting if you start using it
1809,1513437585.000043,Marcos,"<@Daine>, joined, thanks"
1811,1513442725.00001,Verna,"Hi! Tomorrow, on Sunday at 12am UTC, I’m going to stream live Clojure coding solving some issues for my open source Etaoin library. Recorded version will be stored on Youtube automatically. Watch it here: <https://www.youtube.com/watch?v=cLL_5rETLWY>"
1812,1513451856.000049,Johana,Is there a de facto parser combinator library for clojure?
1812,1513451989.000061,Charity,"So there is/was fnparse, but the original is super stale the maintainer vanished and there’s no clear winner of the forks.; It lets you write pretty trivial recursive decent parsers easily.; Instaparse exists and I’d suggest you start there. Using the ordered choice operator you can optimize your grammars moderately well.; Antlr4 or one of its wrappers if you really need performance."
1812,1513452084.000074,Johana,"<@Charity> I wanted to check if I could get something faster than InstaParse and nicer than hand written (for some value of nice):
<https://github.com/borkdude/aoc2017/blob/master/src/day16.clj#L118>"
1812,1513452146.00001,Charity,<@Johana> try replacing unordered choice `|` with ordered choice `/` in your grammar and see how that does.; <@Johana> Instaparse tries really hard to support ambiguously parsing syntaxes with fully unordered choice. Looks like your grammar is actually LL(1) and not ambiguous so you can use ordered choice to make it clear that your grammar is less general.
1812,1513452289.000052,Johana,"It actually becomes a bit slower that way; Not significantly, probably doesn’t help nor hurt; One issue is that Instaparse has to generate nested items first which get resolved in the transform phase"
1812,1513452343.000022,Charity,:shrug:
1812,1513452358.000069,Johana,And with a parser combinator lib I might get to do that during processing
1812,1513452393.000101,Charity,"You can. That’s how my first compiler written in fnparse worked. You can also use Antlr4 visitors/listeners to perform evaluation during parsing.; Instaparse doesn’t and won’t support doing this for good reason. I talked to <@Edelmira> about this at some point.; Besides you’re down in ms here, the measurement error is probably significant."
1812,1513452841.000014,Johana,"With | 582 ms, with / 591 ms, measured by criterium; As Alex explained, IP does a lot of bookkeeping, don’t know the exact details, but this can make it slower than simple hand rolled parsing.; Parser combinators don’t seem really popular in Clojure somehow."
1812,1513453270.000104,Bibi,"I've been playing around a little with <https://github.com/blancas/kern>. I'm pretty new to parser/combinators as a tool though, so I can't comment on what's good or not so good."
1812,1513453303.000044,Johana,Thanks!
1813,1513454802.000051,Bibi,"Funny, I'm using AoC to learn this, too :slightly_smiling_face:"
1814,1513459404.000067,Margaret,"yeah - I'd never had that issue before, but it's up now"
1812,1513461262.000049,Johana,"Kern implementation:
<https://github.com/borkdude/aoc2017/blob/master/src/day16.clj#L115>"
1815,1513463517.000059,Kalyn,"advanced clojure book written from the post 1.7 perspective? recommendations anyone? :slightly_smiling_face:; I see this one isn't out yet by the way, no idea what is its table of contents like
<https://www.amazon.com/Programming-Clojure-Alex-Miller/dp/1680502468/ref=sr_1_7?s=books&amp;ie=UTF8&amp;qid=1513463397&amp;sr=1-7&amp;keywords=clojure>"
1815,1513463797.000036,Olen,"Is there anyone using Lacinia ?
Great job! But, I am so sceptic. I have some questions."
1815,1513464565.000018,Daniell,<@Kalyn> Programming Clojure 3rd Ed would be a good purchase -- assuming you like e-books and don't mind getting updates while it's in pre-release form? Otherwise I'd recommend Clojure Applied if you want something beyond intro/mid-level.
1815,1513464601.000056,Daine,"<@Olen> at <#C4DLZKR9T|graphql> there are quit some questions, I also want to try it at somewhere soon"
1816,1513465066.000037,Michelina,"I have a probably dumb compojure-api question. (happy to take it somewhere else there's a better channel for this). I think I'm missing something very obvious, but if I return a core.async channel from a route in `compojure-api`, I get an error about channels not implementing `render`. I'm running 2.0-alpha16 and doing something super similar to the example in the readme. I'm sure this will be a facepalm moment, but what's the obvious thing I'm missing?"
1815,1513465218.000054,Olen,<@Daine> thank you. :innocent:
1817,1513466058.000068,Alline,you finally pushed me to start the advent of code.  my solution to day 16: <https://github.com/wiseman/advent-of-code/blob/master/2017/day16/src/day16.clj#L39-L59>
1816,1513466558.000029,Michelina,"Ah, nevermind. I just needed to show httpkit how to interface with ring-async"
1817,1513466660.000058,Jerold,Just saw this and thought it was really interesting...but I don't know what IK is. Seems like there was some part of this discussion I missed?
1818,1513468542.000028,Andra,"<@Sandy> Was just revisiting this article: <http://blog.cognitect.com/blog/2016/9/15/works-on-my-machine-understanding-var-bindings-and-roots> and noticed that there was never a follow-up on `Var$TBox` :stuck_out_tongue:

&gt;  The rationale behind TBox-es will have to wait until a later time

What's the reason `Frame` bindings are maps of `Var -&gt; TBox` instead of just `Var -&gt; &lt;value&gt;`? Since `dvals` is thread-local, all threads  a `Frame`'s `TBox`s are the same, which my experiments seem to confirm."
1818,1513475131.000067,Sandy,"<@Andra> It's mostly to stop you from shooting yourself in the foot. There's some strange cases where you could cause cross-thread mutation with `set!` and bindings. I don' have a REPL infront of me at the moment, but I think this would cause the error:

```
(def ^:dynamic myval nil)

(binding [myval 32]
  (set! myval 42)
  (future (set! myval 45)))

```; So that's the gist of it, we bound a dynamic var, set! a value locally, then tried to set it again in another thread. I think that will cause an error and that error occurs when you set an already set val from a different thread than the first set!. The thread that set the value is tracked in TBox.; Using TBox also improves performance a bit, since set! is then allocation free. Without TBox you'd have to do an assoc into the contents of the current Frame, and that would require an allocation."
1818,1513475751.000053,Andra,"I see, so it's to handle binding conveyance? B/c AFAICT that's the only way frames are shared b/t threads.

Relevant code: <https://github.com/clojure/clojure/blob/clojure-1.9.0/src/jvm/clojure/lang/Var.java#L219>; But I'm actually not sure why the two `set!`s is a problem? Each thread gets its own frames, so they won't interfere w/ each other."
1819,1513488954.000014,Berry,"Does anyone else here see a need for something like: <https://github.com/aaronc/c-in-clj> but targetting both webassembly (to be called from cljs) and cuda (to be calledc from clojure/jcuda)?

I want to write high performance numerical code in something that is clojure-like, and be able to invoke it directly from clojure"
1819,1513489893.00002,Silas,<@Berry> Did you look at Ferret? <https://github.com/nakkaya/ferret>
1819,1513492904.000017,Berry,"<https://ferret-lang.org/> looks pretty amazing; Is there a way, either using transient! vector or a native java array, to get CONSTANT TIME, not log_32 N time for following op:

set n-th element of array/vector/object to :foo"
1820,1513501019.000033,Alla,<@Michelina> You might not be running the server on async-mode? Adding `{:async? true}` to jetty opts enables the async chain.; there is also <#C0A5GSC6T|ring> for ring async and <#C06GSN6R2|ring-swagger> with c-api things too
1821,1513507600.00007,Kalyn,"<@Daniell> oh is it already available as an e-book?; I wish there was a TOC of it to look at, but on Amazon there’s none yet"
1822,1513511315.000014,Verna,"going to start in 10-15 minutes
<https://www.youtube.com/watch?v=cLL_5rETLWY>"
1822,1513511476.000011,Olen,"<@Verna>, we are waiting!"
1822,1513511572.000098,Berry,"what is this? are you live casting using a library to control a web browser via clojure ?; (it's almost 5am here, I'm trying to decide to sleep or to wait)"
1823,1513512069.0001,Elizbeth,"hi!
I'm having trouble with recursion when a function recurs multiple times per call, e.g. when mapping itself over some list
I don't know how to avoid blowing the stack for larger inputs
here's a (over)simplified example, a function which counts the nodes in a tree: 
<https://gist.github.com/ihabunek/927e8534bef011dd9c14f0284153e678>
AFAIK, loop/recur is not viable here
any hints would be appreciated."
1822,1513512125.000067,Berry,<@Verna>: how do we join the chat ?
1823,1513513249.000006,Lucio,"<@Elizbeth> you can definitely use loop/recur here, but I think you will need an accumulator parameter"
1823,1513513295.000023,Elizbeth,"ok, i'll give it a shot"
1823,1513513319.000026,Lucio,"it will be less sexy than the way you expressed it with recursion though…; as in, it will be less explicit as to what it is doing; but it should get rid of the stack overflow problem if you do it properly"
1823,1513513359.00003,Elizbeth,"the actual problem is navigating a branching maze, which is similar to the example"
1823,1513513381.000061,Lucio,"what about using a stack?; use two exta parameters, an accumulator (integer accumulating the count); and a stack of things left to explore; basically modelling a breadth first / depth first traversal; there might be std lib functions for that actually, not sure…"
1823,1513513441.000027,Elizbeth,"not too experienced with B/DFS, will need to explore it a bit before i can answer your question"
1823,1513513443.000069,Lucio,so you could start with an accumulator of 0 and a stack containing only the first node you need to explore; e.g. `[:a]`
1823,1513513468.000074,Elizbeth,stack would contain the ones i have left to explore?; as opposed to the ones i have already explored
1823,1513513497.000039,Lucio,"yeah, left to explore; actually, instead of having an accumulator with th count, you could also just flatten the tree to a list; then count the numbr of elements in that list; hang on, I’ll write you an example"
1823,1513513530.000019,Elizbeth,"ok, the tree is a stupid example :slightly_smiling_face:; the stack of things left to explore sounds good for this tree problem, and for mazes which don't have loops; if i have loops i guess i'd have to store places already visited"
1823,1513513573.00009,Lucio,"yep, if you have loops it’s different :disappointed:; yeah; there might be more optimized algorithms then though, I am not familiar with graph traversal algos; if you were really worried about performance I am sure optimized versions exist; but I think the basic answer to what you were asking is: “use an extra helper function with an ‘accumulator’ parameter, then use recur/loop”"
1823,1513513795.000075,Elizbeth,i'm looking at the actual problem i had :smile:; trying to apply it
1823,1513513810.000081,Lucio,but personally I would still use the recursive approach (with stack overflow issues fo large inputs) if I know my inputs will be small; because it’s usually more expressive; at least to me
1823,1513513823.000061,Elizbeth,i like the recursion too; i was under the impression that it's not possible to (map recur ...)
1823,1513513855.000066,Lucio,"yeah it’s not possible to do `(map (recur` directly; hang on, I’m writing you an example :slightly_smiling_face:"
1823,1513514377.000019,Elizbeth,"here's my actual problem, i cleaned it up a bit
<https://github.com/ihabunek/aoc2016/blob/master/src/aoc2016/day17.clj#L53>
this works well when the limit is under several hundred, but the second part of the assignemnt is to find the longest possible path and that's too much"
1824,1513514419.00009,Lucio,<@Elizbeth> <https://repl.it/repls/SaddlebrownLiquidMontanoceratops>
1823,1513514467.000002,Elizbeth,wow cool site
1823,1513514495.000026,Lucio,for the longest possible path yo might want to take a different approach if the graph is big though
1823,1513514518.000044,Elizbeth,yep
1823,1513514554.000013,Lucio,and yes <http://repl.it|repl.it> is cool :slightly_smiling_face:
1823,1513514576.000027,Elizbeth,"interesting approach, thanks for that example; reducing it with set/union, makes sense"
1823,1513514684.000034,Lucio,yeah; actually now that I think of it it’s unecessary if you have a tree structure; since the same node will never appear twice
1823,1513514702.000013,Elizbeth,"so you have recur without loop, didn't know that was a thing"
1823,1513514708.000094,Lucio,"but if you had a DAG (directed acyclic graph), then that approach would still work; oh hang on; no it wouldn’t it would overcount some nodes…; yes you can recur on the whole function; I think it the doc it says that recur “recurs to a recursion point”; loop introduces a recursion point; but the function itself is also a recursion point"
1823,1513514811.000002,Elizbeth,docs can sometimes be a bit terse
1823,1513514815.000036,Lucio,yes…
1823,1513514817.00008,Elizbeth,makes sense; <http://clojuredocs.org|clojuredocs.org> is nice for examples though
1823,1513514974.000076,Lucio,"just for the record: I shouldn’t have used `set` in the example I gave you; at first sight it makes sense, but thinking a bit more about it it doesn’t seem to make sense at all"
1823,1513515000.000052,Elizbeth,i usually use a list to preserve order
1823,1513515003.000073,Lucio,"well, it makes some sense, but if you wanted it to behave well on DAGs the function would need to have extra logic to handle already visited nodes"
1823,1513515080.000077,Elizbeth,"thanks, i think you've steered me in the right direction, i'll play around with it"
1823,1513515090.000056,Lucio,good luck!
1823,1513515129.000027,Elizbeth,next year maybe i'll try racket to get some proper TCO :smile:
1825,1513518223.000073,Annemarie,"Please, someone could help me with this:
```
(-&gt;&gt; (iota/seq ""war-and-peace-full-book.txt"")
     (r/filter identity)
     (r/map (fn [line]
              (re-seq #""\w+"" line)))
     (r/fold (fn 
               ([] 0)                                  
               ([a line]
                (+ a (count line))))))
```
I’m trying this to count words in a file with parallel, that’s Ok with small files but with big txt files. I’m having this problem:
`UnsupportedOperationException count not supported on this type: Long  clojure.lang.RT.countFrom (RT.java:664)`"
1826,1513519123.000096,Verna,"<@Berry> to join the chat, you need to be logged on Youtube using your google account."
1827,1513522383.000033,Sandy,"sure, `aset` on an object array is constant time. At least as constant as system memory allows (nothing is really constant time in modern hardware)."
1827,1513526494.000086,Margaret,"<@Annemarie> r/fold takes an optional combining function which combines the results of multiple folds; your fold returns a number, if the combine function is not provided, it tries to use your reduce function; <@Annemarie> I think you can just tell it that your combine function is + so change `(r/fold (fn ...))` into `(r/fold + (fn ...))` and that should solve it; <@Annemarie> to be totally clear - it's trying to pass a number to your function because you told it that function could be used to combine the result of multiple folds; also, when you fix it by adding `+` as an arg, your function no longer needs a 0 arity to be defined - only the combining function is called with 0 args"
1828,1513528161.000127,Michelina,<@Alla> It turned out that I needed to make httpkit understand ring-async; Which requires a tiny wrapper
1829,1513534015.000066,Arnetta,"Hi, Is the Untangled Framework alive or abandoned?"
1830,1513536054.000038,Berry,"Is there a way to create an 'array' such that:
1. I can use aset on it
2. it works in cljc (i.e. both clojure and cljs)
3. it lets me store arbitrary object (i.e. not just float or int)

I'm basically looking for 'array of references'

Pre-emptive: why aren't you using a transient! vector? I want real O(1) aset, not O(log_32 n) assoc."
1830,1513536195.000005,Margaret,`#?(:clj (make-array Object 100) :cljs (make-array js/Object 100))`
1830,1513536206.000004,Kareen,`object-array`
1830,1513536230.000019,Margaret,"oh,  that's portable, nice"
1830,1513536274.000007,Berry,nice; thanks!
1831,1513546737.000064,Alla,<@Michelina> would be nice If the tiny wrappers were available for all. Needed for Aleph &amp; Immutant too. Best would be do PRs to all the servers to have the async? option
1831,1513546807.000111,Michelina,"Agreed. I may take a crack at the advice for httpkit offered here: <https://www.booleanknot.com/blog/2016/07/15/asynchronous-ring.html>; (that's also where i got the tiny wrapper, `ring-&gt;httpkit`)"
1832,1513547495.000035,Ahmad,"in `plumatic/schema`, is there an option that would allow you to create a condition for a value based on its key in a map? from my understanding it seems that `s/conditional` can only validate the value in which its placed; consider
```
[{:something1 {:foo 1 :bar 2}}
 {:something2 {:span ""2"" :potato ""3""}}]
```
then if the key is `:something1` i'd like to use a certain schema to validate  `{:foo 1 :bar 2}` but if the key is `:something2` i'd like to use another schema to validate `{:span ""2"" :potato ""3""}`."
1832,1513548534.000102,Margaret,"you can make an s/conditional that looks into the keys; that is, a conditional that says apply schema1 if :something1 is present, otherwise schema2 if :something2 is present, otherwise some default; then schema1 and schema2 have the apropriate maps under those keys"
1833,1513550875.000129,Daine,"You could also use keys with or, something like (s/keys :req-un [(or :something1 :something2)])"
1832,1513551538.000014,Ahmad,"thanks guys, i ended up using <@Margaret>'s tip cuz i'm in a rush here"
1833,1513551679.000014,Ahmad,<@Daine> is there a keys function in schema? i couldn't find in the docs for the core namespace
1832,1513552520.000056,Margaret,I think <@Daine> was thinking of spec
1834,1513561488.000053,Berry,"`(#(reverse (apply vector %&amp;))
 :a :b :c)`
is there a way to rewrite the function? (the part before the :a :stuck_out_tongue: :c)"
1834,1513561865.00001,Toi,`(comp reverse vector)`
1834,1513561890.000024,Berry,"actually, I think ikt's just #(reverse %&amp;) :slightly_smiling_face:"
1834,1513561919.000135,Toi,sure
1835,1513563061.0002,Berry,"```

  (defmacro def-alias [lst] 
    `(do ~(for [[k v] lst] `(def ~k ~v))))

  (macroexpand-1 
   '(def-alias [[rev reverse] [ki keep-indexed] [pi persistent!] [ti transient] [gi get-in]]))
(comment
 (do
 ((def rev reverse)
  (def ki keep-indexed)
  (def pi persistent!)
  (def ti transient)
  (def gi get-in))))


```

what am I doing wrong in this macro?; ah, it should be `~@(for` instead of `~(for`"
1834,1513573632.000033,Daniell,<https://pragprog.com/book/shcloj3/programming-clojure-third-edition>
1836,1513581105.000263,Jami,Did you guys checked <https://github.com/EntilZha/PyFunctional> ? I'm wondering if I could create a similar project with clojurescript.
1837,1513583123.000254,Tari,"Hi, I use 
```
(defn gen-handler
  [k]
  (eval
   `(defn ^::blocking ~(symbol (str (name k) ""-handler""))
      [state#]
      (try
        (handlers/do-handler state#)
        initial-state
        (finally (run *agent*))))))
```
to define function at runtime, but it appears the new `xxx-handler` function was defined at `clojure.core` namespace, not the namespace which `gen-handler` was called or defined. How to define a function at runtime at the current namespace? Thanks!"
1835,1513583396.000186,Berry,"```

(def □ 20 )
□
(comment
 20)


```
so it clearly works

however, according to <https://clojure.org/reference/reader#_symbols> is this guaranteed to work? in particular, it states:

```
Symbols begin with a non-numeric character and can contain alphanumeric characters and *, +, !, -, _, ', and ? (other characters may be allowed eventually).
```

and I do not know how unicode is defined wrt to alphanumeric"
1836,1513585182.000108,Jami,<@Tari> have you considered using macro that this use case ?
1836,1513585230.000079,Tari,"<@Jami>  I am not sure, does macro different with function in this use case?; at every thread the `agent` runs in, I use `(gen-handler k)` to generate a handler to do a specific job.; this handler is generated using the keyword `k` so I can later using keyword `k` to get the function's name and call this function."
1836,1513585464.00041,Jami,"do you have a specific reason to define top-level function with defn ? It might be more appropriate to create anonymous function with lambda; like in this case, where I define two handler functions
```
(defn pipe ""Create a parallel pipeline.""
  [xf in out err]
  (let [n ncpu
        close? true
        to (async/chan n)
        from (-&gt; in line-seq async/to-chan)
        ln-handler (fn [x] (writeln out x))
        ex-handler (fn [x] (writeln err x))]
    (async/go-loop []
      (when-let [ln (async/&lt;! to)] (ln-handler ln) (recur)))
(async/pipeline-blocking n to xf from close? ex-handler)))
```"
1838,1513588295.000062,Micha,"<@Berry> Not sure what you mean by ""is it guaranteed to work""?  Do you mean, will it ever change in a future version of Clojure?  It is unlikely that it will change, as the Clojure core team likes to maintain backwards compatibility, but I don't think they or anyone else can make you some kind of binding promise about it.; I believe the Eclipse Public License is pretty much a guarantee that you can use all versions of Clojure released under that as long as you want to, but that may not be what you are asking about."
1838,1513597293.000179,Berry,"<@Micha>: re ""unicode in clojure"", my current understanding is:

1. unicode var names works in 1.9.0
2. unicode var names is NOT promised to work according to clojure docs

3. I'm curious whether I can rely on unicode var names working in the future"
1839,1513601210.000166,Sanford,:water_buffalo:; :water_buffalo:
1840,1513602064.00028,Audie,"Is there a way in `Pedestal` to automatically reject http requests that is not accepted by the application depending on `Content-type´? I tried the above code but I think I didn’t undestand what pedestal does 

```(ns job-queue.service
  (:require [io.pedestal.http :as http]
            [io.pedestal.http.route.definition :refer [defroutes]]
            [io.pedestal.http.body-params :as body-params]
            [ring.util.response :as ring-resp]
            [io.pedestal.http.content-negotiation :as conneg]
            [io.pedestal.http.route :as route]
            [job-queue.api.agent-api :refer [add-agent]]
            [job-queue.api.job-api :refer [get-jobs]]))

(def supported-types [""application/json""])

(def content-neg-intc (conneg/negotiate-content supported-types))

(defn home-page
  [request]
  (ring-resp/response {:message ""pong""}))

(defroutes routes
  [[[""/"" {:get home-page}
     ^:interceptors [(body-params/body-params) http/json-body]

     ;;agent api
     [""/v1/agents"" ^:interceptors [content-neg-intc] {:post add-agent}]

(def service {:env :prod
              ::http/routes routes
              ::http/resource-path ""/public""
              ::http/type :jetty
              ::http/port 8080
              ::http/container-options {:h2c? true
                                        :h2? false
                                        :ssl? false}})
```; and my `add-agent` always return `HTTP 200``


```(defn get-jobs
  [r]
  {:status  200
   :headers {""content-type"" ""application/json;charset=utf-8""}})```; When I send a request with `Content-type` `text/html` the response is `HTTP 200` too"
1841,1513613557.000797,Twanna,"Anyone know of any library wrapping an external queue (rabbitmq, Kafka, etc) as clojure.async channels?"
1841,1513614610.000939,Sandy,"<@Twanna> I’ve done it several times, but getting the semantics right can be tricky; Esp once alt! gets involved "
1841,1513614647.000056,Hugo,Be wary of claiming to have processed a message that you have merely dumped into a channel
1841,1513614718.000028,Sandy,Kafka is probably the easiest since it’s immutable 
1841,1513615013.000061,Twanna,<@Sandy> any open source library that already does it or did you implement it yourself?
1841,1513615905.000718,Particia,"<@Twanna> funny just opened the slack now as i was just doing some coding on this. Spent few hrs today reading through the code, but in terms of alt i still cant figure out how the handler fn callback on take! is NOT called (or is kinda rolled back) for the channels that do not end up first (in the race condition). I have done this kinda implementation few times in past, but alt i always coded myself because of this. I originally thought the mutex between channels is shared, but it does not seem so; the alt-flag locking also does not seem to do the job.... <@Sandy> if there is no available library but you still could point me to the right namespace and line of code that addresses this that would be very much appreciated ... i should be (edit: hopefully) able to figure out the rest...."
1841,1513616409.000573,Twanna,<@Particia> one way or another it would be great to have this as a library; The potentials are huge
1842,1513616489.000523,Darcel,"hey folks, I want to create a series of videos in order to tech clojure in my local language to those who are interested."
1841,1513616563.000133,Darcel,I'm a bit dizzy about the TOC of the course.; do you think that the lisp concepts  are important in the beginning  ?
1842,1513616715.000383,Darcel,or do you know a good presentation or a course in English which i get inspiration from ?
1841,1513616949.000065,Sandy,"<@Particia> I would recommend thinking about the relationship between the queue and the channels. What do you want to happen if a message is 3 channels deep into your app and the service dies?; What I recommend is instead passing an ack funtion with the message, and then the last thread In your channel chain calls that to tell the queue that the message ha been processed ; In short, it’s a mistake to ack the message when it goes onto a channel. Queues are durable, channels are not."
1841,1513617679.000295,Margaret,"Because `*ns*` is a dynamic var, the “current namespace” is not the one in which the function was defined, it’s the one in which the code is running. If the defn needs to happen in a specific namespace, use `in-ns` to make sure that’s the context. You can also use `intern` which explicitly takes a namespace as an argument."
1842,1513617864.000543,Margaret,"```Clojure 1.9.0
(ins)user=&gt; (create-ns 'foo.bar)
#object[clojure.lang.Namespace 0x5443d039 ""foo.bar""]
(ins)user=&gt; foo.bar/baz
CompilerException java.lang.RuntimeException: No such var: foo.bar/baz, compiling:(NO_SOURCE_PATH:0:0)
(ins)user=&gt; (intern 'foo.bar 'baz ""hello"")
#'foo.bar/baz
(ins)user=&gt; foo.bar/baz
""hello""```"
1841,1513618702.000608,Particia,"<@Sandy> yes, acking i do once the message is processed, keep that as a function of a message or a session. But what i struggle with is how to leverage existing implementation of alt!!.. I always implemented that myself (usually multiple threads polling/waiting on queues with a use of locking and nacking messages that arrived second) because i couldnt figure out how the take! callback would have to look like so as it would work with the core async alt implementation. So my question is what method in clojure.core.async.impl.protocols.Handler is in charge of the ""rollback"" in case the alt's take! from a channel finishes second?"
1841,1513618958.00002,Sandy,"That’s the problem I think you can avoid. Just keep messages as data and use the default implementations of alt!; Don’t try to do ack as part of an alt! ;  Not only is it hard to implement, I’m not sure it’s possible to do correctly with a mutable queue."
1842,1513623031.000552,Twanna,Thanks guys. This is amazingly useful
1843,1513624794.000162,Sharlene,"<@Darcel> <https://www.braveclojure.com/clojure-for-the-brave-and-true/>

Might want to check out <#C053AK3F9|beginners> and ask around there too"
1844,1513624995.000128,Williemae,"datomic vs postgres for a simple-ish ecommerce site, what are your opinions?  I like the temporal nature of datomic, in that if I update facts older transactions remain valid. Vs changing things in a regular rdbms where it can also change prior transactions if not done right. Also the datalog integration with clojure is really nice.  But $5000/yr/system ;(; sql through clojure doesn’t seem great, but maybe I’m missing a critical library that helps out a bit (Is HugSQL any good?)"
1844,1513625226.000457,Sharlene,<@Williemae> HugSQL is great! I’ve been incorporating it into my projects more often lately and I love it! I’m a fan of free so I usually go Postgres but that’s just me
1844,1513625479.000309,Krystina,"is using `sut` as name of the system under test when creating test namespaces a bad practice?; that's what cider does by default when creating a new test file, but could not really see anywhere if it's a good practice or not"
1844,1513625609.000133,Mia,"I do not prefer it, I end up changing it to whatever the pattern is for that ns in the rest of the program; e.g. `myapp.thing :as sut` -&gt; `myapp.thing :as thing`; so I can more easily grep for usages of `thing/foo` and other reasons"
1844,1513625998.000396,Krystina,yeah I also prefer not to use it for that reason
1844,1513626304.000064,Amado,<@Williemae> checkout also `honeySQL` !
1844,1513626369.000155,Williemae,"cool, thanks for the suggestion.  I’ll be doing most stuff in stored procs (if I go with postgres) but this looks like a great option for executing those.; er well i guess postgres is a bit different from the last time i did a sql database lol, i see they dont really do stored procs. So nevermind that then!"
1845,1513626444.000587,Amado,"hello everyone, im trying to generate a fat jar of a main application (its not a webserver it just starts some jobs and then dies), but i keep getting errors 
`lein with-profile dev uberjar` produces:

java.lang.IllegalArgumentException: env variable ‘:db-host’ is not set, compiling:(cfg.clj:17:1)

I have a profiles.clj populated with the right env variables, it does work while working inside the repl"
1844,1513626471.000198,Amado,<@Williemae> they do! <http://www.sqlines.com/postgresql/stored_procedures_functions>
1844,1513626485.000362,Williemae,ah great….seems my google-fu is weak today
1844,1513627292.000022,Berry,"```
;; foo.cljc
(ns foo (:require [clojure.spec.alpha :as s]))
(defmacro tm [&amp; lst] `(s/def ~@lst))

;; bar.cljc
(ns bar (:require [foo])) ;; notice, we don't alias spec.alpha
(macroexpand-1 '(foo/tm 1 2 3)) ==&gt; (clojure.spec.alpha/def 1 2 3)
```

so it appears the `s/def` is being expanded at DEF MACRO time, not at USE MACRO time. I find this counter intuitive. Can someone explain the machanics by which this is happening ?

[ I was expecintg an error saying there is no such namespace in ns bar ]"
1845,1513627713.000424,Aldo,macros are expanded at macroexpansion time
1844,1513627733.000356,Aldo,if you want to expand them at runtime then you need eval
1845,1513627736.000159,Heide,"In order to avoid capturing and re-using some symbol in `bar`, ordinary symbols are expanded before you leave `foo`.  You would need ```(defmacro tm2 [&amp; lst] `(~'s/def ~@lst))``` to quote the use of `s/def` to carry that over and pick up whatever that meant in the environment you are expanding in (here, `bar`)"
1844,1513627849.000079,Berry,<@Aldo>: is 'macroexpansion' time (1) when macro is defined or (2) when macro is used ?
1845,1513627859.000616,Aldo,"oh, except the time of expansion is not your issue here. like lukswater said you're just expecting ` to work differently to how it does"
1844,1513627890.000415,Berry,"<@Heide>: I see the ```
`(~'s/def
```
trick now, thanks!"
1845,1513627895.000109,Aldo,` syntax-quotes a bunch of stuff given the context of its definition
1845,1513627911.000501,Heide,Somewhere there’s an extensive essay on quoting in Clojure macros
1845,1513627951.001224,Berry,"I'm sure there is, but it's the type of dry stuff that I don't expect to understand until I run into issues of ""I expect FOO, but I got BAR"""
1845,1513628039.000233,Heide,I believe this is it: <https://8thlight.com/blog/colin-jones/2012/05/22/quoting-without-confusion.html>
1844,1513628141.000037,Berry,thanks!
1845,1513628669.000458,Kristan,"<@Elizbeth> I was trying to do a DFS in clojure recently and had a similar problem; it didn't seem natural to recur in tail call position.

I found an answer in Stuart Sierra's dependency library, it's a little bit terse but way more elegant than anything I came up with.
```
(defn- transitive
""Recursively expands the set of dependency relationships starting
at (get neighbors x), for each x in node-set""
[neighbors node-set]
(loop [unexpanded (mapcat neighbors node-set)
expanded #{}]
(if-let [[node &amp; more] (seq unexpanded)]
(if (contains? expanded node)
(recur more expanded)
(recur (concat more (neighbors node))
(conj expanded node)))
expanded)))
```"
1846,1513630390.00044,Elizbeth,that's actually very neat; i need to examine it a bit more closely to understand it fully; thanks :slightly_smiling_face:; reminds me of some examples in the Little schemer
1845,1513632542.000616,Kristan,"Oh I need to get that book, was tempted recently because the MIT Press had a 40% off black friday sale"
1847,1513634408.000311,Rene,<@Timika>: Great Codemesh talk - I'm loving all of your recent Datomic outreach efforts.
1847,1513634543.000149,Timika,thanks
1848,1513635501.000227,Augusta,Can somebody explain this to me please?; both on cljs (lumo) and the JVM; and
1848,1513635727.000143,Afton,Here's a link to the talk for anyone interested: <https://www.youtube.com/watch?v=nbMMywfBXic>
1848,1513635997.000247,Rebeca,it looks like clojurescript is confusing reduce and transduce somewhere
1848,1513636065.000399,Jonas,the first example has a one item collection and the second has two items; the first example will never use the function to combine elements; because there is only one element; whereas the second example will
1848,1513636119.000555,Rebeca,"(yeah, I misread that)"
1848,1513636183.000479,Kareen,"<@Augusta> that behavior is explicit in `reduce`'s docstring; `If coll has only 1 item, it  is returned and f is not called.`"
1848,1513636195.000085,Berry,"I understand that boot/lein uses JVM. I understand that Macro system uses JVM. Right now, in Clojure dev, I use cider to talk to a JVM repl -- is there anyway to make it practical to talk to a node.js repl instead ?"
1849,1513638566.000221,Willow,i think you want `inf-clojure`
1849,1513639363.000162,Berry,"No, I'm not after an emacs mode."
1850,1513642421.000235,Daniell,CIDER is basically nREPL middleware so it's JVM only. Can you explain what you think you want to connect to a Node.js REPL?
1848,1513643396.000335,Evie,<@Berry>  Clojurescript projects and tools like <https://github.com/anmonteiro/lumo> will connect (transpile) your Clojurescript code to a node.js host.  You can also call node.js libraries.
1849,1513644053.000069,Sandy,Socket repls are completely possible.
1851,1513644098.000094,Sandy,lumo and planck both support socket repls. As does the CLR.
1850,1513652730.000147,Berry,"<@Daniell>: my current setup is client side = cljs; server side = clj via jvm ;; I am considering changing server side to cljs via nodejs; but it's not clear to me how to get a 'cljs repl on nodejs' on the server side; <@Sandy>: are those meant as dev environments, or a way to write shell scripts in cljs ?"
1849,1513656006.000004,Daniell,"Full TOC, some free downloadable chapters/excerpts, Beta e-book. I buy most of my tech books in Beta/Early Access direct from the publishers these days."
1850,1513656076.000275,Daniell,<@Berry> I think you'll be in relatively uncharted territory. Have you asked folks in <#C03S1L9DN|clojurescript> ?
1849,1513656355.000173,Daniell,"For Expectations, which -- notionally -- supports ClojureScript as well as Clojure, the cljs tests are run using a cljs REPL but it's bootstrapped from a Clojure REPL (on the JVM)."
1849,1513656818.000147,Sandy,"Both, planck runs on JS core (self hosted) so you're a bit limited, but lumo runs on Node.JS and can use node modules; not really sure what you mean by ""used as a dev env"" though; a REPL is a dev environment"
1852,1513659197.000004,Willow,and you can use planck and lumo with `inf-clojure` so emacs can work with them similar to CIDER but without the huge jvm deps
1852,1513662590.00005,Daniell,"Good to know! Just installed npm on my Windows 10 WSL Ubuntu bash and then installed Lumo via npm and, sure enough, I can start a Socket Server REPL and connect to it from telnet or similar... Not sure whether that helps <@Berry> (and I see Lumo advertises its cljs compilation as experimental) but it's impressive."
1853,1513663333.000033,Daniell,And it looks like Lumo's cljs compilation is a lot more solid now (just reading the mid-September blog post about it).
1854,1513677025.000169,Elizbeth,"hm, i enabled reflection warnings on my project and i'm getting one i don't know how to interpret:
```
Reflection warning, /tmp/form-init4283907053113722510.clj:1:903 - call to static method invokeStaticMethod on clojure.lang.Reflector can't be resolved (argument types: unknown, java.lang.String, unknown).
```
any ideas? can i get a full stack for that warning?"
1854,1513677188.000097,Berry,do reflection warnings happen at compile time or run time?
1854,1513677232.00013,Kareen,compile time
1854,1513678292.000062,Berry,"<@Kareen> that's what I thought too, the 'full stack for that warning' confused me"
1855,1513679129.000311,Berry,"```

(defn rnd-f-arr [n]
  (let [random (java.util.Random.)
        x      (float-array n)]
    (doseq [i (range n)]
      (aset x i (.nextFloat random)))
    x))

(seq  (rnd-f-arr 2))


```
^-- help shortening the above: I think it can be made more idiomatic; hmm, I get:
```
(defn rnd-f-arr [n] 
  (let [random (java.util.Random.)]
    (float-array n (repeatedly n #(.nextFloat random)))))
```
is this still as efficient, or does 'repeatedly' cause performance problems; `(aset  (float-array [0 0 0 0]) 2 2)` &lt;-- what am I doing wrong in this code? I'm passing it an array, an index, and a number"
1854,1513681528.00012,Kareen,2 is not a float; (or a double)
1855,1513681590.00044,Berry,"yeah, changing it to 2.0 made it work; is there a way to ""unquote"" format strings?

for macros, we can do 
```
`( .... ~(...))
```

now, for format strings, we can do `(format ""v: %s, i: %s"" v i)` ... but is there a way to ""unquote"" where the v/i are placed right at the `%s` ?; ```
(ns a.behemoth
  (:import [jcuda.jcublas.JCublas]
           [jcuda])
  (:require [a.atlantis :as a]))

(jcuda.jcublas.JCublas/cublasInit) 
```
is there a way I can shorter the `jcuda.jcublas.JCublas/cublasInit`"
1856,1513683839.00038,Mallie,"```
(ns a.behemoth
  (:import (jcuda.jcublas JCublas)))

(JCulbas/cublasInit)
```
?"
1855,1513683914.000172,Berry,"ah, that works; thanks!; so 'classes' can be imported as 'namespace' ?"
1855,1513683977.00041,Mallie,"That's how we've always done our Java interop imports. The `(` vs `[` is just a weird Clojure convention IIRC, imports normally use `(` but requires are `[`. It's the space instead of dot that makes it work. I couldn't tell you *why* it works though"
1857,1513687337.00047,Augusta,"You are right, thank you. It did totally catch me by surprise though."
1858,1513688760.000511,Ahmad,"in clojure.spec, do you guys have any idea of how i could deref a value before checking it?
```
(s/fdef foo!
  :args (s/cat :arg1 (s/coll-of (fn [v] (instance? Bar v)))))
```
`arg1` in `foo!` is a reference value containing a collection, i'd like to `deref` it so that i can check it with `coll-of`"
1855,1513690027.000119,Sonny,You could use s/and an s/conformer that calls deref; Which is a little dicey
1859,1513690089.000003,Amado,"hello everyone I’m trying to generate a fat jar (leiningen) of a project which will run some jobs and die, and I have some module levels declarations with `def` that accesses the database, something like
`(def sms-body (get-msg-from-db ""smsInviteText""))`

but when I run `lein uberjar` it tries run those commands upon  compilation, is there a way to avoid that?"
1855,1513690150.000347,Sonny,"Although i find it’s usually best to stop passing atoms around as much as possible and instead write your function on the data inside; To get to@the point where all the logic that is worth testing operates on data, not state. Then you don’t need to spec the stateful functions; Yeah, don’t do that :)"
1855,1513690295.000192,Amado,how? id like to have this value as a constant visible to all functions of the module
1855,1513690327.000069,Sonny,"Make that a function, invoke it at runtime, and pass it around; I know that sounds like a pain in the ass, but you will probably be thankful a year from now; The short term fix would be to wrap it in `delay` and then deref it where it’s used"
1855,1513690403.000032,Ahmad,"oh nice, i will try that! thanks alex! by the way, it's an exercise in which i'm simulating database collections as references, so whenever i need to query the data i use this reference + core.logic. i thought it was a good idea at the time"
1855,1513690411.000221,Mallie,"I mean, you could have a function you invoke at startup that puts the result in a `def`'d atom, then just access the atom whenever you need the value, but that's a very un-Clojureish way to do it"
1855,1513690446.000429,Amado,I ll just pass it around i guess :slightly_smiling_face: thx
1860,1513693800.000058,Katy,"Hello, question about `pedestal` : is it possible to have `:constraints` and `:path-params` for static routes, i.e. routes that don't have any placeholder like `:id` etc. ?; My use case is that I'd like to pre-generate all routes of my app (several millions, I think 2~5) since I know them in advance, but still be able to differentiate them in the interceptors. Some are product pages, others are listing pages. Several of them will also have query-params attached to them (like ?productid=X); Or maybe I need to do something else once I generate the routes ? I can't find enough help in pedestal docs/tests/source as to what to pass to `expand-routes` (to be more precise, to some function that will call `expand-routes`)."
1861,1513696263.000933,Hugo,FWIW there is a <#C0K65B20P|pedestal> room which be a better place to ask
1860,1513697589.00072,Katy,"oh thanks, didn't know"
1862,1513697693.000678,Monet,"Hey folks, I'm trying to get gen-class working and I can't seem to get the syntax right for passing an array of Strings. I've tried the following (and then some). I'm sure the actual answer is pretty simple, but I haven't found it yet. Can someone help me out? Thanks!

```
;Nope
(:gen-class
  :methods [#^{:static true} [foo [[Ljava.lang.String;] int]])

;https://groups.google.com/forum/#!topic/clojure/TFLUw8GSAbY
(:gen-class
  :methods [#^{:static true} [foo [#^""[Ljava.lang.String;""] int]])

;Another guess
(:gen-class
  :methods [#^{:static true} [foo [(Class/forName ""[Ljava.lang.String;"")] int]])
```"
1862,1513698975.00027,Billye,Anyone know a good python slack team? or anyone here know python?
1862,1513699056.000582,Vilma,I can help with Python
1861,1513706274.000472,Heide,"<@Monet> Corrected: ```;https://groups.google.com/forum/#!topic/clojure/TFLUw8GSAbY corrected
(:gen-class
 ;; Remove spurious hash-and-caret (#^) in front of type definition
  :methods [#^{:static true} [foo [""[Ljava.lang.String;""] int]])```
Now, incidentally, I haven’t been able to get a `static` definition to work…"
1861,1513706507.000632,Margaret,you can replace `#^{:static true}` with `^:static` iirc
1861,1513706580.000699,Heide,"True, but let’s try one more time (<@Monet>) ```(ns sandbox.HelpOut
  (:gen-class
   :name sandbox.HelpOutClass4
   :main false
   :methods [
             ^:static [foo [""[Ljava.lang.String;""] int]
             [bar [""[Ljava.lang.String;""] int]
             ]))

(defn -foo
  ""This is declared `static`""
  [some-strings]
  (let [how-many (count some-strings)]
    (doseq [[i x] (map-indexed #(vector %1 %2) some-strings)]
      (println (format ""(%d): %s"" i x)))
    how-many))

(defn -bar
  ""This is an instance method""
  [_ some-strings]
  (let [how-many (count some-strings)]
    (doseq [[i x] (map-indexed #(vector %1 %2) some-strings)]
      (println (format ""(%d): %s"" i x)))
    how-many))```
The `^:static` notation goes before the whole vector that describes the method"
1861,1513706581.000515,Kareen,"correct; also `#^` is old deprecated syntax, just `^` will do"
1861,1513707138.000094,Monet,"Awesome, thanks for the help!"
1863,1513707407.000353,Jodie,Why was it deprecated? I quite like how special things use `#`
1863,1513707540.000076,Kareen,because `^` is shorter; originally `#^` was what `^` is now
1861,1513707560.000057,Kareen,and `^` was reader syntax for `(meta`
1863,1513707599.000074,Kareen,"it was later changed so that `^` is syntax for with-meta like `#^`, with `^` being the preferred syntax"
1863,1513708587.000224,Heide,"I was glad for the (re-?)education, thanks for the opportunity"
1864,1513708738.000219,Heide,"(And, as for “old deprecated syntax”: some learn from older books, like those in former Colonies learning English from books from the 1880s; some of us are old enough [in Clojure] that that syntax was once our native tongue, and we have to learn your newfangled slang.)"
1863,1513709233.000111,Kareen,"I believe `^` has been the preferred way since 1.2, so for quite a long time :)"
1865,1513710181.000485,Monet,"This has been my fallback link every time I forget how to do this <https://stackoverflow.com/questions/2181774/calling-clojure-from-java> and it has ""Ye Olde English"" style. Perhaps an updated example on <https://clojure.org/reference/java_interop> would set things aright."
1865,1513711540.000345,Jodie,"That seems different to other of clojure's design choices, especially the recent ##NaN"
1865,1513711567.00018,Kareen,how?; they're completely different scenarios
1865,1513711625.000119,Jodie,Using # for all special syntax seems consistent. Having ^ be an exception seems inconsistent.
1865,1513711634.000334,Kareen,I'm sure you wouldn't like to write `#@` either; there's a number of reader macros that are not routed through the `#` dispatch; the reason why we went for `##NaN` and not `NaN` is that Rich didn't want to pollute the namespace of special symbols; but in this case `^` was already reserved as a reader macro; we use `#` as a dispatch macro mostly just because (good) top level symbols were running out
1865,1513711816.000399,Jodie,"That's true, I hadn't considered @. I'd be happy to move to #@ though.

I think I've grown fond of consistent syntax."
1865,1513711847.000503,Kareen,"what about :, ` ' ; ~ etc; there's tonnes of top level reader macros; and there's absolutely no reason for them to be prefixed"
1865,1513712018.000537,Jodie,"There's much less sanctity of # than I realised when making the comment. I think I've seen comments valuing that clojure has concise syntax for many things, it makes sense in that context.; I still struggle to picture myself wanting #^ to be shorter."
1865,1513712078.000489,Kareen,"you've never used `^foo` or `^:foo` then I assume? ;); here's the thing, `#^` didn't become `^` *because* it was shorter, rather, we realized that `^` as a reader macro for `(meta` had virtually no use, while `with-meta` had quite a bit of use; so it was decided to repurpose `^` to be the more useful `with-meta`, and `#^` was kept for backwards compatibility"
1865,1513712545.000123,Jodie,"I see, that's a more interesting growth. I can't actually see a particular purpose for the old ^ symbol.

 I have never used those much, no. They don't seem to come up in normal use of clojure, for me. Not enough that I'd want to shave a character off.

 Generally speaking, outside of functions and arguments, I don't see any use of metadata in clojure code. Arguments cited usually involve losing metadata under certain cases, and being concealed."
1866,1513714042.000423,Daniell,<@Monet> An alternative to generating classes in Clojure is to use the Java API to require and invoke code (it's the approach we've used at World Singles) -- see Alex Miller's answer to that SO question <https://stackoverflow.com/questions/2181774/calling-clojure-from-java/23555959#23555959>
1867,1513714384.000761,Shelly,"could someone please advice? I want to load namespace every time I run ""lein repl"", but not on other tasks..."
1867,1513714486.000344,Glory,"Are there any clojure SQL libs that just make every table lazily available? Something like

`(take 2 (:customers tables)) =&gt; [{:name ""drew""} {:name ""sally""}]`"
1867,1513714614.000323,Charity,"<@Shelly> one traditional answer to this is to add `:profiles {:dev {:source-paths [""dev/""]}}`, and then put the code you want to load in `dev/user.clj` where Clojure will load it automatically for you."
1867,1513714670.000112,Shelly,"@aardem , but won't `dev/user.clj` load on all other tasks as well?; I wish there were special profile for repl..."
1867,1513715366.000277,Daniell,"<@Glory> I can think of all sorts of ways that would be problematic for resource usage (connections etc). Also, what would it mean to lazily process a table while updates were made to that table in other threads or processes?"
1866,1513715487.000193,Daniell,About the closest you can probably get is building some sort of abstraction on top of `reducible-query` (from `clojure.java.jdbc`) because you could use `sequence` and/or `eduction` to produce sequences of rows from tables... (off the top of my head).
1866,1513715655.000139,Glory,Good input @seancofield thanks. hmmm
1866,1513716032.000007,Heide,Special profile for `:repl`?  I think there is: <https://github.com/technomancy/leiningen/blob/master/doc/PROFILES.md>
1867,1513717332.000093,Shelly,"that's mess for a beginner... I am trying to extend the :repl profile
`             :dev-repl {:repl {:source-paths [""src"" ""env/dev""]
                        :main       ""env.figwheel-api""}}` 
but fails with *Warning: no nREPL dependency detected.*"
1868,1513718098.000561,Berry,"```

;; (wrap cublasSasum 3) -&gt; #(JCublas/cublasSasum %1 %2 %3)
;; (wrap cublasSaxpy 4) -&gt; #(JCublas/cublasSaxpy %1 %2 %3 %4)

(defmacro wrap [fname n]
  (let [args (vec (take n gensym))
        jname ...]
    `(fn ~args
       (~jname ~@args))))
```

what do I put in the ... ? JCublas = not a clojure namespace, but a Java class"
1868,1513718178.000354,Kareen,"`(symbol ""package.to.Jcublas"" (name fname))`"
1867,1513719786.000448,Shelly,Is it possible to launch REPL with different Leiningen profile? Is it only my setup? :face_with_rolling_eyes:
1867,1513719918.000398,Margaret,two options: `lein with-profile +foo repl` - that merges the foo profile in; `lein with-profile foo run -m clojure.main ...` that starts a vanilla repl with only the foo profile (no nrepl btw)
1867,1513720074.000104,Shelly,thank you very much!; Can I run `lein repl` with different `user.clj` specified? ideally cpecified via Leiningen's profile.clj...
1867,1513721700.000039,Margaret,wouldn’t putting a different directory on the front of the classpath (source-paths) so that the user.clj there is found first do the trick?
1869,1513733171.000029,Daniell,We put Clojure 1.9.0 into production today. We've been on RC builds in production for a while so it was uneventful (as all of our Clojure version upgrades are!).
1870,1513735388.000166,Rene,Isn't it boring to be on an actual release though? :)
1871,1513737926.000219,Berry,<https://clojuredocs.org/clojure.string/capitalize> &lt;-- I can't believe there is a builtin function for this.
1871,1513738245.000234,Daniell,"I'm already looking forward to 1.10-alpha1!!! :slightly_smiling_face:; <@Berry> Even after seven years of Clojure, I still find new-to-me functions in the core namespaces :slightly_smiling_face:"
1871,1513738737.00019,Douglass,"my jvm is crashing after some time developing. this is a mixed clojure+java projects and I'm using plugins like virgil (to reload java classes). I get the crash log but no core dump even though jvm said it wrote it (probably just need to change location). so.. first question, is this something that is more or less expected or a strong indication of a bug?; asking because to me this seems suspiciously like the classic PermGen OoM error with plain Java but could also be just my previous experiences. I'm on 1.8 java, the mem consumption doesn't look too bad to the OS but I haven't visualvm'd this yet. I'm new to Clojure but know my java, so I'm not sure whether I should stress out about it at this point or not. This is not in production yet but I really wouldn't like to find out at that time"
1872,1513740732.00003,Micha,"clojure.string/capitalize is a very strange thing to have in Clojure, I agree.  It also has a subtle bug.    (Hint: Java strings, and thus Clojure strings, are represented in memory encoded as UTF-16); but such corner cases of Unicode are best left for more comprehensive libraries like ICU4J"
1872,1513741672.000027,Daniell,"Sounds very unusual to me, but I don't use Virgil so it may be an issue with that.; I've been doing Clojure for over seven years and my experience -- both of the REPL when developing locally and of Clojure in heavy production use -- is that it's rock solid."
1871,1513744435.000083,Barrie,really hope that DL4Clj could be updated more efficiently.
1871,1513759418.000203,Katharyn,<https://github.com/hswick/jutsu.ai>
1871,1513760114.000453,Elizbeth,"is there something that makes the stack traces a bit more human readable? using vanilla `lein run` at the moment
at least something that highlights the stack lines which are in my code, as opposed to clojure.lang..."
1872,1513766162.000308,Elijah,"Not sure if Ultra does exactly that, but you could give it a go: <https://github.com/venantius/ultra>"
1873,1513769219.000145,Heriberto,"It's good indeed
<https://camo.githubusercontent.com/c7aa908e62bbcebfba552b9137fefcaf4fa9cfc3/68747470733a2f2f76656e616e746975732e6769746875622e696f2f756c7472612f696d616765732f636f6c6f72697a65642d746573742d737461636b74726163652e706e67>; Also <https://clojure-expectations.github.io> could help with test stacktraces."
1874,1513772803.000282,Berry,"I'm translating this to Clojure. Is there a amore idiomatic way instead of converting the while loop into a loop-recur?

```
;;        private static byte[] toByteArray(InputStream inputStream)
;;            throws IOException
;;        {
;;            ByteArrayOutputStream baos = new ByteArrayOutputStream();
;;            byte buffer[] = new byte[8192];
;;            while (true)
;;            {
;;                int read = inputStream.read(buffer);
;;                if (read == -1)
;;                {
;;                    break;
;;                }
;;                baos.write(buffer, 0, read);
;;            }
;;            return baos.toByteArray();
;;        }

```

It's fine to get either a byteArray or a string as output -- this data won't be too large -- it's the error msg (or stdout) of a very simple process)."
1874,1513773000.000257,Heriberto,"<@Berry> 
```
(do
  (... read ...)
  (while (not= read -1)
    ( ... write ...)
    (... read ...))
  (.toByteArray baos))
```; I don't think there's `do-while` in Clojure."
1874,1513773180.000098,Kareen,```(doseq [r (take-while #(not= -1 %) (repeatedly #(.read is buff)))] (.write baos buffer 0 r))```
1874,1513773181.000371,Berry,"according to <https://clojuredocs.org/clojure.core/slurp> , slurp takes IhnputStream as an argument too; so that whole thing should be reduced to slurp"
1874,1513773204.000001,Kareen,"something like this if you want, or slurp if it's good eno- ^"
1874,1513773206.000301,Berry,"(last part of question says ""either a byteArray or a string as output""); yeah, the `java whiles` really do not translate well to idiomatic clojure; slurp worked"
1875,1513786327.000807,Joette,"a quick question. This to me was perhaps not what I expected: 
```
((every-pred =) 1 2)
=&gt; true
```
I assume this is caused by the fact that `(= 1) =&gt; true` and that `every-pred` applies every predicate to one argument at a time, is there anything in clojure core that would do this but apply all arguments to the predicates; the docs for `every-pred` are not entirely conclusive here: 

&gt; Takes a set of predicates and returns a function f that returns true if all of its composing predicates return a logical true value against all of its arguments, else it returns false.

, but I guess I can see why it's implemented this way"
1875,1513787689.000338,Tameka,<@Joette> probably you’d need to use ```(every? (every-pred pos? (partial &gt; 0)) '(1 2 3 -1))```; or `not-every?`; depends what you’re trying to achieve; oh I see what you mean; nvm the above :smile:
1876,1513787980.000771,Detra,"Hey, so I know the Clojure philosophy is, wrt errors and stack traces, barf everything and let the tools sort it out.  Is there a REPL tool to sort it out?  Something usable with `lein repl`?"
1875,1513788695.000486,Jami,<@Detra> you mean something to make stacktrace and error more human friendly ?
1875,1513788724.000623,Detra,Yes; I have stack traces that contain prn-str data (from pedestal) that exceed my 5000 line scrollback.
1875,1513788803.000078,Jami,"you can use <https://github.com/AvisoNovate/pretty>; (different question) do you know if Clojure support as many characters for keywords as for strings ?; I need to handle JSON documents, and the library is converting each JSON key to a keyword instead of a string; I'm worried that some characters will not be handled well as keywords"
1875,1513789075.000348,Detra,"If you pr-str/read-string it, this will definitely cause problems.  I'm pretty sure that `keyword` does not validate the contents of the namespace or name, and they are stored as Java `String`.; <@Jami> Hmm.  It might not deal with the crazy amount of data in `ex-info` but this seems nice.  Also `ultra` which uses it seems pretty useful."
1877,1513790869.000495,Sonny,Keywords are made of strings. If you are programatically creating and using them you should be fine; But don’t expect to be necessarily be able to print and read as data; Also keep in mind that keywords are interned so there are memory effects if using a large number of arbitrary keywords
1877,1513791902.00053,Margaret,"it’s entirely valid (IMHO preferable) to just tell the json library not to keywordize - both clojure.data.json and cheshire let you choose, and almost everything else is using one of those; our codebase has a bunch of nonsense for handling numbers that got turned to strings when they were keys in json, then turned into keywords when retrieved from the json… huge headache"
1877,1513792760.000346,Ambrose,"we haven't really had any issues like that, and we tend to keywordize pretty often"
1878,1513792800.000277,Ambrose,"not everywhere, though, have to do it judiciously"
1877,1513793504.000132,Margaret,"<@Ambrose> yeah the problem was that the people integrating monger (the clojure mongodb wrapper) didn’t realize keywordizing was optional, and didn’t sanitize the data to make sense for mongo insertion (eg. avoiding numeric keys), and by the time it was pointed out that we had other options the inconsistency of number / string / keyword in the data keys was baked into all the code consuming the data"
1877,1513794096.000245,Ambrose,"ah; yeah, only way to avoid situations like that is mandating thorough code review from more experienced people; which can be hard to do if most people on the team are still somewhat unfamiliar with clojure and/or its libraries' conventions"
1877,1513794392.000566,Margaret,"right, a few iffy decisions made in the beginning (“move fast and break things!“) then years of pain"
1877,1513794396.000126,Rebeca,even experience people often get really annoyed when keys aren't keywords and write elaborate mapping layers; it drives me nuts; (the mapping  layers)
1877,1513794416.000329,Margaret,yeah - it’s a weird thing that causes so much bs
1877,1513794512.000511,Heriberto,it's probably because you can't use `(keyname map)` syntax to get values when `keyname` isn't keyword.; Clojure encourages keywording
1877,1513794622.000238,Kareen,`get` is only 3 chars
1877,1513794637.000101,Ferdinand,"Honestly, keywordizing user input is one of the biggest time sinks in the clojure community."
1877,1513794639.000631,Kareen,and the benefits of not having to convert from/to keywords are way more than saving 3 characters
1877,1513794641.000306,Ferdinand,^^
1877,1513794643.000491,Margaret,"<@Heriberto> I would be quite upset if I saw `(:1234 foo)` in my codebase, those keywords existed because nobody realized how easy it would be to not create them"
1877,1513794670.000238,Kareen,"not even considering that you can still do `(my-map ""my-key"")`"
1877,1513794974.000245,Ambrose,"not a big fan of using maps as functions, personally, have to do a double-take to realize that it's a map and not a function defined elsewhere"
1877,1513794984.000184,Petronila,"The only thing I find a little confusing in this situation is that the external keys may come in via strings - and you leave them that way, but internally you probably have maps you make with keywords (in clj-land). so now you have both and that can get awkward or error prone; However, it typically is ok. You just sort of have to make those boundaries clear"
1877,1513795022.000167,Sandy,<@Ambrose> but the nice thing is you can swap it out later for a function with no change to the code
1877,1513795026.000372,Margaret,"<@Petronila> if the key comes in via user input, I prefer to make the key a string; and for reasons that should be obvious, I don’t use the same data structure to look up based on user input and compiled code; I mean, lisps are about arbitrary code at runtime and all but I like to pretend I’m not absolutely bonkers"
1877,1513795107.000312,Thu,"is there a lot of expressive power gained from the whole IFn thing where keywords and collections can be in function position?  as a newb I was totally surprised the first time I saw that, and I’m not 100% sold that the terseness is actually better for readability (echoing <@Kareen>’s statement that get is only 3 chars).  but maybe it is nice to have once you get used to it?"
1877,1513795165.000513,Margaret,"@justinlee it’s often that I discover some function that I wrote can be replaced by a simple hash-map, and since hash maps are much less powerful than functions it’s always a win to do that substitution; that’s a refactor that would be impossible if hash-maps didn’t implement IFn"
1877,1513795207.000266,Kareen,"<@Thu> it really is convenient, esp when you can use them HOF (e.g. `(map :foo my-coll)`), but it's also really important to know when reaching for that conveniency causes unnecessary performance issues or having to handle conversions down the line"
1877,1513795227.000549,Merri,Seem like it could come in handy in threading macros too. Random thought.
1877,1513795259.000117,Margaret,"right -it can make chained data access in nested data much cleaner; <@Merri> but similarly to what I was saying about not using the same data for user input lookup and program lookup, I also don’t tend to write code such that user input comes in deeply nested, and yes I would absolutely use keywords for program created nested data structures; and this doesn’t run into the problems with keyword/ string cross conversion we were discussing"
1877,1513795517.000173,Merri,¥es indeed. When first starting with clojure I spent lots of time converting everything to keywords since it “looks prettier”. Esp with JSON there are dark corners to get caught in like you mentioned.
1877,1513795564.000032,Margaret,"also I can’t recommend transit enough if you need to write data to json (or external storage in general) in one place and then read it from another; if I was remaking our app all the mongo insertions would be small json maps, with the indexed keys at the top, then a larger transit encoded payload under one key with the actual original clojure data embedded; come to think of it I should make a small library that implements that pattern"
1877,1513795723.000431,Rebeca,are you sure you would still use mongo :stuck_out_tongue:
1877,1513795774.000606,Margaret,<@Rebeca> heh there’s some out of band / external stuff behind that but fair point
1877,1513795911.000357,Rebeca,"its been my experience that even with a ""greenfield"" project datastore choice is almost always dictated to you"
1877,1513795930.000415,Margaret,glad to know it’s not just me
1877,1513796017.000094,Rebeca,"in some ways it seems like validation of one of the core propositions of clojure, data is more important than programs"
1879,1513799811.000363,Williemae,"&gt;wishes he’d never gotten excited about MongoDB all those years ago... 
Me, 3 1/2 years ago: “Ah we’ll never get funding, I’ll make the app in Swift.” (Narrator: they did)"
1880,1513804365.000265,Berry,"I'm trying to rewrite:
```
        Pointer kernelParameters = <http://Pointer.to|Pointer.to>(
            <http://Pointer.to|Pointer.to>(new int[]{numElements}),
            <http://Pointer.to|Pointer.to>(deviceInputA),
            <http://Pointer.to|Pointer.to>(deviceInputB),
            <http://Pointer.to|Pointer.to>(deviceOutput)
        );
```
as
```
      kparam (Pointer/to
              (Pointer/to (int-array [numE]))
              (Pointer/to devA)
              (Pointer/to devB)
              (Pointer/to devOut))
```

but I'm getting a ""no matching method: to"" on the first ""Pointer/to"" line -- this is despite I already have an `(:import [jcuda Pointer])`; I need some way to make a call tothis function:
<http://www.jcuda.org/jcuda/doc/jcuda/Pointer.html#to(jcuda.NativePointerObject...)>"
1880,1513804561.000231,Margaret,"is Pointer/to varargs? EDIT - yes, it is, and that means you need to put all the variable args into an array"
1880,1513804590.000424,Randee,<@Berry> `<https://stackoverflow.com/questions/11702184/how-to-handle-java-variable-length-arguments-in-clojure>`
1880,1513804644.000041,Margaret,"wow, that’s a lot of calls to into-array, if I were doing this I’d make a function that constructs the varargs and calls the method (or maybe a macro)"
1880,1513804850.000155,Berry,"<@Randee>: thanks! <@Margaret>: yeah, agreed, this is ""1. make it work; 2. make it pretty"" ; I'm currently on step 1; I'm expecting:
```
      devA    (CUdeviceptr.)
      _       (Pointer/to (to-array [devA]))

```
to work, but it's telling me ""NO matching method Found to""; instead of `(to-array ...)`, I need `(into-array Pointer ...)`"
1880,1513806093.00057,Margaret,"right, you need into-array"
1880,1513809690.000427,Berry,is `to-array` basically `(into-array Object ...)` ?
1880,1513809858.000389,Margaret,as I understand it yes
1880,1513810032.000418,Kareen,"except more efficient; <@Berry> for questions like those I suggest just looking at the sources btw, it takes about 20 seconds and you'll learn much more"
1881,1513814208.000353,Marcel,"g’day; i also have a small question
using the thread-last macro, can I make an exception for one of the elements and insert the result as first argument?; I tried to wrap it in a #(myfunc % params) but it doesn’t seem to work; neither does a fn :disappointed:; I ended up writing an extra function outside of the thread; hm, I guess I misunderstood thread macros; they take the functions as partials and appends an extra argument before actually calling the function? using other macros as functions might break the thread macros…"
1882,1513815008.000113,Thu,maybe use the `as-&gt;` macro?
1881,1513815021.000085,Marcel,"nah, looks weird :slightly_smiling_face:; but is my assumption correct? (if someone understands my writing…)"
1881,1513815120.000056,Jonas,"it doesn’t create partials; it rewrites the code; so you can use the anonymous functions, but it often requires extra parens"
1881,1513815170.000302,Marcel,yep
1881,1513815189.000119,Jonas,"```(-&gt; [1 2 3 4]
    (-&gt;&gt; (map #(+ 10 %))
         (map str)
         (clojure.string/join "",""))
    (clojure.string/replace #"","" "".""))```; pardon the terrible example"
1881,1513815220.000006,Marcel,"hm, I didn’t mean “real” partials… but I think I understand now why it didn’t work"
1881,1513815227.000046,Jonas,"you can “embed” thread last in a thread first; but not the other way around; you can also use the anonymous functions with extra parens; ```(-&gt;&gt; [1 2 3 4]
    (map #(+ 10 %))
    (map str)
    (clojure.string/join "","")
    (#(clojure.string/replace % #"","" ""."")))```"
1881,1513815294.000065,Marcel,ah
1881,1513815298.000212,Jonas,you can also use the `as-&gt;` macro
1881,1513815340.000137,Marcel,"woah, the extra parentheses did the trick :slightly_smiling_face: thanks"
1881,1513815352.000008,Jonas,"i’ve also seen folks write ```(-&gt; [1 2 3 4]
    (-&gt;&gt; (map #(+ 10 %)))
    (-&gt;&gt; (map str))
    (-&gt;&gt; (clojure.string/join "",""))
    (clojure.string/replace #"","" "".""))```"
1881,1513815368.00002,Marcel,"I think I finally started understanding clojure today :slightly_smiling_face:; ```
(-&gt;&gt; (apply concat (vals js))
     (reduce reducer {})
     (#(json/encode %1 {:pretty true}))
     (spit ""extract.json"")))
```"
1881,1513815399.000267,Jonas,i’m still not sure which form I prefer
1881,1513815409.000062,Marcel,this works
1881,1513815413.000185,Jonas,:thumbsup:
1881,1513815685.000151,Margaret,"another variant
```(-&gt; [1 2 3 4]
    (-&gt;&gt; (map #(+ 10 %))
         (map str)
         (clojure.string/join "",""))
    (clojure.string/replace #"","" "".""))```; showing that it’s not partial application ```=&gt; (-&gt; [a 1 b 41] (let (+ a b)))
42```"
1881,1513815781.000032,Thu,it’d be neat if there was an `as-&gt;` and `as-&gt;&gt;` that defaulted to thread-first or thread-last if no `$` was found
1881,1513815889.000281,Danielle,"I'm really tripped up on this java interop issue:

I want it to call `remove(int index)` -- what would I have to do to typehint this correctly?

This is the class: <https://hc.apache.org/httpcomponents-client-ga/httpclient/apidocs/org/apache/http/impl/client/RedirectLocations.html>

I tried to create a function

```
(defn do-it [^org.apache.http.impl.client.RedirectLocations redirect-locations ^Integer index]
  (.remove redirect-locations index)) 
```"
1881,1513815992.000147,Margaret,"for some methods you might need to call `int` to cast the arg, recall that in clojure `1` is not an Integer, it’s a Long"
1881,1513816122.000096,Danielle,"right, so i'd wrap `index` with `(int index)` -- I tried that, still doesn't work"
1883,1513816131.000024,Margaret,what error are you getting?
1881,1513816143.000043,Marcel,<@Margaret> just tried to understand your example from above… it wouldn’t work with `(-&gt;&gt; X (-&gt; Y) Z)` right?
1881,1513816171.000155,Margaret,"<@Marcel> correct - all the other arrow macros nest inside -&gt;, but -&gt; can’t nest inside -&gt;&gt;; it has to do with the mechanics of the code rewrite (the silly example with the let is to show that it isn’t smart at all - it’s just moving tokens around in lists)"
1881,1513816216.000336,Marcel,i see :upside_down_face:
1881,1513816220.000095,Danielle,"<@Margaret> I'm not getting an error, but it's returning a boolean false which is coming from the other method signature. boolean 	remove(URI uri)"
1881,1513816257.000152,Margaret,"<@Danielle> ahh - what if you hint ^int instead of ^Integer?; (I bet I have a project with this dep, I’ll see if I can replicate in a repl)"
1883,1513816357.00002,Danielle,"how do i typehint with `^int`, i get `Unmatched delimiter: )`"
1883,1513816420.000181,Rebeca,"don't do that, do `(.remove redirect-locations (int index))`; err; (without the extra i)"
1883,1513816456.000201,Margaret,"```kingfisher.core=&gt; (defn rm [^RedirectLocations r ^long idx] (.remove r idx))
#'kingfisher.core/rm
kingfisher.core=&gt; (rm red 0)
#object[java.net.URI 0x2a3988c0 ""<http://google.com>""]```"
1883,1513816502.000236,Danielle,interesting that you typehinted a long
1883,1513816510.00024,Rebeca,`(set! *warn-on-reflection* true)` will tell you if the compiler is emitting reflection
1881,1513816523.000196,Margaret,"int primitives are not supported by the clojure compiler; so I made it a long, and it worked"
1883,1513816546.000196,Rebeca,or just call `int`
1883,1513816559.000272,Margaret,<@Rebeca> it was still calling the wrong method when I called int
1883,1513816601.00013,Rebeca,I doubt
1883,1513816620.000076,Margaret,"```kingfisher.core=&gt; (defn rm2 [r idx] (.remove r (int idx)))
#'kingfisher.core/rm2
kingfisher.core=&gt; (.add red 0 (java.net.URI. ""<http://google.com>""))
nil
kingfisher.core=&gt; (rm2 red 0)
false```; boolean is what the Object overload returns if it gets hit"
1883,1513816673.000343,Rebeca,you aren't hinting r
1883,1513816676.000162,Danielle,i tried using `(int x)` instead of the typehint and it worked as well
1883,1513816679.000088,Rebeca,you need to do both
1883,1513816685.000049,Margaret,"<@Rebeca> ahh, OK"
1883,1513816685.000189,Danielle,it appeared typehinting `r` was the thing i missed
1883,1513816736.000014,Rebeca,"turning on reflection warnings will make it clear when you have eliminated the reflection or not; the long hint also causes the function to implement the primitive invoke stuff(if I recall), which is orthogonal to compiling an invoke of the right method"
1883,1513816876.000185,Danielle,thank you gents -- i need to practice up my interop &amp; reflection fu
1883,1513817076.000346,Margaret,something that’s helpful sometimes is a leiningen plugin called no.disassemble - it can expose what your function compiles down to as readable mnemonics for the byte code  <https://github.com/gtrak/no.disassemble>
1884,1513818644.000003,Malissa,"Upgrading to clj 1.9. Anyone else getting these error messages?

```WARNING: boolean? already refers to: #'clojure.core/boolean? in namespace: clojure.tools.analyzer.utils, being replaced by: #'clojure.tools.analyzer.utils/boolean?
WARNING: boolean? already refers to: #'clojure.core/boolean? in namespace: clojure.tools.analyzer, being replaced by: #'clojure.tools.analyzer.utils/boolean?
WARNING: bounded-count already refers to: #'clojure.core/bounded-count in namespace: clojure.core.async, being replaced by: #'clojure.core.async/bounded-count``` ?"
1884,1513819117.00004,Rebeca,have you upgrade core.async recently?; are you using require :all or use?; my guess would be you have an older version of core.async that doesn't exclude bounded-count from clojure.core
1884,1513820912.000183,Malissa,"<@Rebeca> I have upgraded core.async, currently running on `[org.clojure/core.async ""0.3.465""]`; This is the ns def in the file in question:

```(:require [clojure.test :refer :all]
            [amazonica.core :refer [defcredential]]
            ;; our stuff
            [com.stuartsierra.component :as component]
            [clojure.core.async :as async :refer [go go-loop &gt;! &lt;! timeout alts! alts!!]])```; It is having issues on my call to `go-loop` but I'm not quite so sure why"
1885,1513821517.00016,Malissa,It appears I just needed to run lein clean :confused:
1884,1513822122.000013,Malissa,Appreciate the time and thoguht <@Rebeca>
1886,1513823700.000006,Berry,"<@Kareen>: yeah, I can definitely do a bit more clojure source reading. How do you find the source? checking out clojure + grep, or the github interface, or repl/source, or ... ?"
1886,1513824705.000073,Marcel,"open your favourite IDE, type a method, click on “go to source” or similar; or use REPL with `(source SOME-COMMAND)`, but it’s not really useful to “browse”"
1885,1513835370.000083,Marcel,eek
1886,1513841908.000002,Berry,<@Sandy>: re parsing / ometa : I figured out what I was looking for -- parsec
1887,1513845689.000133,Lois,"Hello all, I'm developing a reporting generator but in Java/Clojure I do not have the right library for the charting session. The charting library is in javascript, so, is there possible to generate the charts from javascript/html and use it in Clojure as svg or image without having server/browser generating it?"
1887,1513848405.000278,Jami,<@Lois> you have the option of using nodejs or rhino to run JS without a browser
1888,1513849546.000255,Berry,"how cheap/expensive is `(fn [] ...)` is it as cheap as a function call, or is creating anonyous functions at runtime realy expensive ?"
1888,1513849904.000335,Rosia,it is as cheap as an object creation can be
1888,1513850265.000122,Berry,"naively it seems for a `(fn [] ...)` there is some compilation / byte code generation to be done, which might make it expensive; does clojure somehow do all this pre-emptively and cache it (despite not having the environment until runtime)"
1888,1513850325.000219,Rosia,each function generates a class at compile time; then it is lazily loaded by the classloader as with java
1888,1513850475.000195,Berry,"this is a drastic oversimplification, so you're saying:
1. at compile time, each `(fn [...] ...)` has a class generated for it
2. at runtime, when to exec the code, the corresponding code is passsed the env as an argument, creating a ""clojure function object""
3. this ""function object"" can then be used just like any other clojure functions, and passed arguments to make it work ?"
1888,1513850614.000071,Rosia,yes
1888,1513850770.000002,Berry,thanks; this explains so much!
1888,1513850868.000279,Rosia,I learned a lot about the compiler by decompiling my clojure code
1888,1513851327.000123,Berry,"I tried that once, but the decompiler lib crashed the JVM, and I never tried it again."
1889,1513857243.000192,Jodie,Where is the linux installer versioned? (If at all); (For the clj command line tool)
1888,1513859891.000026,Berry,why is there no pop-n! and peek-n (for pop! peek associated with vector)
1889,1513861570.000102,Joette,"<@Jodie> if by versioned we mean versioning the install script itself, seems that it already is at <https://clojure.org/guides/getting_started>, but maybe I'm missing your point"
1889,1513861628.000154,Jodie,I mean is it in a version controlled repo
1889,1513862352.0002,Joette,"<@Jodie> it seems (at least from this cursory check) to live in the <https://github.com/clojure/brew-install> repo under `src/main/resources/linux-install.sh` and be versioned using the script under `<https://github.com/clojure/brew-install/blob/master/script/package.sh>`, which on the last line says: 
```
aws s3 cp --only-show-errors ""target/classes/linux-install.sh"" ""$S3_BUCKET/install/linux-install-$version.sh""
```; where on the `1.9.0` branch in that git repo, the maven pom.xml says `&lt;version&gt;1.9.0.275&lt;/version&gt;` and looking at git history we can see that the version was changed to 275 from 273 on dec 8 and 273 is what we see on the site"
1889,1513862736.000023,Berry,"is there a shorter way to write:
```
(fn [stack &amp; lst]
              (reduce #(%2 %1) stack lst))
```"
1890,1513862901.000051,Xavier,"not 100% sure what it’s supposed to do, but `((apply comp lst) stack)`?"
1889,1513862943.000048,Xavier,or `((apply comp (reverse lst)) stack)` I suppose
1889,1513863473.000319,Joette,<@Berry> what is that function supposed to do? if the incoming stack is in fact a list that we are just treating like a stack and all you are doing is adding all the elements from one list to another (the stack) then you could as well just return `lst` or potentially `(reverse lst)`. But I get the feeling we are missing your point
1889,1513863740.000033,Jodie,Great find :+1: Thanks. Looks like the two are versioned together.
1889,1513863898.000225,Berry,"oh sorry, let me rewrite that as; ```
(fn [obj &amp; list-of-fns]
              (reduce #(%2 %1) obj list-of-fns))
```; so there is an object, there is a list of functions, we want to apply it one by one, so

(magic obj f1 f2 f3 f4 f5) --&gt; (f5 (f4 (f3 (f2 (f1 obj))))); I'm writing a simple forth interpreter; the object here = stack, and the list-of-fns = words"
1889,1513864220.000366,Xavier,<http://clojuredocs.org/clojure.core/comp>
1889,1513864259.000133,Joette,<@Xavier> :slightly_smiling_face:
1890,1513864315.000366,Xavier,"wrt your question earlier 
<https://clojurians.slack.com/archives/C03S1KBA2/p1513859891000026>

it’s highly inefficient since it involves copying"
1889,1513864377.000587,Xavier,"if possible, try to reframe the problem so that you can use first/last for vectors or first for lists; often, a hash-map is also a better choice"
1889,1513864597.000463,Marx,"<@Berry> Oh now you’re making me jealous, I’ve always wanted to write my own Forth interpreter."
1889,1513864714.000507,Shantae,Forth in Lisp. And Lisp in Forth.; &gt; Forth: the original bare-metal REPL
1890,1513865292.000418,Marx,I should never have sold my C64.
1890,1513872751.000164,Sandy,<@Marx> I'm sure there's cycle accurate C64 emulator out there now :smile:
1890,1513872790.000449,Marx,I’m trying to pretend I don’t know that. :wink:
1891,1513874252.000599,Candace,does anyone here have any experience using clj-http with cookies on an HTTP/POST? I’m trying to convert a request over from using [http.async.client “1.2.0”] to clj-http
1891,1513876486.000402,Danielle,<@Candace> are you experiencing issues? what version of clj-http are you using (hopefully latest version: 3.7.0)?
1891,1513879046.00023,Candace,"<@Danielle> I just got it to work. I am on 3.7.0. I was trying to pass the cookies map the previous authentication request returned into the `:cookies` value of the POST map. For whatever reason it wasn’t worker. Passing the raw cookie string to the :headers map worked though; I was under the impression you could pass the :cookies map around; was just doing an auth, getting that cookies map and sending it in the subsequent POST"
1891,1513880074.000041,Noella,"<@Candace> you should be able to pass the `:cookies` map directly, I have some code around that does that"
1892,1513883461.000078,Clara,"Hi all :slightly_smiling_face:; i need a bit of advice , i'm pretty sure someone has solved my issue already but i seem have trouble finding it. I need a persistent map that is stored on disk and doesn't require me to read it all into memory to read it.; sure i could do all sorts of h2 or hsqldb sort of trickery but i really would rather not :disappointed:; the reason why i don't want to read all into memory at once is that it just won't fit, amount of data is way bigger than the ram that i have available"
1892,1513883853.000202,Heide,Maybe use Datomic Free version? (Or the free Datomic Pro?)
1892,1513884084.000119,Clara,datomic seems pretty complex for my needs :slightly_smiling_face:
1892,1513884124.000278,Margaret,isn’t what you need just a database?
1892,1513884172.000063,Clara,yes but the definition of a database is a rather wide one
1892,1513884191.000281,Marx,"maybe just sqlite or something? Sounds like that might be adequate, depending on just how big we’re talking here"
1892,1513884196.000273,Margaret,OK just saying what you describe so far is something any database worthy of the name does
1892,1513884205.000246,Clara,"i manage apps that run on postgresql clusters of hundreds of gigabytes every day at work , and yeah sure that's all fine and i know how they work ... but my needs here are way different"
1892,1513884223.000224,Heide,"Well…. that depends on the keys <@Clara> is using: could be objects, vectors, etc."
1892,1513884246.000553,Margaret,OK no database (or nearly none) supports all the types clojure allows in hash map keys
1892,1513884252.000413,Heriberto,"You'll have to write it starting from those examples:
<http://vanillajava.blogspot.com/2011/12/using-memory-mapped-file-for-huge.html>
<https://github.com/ashkrit/blog/tree/master/src/main/java/bigarraylist>"
1892,1513884278.00053,Margaret,if you have a decade to spare you could make a new database sure
1892,1513884284.000506,Clara,"i usually despise orms and simplifications but this time it is exactly what i'm looking for, just a memory optimized storage for hash maps , which in turn have just lists of strings as values and strings as keys; something in the berkeleydb or mapdb territory"
1892,1513884308.00061,Heriberto,Why database? Most likely only one map type is needed.; mapdb seems to be the way to go
1892,1513884356.000513,Daine,<@Clara> Maybe you van use the H2 MVStore? <http://www.h2database.com/html/mvstore.html>
1892,1513884367.000044,Margaret,"<@Heriberto> because most people want insertion to be reliable and persistent and failures to be handled in a sane manner and multiple clients to be able to access it without breaking everything etc. and before you know it either you have something that doesn’t work at all, or a database; I’m not talking about query models or relations or anything here - you don’t need those to be a db"
1892,1513884617.000291,Daine,"MVStore is easy to use, but I moved to Redis, since I needed access from multiple jvm's. Also easy, but needs a separate process."
1892,1513884709.000011,Clara,"but wasn't the case with redis that whatever you store there, even if backed on disk, needs to fit in ram ?; h2 is a strong candidate on my checklist so far though"
1892,1513884781.000167,Daine,"Yes, that's true, so for this case it doesn't work"
1892,1513884960.000144,Clara,"thanks for the suggestions, i will break my thumbs a little bit on testing approaches out"
1892,1513885482.000195,Alline,<@Marx> <@Berry> this is my favorite lisp/forth story: <http://www.flownet.com/gat/jpl-lisp.html> (starting with “Also in 1993 I used MCL to help generate a code patch for the Gallileo magnetometer…“)
1893,1513885537.000016,Marx,Nice :wink:
1892,1513885607.000646,Alline,more detail at <https://news.ycombinator.com/item?id=12037548>
1894,1513887122.000166,Gladys,"```
(try
  (throw
    (ex-info ""foo"" {:bar ""barrr""}))
  (catch Exception e
    (ex-data e)))
```

vs

```
(try
  (throw
    (ex-info ""foo"" {:bar ""barrr""} {:baz ""baaz""}))
  (catch Exception e
    (ex-data e)))
```

Second example return nil.
First example is `clojure.lang.ExceptionInfo` while second is `java.lang.ClassCastException`.

How do you read Expection in consistent way to get always `([msg map cause]` from `ex-info`?

On the end i need it to create `fingerprint` for sentry, which is unique data to identify group of errors.
```
(when (or error-message (force msg_))
                                                         (-&gt;&gt; [?ns-str error-message (force msg_)]
                                                              (remove #(= """" %))
                                                              (remove nil?)))
```

So i want add here additional `cause` to make smaller group of errors to easier debug issues.

So on the end i want call:
```
(throw
          (ex-info ""service X API"" {:error-info ""bla bla"" {:cause {:timeout :foo}}))
```
^ or maybe last param could be a vector [:timeout :foo]

or just in some cases

```
(throw
(ex-info ""service X API"" {:error-info ""bla bla""))
```

In logs i want make from that right `fingerprint` for sentry to group this errors.

How to get `ex-data` and `cause` from `ex-info`. When third parameter `cause` is present in `ex-info` it returns different instance and it doesn’t work so simple.; wooo… too long. sorry, but wanted well describe it; PS `[?ns-str error-message (force msg_)]` this part is from timbre envents"
1894,1513887286.000266,Margaret,"```(ins)user=&gt; (ex-info """" {} {})
ClassCastException clojure.lang.PersistentArrayMap cannot be cast to java.lang.Throwable  clojure.core/ex-info (core.clj:4739)``` the ClassCastException is because you used ex-info wrong, and you get the thrown ClassCastException instead of the other one you were catching; the third arg if present needs to be a throwable; it’s not that ex-info is returning a different type, it’s throwing instead of returning"
1894,1513887472.000589,Gladys,oh…. thanks.
1894,1513887505.000086,Margaret,the design is that `cause` if present would be another exception (the one you caught originally in theory)
1894,1513887598.000053,Gladys,"I throw this exceptions myself, so…. hmm maybe I shouldn’t use `cause` in that case.; Do you know some good practice how can i make `fingerprint` to group exceptions?; It would be grate to don’t have timeout issue from third part service etc. in the same group like others important errors; For now only one solution what i see is change `""service X API""` in `ex-info` but i don’t like it to much
```
(throw
          (ex-info ""service X API"" error-info))
```"
1894,1513887829.000074,Berry,is there any plan to make `(&gt; \b \a)` to ever return true ?
1894,1513887850.000384,Gladys,"```
(when sentry-dsn
(l/debug ""sentry-dsn: "" sentry-dsn)
(sentry/init! sentry-dsn)

(timbre/merge-config!
{:appenders
{:sentry
{:enabled? true
:async? true
:min-level :debug
:rate-limit nil
:output-fn :inherit
:fn (fn [{:keys [level ?err msg_ ?ns-str context]}]
(let [error-message (some-&gt; ?err (.getLocalizedMessage))]
(sentry/send-event (merge sentry-base
{:level (get timbre-&gt;sentry-levels level)
:fingerprint (when (or error-message (force msg_))
(-&gt;&gt; [?ns-str error-message (force msg_)]
(remove #(= """" %))
(remove nil?)))
:logger ?ns-str
:extra context
:message (not-empty (force msg_))
:throwable ?err}))))}}}))
```

^ here is the point how I use timbre events"
1894,1513887853.000209,Margaret,<@Berry> by redefining clojure.core/&gt; or shadowing it
1894,1513887860.000224,Gladys,ach it looks so ugly in thread; <https://pastebin.com/SEsWfji5>
1894,1513887929.00045,Margaret,"oh sorry I misread - no, no plan for that"
1895,1513887932.000335,Micha,<@Berry> (clojure.core/compare \b \a) returns 1.  That might be useful to you.
1894,1513887969.000246,Margaret,<@Berry> the clojure numeric operators will not be made generic / extensible beyond working on `Number`
1894,1513887969.000377,Berry,I currently have new functions `c&gt;` and `c&lt;` for char
1894,1513888202.000092,Gladys,hmm alternatively I can use `:causes` from `ex-info` `map` always as some kind of agreement.
1894,1513889206.000223,Berry,"Here's a Joy DSL I'm working on. Feedback/criticism welcome:
```

  (defn fnj-raw [args body] `(fn [ss#] (let [[ss# ~args] (vsr ss# ~(count args))]
                                        (vrc ss# (do ~@body))))) 
  (defmacro fnj [args &amp; body] (fnjp-raw args body))
  (def joy  (fn [stack &amp; lst] (reduce #(%2 %1) stack lst)))
  (def joy1 #(first (apply joy [%1] %2))) 
  (def jw   (fn [&amp; lst] #(apply joy % lst)))

  (def jdup   (fnj [x] [x x])) 
  (def j+     (fnj [x y] [(+ x y)]))
  (def j-     (fnj [x y] [(- x y)])) 
  (def j*     (fnj [x y] [(* x y)]))

  (def jp     (fn [x] (fnj [] [x])))
  (def jcct   (ffnj [x y] [(concat x y)]))
  (def js2    (jw jdup j*))

  (def jfilter (fnj [lst ws] [(filter #(joy1 % ws) lst)])) 
  (def jmap    (fnj [lst ws] [(map #(joy1 % ws) lst)]))

  (def jc&gt;    (fnj [x y] [(c&gt; x y)]))

  (joy [""John Smith""] (jp [(jp \Z) jc&gt;]) jfilter) 
  
  #_ (def ji     (fn [lst] #(apply joy % lst)))
  #_ (joy [1 2] (jp (ji [j+ (jp 20) j* (jp 10) (jp 4) j-])) ji)

  (joy [2] js2)

  (joy [] (jp 2) (jp 3) j+ jdup j*)

  (joy [] (jp [1 2 3 4]) (jp [jdup j*]) jmap)
```"
1896,1513889861.000251,Noella,<@Clara> a random idea that popped into my head: maybe <http://rocksdb.org/> + <https://github.com/ptaoussanis/nippy>?
1897,1513890293.000082,Margaret,you don’t even need nippy for string/string right?
1896,1513890796.000274,Noella,nope :slightly_smiling_face:
1894,1513894372.000268,Berry,"is there a clojure data structure that gives amortized O(1) pop/peek, and O(1) concat ?"
1894,1513894583.000029,Daniell,"<@Berry> If you don't need it to be eager, `concat` is already going to be O(1), right? :slightly_smiling_face:; So a list would be O(1) pop, peek, and (lazy) concat but you trade off O(n) on other operations...; If what you're `concat`ing is always small, a vector is going to be reasonable: O(1) for pop, peek (off the end) and `(into vec1 vec2)` will be O(n) for the size of `vec2`... and you still have O(1) access to other elements...; (I think -- happy for someone to confirm / deny my thinking there!)"
1894,1513895368.000081,Micha,"<@Berry> RRB vectors gives amortized O(1) pop/peek, and O(log n) concat: <https://github.com/clojure/core.rrb-vector>; or maybe it is O((log n)^2) concat -- been a while since I looked at the details.  Anyway, significantly less than O(n)"
1894,1513895948.000209,Berry,"<@Daniell> <@Micha>: theXY problem is that I am implementing an 'instruction stack'

most of the time, it's just pop and peek, but occasionally, I need to push a buch of ops to the front of it"
1894,1513895987.000139,Margaret,sounds like you want `clojure.lang.PersistentQueue/EMPTY`
1894,1513895995.000281,Berry,"no, queue are fifo, I need lifo"
1894,1513896000.000057,Margaret,conj to the front peek/pop from back; OK; <@Berry> you know that conj takes multiple args and that you can use into as well right?
1894,1513896393.000238,Berry,"yes, but I believe that becomes liner time, not O(1)"
1898,1513896805.000112,Thu,doesn’t a doubly linked list do that for you?
1898,1513896985.000113,Berry,doubly linked lists really aren't functional
1894,1513896999.000229,Berry,"ot ""merge"" the two lists, you have to modify the prev/next pointersx"
1898,1513897045.000198,Williemae,"is there a way to make jdbc dump the sql statements it’s making?  I have a sql query that is working through psql but it doesnt return anything through jdbc, and I don’t get any errors either…"
1894,1513897045.000319,Margaret,"yeah, you can’t do the sharing clojure would normally do with lists"
1898,1513897247.000205,Thu,what about those zipper things that I refused to learn about when i was trying to learn haskell
1898,1513897724.000005,Margaret,"&gt; to make a doubly-linked list, you need to construct it all at once, and if you ever want to change any part of it, you either need to use a Zipper or just make a complete copy of it every time
<https://stackoverflow.com/questions/10386616/how-to-implement-doubly-linked-lists>; <@Berry> did anyone mention finger trees yet?"
1898,1513897752.000031,Williemae,ok; why do sql query examples not use the goddamn results
1898,1513897781.000329,Margaret,<@Berry> <https://github.com/clojure/data.finger-tree>
1898,1513897857.00021,Daniell,<@Williemae> Ask in <#C1Q164V29|sql> if you want to avoid the noise of this channel...
1898,1513899415.000064,Berry,<@Margaret> fingertrees look interesting; I just had an epiphany while implementing Joy in Clojure. Stack based langauges = basicaly programming iwth de bruijn indices instead of variable names.
1899,1513900302.000172,Micha,"If you are worried about constant factors in run time, you might want to do some profiling of finger trees vs. other data structures like plain old Clojure vectors and/or RRB vectors.  I haven't done it myself, but recall that finger trees have constant factors of run time significantly higher than the others.  Not O() bad things, but something that might affect what you want to use anyway."
1898,1513901014.000172,Margaret,"yeah, profiling with actual runtime conditions is always called for if there are performance problems; speculatively optimizing before you have something that works is a great way to waste a lot of energy"
1898,1513909464.000236,Daniell,It just occurred to me... we should update our multi-version testing to check code against `clojure-1.10.0-master-SNAPSHOT` now that 1.9 is released! :laughing:
1900,1513909830.000043,Edmond,"When using `pprint` on a map containing namespaced keywords, long namespace prefixes are kind of a headache, pushing the output far to the right. Is there a way (short of writing my own formatter) of having it substitute aliases for the full namespace name?"
1901,1513910436.000202,Daniell,`(set! *print-namespace-maps* false)` perhaps?; (not sure how you'd get an alias substituted in -- unless you wrote your own `print-method` for `clojure.lang.IPersistentMap`?)
1900,1513912850.000007,Edmond,"`*print-namespace-maps*` is a little better, though it sort of shifts the readability problem. I guess I'll think on making a custom `print-method` that interrogates the current ns aliases or something."
1902,1513924469.000073,Berry,how expensive is the overhead of a vector with one element ?; (compared to just storing that element)
1901,1513926426.000175,Charity,~sizeof(Object[32]) IIRC; So probably not very
1902,1513934545.000275,Berry,"Is there a builtin for:
```

  (defn u-in [obj path f]
    (let [o          (get-in obj path)
          [nv &amp; rst] (f o)]
      (into [(assoc-in obj path nv)] rst)))

  (u-in {:a   {:b 2}
         :foo :cat} [:a :b] (fn [x] [(inc x) :foo]))


```; is there a better way to write:
```
(fn [[o f]] (f o))
```

it seems like a weird enough function there should be some weird name for it"
1903,1513936931.000244,Lucretia,(eval (rseq ....)) :bomb::boom:
1902,1513940248.000267,Berry,"is there a 'stateful iterate' ?

i.e. suppose

(f x0) = [x1, v1]
(f x1) = [x2, v2]
(f x2) = [x3, v3]
....

I want something where

(g x0 3) = [x3, [v1 v2 v3]); is there a way to ask cloc to count test code separately?; basically, anything defined via (ct/...) where ct = clojure.test; (def fapp          (fn [[f &amp; args]] (apply f args))) &lt;-- wtf, is this function just #(apply apply %) ?"
1902,1513950068.000086,Marcel,"woah clojure is just incredible, there are plenty of different macros and then you think “super handy - if there was only a way do _slightly_ diverge from the default behavior”, and then you google a bit and there *is* for sure something build in :smile:"
1904,1513952311.000203,Xavier,"<https://clojurians.slack.com/archives/C03S1KBA2/p1513940248000267>
`(map second (iterate f x0))`; ah, didn’t notice you want all the `v`s; ```(-&gt;&gt; [0 []]
     (iterate (fn [[x vs]]
                (let [[x' v'] (f x)]
                  [x' (conj vs v')])))
     next
     (take 3))```"
1905,1513954737.000095,Marla,<@Heriberto> a lumo version issuer. <#C4C63FWP5|unrepl> is a better place for unravel issues
1905,1513955323.000237,Heriberto,"<@Marla> Thanks!; Who said that Clojure's long startup time can't be fixed? :grinning:
See <https://stackoverflow.com/questions/19107683/speed-up-clojure-startup-time-with-nailgun>; &gt;In my case, startup time of the actual script went down to 80ms"
1906,1513961363.000553,Judy,is there a way to make `clj` start the repl in a certain namespace?
1906,1513961407.000526,Leann,"`:repl-options :init-ns`; so, in project.clj, you could add: `:repl-options {:init-ns user :port 4001 :nrepl-middleware [cemerick.piggieback/wrap-cljs-repl]}`"
1906,1513961452.000081,Judy,"no i'm talking about `clj` which comes with tools.deps, not leiningen"
1907,1513969616.000087,Sonny,"it’s a little cumbersome but you could do; `clj -e ""(use 'clojure.set) (in-ns 'clojure.set)"" -r`"
1907,1513969776.000223,Margaret,my favorite golfing of require / switch ns is `(doto 'clojure.set require in-ns)`
1908,1513973531.000154,Liza,"What would you call the value that `peek` returns?  You can't call it ""first"" or ""last"" since that depends on the type you supply."
1908,1513973666.000179,Margaret,"not only that but first and last are functions you probably don't want to shadow; for a stack, it would be the top value"
1908,1513973724.000154,Liza,"That's true.  Doesn't really matter what the type of the structure is because chances are good you're using it as a stack or queue if you're using `pop` and `peek`.; Thanks.  I just needed a gut check on that.; I needed an appropriate name for this convenience function I just wrote:
```
(defn update-top [coll fun &amp; args]
  (conj (pop coll) (apply fun (peek coll) args)))
```"
1909,1513975256.000055,Eldridge,"does anyone know how to _write_ to STDIN from clojure? I'd like to write a string to STDIN so that a process listening to `*in*`would be able to consume the string; unorthodox, i know, but mostly for hacky purposes"
1909,1513975642.000046,Ambrose,<@Eldridge> are these 2 separate processes?
1909,1513975719.000121,Eldridge,well one of them is a repl and the other is a server receiving messages across a web socket
1909,1513975747.000159,Ambrose,is the repl running in the same process as the server?
1909,1513975755.00004,Eldridge,yes
1909,1513975937.000188,Margaret,AFAIK you need to resort to OS functionality to write to STDIN - it's something I wouldn't expect the jvm to abstract or provide for you
1909,1513975989.000106,Ambrose,is the server listening on both stdin and the websocket?
1909,1513975994.000234,Eldridge,what is the interpretation of this `(spit *in* some-string)`; no; server only listens to websocket
1909,1513976026.000281,Margaret,"you can't spit to `*in*`, that will just throw an exception; beyond the obvious `*in*` can be freely rebound, and the binding only has to support reading"
1909,1513976048.000014,Ambrose,which process is listening to `*in*`
1909,1513976057.000017,Eldridge,the repl; to rephrase my question: there is a websocket server running in a repl and I want the msg coming through the socket to be interpreted by the repl as if it was entered from STDIN
1909,1513976126.000444,Margaret,"you can easily start a repl that listens to a fifo or socket btw; I'd start a repl on a new thread in the same process, and bind `*in*` to the input from the socket; STDIN isn't special"
1909,1513976199.000124,Eldridge,true. thats a good idea.; thank you
1909,1513976224.000359,Margaret,"and you probably want it's `*out*` to send back to the client too, for that matter; clojure has a built in socket repl class, but for a websocket you might need to write your own (also I'm sure you're aware this a security nightmare)"
1909,1513976397.000225,Eldridge,"yeah =/ other than an http request, websockets seemed the only way to talk to a remote repl from the browser"
1909,1513976480.000155,Margaret,"right, the problem is that a repl effectively gives root because every single mainstream OS has local root holes that don't require physical access; if you trust everyone who can load the web page to have root, that works out (I'd be very careful about who can visit the page of course)"
1909,1513976560.000068,Eldridge,"it would be internal to my company's network, but yes I understand the implication.  Are jupyter notebooks with ipython kernels similarly insecure?"
1909,1513976622.000213,Margaret,I don't know python - but a good indicator would be how hard is it to make a shell call inside the python code... if they can run a system command then it's probably about the same
1909,1513976667.000055,Eldridge,indeed you can with little in the way. thats at least *a bit* comforting
1909,1513976792.000267,Elanor,"<@Sonny> have a quick question about `clojure.java.classpath/classpath-directories` with JDK 9; I got an issue for migratus recently <https://github.com/yogthos/migratus/issues/126>; and traced it down to the fact that the behavior of `classpath-directories` changed when using JDK 9; when I run it with JDK 8 or below I see something like:

```
(#object[java.io.File 0x30efe7c ""/Users/yogthos/src/migratus/test""]
 #object[java.io.File 0x70111841 ""/Users/yogthos/src/migratus/src""]
 #object[java.io.File 0x51ee3ff3 ""/Users/yogthos/src/migratus/resources""]
 #object[java.io.File 0x24a1e205 ""/Users/yogthos/src/migratus/target/classes""])
```; however running on JDK 9 returns an empty seq; is this a bug?"
1910,1513978230.000077,Berry,"3 lines of unit test per line of code -- is this within reasonable limits, or is it ridicilous ?"
1910,1513978283.000234,Margaret,depends on how much logic you like to put on a line I guess
1910,1513978332.000003,Berry,"here's an example of code + unit tests:
```
(do ;; stateful

  (def si        (fn [f s] (itr #(f (first %)) [s]))) 
  (def sic       (fn [f s n] (take (+ n 1) (siter f s)))) 
  (def sics      (juxt #(first (last %)) #(map second (rest %)))) 
  (def sis       (fn [f s n] (sics (sic f s n)))) 
  (def sfc       (fn [f c [o sf] i] (va [id #(c sf %)] (f o i)))) 
  (def smap      (fn [f o lst] (reduce #(sfc f conj %1 %2) [o []] lst)))
  (def swu       (fn [s t f] (if (t s) (recur (f s) t f) s)))

  (let [g0 (juxt inc #(* 2 %))
        g1 (fn [s i] [(+ s i) (+ (* 10000 s) i)])] 
    (ct/is (= (sic g0 0 3) [[0] [1 0] [2 2] [3 4]])) 
    (ct/is (= (sis g0 0 3) [3 [0 2 4]])) 
    (ct/is (= (smap g1 0 [1 2 3 ]) [6 [1 10002 30003]])) 
    (ct/is (= (swu 1 #(&lt; % 10) #(+ % 2)) 11))))
```"
1909,1513979349.000277,Elanor,"looks like things break down here:

```
(map
  get-urls
  (take-while
    identity
    (iterate #(.getParent ^ClassLoader %) (clojure.lang.RT/baseLoader))))
=&gt; (nil nil nil nil nil nil)
```"
1909,1513980894.00001,Jonas,"while you can create new functions for various combinations of builtins, there’s something to be said for writing most of your code in terms of more common functions; for example, if you us `smap` somewhere; to figure out what it does you have to then go and figure out what `sfc` does; which means you have to figure out what `va` does; and I don’t know what `va` does"
1909,1513981145.000128,Margaret,nothing like a codebase that forces you to master a language only used in Tolkien's Sylmarillion in order to understand it
1911,1513983522.000092,Berry,"va = vector apply, (va [f g h] [v1 v2 v3]) -&gt; [(f v1) (g v2) (h v3)]; smap = ""stateful map"",
standard map is: f :: a -&gt; b
stateful map is f:: [s, a] -&gt; [s', b]
so there is a ""state variable"" being threaded through"
1911,1513984992.000067,Bibi,"What exactly is the question, though? Do the tests cover all/enough of the cases? If yes, then they're enough. 3 lines of test per line of code is such an arbitrary value. How long is a piece of string?"
1912,1513995906.000099,Keesha,"Can this be simplified? ```(map #(map first %) [[[1 2] [3 4]] [[5 6]]])
 =&gt; ((1 3) (5))```"
1909,1513997441.000059,Margaret,"same items, different shape ```+user=&gt; (for [x [[[1 2] [3 4]] [[5 6]]] [y] x] y)
(1 3 5)
```"
1909,1513999424.000008,Keesha,"<@Margaret> Thanks, I ended up with this `(partial map (partial map first))`"
1911,1513999992.000014,Williemae,is there some way to report to clojars that a project doesn’t work anymore?  The postgresql project there is *way* out of date and no longer works for inserts…I just spent a good 3 or 4 hours trying to figure out what I was doing wrong :stuck_out_tongue:
1911,1514000058.000036,Margaret,I'm sure it still works if you combine it with the right jdbc version
1911,1514000066.000006,Williemae,heh; in that case they could at least put something in there saying that it’s no longer compatible with new versions of the jdbc and go to the right repo for compatibility
1911,1514000178.000068,Margaret,"all these deps are explicit (clojure.java.jdbc, java.jdbc, db drivers) and many combos won't work, but the older ones still work in the right combination, if they ever worked; usually the approach is to treat old deploys as immutable"
1911,1514000257.000054,Williemae,"i assumed it was an official repo because it’s called `postgresql/postgresql`, if it was `someguy/postgresql` i would have looked for an alternative (and maybe found the official central repo earlier); i get it but what im saying is this isn’t very user friendly, especially since the error doesnt actually make it clear what’s wrong."
1911,1514000330.00004,Margaret,"I think the main problem is you shouldn't be looking for postgresql on clojars; it's a java project, like most mainstream java stuff they deploy to maven - someone mirrored to clojars once and used their name; (may even have been the postgres driver devs but I doubt it)"
1911,1514000400.000036,Williemae,"Fair enough, but being that I’m pretty new to the clojure/java ecosystem I honestly have no idea what’s official and what isn’t.; I assumed clojars was official because that’s where lein looks"
1911,1514000434.000033,Margaret,"OK - good rule of thumb is that java code is canonical on maven or sonatype, and clojure stuff is canonical on clojars; lein looks in maven before clojars iirc"
1911,1514000538.000034,Williemae,in any case it would be good to have clojars or someone make a note on that repo for future noobs like me making that mistake heh
1911,1514000599.00007,Margaret,"that's fair - I don't know if they have that power with the current site design - my mental model is that it's like github where each project controls what ends up on their clojars page; but I'm not sure, honestly"
1911,1514000618.000003,Williemae,i see
1911,1514000745.000015,Margaret,"I agree that it's good for people to understand where the artifacts they use come from, and how they got there"
1913,1514012426.000063,Shavonda,"Suggestions on making something like the following fast?

- You're given information that a password is 14 characters in length, that it is composed of [a-Z] exclusively, and that it contains a single dictionary word.
- You want to limit the cartesian product of all possible selections over [[a-Z] [a-Z] [a-Z] ...] given you know that a dictionary word must exist within the passphrase.

Right now I'm doing something like
```
(c/cartesian-product (repeat 15 (map char (concat (range 65 91) (range 97 123))))
```; _Note:_ It is possible for a dictionary word itself to appear in mixed case: `""QQQDeALeRQQQ""` for example; Basically I am generating a massive set of sequences `#{[\A \A \A \B] [\A \A \A \C] [\A \A \A \D] [\A \f \o \o] ...}`, and I want to keep only the ones that contain somewhere in the sequence `#{[\t \h \e] [\f \o \o] ...}`; So in that example, `[\A \f \o \o]` wouldn't be filtered out."
1914,1514017988.000026,Berry,"the fact that it contanis a dictikonay word is almost useless; the word 'a' is a dictionar word, so just words of the form a + 14 other letters is going to give you 52^14 possibilities; ```
  (Math/pow 52 14)
(comment
 1.0569314255388205E24)
```"
1914,1514018100.000033,Weston,Usually in these cases you exclude stopwords and/or short ones
1914,1514018144.000031,Berry,"even if you limiktd to 5+ letter words, you'd still have atleast:
```
  (Math/pow 52 10)
(comment
 1.44555105949057024E17)
```"
1914,1514024969.000031,Shavonda,"<@Berry> yeah I thought I was going to cut the search space in half, but ignoring words less than 3,4,5,6,7 characters does almost nothing in terms of time complexity.; The easy answer is to just compute every single sequence and try them all, but it still seems like enough information (14 char, a-Z) to cut the total brute force work significantly. Maybe partitioning and hashing segments of every sequence could be useful. Then you could search whether a word’s hash exists as a segment."
1914,1514042332.000081,Kyung,"Seems like it should be faster to iterate over the dictionary and then build passwords around each of those words. Ie. if it’s “apple” then you’re adding X characters of padding before, and Y characters of padding after, where X+Y+length(“apple”)=14. The padding are sequences of integers (1,2,3,4 ...) converted to base 52 where the digits are [a-Z]."
1915,1514043875.000005,Gilda,"Hi, I wasn't aware of CLJ-1814 before (satisfies? being too slow). What approach would be recommended while CLJ-1814 is being worked on to dispatch only if a protocol is satisfied?"
1916,1514046788.000072,Elanor,"This does look like a bug, the Base ClassLoader is no longer derived  from the URLClassLoader; so this code in `clojure.java.classpath` fails:

```
(defn get-urls
  ""Returns a sequence of java.net.URL objects used by this
  classloader, or nil if the classloader does not sastify the
  URLClasspath protocol.""
  [loader]
  (when (satisfies? URLClasspath loader)
    (urls loader)))
```; and looks like there is a JIRA task for this <https://dev.clojure.org/jira/browse/CLASSPATH-8>"
1916,1514052697.000116,Sonny,Seems like a bug. Patch welcome...
1917,1514058782.000059,Berry,"I know about `letfn`. It doesn't work well for me, as I'm trying to write:
```
(let [f1 (fn00 ....)
  f2 (fn00 ...)
  f3 (fn00 ...)]
```

where `fn00` is a macro that helps me define functions, and f1/f2/f3/ are mutually recursive

does clojure have a mutually recursive let ?; (I don't want to use `declare` as these bindings are not meant to be global)"
1917,1514058879.000119,Margaret,why wouldn't your macro work in letfn?
1917,1514058931.000045,Berry,"because letfn wants me to do

```(letfn [(foo [args] body)]```

whereas for my macro, I do

(def foo (fn00 [args] body))); perhaps tehre's another way to use letfn that I am unaware of"
1917,1514058971.000097,Margaret,you could just change the macro?
1917,1514059002.000078,Berry,change which macro? change letfn or change fn00 ?
1917,1514059019.000032,Margaret,fn00 - that seems like a trivial difference if the alternative is rewriting let
1917,1514059021.000056,Berry,the problem with letfn is -- it's not going to call my macro fn00
1917,1514059066.000065,Margaret,that's easy to fix with another macro
1918,1514059068.000025,Anastacia,"Hi. Is there anything like <https://mechanize.readthedocs.io/en/latest/> (or the Perl lib WWW:Mechanize from which it was derived)? I.e., a stateful http lib where you can fill in and submit forms etc."
1919,1514061875.000018,Elanor,I'll let you know if I come up with anything; I'm going with `ClassLoader/getSystemResource` for my current use case; in the mean time it might be better to throw an unsupported exception in `clojure.java.classpath/classpath` when running under java 9; the current behavior of returning `nil` masks the problem and makes it difficult to figure out what happened; this affects any library maintainers who rely on this functionality; it would also be good to have a unit test for this :slightly_smiling_face:
1920,1514070759.000004,Anastacia,<@Berry> `letfn` uses `letfn*` which I think has the shape you request. I guess that would be relying on an implementation detail though.
1920,1514074614.00002,Berry,"I can't find `letfn*` on clojuredocs; besides the source code, is there any documentation ?"
1920,1514075142.000034,Kareen,"no, clojure internals aren't really documented"
1920,1514083591.000011,Berry,"is there any good talk / blog post on various philosophies of unit testing? I feel like (after a few years of on/off) I'm finally starting to develop a philosophy. It goes something like this:

1. unit test every function
2. go for 100% coverage, make sure all exprs of all functions are executed by some test
3. the basic philosophy is: yeah, sure, this isn't as comprehensive as type checking, but if you have 100% coverage, it's hard to have obvious/simple errors, because there's atleast one non-trivial example on which it worked; as a result of this, I'm now moving towards really short functions + unit tests about 2-3 times as long as function, to get 100'% coverage

there isn't really a question here, just hoping to get insights / philosophies of unit testing from others / suggestions"
1921,1514085903.000012,Kyung,"There’s an article somewhere that suggests going for 100% coverage can have unintended consequences. Namely, that your dev team will be tempted to skew their implementations solely for the purpose of making the code testable at the expense of clarity."
1921,1514086162.000003,Daniell,"Yeah, 100% coverage is not a good goal, IMO."
1920,1514086365.00003,Berry,"perhaps I have not written any complex code yet, but 100% coverage seems simply a matter of: within each function, do as little branching as possible"
1921,1514086647.000006,Daniell,"There's a lot of stuff that's pointless to test. There is some stuff where you can describe expected invariants or properties of the code and exercise it in that context (generatively).; There's also a very big difference between ""unit testing"" and ""test-driven development"". I think the latter is much more valuable than the former."
1921,1514087003.000013,Sandy,<@Berry> I mostly only test the public contract of a module (the published API). And as much as possible I try to write those tests in a data-driven way.; So test.check or any random source of data are helpful there.; And I almost always write my tests after my code unless I'm adding a new feature that won't break any existing tests.
1921,1514087707.00007,Kyung,<https://rbcs-us.com/documents/Why-Most-Unit-Testing-is-Waste.pdf>
1921,1514088312.000076,Daniell,"As we were building out our new REST API, we wrote tests first to reflect the requirements doc, specifically to provide a framework for writing the validation and error reporting. That was back before `clojure.spec` -- now we write specs for a lot of things that we wrote tests for before :slightly_smiling_face:"
1921,1514097197.000033,Berry,"<@Sandy>: I'm not doing TDD. I wrote a small Joy/Forth interpreter in CLJ. Then I started defining Joy/Forth words, and reailzed: hmm, I should test each word. (So I'm testing after defining the word.) Then, because words are so simple, genrally 1-2 (sometimes 3-4) tests will hit 100% coverage."
1922,1514103740.000043,Terra,Fantastic reading. Thanks for the link!
1921,1514126124.000026,Sandy,"Languages are quite unique in that respect.; Here's what I wrote for the core.async go macro <https://github.com/clojure/core.async/blob/master/src/test/clojure/clojure/core/async/ioc_macros_test.clj>; My plan there is to use the same transforms as `go` but remove the nondeterminism. Then unit test ""normal"" clojure code that's gone through the transform. Probably not 100% coverage, but it's close; But I only ever write code like that when I'm working on a DSL/language"
1923,1514141788.000038,Kristy,"what would be a more idiomatic way to spec an heterogeneous/nested collection value?

Current approach:

```
(spec/def ::pending-request-entry
  (spec/and vector?
            (fn [[id _]]
              (number? id))
            (fn [[_ x]]
              (vector? x))
            (fn [[_ [url _]]]
              (url? url))
            (fn [[_ [_ all-params]]]
              (all-params? all-params))))
```; (I use one `(fn ...` per predicate, so `spec/and` can report the exact culprit)"
1923,1514142417.000077,Silvana,hi guys; any suggestions on how to have a cache in compojure?
1923,1514142896.000009,Kristy,possibly I could just refactor the heterogeneous vector into a map (for which having heterogeneous values is much more usual)
1924,1514143985.00007,Daine,"There are many ways I think, you can use redis to memoize some functions, and maybe use flushdb to clean when you know the data is changed?"
1924,1514144104.000048,Silvana,"<@Daine> I have no clue at the moment, I'm still trying to figure this out; an in-memory solution would suffice though"
1924,1514145039.000024,Kristy,"<@Silvana> assuming you want an arbitrary object cache for e.g. rendered html or DB records:

I'd add a middleware (<http://rjevans.net/post/2655430930/adding-custom-middleware-to-ringcompojure> ) that saves/fetches objects to a plain `atom`. Or a fancier in-memory cache like <https://github.com/clojure/core.cache>

Bonus points if you wrap atoms/caches with <https://github.com/stuartsierra/component> so you have a cleanly reloadable dev experience.

Non-battle-tested suggestion (middleware/atom) from my side, but seems reasonable"
1924,1514145129.000066,Silvana,"many thanks <@Kristy>, it really seems to be a neat solution to the problem"
1925,1514150190.000027,Kristy,"my suggestion was based on what I remembered from <http://docs.arachne-framework.org/tutorials/dependency-injection/|docs.arachne-framework.org/tutorials/dependency-injection/>

You can't map 1-1 that tutorial to a plain compojure app, a more practical reading would be:

<https://gist.github.com/Deraen/9d65f447593859dd07ae>"
1924,1514150424.000087,Kristy,and! <https://github.com/metosin/compojure-api/wiki/Component-integration>
1926,1514152940.000014,Vilma,"Anyone have strong preferences about graph libraries? Looking between loom, ubergraph, and jungerer. I know clojure libs tend not to break but it looks like loom looks like it hasn't been touched substantively this year so I'm curious if anyone has any endorsement/warning for this."
1926,1514154563.000017,Margaret,<@Vilma> <http://crossclj.info|crossclj.info> can be useful for questions like these - at least you can see how many other open source projects use each one <https://crossclj.info/ns/jungerer/0.1.1/project.clj.html>
1926,1514155260.000026,Vilma,<@Margaret> thanks for the lead. 
1927,1514155311.00002,Margaret,"I'd expect loom to have the most users, but it can be helpful to use real data and compare"
1926,1514158732.000003,Vilma,Much appreciated. 
1928,1514163020.000046,Berry,"<https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/Executors.html#newFixedThreadPool(int)>
[service (java.util.concurrent.Executors/newFixedThreadPool 24)]
that is something that should, in theory, be a queue with 24 worker threads right? ""ps aux | grep java"" is only showing a single thread, ""top"" is only showing &lt; 100% utilization, iknstead of 2400% utilization"
1929,1514167919.000008,Micha,Are you sending it 'jobs' that take significantly longer to execute than the overhead of starting and finishing the jobs?  Sending it really tiny jobs might not get you any actual parallelism
1929,1514168277.000093,Berry,"Each jobs takes 10-20 seconds to execute.; Turns out, I was mis-reading the output of TOP. On per process, it' sshowing full usage (i..e 2400%), but on the top overall usage, it's showing 99% (i.e. 2400  / 2400)."
1926,1514175443.000013,Edward,s/tuple is also just a vector (and is typically used for heterogeneous collections)
1929,1514191174.000051,Berry,"is it possible to:

1. pass an anonymous function to a macro and
2. evaluate the function at MACRO EXPANSION time

in particular, I want to do:

``
(defmacro foo [ .... ] ....)

(foo (fn [x] (println (+ 1))) ...); and I want the function evaluated at macro expansion time"
1929,1514191409.000103,Amee,you're actually passing a list to your macro ... that might require a call to eval
1929,1514191712.000089,Berry,"yeah, I have this weird situation where `foo` behave as follows:

`(foo f1 f2 data)`

where `data` is interpreted as data

however, I want to parameterize `foo` by passing it functions `f1`, `f2`, that modify the behaviour of `foo` -- is this possible ?"
1930,1514195242.000062,Virgil,Sounds like (def bar (partial foo f1 f2)) (bar data)
1929,1514196780.000096,Amee,"maybe i lack imagination, but i can't imagine a case where some client code would use a macro, parameterizing  it with a function... So I guess you're writing a macro that itself calls a macro. In that case you would want the outer macro calling into functions that build the code rather than callinbg into macros, so you're out of the macro system as soon as you enter the outer level; in 10 (?) years since i started playing with clojure, i wrote maybe 5-10 macros and most were of the def-thing kind...thinly wrapping a function call.; then again, i had my macro abuse period earlier with common lisp =); macros are a code smell (most of the time); that's to say, are you really sure you want a macro? and if so, can you simplify it so that it's only a wrapper around your data orienbted or function oriented underlying system"
1929,1514198191.000072,Kristy,ah nice! never heard of it :eyes:
1931,1514199025.000095,Berry,"I'm writing macros to help me generate clojure bindings to an java api; There are alot of functions to bind. I want to pass it two functions, `c-name` and `j-name`, which decides how the functions are named, for example, I want; ```(make-bind c-name j-name foo bar cat dog)```

to bind cu-foo to java.jcuda.JCublas2/cublasFoo
cu-bar to java.jcuda.JCublas2/cublasBar ...; so I have c-name be a function (s -&gt; (symbol (str ""cu-"" s))) and j-name something to append the java.jcuda.JCublas2/cublas and capitalize the symbol; but now, I want the cname and j-name to be functions rather than hard coded, because I also will be binding jcudafft, jcuda/cudnn / ..."
1931,1514204018.000032,Daine,<@Berry> can't you turn the macro into a function returning a map (of functions)?
1932,1514208802.000019,Temple,"During cider debugging, is there a way for it to keep refreshing local variables every step ( the l key) ?; (visually)"
1932,1514222946.000012,Amee,"Looks like a fine occasion for macros indeed. I would take it in reverse order, by first gathering/processing a list of symbol names then feeding that into a def-bindings macro"
1933,1514234376.000073,Cristina,Guys how can I call the base method of a class on an object?
1933,1514234666.000025,Margaret,by making a class that calls the superclass' method right?; maybe I don't understand what you're asking for
1933,1514235274.000038,Amee,<https://clojuredocs.org/clojure.core/proxy-super> ?
1934,1514236447.000051,Jutta,"Why I can't `(&gt; #inst""2017"" #inst""2018"")` in clojure?
It works on cljs. And on clojure, I can compare `inst` via `sort`.."
1935,1514237243.000002,Kareen,the fact that it works on cljs is just because javascript can do `&gt;` with Dates and cljs's `&gt;` delegates to javascript's `&gt;`; clojure's `&gt;` is defined only in terms of numbers; the fact that it works in cljs is an accident of the implementation
1936,1514239097.00002,Carletta,"I don't remember if `#inst` in Cljs emits `js/Date` or `goog.date.DateTime` or `UtcDateTime`, if latter, it shouldn't be comparable by default, but if `cljs-time.extend` ns is loaded, that will extend `IComparable` to `DateTime` and `UtcDateTime`; `#inst` creates JS Date, so `cljs-date.extend` won't affect that"
1936,1514239462.000023,Berry,"<http://www.jcuda.org/jcuda/jcublas/doc/jcuda/jcublas/JCublas2.html#cublasSgemm(jcuda.jcublas.cublasHandle>, int, int, int, int, int, jcuda.Pointer, jcuda.Pointer, int, jcuda.Pointer, int, jcuda.Pointer, jcuda.Pointer, int)

is there a way to call 'resolve' or some other function, and get taht function as a result ?; i.e. I want something that will take ""jcuda.jcublas.JCublas2/cublasSgemm"", and return that function"
1936,1514239767.000025,Marcel,"Hm, could somebody explain me the difference between `merge` and `into`? does the latter have side effects?; nope, apparently not; `into` supports a transducer…"
1936,1514240125.000045,Kareen,"<@Berry> no, java methods are not first class in clojure"
1936,1514240141.000027,Carletta,"<@Marcel> `merge` is only for maps, `into` works for any collection"
1936,1514240162.000032,Kareen,you could do that via reflection if you wanted to but it doesn't sound like a particularly good idea
1936,1514240456.000038,Marcel,"<@Carletta> hmm, but `merge` does merge vectors as well. kind of; but yeah, merge source calls the parameter `&amp; maps`"
1936,1514240606.000024,Berry,"<@Kareen>: so the only three ways to get a java method are:

1. type it out literally in clojure code
2. have a macro generate it at macro expansion time
3. get it via reflection 

?"
1936,1514240723.000047,Kareen,"yes, 1&amp;2 are equivalent, I dont know how else you'd expect to do it; ""either statically(1,2) or programmatically(3)"" make a total set"
1936,1514241184.000006,Berry,"lol, it has been said that genius is rephrasing the question so the answer is obvious"
1937,1514242362.000066,Margaret,this works accidentally and isn't an intended feature
1938,1514244386.000035,Marcel,alrighty; thanks!
1936,1514276218.000004,Berry,"(:require [clojure.string :as ...]); what is a good name, as `str` is already a function"
1936,1514278075.000102,Elijah,`string`
1936,1514278527.000144,Micha,"Lots of people use str as an alias for clojure.string, because str/lower-case doesn't cause any conflict with the clojure.core/str function."
1939,1514278597.000159,Micha,"<@Jutta> You can use clojure.core/compare to get a result of -1, 0, or +1 when comparing two #inst's to each other."
1936,1514279417.000039,Berry,"what is the simplest string manip function which does camelCase to hypen-separated; ah, found this:
```
(defn kebab-case
  ""Converts CamelCase / camelCase to kebab-case""
  [s]
  (str/join ""-"" (map str/lower-case (re-seq #""\w[a-z]+"" s))))
```; <@Micha>: I have n oidea why that works, but yes, it appears that namespace alias str does not collide with buildin function"
1940,1514284760.000043,Kareen,"aliases and vars live in different ""namespaces"" "
1939,1514291857.000124,Jutta,what is the conceptual difference between `compare` and `&gt;`?
1940,1514294677.000192,Margaret,"`&gt;` is for numbers. See also +, *, /, - etc. - in other languages they might be overloaded for other data types but in jvm clojure they are only for numbers"
1936,1514317111.000072,Micha,"<@Berry> When a textual identifier contains a ""/"" character, the thing before the ""/"" is tried to be resolved as either a full namespace, or as an alias of a namespace (I don't know off hand which order is checked for between those two).  If there is no ""/"", no part of it is considered a namespace or alias, just a symbol on its own."
1941,1514325267.000133,Marcel,"meh, can’t come to a solution :weary:  I have a lazyseq (file-seq) which I have to iterate through while occasionally change a local data structure (fill and read a hash-table in this loop). Is `loop/recur` the right approach?; or `reduce`?"
1940,1514325340.000012,Margaret,"if you always move through the lazy-seq in order, reduce is simpler / more direct than loop"
1941,1514325424.000134,Marcel,so it’s okay to work with only one hash-structure for both the “actual” work data and help data?; I’m not super experienced with functional programming yet…
1941,1514325481.000168,Margaret,using one reduce argument to hold both an accumulated result and ancillary data is common
1941,1514325482.000146,Marcel,"technically it is possible, question is about whether it is a good way of implementation; alrighty, thanks! will try it out immediately"
1941,1514325538.000205,Margaret,"if you use transduce, you can even specify the function that gets the real result out of the accumulator"
1941,1514327278.000125,Marcel,"<@Margaret> yeah, works as expected! didn’t try transduce yet, though"
1941,1514327315.000181,Margaret,transduce is mainly useful if you are doing some transform on each item as it comes in; eg. replacing (reduce f init (map g coll)) with (transduce (map g) f init coll)
1941,1514327379.000083,Marcel,"I’m iterating through a list of files keeping some information to exclude duplicates from being inserted into a DB… (file-hash, last-modified, path); reduce might be enough for now, I think"
1941,1514327440.00008,Margaret,sounds about right - the note about transduce was because including that feature indicates that it’s idiomatic to transform the accumulator to get your value out at the end
1941,1514328870.000082,Marcel,"one advantage of loop/recur might be, that one can continue the loop from an arbitrary position, whereas with reduce, your nested if-clauses have always to return something…; just a guess; I should refactor a bit first"
1941,1514328985.000038,Ambrose,"not arbitrary, it has to be from the ""tail"" position, so to speak"
1941,1514328991.000102,Marcel,maybe it’s not that bad; oh I thought calling “recur” is similar to “continue” in other langs
1941,1514329024.000109,Ambrose,nope
1941,1514329028.000056,Marcel,plus new bindings of course…; hm
1941,1514329046.000057,Ambrose,"you do always have to ""return something"""
1941,1514329059.000068,Marcel,it seems I didn’t understand loop-recur :sweat_smile:
1941,1514329061.000052,Ambrose,"whether you're using loop/recur, or reduce, or anything else in clojure"
1941,1514329128.000023,Marcel,"does it mean if I have a nested structure, that i can’t call “recur” from the most inner level to jump straight into the next iteration?"
1941,1514329183.000111,Ambrose,"you can, as long as that recur is still in the tail position; meaning, it needs to be the last thing that could get called"
1941,1514329264.00015,Marcel,I should stop talking and try it out myself - I’m concerned that I start explaining my misunderstandings and embarrass myself :smile:
1941,1514329265.000073,Ambrose,"```
(loop []
  (if blah-blah
    (if something-else
      (recur)
      (other-stuff))
    (foo))
```; in that example, recur is in the tail position"
1941,1514329304.000017,Marcel,"but your example would look almost exactly the same with reduce, wouldn’t it?"
1941,1514329319.000077,Ambrose,"coincidentally, other-stuff and foo are also in tail positions"
1941,1514329331.000008,Marcel,just that the else-branches would return the untouched collection; hm
1941,1514329355.0001,Ambrose,"well, it's a fairly contrived example, the else branches here are breaking out of the loop"
1941,1514329367.000036,Marcel,"ah, of course!; on can’t “break out” of reduce. one has basically to walk though the entire collection…"
1941,1514329410.00005,Ambrose,"well, it's actually possible to break out of a reduce; because clojure provides a special way to signal that you want to break out early; but I'd avoid that until you're more comfortable with reduce and FP in general"
1941,1514329473.000016,Marcel,`reduced`?
1941,1514329475.000096,Ambrose,"yep; loop/recur's name is a bit unlucky, since newcomers often think it's similar to an imperative loop"
1941,1514329729.000089,Marcel,"it’s an end-tailed recursion, right?"
1941,1514329738.000135,Ambrose,"yeah; you can `recur` without `loop`, too; in which case it'll just recurse from the beginning of the function"
1941,1514329767.000094,Marcel,"*tail recursion; oh what; but without the tail optimization, correct? stack or heap would fill up"
1941,1514329855.000141,Ambrose,"*with the optimization, you mean?; oh, I see; recur tells clojure to use tail optimization"
1941,1514329894.000032,Marcel,just calling recur would omit optimizations; ah; what does loop do then?
1941,1514329912.00007,Ambrose,if you just called the function itself you'd fill up the stack; loop just localizes it
1941,1514329920.000129,Marcel,ah loop is just the jump-point for recur?
1941,1514329923.000077,Ambrose,yep; for when you don't want to go all the way back to the beginning of a function
1941,1514335132.000161,Margaret,also you can recur to a function - loop is just a convenience if the loop bindings shouldn't be your function args
1941,1514336388.000044,Daniell,The key thing is that `recur` may only appear in a tail position -- and therefore it _is always optimized_. The compiler won't allow you to `recur` in a position that couldn't be optimized.
1942,1514362022.000036,Marvin,"Hi, just wondering, how do you guys use spec for data validation?

Using `:pre` in `defn` helps in a way to ensure that the function can't be called with unsuitable arguments. But the resulting AssertionError is not really helpful for composing error message to the user. I mean, I don't want to return ""Assert failed: (spec/valid? ::email email)"" as the error message to the user. Something like: ""Invalid format for email"" is good enough for me as of now.; I came across this <https://groups.google.com/forum/#!topic/clojure/H9tk04sSTWE>
It gave me some clarity, but any thoughts here will still be appreciated :slightly_smiling_face:"
1943,1514367984.000048,Marcel,thank’s for explaining :slightly_smiling_face:
1943,1514368374.000144,Ahmed,the spec guide <https://clojure.org/guides/spec#_testing> has a snippet on how to test all spec'ed functions from an ns `(-&gt; (stest/enumerate-namespace 'user) stest/check)`. Where should I add this in a classic clojure.test file? Adding it just like that produces 0 tests. Wrapping it in a deftest produces 1 tests with 0 assertions..
1944,1514375670.000037,Berry,"```

(counted? (float-array [1 2 3]))
(comment
 false)


```
what is the constant time way to get the size of a float-array ?"
1945,1514378926.000003,Margaret,"it dousn't implement clojure.lang.Counted because it's not a clojure type; it still supports count in constant time; ```user=&gt; (source counted?)
(defn counted?
 ""Returns true if coll implements count in constant time""
 {:added ""1.0""
   :static true}
  [coll] (instance? clojure.lang.Counted coll))
nil
```"
1946,1514385144.000056,Beulah,<@Daniell> does the compiler similarly optimize non-`recur` recursion when it's in the tail position ?
1945,1514385333.000365,Margaret,"no, this feature is intentionally missing"
1945,1514385458.00009,Beulah,"explicit is better; <@Margaret> actually, shouldn't `recur` be called `iterate` (I know `iterate` has been used) ? it's not recursion when it's in the tail-position"
1945,1514387562.000155,Margaret,"it's still recursion, a tail recursion is trivially translated into a goto; but that's an implementation detail - aside from stack usage the behavior is the same as direct recursion"
1947,1514388872.000354,Huey,":wave: I recently converted a clojurescript project to use mostly cljc (to possibly move towards clojure), but now i'm getting a :boat:  load of errors when I boot my cljs project:
`java.lang.RuntimeException: Unable to resolve symbol: defproject in this context, compiling:(project.clj:1:1)` usually starting with that :arrow_left: . Strangely enough everything still works. Sound familiar with anyone?"
1947,1514389042.000455,Inocencia,Looking for a working proxy middleware for ring. Have tried tailrecursion/ring-proxy but running into errors. Any recommendations?; More specifically looking for a proxy configuration that can work with figwheel: <https://github.com/bhauman/lein-figwheel/issues/634>
1947,1514389960.000014,Margaret,is your source path for cljs set up so it would find project.clj?
1947,1514390336.000074,Huey,"I'm currently using the lein checkouts feature ... and I also have the third party lib cljc thing as a dependency...; ie. for my shared cljc lib I have run ""lein install"", and am now referencing that as a dependency as well as using the lein checkouts sym link features to make use of it. Everything _appears_ to work, but I am seeing these errors on boot.; the errors look like so:
```
Reloading Clojure file ""/src/myproject/myfile.cljc"" failed.
clojure.lang.Compiler$CompilerException: java.lang.IllegalAccessError: MY-FUNCTION does not exist, compiling:(src/myproject/myfile.cljc:1:1)
```"
1948,1514390973.000111,Ross,"Hi all, can you tell me why `tree-seq` is flattening my tree? My code is like this:
```
(defn to-tree [root]
  (let [name (:name root)
        reg  @registry]
    (tree-seq
     #(some? (:childs (get reg %)))
     #(:childs (get reg %))
     name)))
```
`registry` is a giant atom map with `{""xxx"" {:name ""aaa"" :childs [""yyy"" ""zzz""]}}`; I know, it isn’t very functional; I’m calling `(to-tree ""xxx"")`; but I get a flat sequence `(""xxx"" ""yyy"" ""zzz"") `"
1948,1514392347.000242,Willow,"&gt; Returns a lazy sequence of the nodes in a tree, via a depth-first walk.
that seems to be what it promises? perhaps you want something in `clojure.walk`?"
1948,1514392673.000175,Ross,"I was hoping to get something like `(""xxx"" (""yyy"" ""zzz"" (...))`"
1948,1514393324.000014,Thu,I don’t have any help for you but just want to say thank you for working on this.  This feature would be very helpful.
1949,1514397550.000144,Margaret,"yeah, you want clojure.walk/post-walk for that likely; tree-seq is useful if you have no assumptions about the shape of the data, but you know what the thing you want looks like (so you can filter and find it); post-walk / pre-walk / walk are for doing a transformation in the shape of the original collection"
1950,1514402160.000214,Johana,When is the 2017 Clojure survey?
1951,1514403166.000131,Daniell,<@Sonny> ^ ? Last year it was opened in early-ish December (12th) and the results came out in early February (7th).
1952,1514406117.000123,Maryann,"Folks, what is the better/more idiomatic/shorter way to sort+print a vector of elements than ```    (doall (map #(-&gt; %
                     format-value
                     println)
                (sort-by some-fn some-vector)))```?"
1952,1514406201.000027,Bibi,drop the 'doall' and replace 'map' with 'run!'?
1952,1514406379.000289,Margaret,"also consider `(doseq [value (sort-by some-fn some-vector)] (println (format-value value)))`; also, if using map instead of run! (eg. for clojure version reasons or to take extra args like map does) use dorun instead of doall, since the value returned is not something you want or need (just a sequence of nils)"
1952,1514406804.000026,Maryann,"`(run! #(println (format-value %)) (sort-by some-fn some-vector))` looks better, thanks."
1952,1514407072.000319,Margaret,for fancy fp-gangsta points you can replace that function with the equivalent `(comp println format-value)`
1952,1514407197.000257,Ambrose,"```
(-&gt;&gt;
  some-vector
  (sort-by some-fn)
  (mapv (comp println format-value)))
```"
1952,1514407222.000304,Margaret,run! is much better than mapv here
1952,1514407238.00005,Ambrose,agreed
1952,1514407659.000226,Berry,"```

(defn get-data [] 
  (<http://clojure.java.io/make-parents|clojure.java.io/make-parents> (str (mnist-config :data-dir) ""foo""))
  (doseq [[k url] (select-keys mnist-config [:train-images :train-labels :t10k-images :t10k-labels])] 
    (with-open [in (java.util.zip.GZIPInputStream. (<http://clojure.java.io/input-stream|clojure.java.io/input-stream> url))]
      (spit (str (mnist-config :data-dir) (name k)) (slurp  in)))))

(get-data)


```
is there a better way to write this? in particular, the (spit ... (slurp ...)) seems redundant 

We're downloading a bunch of *.gz files, gunziping thej,m, and writing it out to file"
1952,1514407687.000234,Daniell,"`<http://clojure.java.io/copy|clojure.java.io/copy>` perhaps?; Oh wait, you're slurping an input stream... not sure if copy will do that..."
1952,1514407789.000141,Margaret,"you can write an inputstream directly though; that is, you can write it to an outputstream, and create the output stream in the with-open call as a second binding; something vaguely like `(with-open [in …. out (io/output-stream (io/file (str …)))] (.write out in))` but probably also requiring a loop or a byte count on the write"
1952,1514407962.000323,Berry,"these files are only 60M, I'll deal with the 'memory inefficiency' then"
1952,1514407996.000053,Margaret,"it’s just a needless creation of a string, not a huge deal; also just to be clear making a string out of a 60 meg file that’s encoded with utf-8 is likely 120megs in memory because java strings are utf-16; and definitely don’t use slurp/spit for anything that isn’t text; (I don’t know what those “images” in the name refer to just be aware that if they are image data as in bmp or jpeg slurp/spit will turn them into garbage)"
1953,1514414975.000138,Alline,"is anyone else able to watch <https://www.youtube.com/watch?v=5VAEXYYdfWY> (“Zippers - Episode 2”)?  it’s not working for me.; oh, i get a better error message embedded here in slack, sorry!  (“This video requires payment to watch”)"
1954,1514417355.000031,Barbar,is there an easy way to list the requires for a given namespace? I was looking for something like ns-refers but for requires
1954,1514417482.000029,Williemae,i didnt realize youtube red videos were part of regular youtube
1955,1514419022.000002,Giovanni,I have a lot of .cljc code I'd like to make into a library. Is there a way to make cross platform libraries without rewriting my code twice?
1955,1514421901.000006,Barbar,<@Giovanni> are you already using reader conditionals?
1953,1514421941.000076,Barbar,(<https://clojure.org/guides/reader_conditionals>)
1955,1514421944.000044,Giovanni,Yeah I tested out my reader conditionals in a chestnut project and they worked in both runtimes.; I just never actually packaged a pure cljc project. Does the default lein template work fine for both runtimes?
1955,1514422119.000122,Barbar,that part i’m not sure about
1955,1514422218.000131,Alline,<https://github.com/stuartsierra/component> looks like a minimal example of a (not quite pure) .cljc library
1955,1514422503.000014,Giovanni,I should have looked at Sierra's components. It never clicked that I had them on the back and the front with the same namespace. It looks like this library has a project.clj a lot like mine as well. Thanks much!
1956,1514426378.000073,Linn,"hey, has anyone successfully used a go block in clojure &gt;=1.7.0? i am having trouble with it not closing over its scope properly, so `(let [c (chan)] (go (prn (&lt;! c))))` gets me `Unable to resolve var: c`; this is right out of the tutorial, and it works in clojure 1.6; but that seems like an awful long time for something so fundamental to be broken; so i’m open to it being totally my problem"
1956,1514426455.000085,Margaret,the weird thing about that block of code is that core.async should treat it as a noop returning a channel that never delivers; since nothing can possibly use c
1956,1514426494.000024,Linn,"i mean, there’s a more complicated version of that code, which also fails with the same issue, which actually does do a real hello world with the channels, in the tutorial; but i stripped it down to just that being enough for it to fail with the same issue"
1956,1514426531.000137,Margaret,"```Clojure 1.9.0
+user=&gt; (require '[clojure.core.async :as &gt; :refer [go chan &lt;!]])
nil
+user=&gt; (let [c (chan)] (go (prn (&lt;! c))))
#object[clojure.core.async.impl.channels.ManyToManyChannel 0x1e5e2e06 ""clojure.core.async.impl.channels.ManyToManyChannel@1e5e2e06""]
```"
1956,1514426559.000093,Linn,"i accidentally had written a lot of actually working code before realizing this issue, because i had `def`ed a channel with the same name as i was using inside go blocks; ok well what the crap"
1956,1514426577.000155,Margaret,what core.async version are you using?
1956,1514426600.000002,Linn,0.3.465; i tried a lot of releases
1956,1514426617.000068,Margaret,that's the version I was using; this is straight up clojure + core.async running from a custom uberjar (project here <https://github.com/noisesmith/bench> - I just run lein uberjar then make the jar an executable)
1956,1514426692.000117,Linn,"```option-bot.core&gt; (require '[clojure.core.async :as &gt; :refer [go chan &lt;!]])
nil
option-bot.core&gt; (let [c (chan)] (go (prn (&lt;! c))))
ExceptionInfo Could not resolve var: c  clojure.core/ex-info (core.clj:4739)```"
1956,1514426732.000083,Margaret,"are you using leiningen? if so try using lein clean then starting a new repl; sometimes things can get wonky with core.async and lein caches when versions of things change, in my experience"
1956,1514426824.000119,Linn,same deal :disappointed:
1956,1514426870.000071,Margaret,are you using any weird plugins? is there a chance that `lein deps :tree` shows a version conflict that would give you the wrong version of core.async?
1956,1514426900.000023,Linn,"nah, it’s pretty simple; ``` [clojure-complete ""0.2.4"" :exclusions [[org.clojure/clojure]]]
 [org.clojure/clojure ""1.9.0""]
   [org.clojure/core.specs.alpha ""0.1.24""]
   [org.clojure/spec.alpha ""0.1.143""]
 [org.clojure/core.async ""0.3.465""]
   [org.clojure/tools.analyzer.jvm ""0.7.0""]
     [org.clojure/core.memoize ""0.5.9""]
       [org.clojure/core.cache ""0.6.5""]
         [org.clojure/data.priority-map ""0.0.7""]
     [org.clojure/tools.analyzer ""0.6.9""]
     [org.clojure/tools.reader ""1.0.0-beta4""]
     [org.ow2.asm/asm-all ""4.2""]
 [org.clojure/tools.nrepl ""0.2.12"" :exclusions [[org.clojure/clojure]]]
 [self/ib ""9.73.01-SNAPSHOT""]```; i mean, there is one custom java api library, but that shouldn’t do anything like this, i wouldn’t think"
1956,1514426934.000007,Margaret,I'm going to see if a project with those deps gives me the same issue; (ignoring self/lib that is)
1956,1514426971.000156,Linn,"well, hm; i just did `lein repl` and that works; so it’s just cider that’s the problem"
1956,1514427011.000056,Margaret,cider is clearly doing something goofy; thanks for figuring it out before I had to do more work heh
1956,1514427033.000074,Linn,:slightly_smiling_face:
1956,1514427062.000045,Margaret,"so I guess the answer to ""are you using any weird plugins"" is ""we didn't realize how weird cider is"""
1956,1514427062.000053,Linn,"guess i’ll try updating that; haha, yeah"
1956,1514427091.000114,Margaret,"Tooling, the cause of, and solution to, every problem we have when programming clojure.; (to paraphrase homer simpson)"
1956,1514427124.000155,Linn,and i thought every issue i had with it had been fixed now that cider could pass its plugin versions into lein
1956,1514427153.000085,Margaret,I stopped trying to figure that magic out a long time ago ¯\_(ツ)_/¯
1956,1514427217.000011,Linn,"updated cider, it all appears to work; lost my awesome scratch buffer; oh well; thanks for being a sanity check; i was like “there’s no way this has actually been broken for the last three years, right?”; so here’s a more general question; what’s a good way to represent a record that requires multiple api calls (and callbacks) to be fully realized?; like, i have a representation of a stock; and there’s a bunch of static info about it that’s just intrinsic to it; but then also it kind of has a price, right? but to get the price, that’s the result of some other call; so i have been putting that behind a `future`"
1956,1514427856.000072,Margaret,"a good functional technique is to put the price and the time in there together, and make sure all price queries are explicit about time windows they accept; and sure, you can put a future in, you could also have a function that returns a future that returns a new instance of your record (with a newer time stamp) when realized; that ensures the parts of the record are all in sync"
1956,1514427935.000122,Linn,oh and then i’d have some fn `get-price` (or maybe use `conform`) and it’d get me the price that was cached if it was fresh enough; or go get a new one
1956,1514427944.00004,Margaret,"also, you could use a TTL cache (clojure core.cache provides this) and retrieve the price from the cache; if the record is created recently enough, it's returned, otherwise queried"
1956,1514427991.000014,Linn,ooh
1956,1514428016.000047,Margaret,"the nice thing with core.cache is that it doesn't force a specific storage - it just takes a hash-map and returns a new one, and you can put this in a local that propagates via recur, or put it in a ref, or an atom, or even a proper db if you serialize it right - it should just work; (as long as you always use the new hash-map it returns of course)"
1956,1514428050.000065,Linn,that’s super handy
1956,1514428066.000079,Margaret,<https://github.com/clojure/core.cache>
1956,1514428067.000084,Linn,because yeah i’m making a lot of wasteful API calls
1956,1514428079.000005,Berry,<https://docs.oracle.com/javase/7/docs/api/java/io/DataInputStream.html#readFully(byte[])> &lt;-- where is this readFully contract definedd ?
1956,1514428088.000151,Linn,i basically just hacked together some bullshit that worked for now with promises/futures
1956,1514428091.000007,Berry,"I'm trying to read 10k bytes from a file, and I don't wnat to loop; I want to make on3 call and have java read it for me"
1956,1514428093.000111,Margaret,I use core.cache in front of mongo documents encoded via transit
1956,1514428104.000146,Linn,now i’m trying to go back and use core.async channels to model the continuous updates
1956,1514428114.000051,Margaret,"the core.cache protocols do all the cache ttl logic, and transit handles the serialization, and mongo the storage; regarding mongo - I wouldn't necessarily recommend for a new project, it was inherited as part of the team expertise if that makes any sense"
1956,1514428240.00015,Linn,yeah i haven’t even begun to think about a persistence layer; i’m doing like super elementary algorithmic trading; mostly because i want to stop having to wake up at like 4am to catch market opens; so far clojure’s concurrency stuff has been as good as i expected for this
1956,1514428298.000003,Margaret,"yeah, core.cache also does simple in-memory cache with ttl which is what I'm sure you actually want - for those mongo caches I'm measuring the ttl in days not minutes"
1956,1514428305.000097,Linn,"haha, yup; it’d be like seconds; but there are some other queries that i might want to store for longer; like, price data, seconds, but the actual existence of the contracts i’m interested in; that can be cached for a long time"
1956,1514428356.000083,Margaret,"also the simplest solution would be to use an atom for your cache, but if you start to hit contention slowdowns you could use multiple refs instead of an atom with multiple keys in it"
1956,1514428373.000087,Linn,"i am also thinking like; oh, instead of handing out refs like candy and then trying to update them in place; i guess i should make a function that is like `get-contract` and then have that access the cache or synthesize a new contract info object"
1956,1514428438.00002,Margaret,"using lots of refs does work (and performs better under heavy write load) it's just a more complex design than a hash-map in an atom with a key for each ""thing"""
1956,1514428441.000049,Linn,"i have been thinking it would be kind of neat to have an agent for every contract i’m keeping track of; and then just deref the contract for the current state; but maybe using an explicit cache would be much better; oh, that’s what you were saying, though; a ref for every cache entry?"
1956,1514428534.000035,Margaret,"caching logic is notoriously tricky to get right, and core.cache helps a lot with that; I was surprised - I did a big cache with a lot of features built on core.cache and it worked without a hitch after the trivial data bugs were fixed; <@Linn> I'm trying to work out what this would require - it's a lot simpler to add keys on demand to an atom, but you could also hypothetically manage multiple refs but then you have the question of what tracks these on-demand refs and then I'm like ""refs inside an atom"" and no that is insanity"
1956,1514428641.000064,Linn,"lol; that’s where i went too; it was like aaaaa; because the idea of a record that magically updates itself; i guess for right now, it’s not a big deal, i can just have a single atom with a map"
1956,1514428719.000061,Margaret,"if you know it's always 10k bytes or less why not pass a 10k byte-array to the read method?; here's DataInput readFully <https://docs.oracle.com/javase/7/docs/api/java/io/DataInput.html#readFully(byte[])>; it's saying ""look at the method foo on class bar"" - it's just phrasing it kind of weird"
1957,1514431325.000145,Linn,"wow, that caching lib is great, just implementing a really naive caching layer in my calls was enough to massively reduce the number of API roundtrips"
1958,1514448809.000125,Berry,"is there a way of writing call (.readInt ...) on this data-input-stream 10 times that is better than loop-recur ? (note that .readInt changes the 'pointer' in the file buffer, so we need to be careful with regards to laziness"
1959,1514460023.000135,Tameka,"Hi everyone. I’m using a `chestnut` template and I have this simple route
```
(defn home-routes [endpoint]
  (routes
    (POST ""/api/get-name"" _ get-name)
    (resources ""/"")
    (not-found ""&lt;h1&gt;Page hello&lt;/h1&gt;"")))
```
whenever I try to post to this route from FE (cljs / re-frame), it sends `OPTIONS` type request first and it fails straight away with `404` and then the `POST` is not being sent afterwards. When I manually add
```
  (OPTIONS ""/api/get-name"" _ get-name)
  (POST ""/api/get-name"" _ get-name)```
it returns with `200` but then `POST` is not being sent afterwards"
1960,1514465605.000033,Lucretia,"Your browser is sending OPTION request to make sure the planned POST request is acceptable.
This may help you understand option request: <https://developer.mozilla.org/de/docs/Web/HTTP/Methods/OPTIONS>

Check the network/console log of your browser to see which headers/methods/origins in the options request are asked for and then make sure your OPTIONS endpoint in your backend sends a valid option response. I think for most cases there are ring-middlewares to do this"
1961,1514475890.00024,Ira,"Hi all. I have a spec question. I think I know the answer, but I want to confirm. If I'm spec'ing a map, and the keyword is :fooBar, then the spec must have the same name, correct? Actually, it would be namespaces, so ::fooBar, correct? I need to know if I can remap a keyword to a spec with a different name, or if that defeats the purpose of readability."
1961,1514476211.000072,Margaret,you can spec un-namespaced keys with :req-un and :opt-un <https://clojure.org/guides/spec>; but there are good reasons to use namespaced keys
1961,1514476375.000059,Ira,"Well, it’s not actually the namespacing. I’m fine with that part. I’m asking if I could have a `::foo-bar` spec for the `:fooBar` key; Or, suppose you have 2 different API returns in the same domain, but that have the same keyword. Such as `:results` but where the spec for each of those is different."
1961,1514481475.000093,Shamika,the names must match for the `keys` spec to work
1962,1514482210.000363,Milissa,I'm looking for a few more folks to share their workflow in detail over at ClojureVerse: <https://clojureverse.org/t/share-the-nitty-gritty-details-of-your-clojure-workflow/1208> Lots of great productivity hacks both big and small. Both Clojure beginners and experienced devs seem to be getting a lot out of it. :clj:
1961,1514483703.000298,Ira,"<@Shamika> thanks for that answer. What would be the best way to spec data where the same keyword is used in different ways? For example, if I’m searching for books and music, both might return data with ‘results’ in it. But the shape of those results will be different.; `(s/def ::book-results (s/keys :req-un [::count ::results]))`; `(s/def ::music-results (s/keys :req-un [::count ::results]))`; So `::results` actually need to point to 2 different specs, but the keywords still need to match the data they are based on.; Unless I can do this:; `(s/def ::book-results (s/keys :req-un [::count ::book/results]))`; I’ll try it…"
1961,1514484504.000025,Shamika,"<@Ira> is there anything else in that map that indicates whether it’s a book or music? if so, maybe you could use `multi-spec`"
1961,1514484624.000461,Ira,"I think I figured it out <@Shamika>.; ```(s/def :my/result int?)
(s/def :your/result pos-int?)
(s/def ::test-spec-1 (s/keys :req-un [:my/result]))
(s/def ::test-spec-2 (s/keys :req-un [:your/result]))
```; ```(s/valid? ::test-spec-1 {:result -2})```; is valid; ```(s/valid? ::test-spec-2 {:result -2})```; is not; Does spec have any impact on parsing XML?"
1961,1514492906.000128,Jodie,<@Ira> how do you mean?
1961,1514492947.000181,Ira,"Well, I’m about to pitch my CTO on Clojure and spec, and we consume a lot of XML API’s. I’d like to know definitively how they relate, and if spec is an advantage here or not."
1961,1514493027.000253,Jodie,"<@Ira> I don't think there's much advantage, you could spec those XML APIs, and generate clojure.data.xml data structures automatically from them, to ensure that you have high coverage of the various data shapes that could be thrown at you from those APIs.; Spec is really ""one layer down"" from application APIs, and is more centered around function APIs."
1961,1514493093.0002,Ira,Hmm. I see spec as a great way to validate calls to third-party API’s.; I’m trying to talk a Scala CTO into allowing some Clojure pilot projects. A big part of the argument is what spec brings to the table.
1961,1514493215.000048,Daniell,"When you say ""consume a lot of XML APIs"" do you mean you POST XML to them or you get XML responses back? In either case you could convert from/to a Clojure data structure and spec validate that Clojure data structure."
1961,1514493219.00003,Ira,"And we make quite a few XML calls.; Hmm, good question <@Daniell>"
1961,1514493270.000249,Daniell,One of the reasons we initially tried Scala was that we had a problem that involved reading a SQL DB and generating XML to POST to a search engine -- and Scala has XML literals native in the language.
1961,1514493279.000275,Ira,"It will be a mix of both. I want to demo the worst-case scenario, even if we end up working with JSON."
1961,1514493317.000144,Daniell,"When we switched to Clojure, we used Hiccup to generate XML and that just transforms Clojure data structures so those could, in theory, be spec'd."
1961,1514493359.000123,Ira,"Nice. I think we want to demo how we can consume changing API’s in Clojure more easily than in Scala.; So it’s more a concern with what we get from the vendor, than what we send them."
1961,1514493425.000325,Daniell,Converting XML to Clojure data structures is pretty painful in my experience.
1961,1514493460.000002,Ira,Ugh.
1963,1514493480.000204,Glory,Thanks!
1961,1514493545.000256,Ira,"I’m working on a live coding demo with spec and JSON API returns.; XML is a real-world concern.; Cause some vendors still use it, and won’t be changing anytime soon."
1961,1514493577.000161,Jodie,<@Daniell> Oh really? We've been using clojure.data.xml internally for docbook stuff &amp; it's been fairly good.
1961,1514493630.000258,Daniell,We use `clojure.data.xml` in one place for a simple XML API response and also with `clojure.data.zip.xml` in another place for parsing a complex XML document -- lots of manual code mapping from the XML structure to the Clojure data structure we want.
1961,1514493668.000413,Ira,Where is XSLT when you need it? :wink:
1961,1514493674.000355,Jodie,"I didn't use it for xml, but <https://github.com/halgari/odin/> had some nice helpers for xml, and might be a suitable XSLT-like tool."
1961,1514493822.000086,Margaret,recently I made a toy clojure program that plays the wikipedia philosophy game (as a demo of a debugging library I wrote) and tree-seq plus clojure.xml was good enough for the little dumb thing I was doing <https://github.com/noisesmith/philoseek>
1961,1514493834.000262,Daniell,"We have lots of stuff like `(-&gt;boolean (or (zx/xml1-&gt; node :required zx/text) false))` and `(-&gt;long (or (zx/attr node :minimum) 0))` and what is basically a custom recursive descent parser for the XML format :disappointed:; (since XML is all plain text and we want Boolean, Long, Date etc from it)"
1961,1514494001.000314,Elijah,Agh!
1961,1514494014.000142,Williemae,lol why does yours have such a huge picture compared to everyone else
1961,1514494030.000066,Elijah,"That sucks so bad. :stuck_out_tongue:; I can’t remove the attachment on mobile, either!"
1961,1514494063.000355,Margaret,brb setting my gh profile pic to longcat
1961,1514494068.000241,Williemae,ah just put it up we’ll get over it
1961,1514494083.000104,Jodie,<https://github.com/eerohele/sigel>
1961,1514494084.000211,Elijah,"Whatever, can’t be bothered. I’d rather not plaster my ugly mug here again. :stuck_out_tongue:"
1961,1514494090.000155,Jodie,Better? :smile:
1961,1514494094.000116,Elijah,Thanks! Yes.
1961,1514494098.000042,Jodie,"fwiw, I didn't see it as big (but I tweaked stuff a little)"
1961,1514494108.000058,Williemae,"well when you posted it initially it didnt have such a big picture, it’s just when flowthing posts it lol; shows up normally for me too (tested in my dm)"
1961,1514494191.000202,Elijah,"Though in the spirit of full disclosure, I wouldn’t call that library exactly “battle-tested”… I just wanted to see whether you can write XSLT with parentheses instead of angle brackets, more or less. :stuck_out_tongue:"
1961,1514494193.000051,Daniell,I could always turn off previews from <http://github.com|github.com> but the summary is often useful (even if the picture not so much)
1961,1514494241.000085,Elijah,"But the XPath bits might be useful for querying XML documents, I guess.; <@Daniell> yeah, no need, it’s just weird that Slack uses that humongous version of my profile picture every time… gotta try to figure out why sometime."
1964,1514508746.000092,Sonny,Justin and I have talked about it a couple times but haven’t buckled down to do it. It’s on my list for January
1965,1514539928.000046,Alessandra,"Hey guys. I'm just starting out with clojure and reagent, was wondering why luminus does this
```
(defn mount-components []
  (r/render [#'navigation/navbar] (.getElementById js/document ""navbar""))
  (r/render [#'router/current-page] (.getElementById js/document ""app"")))
  ;; --------^ why hash quote? it works fine without it too
```"
1966,1514543702.000002,Amee,that's probably so they reference the var rather than the function itself...so when they reload the file containing router/current-page the new value of the var is taken into account; i guess the router/current-page var must have the ^:dynamic meta data
1966,1514544002.000215,Alessandra,"router/current page is a multimethod. Anyways, it's not a big deal right now, was just curious. I'll read up on vars at some point"
1966,1514544064.00016,Amee,"what about navbar ?; clojurescript has slightly different semantic for vars, not quite sure that's appropriate or not"
1966,1514544124.00015,Alessandra,"simple reagent component. 
```
(defn navbar []
  (fn []
    [:nav.navbar.navbar-dark.bg-primary
     ...
```"
1966,1514544180.000108,Amee,try this : remove the #' for the navbar code ... load that file ...then modify your navbar and load that file; check if you see your modification
1966,1514544240.000152,Alessandra,i can see the changes
1966,1514544246.000234,Amee,ahwell =); i use this trick in clojure code; you're using figwheel ?
1966,1514544324.000115,Alessandra,yep. maybe it's one of those good practice kind of things
1966,1514544400.000087,Amee,for clojure code that's quite necessary during development. I'm not sure about clojurescript
1966,1514544480.000145,Alessandra,"I'll try removing it in clojure code, see if I still get my changes reloaded"
1966,1514544565.000242,Amee,"#'foo is a shorthand for (var foo); a simple test, in ns a have  : (def a b/b)  , in ns b have :  (def  b 1) ... if you change b and reload the ns b, a should still be 1, unless you set b dynamic and change a to (def a #'b/b)"
1966,1514545164.000212,Alessandra,"alright, it's making some sense. thank you for taking your time to explain :slightly_smiling_face:"
1967,1514551692.000131,Sam,hi all; another disillusioned java-dev jumping on board :slightly_smiling_face:; i'm not bitter! really!
1967,1514552189.000184,Marx,"I’m not bitter either, I’m having too much fun writing clojure :wink:"
1968,1514567710.000059,Venessa,could anyone explain the rationale for the following?
1967,1514567713.000266,Venessa,"```
(def foo {:a 1})

(when-let [a (:a foo)] (println a))
;; =&gt; prints ""1"", returns nil

(when-let [{:keys [a]} foo] (println a))
;; =&gt; prints ""1"", returns nil

(when-let [a (:a (assoc foo :a nil))] (println a))
;; =&gt; returns nil

(when-let [{:keys [a]} (assoc foo :a nil)] (println a))
;; =&gt; prints ""nil"", returns nil
```"
1968,1514567787.000213,Venessa,"i would like for the final expression to not print “nil”, ie the destructuring bind on a nil key to not evaluate the body of the when; does clojure have a distinction between a missing and nil key in its map type?"
1968,1514567815.000088,Jodie,"<@Venessa>it's because the value pre-destructuring is not nil.; It does, you can use `contains?` to distinguish the 2."
1968,1514567836.000208,Venessa,right; ok thanks <@Jodie>; so the idea is that the expression used as the value for that binding must be nil for the `when` to not execute?
1968,1514567989.000137,Kareen,contains has nothing to do with what <@Venessa> is asking here -- there's just no way to use `when-let`/`if-let` on destructured values; when you do `(when-let [{:keys [a]} x] ..)` the when-let is testing on the value of `x`
1968,1514568018.000074,Venessa,<@Kareen> no that was helpful! i get its not exactly related to my example under question
1968,1514568030.000252,Kareen,because it expands to something like `(when-let [the-map x] (let [{:keys [a]} the-map ..))`
1968,1514568036.000294,Venessa,right
1968,1514568052.000073,Kareen,"(that's not the macroexpansion at all, just what it's doing logically)"
1968,1514568059.000047,Venessa,got it
1968,1514568089.000193,Kareen,"if you think about it, that's the only behaviour that makes sence as you could do `(when-let [{:keys [a b]} c] ..)`; and in this case it would make no sense to test on `a` or `b`"
1968,1514568134.000017,Venessa,just because you are looking for a single nil?
1968,1514568152.000171,Kareen,because when-let/if-let don't have semantics for multiple bindings; i.e. you can't `(when-let [a b c d])`
1968,1514568166.000152,Venessa,right — you would have to supply some predicate; cool thanks!
1968,1514568741.000303,Jutta,"<@Venessa> 
`(macroexpand-1 '(when-let [{:keys [a]} (assoc foo :a nil)] (println a)))`
=&gt;
```
(clojure.core/let [temp__5457__auto__ (assoc foo :a nil)]
 (clojure.core/when temp__5457__auto__ (clojure.core/let [{:keys [a]} temp__5457__auto__] (println a))))
```
`temp__5457__auto__` will be a map `{:a nil}`, that is truly,"
1968,1514569213.000285,Venessa,got it
1969,1514577128.000012,Bernice,"how do you `require` in an eval? ie: `clj -e ""(require '[clojure.pprint :as pprint]) (pprint '(+ 1 1))""`; I'm getting this:
```
Exception in thread ""main"" java.lang.RuntimeException: Unable to resolve symbol: pprint in this context
```"
1969,1514577406.000154,Margaret,"well you would need `""(require '[clojure.pprint :refer [pprint]]) (pprint '(+ 1 1))""`; ```$ clj -e ""(require '[clojure.pprint :refer [pprint]]) (pprint '(+ 1 1))""
(+ 1 1)```"
1969,1514577445.000091,Bernice,"ah, that works!; now, how could I get it to work if I put it in a single file?; that's where I get the RuntimeException: clojure ..."
1969,1514577486.000214,Margaret,the way I usually do it is `(require '[clojure.pprint :as pprint :refer [pprint]))`; if you put what in a single file? and what’s the full RuntimeException?; everything that works in a repl will work in a file - the rules are the same (though there are a couple of things that work in a file that are no-ops in a repl but they aren’t relevant here)
1969,1514577634.000132,Bernice,"ah, ok -- it's working now; thanks!; why do you use `as` and `refer`?"
1969,1514577687.000074,Margaret,":as means that I can use eg. `pprint/print-table` instead of `clojure.pprint/print-table` and :refer means that I can use `pprint` instead of `pprint/pprint`; the doc for :as is under `(doc alias)`, the doc for :refer is under `(doc refer)`"
1969,1514577712.000079,Bernice,oic
1969,1514577727.000265,Margaret,(that’s clojure.repl/doc but a repl will have clojure.repl in scope normally on startup)
1969,1514578098.000258,Bernice,ok; hrmm ... I was hoping `pprint` would render to stdout without `\n`
1969,1514578318.000113,Margaret,"you could pass a StringWriter or use `with-out-str`, then trim the resulting string (hacky, but simpler than any other option I can think of here); <@Bernice> ```(ins)user=&gt; (let [sw (java.io.StringWriter.)] (pprint {:a 0 :b 1} sw) (str sw))
""{:a 0, :b 1}\n""
(ins)user=&gt; (let [sw (java.io.StringWriter.)] (pprint {:a 0 :b 1} sw) (clojure.string/trim (str sw)))
""{:a 0, :b 1}""
(ins)user=&gt; (let [sw (java.io.StringWriter.)] (pprint {:a 0 :b 1} sw) (print (clojure.string/trim (str sw))))
{:a 0, :b 1}nil```"
1969,1514578590.000036,Bernice,hrmm ... those aren't spitting out anything for me
1969,1514578670.000156,Margaret,"right, without a newline you need to use `(flush)` to force output; the vm will-auto-flush on newline but without that you need to flush by hand; (and of course just making a string won’t make anything print to the console when running a program - in the ones not using print)"
1969,1514578799.000078,Bernice,"`something.clj`
```
(require '[clojure.pprint :as pprint :refer [pprint]])

(let [sw (java.io.StringWriter.)]
     (pprint '(+ 1 1) sw)
     (flush))
```
`clj something.clj` returns nothing"
1969,1514578841.000117,Margaret,"right, pprint with sw as an arg returns a string; you need to use print; well, it puts something in sw, you need to call str to get a string out of sw; then you need to print that string; the extra arg to pprint is a writer, it overrides `*out*` as the place to put the output - and you need to use clojure.string/trim on the resulting string to remove the newline (as in my example above)"
1969,1514579042.000053,Bernice,hrmm ... and it looks like I'm back to where I was without the `sw`
1969,1514579060.000184,Margaret,you need sw in order to trim the string - but I showed everything you need in my example
1969,1514579065.000101,Bernice,"```
clj something.clj 

""(ns guestbook.db\n  (:require\n
...
```; here's my `something.clj` now:
```
(require '[clojure.pprint :as pprint :refer [pprint]])

(let [sw (java.io.StringWriter.)]
     (pprint (slurp ""./db.cljs"") sw)
     (print (clojure.string/trim (str sw)))
     (flush))
```"
1969,1514579132.000039,Margaret,that should do what you want; (you might need to require clojure.string)
1969,1514579169.000073,Bernice,"but it's resulting in the same output as
```
(require '[clojure.pprint :as pprint :refer [pprint]])

(pprint (slurp ""./db.cljs"")
```"
1969,1514579201.000031,Margaret,well slurp returns a string - pprint of a string just adds “” and otherwise acts like println; err… it also prints \n instead of real newlines inside the string etc.
1969,1514579293.000089,Bernice,so maybe it's slurp that's messin' me up :confused:; :laughing: all I want is to run <https://github.com/weavejester/cljfmt> at the CLI without a lein project
1969,1514579337.000043,Margaret,haha yeah this sounds like a hell of an x/y then; it’s too bad cljfmt and lein-cljfmt aren’t separate projects; oh wait they are; (just one github)
1969,1514579413.000095,Bernice,oh -- can I use like `deps.edn` to grab it and use it via the CLI?
1969,1514579438.000268,Margaret,yeah - you can use cljfmt without the lein stuff - looks like a straightforward ns to use <https://github.com/weavejester/cljfmt/blob/master/cljfmt/src/cljfmt/core.cljc>; <https://clojars.org/cljfmt> - this is the clojars dep
1969,1514579723.000264,Bernice,:laughing: `slurp` messes me up there too; same output as `pprint`
1969,1514579745.000067,Margaret,cljfmt has functions for forms and for strings though; and you can use `clojure.edn/read-string` to get forms out of a string (or attempt it at least)
1969,1514579893.000193,Berry,"```
(def create-handles           (fn  [] (let [cudnn-h       (cudnn-handle)
                                           _             (cudnn-create cudnn-h)
                                           src-tensor-d  (cudnn-tensor-d)
                                           dst-tensor-d  (cudnn-tensor-d)
                                           bias-tensor-d (cudnn-tensor-d)
                                           filter-d      (cudnn-filter-d)
                                           conv-d        (cudnn-conv-d)
                                           pooling-d     (cudnn-pooling-d)
                                           norm-d        (cudnn-lrn-d) 
                                           cublas-h      (cublas-handle)
                                           _             (cublas-create cublas-h)]
                                       {::cudnn-h       cudnn-h
                                        ::src-tensor-d  src-tensor-d
                                        ::dst-tensor-d  dst-tensor-d
                                        ::blas-tensor-d blas-tensor-d
                                        ::filter-d      filter-d
                                        ::conv-d        conv-d
                                        ::pooling-d     pooling-d
                                        ::norm-d        norm-d
                                        ::cublas-h      cublas-h})))
```

is there a way to shorten this code? There seems to be too much repetition."
1969,1514579921.000218,Margaret,that let block is pointless - just put the forms in the hash-map; it’s just noise
1969,1514579934.000073,Berry,the order slightly amtters
1969,1514579940.000034,Margaret,(except for the things to reuse one of the the bindings; ); then call ~into~ assoc
1969,1514579949.000222,Berry,"I need to create the cudnn handle before calling the other functions, as these are java bindings"
1969,1514580063.000274,Margaret,"```(defn create-handles
  []
  (let [cudnn-h (cudnn-handle)]
    (cudnn-create cudnn-h)
    (assoc {:cudnn-h cudnn-h}
           ::src-tensor-d (cudnn-tensor-d)
           ...)))```"
1969,1514580469.000153,Bernice,biting the bullet -- /me installing lein
1969,1514580515.000007,Berry,"```(fn  []
    (into {::cudnn-h  (doto  (cudnn-handle) (cudnn-create))
           ::cublas-h (doto (cublas-handle) (cublas-create))}
          {::src-tensor-d  (cudnn-tensor-d)
           ::dst-tensor-d  (cudnn-tensor-d)
           ::bias-tensor-d (cudnn-tensor-d)
           ::filter-d      (cudnn-filter-d)
           ::conv-d        (cudnn-conv-d)
           ::pooling-d     (cudnn-pooling-d)
           ::norm-d        (cudnn-lrn-d)}))```
I _think_ this works too"
1969,1514580540.000027,Margaret,"oh, if that’s the only part of the order that matters, yeah; but the assoc is nicer imho and does the same thing; (and also guarantees evaluation order); I guess it comes down to whether the extra {} are an improvement or background noise"
1969,1514580625.000083,Berry,"you know, what, I'm going to use assoc, just in case the ordering is stricter than I think it is, - in which case mine may cause a non deterministic bug"
1969,1514580656.000046,Margaret,usage of assoc with many keys in one call us under-appreciated IMHO :smile:
1969,1514580771.000195,Berry,"to make it all ""uniform"", I'm going with:
```
(assoc {}
           ::cudnn-h       (doto (cudnn-handle) (cudnn-create))
           ::cublas-h      (doto (cublas-handle) (cublas-create))
           ::src-tensor-d  (cudnn-tensor-d)
           ::dst-tensor-d  (cudnn-tensor-d)
           ::bias-tensor-d (cudnn-tensor-d)
           ::filter-d      (cudnn-filter-d)
           ::conv-d        (cudnn-conv-d)
           ::pooling-d     (cudnn-pooling-d)
           ::norm-d        (cudnn-lrn-d))
```
the only slight problem is that cider indent doesn't auto indent the assoc k v pairs for me"
1970,1514589292.000023,Charity,on behalf of Boz I welcome this pull request :smile:
1971,1514591912.000099,Kareen,"meh, everytime I've aligned arguments in `let` or in maps I've always regretted it; it just ends up messing up git history"
1971,1514595298.000053,Adelaida,"FWIW, git has some affordance for ignoring whitespace changes—see the `-b` and `-w` options to `git diff`, for example. (GitHub and GitLab have the same feature in diff view, although it's not always obvious how to toggle it.) That's not meant to disagree about alignment though."
1972,1514595860.000036,Kristy,"""Note: there is no support for inline value specification, by design."" <https://clojuredocs.org/clojure.spec/keys>

wondering if someone has a cool `keys` drop-in that supports them

(I agree with the `spec` principles btw... but sometimes I just know what I'm doing ;))"
1972,1514595888.000036,Charity,One day we'll all use fully AST aware editors and argument / binding alignment will be a UI option :stuck_out_tongue:
1972,1514596514.000036,Kristy,"Not excessively hard to implement... syntax would be `:req [int? ::foo ::bar ::baz]` where `int?` means a predicate for the following keyword, `:foo`. Similar to metadata syntax (note that kws aren't IMetas)

will give it a shot someday"
1973,1514610805.000012,Danielle,has anyone used refs and STMs in production code? I’m struggling to sea use case where it is favorable to use over one big atom
1973,1514611499.000052,Charity,"If it's possible to partition the problem you're trying to solve into several effect scopes (say several queues such that most STM is only between two of N queues), the STM tools Clojure includes can be useful and meaningfully reduce contention between multiple threads.; In general they tend to be rarely used especially in library code because that's a super application-specific property which requires global knowledge of your system and its state update behavior to leverage.; It's also easier (makes fewer fragile assumptions) to structure your application as a bunch of computation followed by a big-bang `swap!` using some comparatively cheap state merging function."
1973,1514616095.000033,Daniell,"<@Danielle> FWIW, we have 75,000 lines of Clojure and only a small number of atoms and a few agents. We have no refs. I think that out in the real world, STM is rarely used -- but can be very valuable in the (very) few edge cases where it is actually appropriate. So, yeah, what <@Charity> said :slightly_smiling_face:"
1973,1514616267.000043,Berry,"actually, I can't think of a single situation where I have seem STM used; most concurrency problems seems solvable via: build new data structure, do a pointer swap at the last moment"
1973,1514616383.000013,Daniell,"i.e., `atom`s, yes.; (or `agent`s); I wonder if the rise of core.async headed off a lot of what refs might have otherwise been used for?"
1974,1514617316.000081,Berry,"probably; though for me, it's mostly <http://curtclifton.net/papers/MoseleyMarks06a.pdf>"
1974,1514618029.00005,Danielle,thanks for the thoughts folks.
1973,1514627042.000073,Jodie,<@Danielle> one place I do see STM constructs (although not many) is clojurescript.
1975,1514627349.000012,Jodie,"I have a question, if I have a project based on clj cli, how can I build a jar from that?"
1973,1514627800.000059,Jodie,"I wondered if I needed to collect up the classpath, and add each one to the fat jar."
1973,1514627968.000015,Berry,"are you looking for lein uberjar, or am I misunderstanding the question?"
1973,1514628512.000016,Jodie,"<@Berry> clj cli, I'm looking to replicate that"
1976,1514632725.000091,Sam,"hmm ok, so I have a java.util.Iterable&lt;Map&lt;String, Object&gt;&gt; representing a huge file and I know i can treat this as a clojure seq, and I have done so succesfully, for example by using `take` and processing the item.; think of the file as a big csv file (except it's json); I can't load all of the file's contents in memory, so i have to take slices."
1976,1514632857.000024,Jodie,"<https://dzone.com/articles/java-8-how-to-create-executable-fatjar-without-ide> This might be my answer, or at least in abstract form."
1976,1514632867.000067,Sam,"How would one take `n` items from the `seq` until it is empty?; I think leiningen can do this for you; See <https://github.com/technomancy/leiningen/blob/master/doc/TUTORIAL.md#uberjar>; Or, I should say 'returns no more items'"
1976,1514633357.000042,Jodie,"I'm not using leiningen though :slightly_smiling_face: I'm trying to do it without leiningen.; <@Sam> I think `partition-all` is lazy, so you could use that."
1976,1514633519.000062,Sam,You don't want to use a build tool?; <@Jodie> i'll check that out
1976,1514634107.000013,Lorraine,and cljs doesn't support it :confused:
1976,1514634536.000012,Sam,then there is no hope :slightly_smiling_face:
1977,1514641778.000005,Rey,"Hello All!

I have a very frustrating problem, because it should be obvious, but I cannot pass.

How can i set a scheduler (exactly hara.scheduler) to a smaller period than 1 second.
""/1 * * * * * *"" means 1 second, but ""/0.5 * * * * * *"" doesn't work.
Even if i set the ""truncate"" parameter to :millisecond, cannot use milliseconds.
The documentation also silent about the topic. Do not I understand the capabilities of a scheduler? O.o

Happy New Year to our glorious Community!"
1977,1514644841.00007,Dona,<@Rey> if you want to run something subsecond it may make sense to look into <https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Executors.html#newScheduledThreadPool-int-> and then `scheduleAtFixedRate` <https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ScheduledExecutorService.html>; clojure's functions are java.lang.Runnable; so you can just pass a function to `scheduleAtFixedRate`
1977,1514645085.00002,Rey,"I can also use core.async, but i really wanted to use a real clojure scheduler, but cannot understand why I am not able to schedule something with milliseconds. Thanks anyway. :slightly_smiling_face:; At first I just want to execute a function periodically, it is a few lines with core.async."
1977,1514645318.000072,Shamika,<@Rey> there’s this wrapper over the Java executor service stuff too <https://github.com/overtone/at-at>
1977,1514645385.000047,Rey,"Yes, there are several clojure scheduler. i did my research and choosed hara.scheduler"
1977,1514645405.000002,Kristy,"re STM, it depends of the application type. most of us write server-side web backends, STM is almost inherently unsuitable for that (b/c you want servers to scale horizontally, and STM is per-server)

but that; 's not the only type of application out there!; STM seems a good fit for simulations, desktop apps, games maybe"
1977,1514646453.000028,Brande,"<@Jodie> I think you could trace what Leiningen does, my first guess would be to figure out how to get the list of jars and copy their contents into a new zip/jar <https://github.com/technomancy/leiningen/blob/master/src/leiningen/uberjar.clj>"
1978,1514646509.000005,Jodie,"That's what I've started to look at <@Brande>. It's all quite roundabout, I'm surprised there's no library to go from classpath-&gt;jar."
1977,1514648665.000046,Brande,"Yes, and there are a lot of options on that route. In portkey (<https://github.com/portkey-cloud/portkey>) Cristophe Grand did a tree-shaker that packages the minimum needed deps starting from a var :) "
1978,1514648862.000047,Joette,"assume I have the following data structure: 
```
[{:delim [""┌─"" :F]} {:align \─} {:delim [:F ""─┬─""]} {:align \─} {:delim [""─┬─""]} {:align \─} {:delim [""─┐""]}]
```
what would be the most idiomatic / concise way of counting the number of `:F`s? I do a: 
```
(count (keep (comp #(some #{:F} %) :delim) data-structure))
```
now, but I have the distinct feeling I’m missing some more direct route"
1979,1514648963.000027,Joette,"and nathan, I assume specter can do this more succinctly but I’m trying to avoid dependencies in this particular scenario"
1978,1514648988.000038,Brande,"thinking that such a deployment package creation from inside the repl could be quite awesome (like push the thing into AWS/Lambda, or into a container) "
1978,1514649178.000111,Jodie,"<@Brande> if this is something of interest to you, I've just got a jar that contains clojure &amp; a helloworld.clj built, and I don't think it will be difficult to hook in tools.deps.alpha to this system."
1979,1514650104.00005,Jutta,"<@Joette> it's trivial with <#C0FVDQLQ5|specter> 
`(count (select (walker #{:F}) data))`
`(walker afn)` will recursively ""walk"" in your data, search by something that satisfies `afn`.
`walker` is a ""navigator"", then you need to say ""what to do with this data""
In this case, I use `select`, that just return a list of ""what navigator find"".
But you can use `(setval navigator :new-value data)` to REPLACE ""what navigator find"", for example."
1979,1514655134.000058,Owen,<@Joette> best way with specter is `(count (select [ALL :delim ALL (pred= :F)] data))`
1980,1514655179.000066,Owen,"`walker` is not appropriate for this use case, as it traverses parts of the data structure you don't care about (which reduces performance and can cause bugs)"
1980,1514655255.000047,Kareen,"he explicitely said he's not looking for a specter solution, I'd say what he has is not bad in pure clojure"
1980,1514655257.000124,Owen,"the highest performance way with specter is something like `(transduce (map (constantly 1)) + (traverse [ALL :delim ALL (pred= :F)] data))`, which doesn't materialize any intermediate data structure; <@Kareen> if I see bad specter guidance, gotta correct it ;)"
1980,1514659281.000018,Joette,"<@Kareen> <@Owen> and <@Jutta> thank you. If I end up pulling in specter I know what to do now. Indidentally: 
`(count (select [ALL :delim ALL (pred= :F)] data))`
is not that much terser (not at all in fact, though arguably easier to grok) than my original pure-clojure: 
`(count (keep (comp #(some #{:F} %) :delim) data))`
so I guess I’ll consider the clojure version decent (as a side note, the fact that you can use specter as a reference point for terseness I think speaks to the beauty of specter)"
1981,1514662023.000062,Danielle,^ are the two comments not contradictory?
1981,1514662137.000061,Lorraine,I think <@Jodie> meant that it would be better to have STM in cljs than in clojure :slightly_smiling_face:; and sad but true it's not supported there; manifold is also worth trying
1982,1514667819.000038,Arica,ls
1983,1514675090.000039,Berry,is there an official clojure grammar somewhere? somethng detailed enough to write an actual production clojure parser from it ?
1983,1514675111.000084,Sandy,"<@Berry> nope; EDN is close, but there are differences"
1983,1514677624.000008,Micha,tools.reader is a Clojure implementation of a reader that can read Clojure source code.   Many tools that analyze Clojure source code use it.
1984,1514677671.000003,Micha,"It isn't a grammar, but an implementation in code of a reader. Unlike the one in clojure.core (implemented in Java), it is implemented in Clojure.  Not sure if that makes it any more useful for your purposes."
1984,1514677778.000019,Charity,"Yeah. I've written a bunch of clojure-like grammars and own most of the git-blame for the clojure.g4 you'll find around. Don't go down that road unless you have a good reason to, tools.reader and the ecosystem around it (rewrite-clj etc.) is very good.; Getting a Clojure-like grammar right is surprisingly hard :confused:"
1984,1514677922.000055,Micha,"Just a side note: The most official docs for Clojure syntax on <http://clojure.org|clojure.org> do not allow symbols that the Clojure reader allows in symbols.  For example, on this page: <https://clojure.org/reference/reader>  you will find no mention that the character '=' is allowed in symbols, but it is allowed by the implementation.  Clojure is in many ways defined by its implementation, not some English spec."
1984,1514678002.000018,Charity,Yup. To the point that there's some reader behavior such as `:` being legal inside of keywords that Alex has said is unintended but won't be removed for compatibility.
1984,1514678102.000098,Micha,clojure.g4 ?
1984,1514678191.000043,Charity,There's an antlr-grammars repo around which contains what purport to be grammars for a variety of languages and data formats. I did a bunch of work on the clojure grammar in that repo at one point.; `.g4` is the antlr4 file extension
1984,1514678231.000059,Micha,I found it via a quick Google search after asking: <https://github.com/antlr/grammars-v4>
1984,1514678309.000032,Charity,the parser for my Ox language is written in antlr4 using a derivative of the clojure.g4 grammar and I know <https://github.com/venantius/glow> uses an unattributed copy of clojure.g4 as well.
1985,1514679501.000033,Zola,"As a newcomer to Emacs, am I better off with a vanilla installation + recommended packages (CIDER etc), or Spacemacs in evil mode with the Clojure layer? Is learning Emacs for the first time in evil mode doing myself a disservice?; For what it's worth I'm coming from Cursive."
1984,1514679589.000033,Charity,"Depends on whether you're already used to modal editing / vim mode elsewhere. I personally run emacs with CIDER and my own custom config without evil or any of the total conversion suites but I also know a bunch of people that love them.; Spacemacs and doom-emacs are both awesome, although spacemacs is probably the best supported of them all.; Also depends on how much time you want to spend wrangling vs learning your environment."
1984,1514679683.000059,Danielle,i'd suggest go for spacemacs -- the out of box experience is a little better. I don't use EVIL (the vim layer) and i have a pretty good experience with spacemacs
1985,1514679758.000002,Zola,"Thanks for the input. I started in evil mode and immediately found myself googling for commands, but the resulting Vim keybindings didn't seem to line up with how Spacemacs works (even with taking into account SPC).; For instance, to save a buffer, how does SPC f s map to vim?"
1985,1514679885.000001,Kyung,In vi wouldn’t it be `: w` ?
1985,1514679930.000073,Zola,"Yeah, that was my confusion. Is Spacemacs providing its own shortcuts or something?"
1985,1514679971.000053,Margaret,"yes, space introduces nested prefixes"
1985,1514679974.000036,Zola,(I realise these are dumb questions but will ultimately help me understand which mode to invest in)
1985,1514679993.000039,Margaret,"so that every command is a series of single keypresses until you hit a leaf of the tree of shortcuts; you can do something similar with vim via leader keys, the difference is that with spacemacs it's not juxt space + some-key, it's space, some-key, another,.... final"
1985,1514680056.000037,Zola,"Ahhh, okay, thanks!"
1985,1514680092.000108,Margaret,"fwiw I ended up deciding after decades of usage emacs is too fiddly and I was spending too much time messing with elisp and I just switched to vim; I'm not much for integrating smart functionality into my editor though, I find it becomes difficult to know what's really happening if something breaks when there's so many tool layers"
1985,1514680274.000073,Zola,I totally get that. Atom + protorepl is another option I've considered for lightweight development. Cursive is fantastic but IntelliJ is heavy handed.
1986,1514681154.000067,Vilma,"So I'm sure I'm just overlooking something here, but is there a common function equivalent to the threading macro which will feed the result of function n to n+1 in a ~list~ collection?"
1985,1514681172.00005,Daniell,I switched from Emacs/CIDER to Atom/ProtoREPL a year ago and have been very happy. I was an Emacs user about twenty years ago before I went off to the land of IDEs <@Zola>; <@Vilma> `(apply comp [f1 f2 f3 f4])` ?
1985,1514681315.000044,Vilma,"I was thinking about using comp, I think it works but I was wondering if there was something more threading-macro-ish for familiarity's sakes. I think I may actually have just asked for too much ergonomics from clojure; thanks for the pointer, I'll give that way an implementation and see how it goes"
1986,1514681415.000002,Joanne,write a macro?
1986,1514681472.000032,Vilma,I'm also dynamically building the chains of functions so it'll be `(apply comp (reverse func-path))` which I guess isn't too bad.
1986,1514681515.00007,Daniell,Couldn't you just build the chains in the reverse order in the first place?
1986,1514681520.000057,Vilma,"I want it to be able to be used at run time. I already wrote a macro that was a pain in the ass and I don't think this one will get much performance gain for the maintainability.; The chains are made by shortest path calls on loom graphs. I guess I could just switch the start and finish but that'd just move the reverse call from one place to another.; It's not really a big issue, just that I'm worried I'm overlooking some issue with regards to the behavioral differences between `-&gt;&gt;` and `comp`; It's a hobby library so I'd prefer to waste the time and solve the generic case if possible.; I think the comp idea works. Is there an agreed upon way to write a marco way and a function way of doing things for varied kinds of desired efficiencies?"
1987,1514691921.000066,Bernice,"what's the equivalent of `[org.omcljs/om ""1.0.0-beta1"" :exclusions [cljsjs/react cljsjs/react-dom]]` for `deps.edn`?; does anyone else find `deps.edn`/`clj tools` a breath of fresh air? lein + boot have both been madness to me the past two days; thank you to everyone who worked on the clj (CLI) tools"
1987,1514693989.000027,Sandy,"no, you're not the only one :slightly_smiling_face:; and IIRC, :exclusions are something that hasn't yet been added to deps code; and it's about to get better, the git stuff being worked on in `master` will make it even better. I never really liked using maven artifacts anyways."
1987,1514695009.000004,Berry,can tools.reader get me line number and column number for expresiosns / symbols / strings / numbers ?
1987,1514696446.000023,Bernice,<@Sandy>: what kind of stuff is coming down the pipe in `master`?
1988,1514696448.000035,Micha,"tools.reader can get you line number and column number as metadata attached to data values that can have metadata in Clojure, i.e. collections and symbols, but not keywords, strings, numbers, ..."
1987,1514696493.000061,Sandy,you can use git repos as deps. So git url + sha (or something of that nature) in place of maven artifacts
1987,1514696580.000022,Bernice,"cool, I think I'll be able to ditch package.json after that"
1987,1514699862.000024,Berry,"what, if anything, does tools.reader offer over plain `read` then ?"
